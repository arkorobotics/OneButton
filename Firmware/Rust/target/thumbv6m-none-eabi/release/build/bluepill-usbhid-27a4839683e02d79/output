OPT_LEVEL = Some("s")
HOST = Some("x86_64-apple-darwin")
CFLAGS_arm-none-eabi = None
CFLAGS_arm_none_eabi = None
TARGET_CFLAGS = None
CFLAGS = None
DEBUG = Some("true")
running: "arm-none-eabi-gcc" "-Os" "-ffunction-sections" "-fdata-sections" "-g" "-DSTM32F103xB" "-DUSE_HAL_DRIVER" "-mcpu=cortex-m3" "-mthumb" "-Wall" "-fdata-sections" "-ffunction-sections" "-Wa,-a,-ad" "-g" "-Wall" "-Wextra" "-o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/main.o" "-c" "c/main.c"
cargo:warning=c/main.c: In function '_Error_Handler':
cargo:warning=c/main.c:9:28: warning: unused parameter 'file' [-Wunused-parameter]
cargo:warning= void _Error_Handler(char * file, int line)
cargo:warning=                            ^~~~
cargo:warning=c/main.c:9:38: warning: unused parameter 'line' [-Wunused-parameter]
cargo:warning= void _Error_Handler(char * file, int line)
cargo:warning=                                      ^~~~
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxsgGKP.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text._Error_Handler,"ax",%progbits
  16              		.align	1
  17              		.global	_Error_Handler
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	_Error_Handler:
  24              	.LFB64:
  25              		.file 1 "c/main.c"
   1:c/main.c      **** #include "main.h"
   2:c/main.c      **** #include "stm32f1xx_hal.h"
   3:c/main.c      **** 
   4:c/main.c      **** /**
   5:c/main.c      ****   * @brief  This function is executed in case of error occurrence.
   6:c/main.c      ****   * @param  None
   7:c/main.c      ****   * @retval None
   8:c/main.c      ****   */
   9:c/main.c      **** void _Error_Handler(char * file, int line)
  10:c/main.c      **** {
  26              		.loc 1 10 0
  27              		.cfi_startproc
  28              		@ Volatile: function does not return.
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  33              	.L2:
  34 0000 FEE7     		b	.L2
  35              		.cfi_endproc
  36              	.LFE64:
  38              		.section	.text.MX_GPIO_Init,"ax",%progbits
  39              		.align	1
  40              		.global	MX_GPIO_Init
  41              		.syntax unified
  42              		.thumb
  43              		.thumb_func
  44              		.fpu softvfp
  46              	MX_GPIO_Init:
  47              	.LFB65:
  11:c/main.c      ****   /* USER CODE BEGIN Error_Handler_Debug */
  12:c/main.c      ****   /* User can add his own implementation to report the HAL error return state */
  13:c/main.c      ****   while(1) 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxsgGKP.s 			page 2


  14:c/main.c      ****   {
  15:c/main.c      ****   }
  16:c/main.c      ****   /* USER CODE END Error_Handler_Debug */ 
  17:c/main.c      **** }
  18:c/main.c      **** 
  19:c/main.c      **** /** Configure pins as 
  20:c/main.c      ****         * Analog 
  21:c/main.c      ****         * Input 
  22:c/main.c      ****         * Output
  23:c/main.c      ****         * EVENT_OUT
  24:c/main.c      ****         * EXTI
  25:c/main.c      **** */
  26:c/main.c      **** void MX_GPIO_Init(void)
  27:c/main.c      **** {
  48              		.loc 1 27 0
  49              		.cfi_startproc
  50              		@ args = 0, pretend = 0, frame = 32
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  52              	.LBB8:
  28:c/main.c      **** 
  29:c/main.c      ****   GPIO_InitTypeDef GPIO_InitStruct;
  30:c/main.c      **** 
  31:c/main.c      ****   /* GPIO Ports Clock Enable */
  32:c/main.c      ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  53              		.loc 1 32 0
  54 0000 184B     		ldr	r3, .L4
  55              	.LBE8:
  27:c/main.c      **** 
  56              		.loc 1 27 0
  57 0002 10B5     		push	{r4, lr}
  58              		.cfi_def_cfa_offset 8
  59              		.cfi_offset 4, -8
  60              		.cfi_offset 14, -4
  61              	.LBB9:
  62              		.loc 1 32 0
  63 0004 9A69     		ldr	r2, [r3, #24]
  64              	.LBE9:
  27:c/main.c      **** 
  65              		.loc 1 27 0
  66 0006 88B0     		sub	sp, sp, #32
  67              		.cfi_def_cfa_offset 40
  68              	.LBB10:
  69              		.loc 1 32 0
  70 0008 42F01002 		orr	r2, r2, #16
  71 000c 9A61     		str	r2, [r3, #24]
  72 000e 9A69     		ldr	r2, [r3, #24]
  73              	.LBE10:
  33:c/main.c      ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  34:c/main.c      ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  35:c/main.c      **** 
  36:c/main.c      ****   /*Configure GPIO pin Output Level */
  37:c/main.c      ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
  74              		.loc 1 37 0
  75 0010 154C     		ldr	r4, .L4+4
  76              	.LBB11:
  32:c/main.c      ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  77              		.loc 1 32 0
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxsgGKP.s 			page 3


  78 0012 02F01002 		and	r2, r2, #16
  79 0016 0192     		str	r2, [sp, #4]
  80 0018 019A     		ldr	r2, [sp, #4]
  81              	.LBE11:
  82              	.LBB12:
  33:c/main.c      ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  83              		.loc 1 33 0
  84 001a 9A69     		ldr	r2, [r3, #24]
  85              	.LBE12:
  86              		.loc 1 37 0
  87 001c 2046     		mov	r0, r4
  88              	.LBB13:
  33:c/main.c      ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  89              		.loc 1 33 0
  90 001e 42F02002 		orr	r2, r2, #32
  91 0022 9A61     		str	r2, [r3, #24]
  92 0024 9A69     		ldr	r2, [r3, #24]
  93              	.LBE13:
  94              		.loc 1 37 0
  95 0026 4FF40051 		mov	r1, #8192
  96              	.LBB14:
  33:c/main.c      ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  97              		.loc 1 33 0
  98 002a 02F02002 		and	r2, r2, #32
  99 002e 0292     		str	r2, [sp, #8]
 100 0030 029A     		ldr	r2, [sp, #8]
 101              	.LBE14:
 102              	.LBB15:
  34:c/main.c      **** 
 103              		.loc 1 34 0
 104 0032 9A69     		ldr	r2, [r3, #24]
 105 0034 42F00402 		orr	r2, r2, #4
 106 0038 9A61     		str	r2, [r3, #24]
 107 003a 9B69     		ldr	r3, [r3, #24]
 108              	.LBE15:
 109              		.loc 1 37 0
 110 003c 0122     		movs	r2, #1
 111              	.LBB16:
  34:c/main.c      **** 
 112              		.loc 1 34 0
 113 003e 03F00403 		and	r3, r3, #4
 114 0042 0393     		str	r3, [sp, #12]
 115 0044 039B     		ldr	r3, [sp, #12]
 116              	.LBE16:
 117              		.loc 1 37 0
 118 0046 FFF7FEFF 		bl	HAL_GPIO_WritePin
 119              	.LVL1:
  38:c/main.c      **** 
  39:c/main.c      ****   /*Configure GPIO pin : PC13 */
  40:c/main.c      ****   GPIO_InitStruct.Pin = GPIO_PIN_13;
 120              		.loc 1 40 0
 121 004a 4FF40053 		mov	r3, #8192
 122 004e 0493     		str	r3, [sp, #16]
  41:c/main.c      ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 123              		.loc 1 41 0
 124 0050 0123     		movs	r3, #1
 125 0052 0593     		str	r3, [sp, #20]
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxsgGKP.s 			page 4


  42:c/main.c      ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 126              		.loc 1 42 0
 127 0054 0223     		movs	r3, #2
  43:c/main.c      ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 128              		.loc 1 43 0
 129 0056 04A9     		add	r1, sp, #16
 130 0058 2046     		mov	r0, r4
  42:c/main.c      ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 131              		.loc 1 42 0
 132 005a 0793     		str	r3, [sp, #28]
 133              		.loc 1 43 0
 134 005c FFF7FEFF 		bl	HAL_GPIO_Init
 135              	.LVL2:
  44:c/main.c      **** 
  45:c/main.c      **** }
 136              		.loc 1 45 0
 137 0060 08B0     		add	sp, sp, #32
 138              		.cfi_def_cfa_offset 8
 139              		@ sp needed
 140 0062 10BD     		pop	{r4, pc}
 141              	.L5:
 142              		.align	2
 143              	.L4:
 144 0064 00100240 		.word	1073876992
 145 0068 00100140 		.word	1073811456
 146              		.cfi_endproc
 147              	.LFE65:
 149              		.section	.text.SystemClock_Config,"ax",%progbits
 150              		.align	1
 151              		.global	SystemClock_Config
 152              		.syntax unified
 153              		.thumb
 154              		.thumb_func
 155              		.fpu softvfp
 157              	SystemClock_Config:
 158              	.LFB66:
  46:c/main.c      **** 
  47:c/main.c      **** 
  48:c/main.c      **** 
  49:c/main.c      **** /** System Clock Configuration
  50:c/main.c      **** */
  51:c/main.c      **** void SystemClock_Config(void)
  52:c/main.c      **** {
 159              		.loc 1 52 0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 80
 162              		@ frame_needed = 0, uses_anonymous_args = 0
  53:c/main.c      **** 
  54:c/main.c      ****   RCC_OscInitTypeDef RCC_OscInitStruct;
  55:c/main.c      ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
  56:c/main.c      ****   RCC_PeriphCLKInitTypeDef PeriphClkInit;
  57:c/main.c      **** 
  58:c/main.c      ****     /**Initializes the CPU, AHB and APB busses clocks 
  59:c/main.c      ****     */
  60:c/main.c      ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  61:c/main.c      ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 163              		.loc 1 61 0
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxsgGKP.s 			page 5


 164 0000 4FF48033 		mov	r3, #65536
  52:c/main.c      **** 
 165              		.loc 1 52 0
 166 0004 30B5     		push	{r4, r5, lr}
 167              		.cfi_def_cfa_offset 12
 168              		.cfi_offset 4, -12
 169              		.cfi_offset 5, -8
 170              		.cfi_offset 14, -4
 171 0006 95B0     		sub	sp, sp, #84
 172              		.cfi_def_cfa_offset 96
  60:c/main.c      ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 173              		.loc 1 60 0
 174 0008 0124     		movs	r4, #1
 175              		.loc 1 61 0
 176 000a 0B93     		str	r3, [sp, #44]
  62:c/main.c      ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 177              		.loc 1 62 0
 178 000c 0022     		movs	r2, #0
  63:c/main.c      ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  64:c/main.c      ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 179              		.loc 1 64 0
 180 000e 0225     		movs	r5, #2
  65:c/main.c      ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 181              		.loc 1 65 0
 182 0010 1293     		str	r3, [sp, #72]
  66:c/main.c      ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 183              		.loc 1 66 0
 184 0012 4FF48013 		mov	r3, #1048576
  67:c/main.c      ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 185              		.loc 1 67 0
 186 0016 0AA8     		add	r0, sp, #40
  60:c/main.c      ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 187              		.loc 1 60 0
 188 0018 0A94     		str	r4, [sp, #40]
  62:c/main.c      ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 189              		.loc 1 62 0
 190 001a 0C92     		str	r2, [sp, #48]
  63:c/main.c      ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 191              		.loc 1 63 0
 192 001c 0E94     		str	r4, [sp, #56]
  64:c/main.c      ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 193              		.loc 1 64 0
 194 001e 1195     		str	r5, [sp, #68]
  66:c/main.c      ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 195              		.loc 1 66 0
 196 0020 1393     		str	r3, [sp, #76]
 197              		.loc 1 67 0
 198 0022 FFF7FEFF 		bl	HAL_RCC_OscConfig
 199              	.LVL3:
 200 0026 00B1     		cbz	r0, .L7
 201              	.L13:
 202 0028 FEE7     		b	.L13
 203              	.L7:
  68:c/main.c      ****   {
  69:c/main.c      ****     _Error_Handler(__FILE__, __LINE__);
  70:c/main.c      ****   }
  71:c/main.c      **** 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxsgGKP.s 			page 6


  72:c/main.c      ****     /**Initializes the CPU, AHB and APB busses clocks 
  73:c/main.c      ****     */
  74:c/main.c      ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 204              		.loc 1 74 0
 205 002a 0F23     		movs	r3, #15
 206 002c 0593     		str	r3, [sp, #20]
  75:c/main.c      ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  76:c/main.c      ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  77:c/main.c      ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  78:c/main.c      ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 207              		.loc 1 78 0
 208 002e 4FF48063 		mov	r3, #1024
  77:c/main.c      ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 209              		.loc 1 77 0
 210 0032 0790     		str	r0, [sp, #28]
  79:c/main.c      ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 211              		.loc 1 79 0
 212 0034 0990     		str	r0, [sp, #36]
  80:c/main.c      **** 
  81:c/main.c      ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 213              		.loc 1 81 0
 214 0036 2146     		mov	r1, r4
 215 0038 05A8     		add	r0, sp, #20
  76:c/main.c      ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 216              		.loc 1 76 0
 217 003a 0695     		str	r5, [sp, #24]
  78:c/main.c      ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 218              		.loc 1 78 0
 219 003c 0893     		str	r3, [sp, #32]
 220              		.loc 1 81 0
 221 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 222              	.LVL4:
 223 0042 00B1     		cbz	r0, .L9
 224              	.L14:
 225 0044 FEE7     		b	.L14
 226              	.L9:
  82:c/main.c      ****   {
  83:c/main.c      ****     _Error_Handler(__FILE__, __LINE__);
  84:c/main.c      ****   }
  85:c/main.c      **** 
  86:c/main.c      ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 227              		.loc 1 86 0
 228 0046 1023     		movs	r3, #16
 229 0048 0193     		str	r3, [sp, #4]
  87:c/main.c      ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 230              		.loc 1 87 0
 231 004a 4FF48003 		mov	r3, #4194304
  88:c/main.c      ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 232              		.loc 1 88 0
 233 004e 01A8     		add	r0, sp, #4
  87:c/main.c      ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 234              		.loc 1 87 0
 235 0050 0493     		str	r3, [sp, #16]
 236              		.loc 1 88 0
 237 0052 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 238              	.LVL5:
 239 0056 0446     		mov	r4, r0
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxsgGKP.s 			page 7


 240 0058 00B1     		cbz	r0, .L11
 241              	.L15:
 242 005a FEE7     		b	.L15
 243              	.L11:
  89:c/main.c      ****   {
  90:c/main.c      ****     _Error_Handler(__FILE__, __LINE__);
  91:c/main.c      ****   }
  92:c/main.c      **** 
  93:c/main.c      ****     /**Configure the Systick interrupt time 
  94:c/main.c      ****     */
  95:c/main.c      ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 244              		.loc 1 95 0
 245 005c FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 246              	.LVL6:
 247 0060 4FF47A73 		mov	r3, #1000
 248 0064 B0FBF3F0 		udiv	r0, r0, r3
 249 0068 FFF7FEFF 		bl	HAL_SYSTICK_Config
 250              	.LVL7:
  96:c/main.c      **** 
  97:c/main.c      ****     /**Configure the Systick 
  98:c/main.c      ****     */
  99:c/main.c      ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 251              		.loc 1 99 0
 252 006c 0420     		movs	r0, #4
 253 006e FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 254              	.LVL8:
 100:c/main.c      **** 
 101:c/main.c      ****   /* SysTick_IRQn interrupt configuration */
 102:c/main.c      ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 255              		.loc 1 102 0
 256 0072 2246     		mov	r2, r4
 257 0074 2146     		mov	r1, r4
 258 0076 4FF0FF30 		mov	r0, #-1
 259 007a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 260              	.LVL9:
 103:c/main.c      **** }
 261              		.loc 1 103 0
 262 007e 15B0     		add	sp, sp, #84
 263              		.cfi_def_cfa_offset 12
 264              		@ sp needed
 265 0080 30BD     		pop	{r4, r5, pc}
 266              		.cfi_endproc
 267              	.LFE66:
 269              		.text
 270              	.Letext0:
 271              		.file 2 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/machine/_
 272              		.file 3 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_stdi
 273              		.file 4 "c/core_cm3.h"
 274              		.file 5 "c/system_stm32f1xx.h"
 275              		.file 6 "c/stm32f103xb.h"
 276              		.file 7 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/lock.
 277              		.file 8 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_type
 278              		.file 9 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/lib/gcc/arm-none-eabi/6.3.1/inc
 279              		.file 10 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/reen
 280              		.file 11 "c/stm32f1xx_hal_def.h"
 281              		.file 12 "c/stm32f1xx_hal_rcc.h"
 282              		.file 13 "c/stm32f1xx_hal_rcc_ex.h"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxsgGKP.s 			page 8


 283              		.file 14 "c/stm32f1xx_hal_gpio.h"
 284              		.file 15 "c/stm32f1xx_hal_cortex.h"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxsgGKP.s 			page 9


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxsgGKP.s:16     .text._Error_Handler:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxsgGKP.s:23     .text._Error_Handler:0000000000000000 _Error_Handler
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxsgGKP.s:39     .text.MX_GPIO_Init:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxsgGKP.s:46     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxsgGKP.s:144    .text.MX_GPIO_Init:0000000000000064 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxsgGKP.s:150    .text.SystemClock_Config:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxsgGKP.s:157    .text.SystemClock_Config:0000000000000000 SystemClock_Config
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
exit code: 0
OPT_LEVEL = Some("s")
HOST = Some("x86_64-apple-darwin")
CFLAGS_arm-none-eabi = None
CFLAGS_arm_none_eabi = None
TARGET_CFLAGS = None
CFLAGS = None
DEBUG = Some("true")
running: "arm-none-eabi-gcc" "-Os" "-ffunction-sections" "-fdata-sections" "-g" "-DSTM32F103xB" "-DUSE_HAL_DRIVER" "-mcpu=cortex-m3" "-mthumb" "-Wall" "-fdata-sections" "-ffunction-sections" "-Wa,-a,-ad" "-g" "-Wall" "-Wextra" "-o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/stm32f1xx_hal.o" "-c" "c/stm32f1xx_hal.c"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_hal.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_MspInit,"ax",%progbits
  16              		.align	1
  17              		.weak	HAL_MspInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_MspInit:
  24              	.LFB85:
  25              		.cfi_startproc
  26              		@ args = 0, pretend = 0, frame = 0
  27              		@ frame_needed = 0, uses_anonymous_args = 0
  28              		@ link register save eliminated.
  29 0000 7047     		bx	lr
  30              		.cfi_endproc
  31              	.LFE85:
  33              		.section	.text.HAL_MspDeInit,"ax",%progbits
  34              		.align	1
  35              		.weak	HAL_MspDeInit
  36              		.syntax unified
  37              		.thumb
  38              		.thumb_func
  39              		.fpu softvfp
  41              	HAL_MspDeInit:
  42              	.LFB67:
  43              		.file 1 "c/stm32f1xx_hal.c"
   1:c/stm32f1xx_hal.c **** /**
   2:c/stm32f1xx_hal.c ****   ******************************************************************************
   3:c/stm32f1xx_hal.c ****   * @file    stm32f1xx_hal.c
   4:c/stm32f1xx_hal.c ****   * @author  MCD Application Team
   5:c/stm32f1xx_hal.c ****   * @version V1.1.1
   6:c/stm32f1xx_hal.c ****   * @date    12-May-2017
   7:c/stm32f1xx_hal.c ****   * @brief   HAL module driver.
   8:c/stm32f1xx_hal.c ****   *          This is the common part of the HAL initialization
   9:c/stm32f1xx_hal.c ****   *
  10:c/stm32f1xx_hal.c ****   @verbatim
  11:c/stm32f1xx_hal.c ****   ==============================================================================
  12:c/stm32f1xx_hal.c ****                      ##### How to use this driver #####
  13:c/stm32f1xx_hal.c ****   ==============================================================================
  14:c/stm32f1xx_hal.c ****     [..]
  15:c/stm32f1xx_hal.c ****     The common HAL driver contains a set of generic and common APIs that can be
  16:c/stm32f1xx_hal.c ****     used by the PPP peripheral drivers and the user to start using the HAL. 
  17:c/stm32f1xx_hal.c ****     [..]
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s 			page 2


  18:c/stm32f1xx_hal.c ****     The HAL contains two APIs' categories: 
  19:c/stm32f1xx_hal.c ****          (+) Common HAL APIs
  20:c/stm32f1xx_hal.c ****          (+) Services HAL APIs
  21:c/stm32f1xx_hal.c **** 
  22:c/stm32f1xx_hal.c ****   @endverbatim
  23:c/stm32f1xx_hal.c ****   ******************************************************************************
  24:c/stm32f1xx_hal.c ****   * @attention
  25:c/stm32f1xx_hal.c ****   *
  26:c/stm32f1xx_hal.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  27:c/stm32f1xx_hal.c ****   *
  28:c/stm32f1xx_hal.c ****   * Redistribution and use in source and binary forms, with or without modification,
  29:c/stm32f1xx_hal.c ****   * are permitted provided that the following conditions are met:
  30:c/stm32f1xx_hal.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  31:c/stm32f1xx_hal.c ****   *      this list of conditions and the following disclaimer.
  32:c/stm32f1xx_hal.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  33:c/stm32f1xx_hal.c ****   *      this list of conditions and the following disclaimer in the documentation
  34:c/stm32f1xx_hal.c ****   *      and/or other materials provided with the distribution.
  35:c/stm32f1xx_hal.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  36:c/stm32f1xx_hal.c ****   *      may be used to endorse or promote products derived from this software
  37:c/stm32f1xx_hal.c ****   *      without specific prior written permission.
  38:c/stm32f1xx_hal.c ****   *
  39:c/stm32f1xx_hal.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  40:c/stm32f1xx_hal.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  41:c/stm32f1xx_hal.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  42:c/stm32f1xx_hal.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  43:c/stm32f1xx_hal.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  44:c/stm32f1xx_hal.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  45:c/stm32f1xx_hal.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  46:c/stm32f1xx_hal.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  47:c/stm32f1xx_hal.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  48:c/stm32f1xx_hal.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  49:c/stm32f1xx_hal.c ****   *
  50:c/stm32f1xx_hal.c ****   ******************************************************************************
  51:c/stm32f1xx_hal.c ****   */
  52:c/stm32f1xx_hal.c **** 
  53:c/stm32f1xx_hal.c **** /* Includes ------------------------------------------------------------------*/
  54:c/stm32f1xx_hal.c **** #include "stm32f1xx_hal.h"
  55:c/stm32f1xx_hal.c **** 
  56:c/stm32f1xx_hal.c **** /** @addtogroup STM32F1xx_HAL_Driver
  57:c/stm32f1xx_hal.c ****   * @{
  58:c/stm32f1xx_hal.c ****   */
  59:c/stm32f1xx_hal.c **** 
  60:c/stm32f1xx_hal.c **** /** @defgroup HAL HAL
  61:c/stm32f1xx_hal.c ****   * @brief HAL module driver.
  62:c/stm32f1xx_hal.c ****   * @{
  63:c/stm32f1xx_hal.c ****   */
  64:c/stm32f1xx_hal.c **** 
  65:c/stm32f1xx_hal.c **** #ifdef HAL_MODULE_ENABLED
  66:c/stm32f1xx_hal.c **** 
  67:c/stm32f1xx_hal.c **** /* Private typedef -----------------------------------------------------------*/
  68:c/stm32f1xx_hal.c **** /* Private define ------------------------------------------------------------*/
  69:c/stm32f1xx_hal.c **** 
  70:c/stm32f1xx_hal.c **** /** @defgroup HAL_Private_Constants HAL Private Constants
  71:c/stm32f1xx_hal.c ****   * @{
  72:c/stm32f1xx_hal.c ****   */
  73:c/stm32f1xx_hal.c **** /**
  74:c/stm32f1xx_hal.c ****  * @brief STM32F1xx HAL Driver version number V1.1.1
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s 			page 3


  75:c/stm32f1xx_hal.c ****    */
  76:c/stm32f1xx_hal.c **** #define __STM32F1xx_HAL_VERSION_MAIN   (0x01U) /*!< [31:24] main version */
  77:c/stm32f1xx_hal.c **** #define __STM32F1xx_HAL_VERSION_SUB1   (0x01U) /*!< [23:16] sub1 version */
  78:c/stm32f1xx_hal.c **** #define __STM32F1xx_HAL_VERSION_SUB2   (0x01U) /*!< [15:8]  sub2 version */
  79:c/stm32f1xx_hal.c **** #define __STM32F1xx_HAL_VERSION_RC     (0x00U) /*!< [7:0]  release candidate */
  80:c/stm32f1xx_hal.c **** #define __STM32F1xx_HAL_VERSION         ((__STM32F1xx_HAL_VERSION_MAIN << 24)\
  81:c/stm32f1xx_hal.c ****                                         |(__STM32F1xx_HAL_VERSION_SUB1 << 16)\
  82:c/stm32f1xx_hal.c ****                                         |(__STM32F1xx_HAL_VERSION_SUB2 << 8 )\
  83:c/stm32f1xx_hal.c ****                                         |(__STM32F1xx_HAL_VERSION_RC))
  84:c/stm32f1xx_hal.c **** 
  85:c/stm32f1xx_hal.c **** #define IDCODE_DEVID_MASK    0x00000FFFU
  86:c/stm32f1xx_hal.c **** 
  87:c/stm32f1xx_hal.c **** /**
  88:c/stm32f1xx_hal.c ****   * @}
  89:c/stm32f1xx_hal.c ****   */
  90:c/stm32f1xx_hal.c **** 
  91:c/stm32f1xx_hal.c **** /* Private macro -------------------------------------------------------------*/
  92:c/stm32f1xx_hal.c **** /* Private variables ---------------------------------------------------------*/
  93:c/stm32f1xx_hal.c **** 
  94:c/stm32f1xx_hal.c **** /** @defgroup HAL_Private_Variables HAL Private Variables
  95:c/stm32f1xx_hal.c ****   * @{
  96:c/stm32f1xx_hal.c ****   */
  97:c/stm32f1xx_hal.c **** __IO uint32_t uwTick = 0;
  98:c/stm32f1xx_hal.c **** /**
  99:c/stm32f1xx_hal.c ****   * @}
 100:c/stm32f1xx_hal.c ****   */
 101:c/stm32f1xx_hal.c **** /* Private function prototypes -----------------------------------------------*/
 102:c/stm32f1xx_hal.c **** /* Exported functions ---------------------------------------------------------*/
 103:c/stm32f1xx_hal.c **** 
 104:c/stm32f1xx_hal.c **** /** @defgroup HAL_Exported_Functions HAL Exported Functions
 105:c/stm32f1xx_hal.c ****   * @{
 106:c/stm32f1xx_hal.c ****   */
 107:c/stm32f1xx_hal.c **** 
 108:c/stm32f1xx_hal.c **** /** @defgroup HAL_Exported_Functions_Group1 Initialization and de-initialization Functions 
 109:c/stm32f1xx_hal.c ****  *  @brief    Initialization and de-initialization functions
 110:c/stm32f1xx_hal.c ****  *
 111:c/stm32f1xx_hal.c **** @verbatim
 112:c/stm32f1xx_hal.c ****  ===============================================================================
 113:c/stm32f1xx_hal.c ****               ##### Initialization and de-initialization functions #####
 114:c/stm32f1xx_hal.c ****  ===============================================================================
 115:c/stm32f1xx_hal.c ****    [..]  This section provides functions allowing to:
 116:c/stm32f1xx_hal.c ****       (+) Initializes the Flash interface, the NVIC allocation and initial clock 
 117:c/stm32f1xx_hal.c ****           configuration. It initializes the source of time base also when timeout 
 118:c/stm32f1xx_hal.c ****           is needed and the backup domain when enabled.
 119:c/stm32f1xx_hal.c ****       (+) de-Initializes common part of the HAL.
 120:c/stm32f1xx_hal.c ****       (+) Configure The time base source to have 1ms time base with a dedicated 
 121:c/stm32f1xx_hal.c ****           Tick interrupt priority. 
 122:c/stm32f1xx_hal.c ****         (++) Systick timer is used by default as source of time base, but user 
 123:c/stm32f1xx_hal.c ****              can eventually implement his proper time base source (a general purpose 
 124:c/stm32f1xx_hal.c ****              timer for example or other time source), keeping in mind that Time base 
 125:c/stm32f1xx_hal.c ****              duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
 126:c/stm32f1xx_hal.c ****              handled in milliseconds basis.
 127:c/stm32f1xx_hal.c ****         (++) Time base configuration function (HAL_InitTick ()) is called automatically 
 128:c/stm32f1xx_hal.c ****              at the beginning of the program after reset by HAL_Init() or at any time 
 129:c/stm32f1xx_hal.c ****              when clock is configured, by HAL_RCC_ClockConfig(). 
 130:c/stm32f1xx_hal.c ****         (++) Source of time base is configured  to generate interrupts at regular 
 131:c/stm32f1xx_hal.c ****              time intervals. Care must be taken if HAL_Delay() is called from a 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s 			page 4


 132:c/stm32f1xx_hal.c ****              peripheral ISR process, the Tick interrupt line must have higher priority 
 133:c/stm32f1xx_hal.c ****             (numerically lower) than the peripheral interrupt. Otherwise the caller 
 134:c/stm32f1xx_hal.c ****             ISR process will be blocked. 
 135:c/stm32f1xx_hal.c ****        (++) functions affecting time base configurations are declared as __weak  
 136:c/stm32f1xx_hal.c ****              to make  override possible  in case of other  implementations in user file.
 137:c/stm32f1xx_hal.c **** @endverbatim
 138:c/stm32f1xx_hal.c ****   * @{
 139:c/stm32f1xx_hal.c ****   */
 140:c/stm32f1xx_hal.c **** 
 141:c/stm32f1xx_hal.c **** /**
 142:c/stm32f1xx_hal.c ****   * @brief  This function is used to initialize the HAL Library; it must be the first 
 143:c/stm32f1xx_hal.c ****   *         instruction to be executed in the main program (before to call any other
 144:c/stm32f1xx_hal.c ****   *         HAL function), it performs the following:
 145:c/stm32f1xx_hal.c ****   *           Configure the Flash prefetch.
 146:c/stm32f1xx_hal.c ****   *           Configures the SysTick to generate an interrupt each 1 millisecond,
 147:c/stm32f1xx_hal.c ****   *           which is clocked by the HSI (at this stage, the clock is not yet
 148:c/stm32f1xx_hal.c ****   *           configured and thus the system is running from the internal HSI at 16 MHz).
 149:c/stm32f1xx_hal.c ****   *           Set NVIC Group Priority to 4.
 150:c/stm32f1xx_hal.c ****   *           Calls the HAL_MspInit() callback function defined in user file 
 151:c/stm32f1xx_hal.c ****   *           "stm32f1xx_hal_msp.c" to do the global low level hardware initialization 
 152:c/stm32f1xx_hal.c ****   *            
 153:c/stm32f1xx_hal.c ****   * @note   SysTick is used as time base for the HAL_Delay() function, the application
 154:c/stm32f1xx_hal.c ****   *         need to ensure that the SysTick time base is always set to 1 millisecond
 155:c/stm32f1xx_hal.c ****   *         to have correct HAL operation.
 156:c/stm32f1xx_hal.c ****   * @retval HAL status
 157:c/stm32f1xx_hal.c ****   */
 158:c/stm32f1xx_hal.c **** HAL_StatusTypeDef HAL_Init(void)
 159:c/stm32f1xx_hal.c **** {
 160:c/stm32f1xx_hal.c ****   /* Configure Flash prefetch */
 161:c/stm32f1xx_hal.c **** #if (PREFETCH_ENABLE != 0)
 162:c/stm32f1xx_hal.c **** #if defined(STM32F101x6) || defined(STM32F101xB) || defined(STM32F101xE) || defined(STM32F101xG) ||
 163:c/stm32f1xx_hal.c ****     defined(STM32F102x6) || defined(STM32F102xB) || \
 164:c/stm32f1xx_hal.c ****     defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) ||
 165:c/stm32f1xx_hal.c ****     defined(STM32F105xC) || defined(STM32F107xC)
 166:c/stm32f1xx_hal.c **** 
 167:c/stm32f1xx_hal.c ****   /* Prefetch buffer is not available on value line devices */
 168:c/stm32f1xx_hal.c ****   __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 169:c/stm32f1xx_hal.c **** #endif
 170:c/stm32f1xx_hal.c **** #endif /* PREFETCH_ENABLE */
 171:c/stm32f1xx_hal.c **** 
 172:c/stm32f1xx_hal.c ****   /* Set Interrupt Group Priority */
 173:c/stm32f1xx_hal.c ****   HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 174:c/stm32f1xx_hal.c **** 
 175:c/stm32f1xx_hal.c ****   /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
 176:c/stm32f1xx_hal.c ****   HAL_InitTick(TICK_INT_PRIORITY);
 177:c/stm32f1xx_hal.c **** 
 178:c/stm32f1xx_hal.c ****   /* Init the low level hardware */
 179:c/stm32f1xx_hal.c ****   HAL_MspInit();
 180:c/stm32f1xx_hal.c **** 
 181:c/stm32f1xx_hal.c ****   /* Return function status */
 182:c/stm32f1xx_hal.c ****   return HAL_OK;
 183:c/stm32f1xx_hal.c **** }
 184:c/stm32f1xx_hal.c **** 
 185:c/stm32f1xx_hal.c **** /**
 186:c/stm32f1xx_hal.c ****   * @brief This function de-Initializes common part of the HAL and stops the source
 187:c/stm32f1xx_hal.c ****   *        of time base.
 188:c/stm32f1xx_hal.c ****   * @note This function is optional.
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s 			page 5


 189:c/stm32f1xx_hal.c ****   * @retval HAL status
 190:c/stm32f1xx_hal.c ****   */
 191:c/stm32f1xx_hal.c **** HAL_StatusTypeDef HAL_DeInit(void)
 192:c/stm32f1xx_hal.c **** {
 193:c/stm32f1xx_hal.c ****   /* Reset of all peripherals */
 194:c/stm32f1xx_hal.c ****   __HAL_RCC_APB1_FORCE_RESET();
 195:c/stm32f1xx_hal.c ****   __HAL_RCC_APB1_RELEASE_RESET();
 196:c/stm32f1xx_hal.c **** 
 197:c/stm32f1xx_hal.c ****   __HAL_RCC_APB2_FORCE_RESET();
 198:c/stm32f1xx_hal.c ****   __HAL_RCC_APB2_RELEASE_RESET();
 199:c/stm32f1xx_hal.c **** 
 200:c/stm32f1xx_hal.c **** #if defined(STM32F105xC) || defined(STM32F107xC)
 201:c/stm32f1xx_hal.c ****   __HAL_RCC_AHB_FORCE_RESET();
 202:c/stm32f1xx_hal.c ****   __HAL_RCC_AHB_RELEASE_RESET();
 203:c/stm32f1xx_hal.c **** #endif
 204:c/stm32f1xx_hal.c ****   
 205:c/stm32f1xx_hal.c ****   /* De-Init the low level hardware */
 206:c/stm32f1xx_hal.c ****   HAL_MspDeInit();
 207:c/stm32f1xx_hal.c ****     
 208:c/stm32f1xx_hal.c ****   /* Return function status */
 209:c/stm32f1xx_hal.c ****   return HAL_OK;
 210:c/stm32f1xx_hal.c **** }
 211:c/stm32f1xx_hal.c **** 
 212:c/stm32f1xx_hal.c **** /**
 213:c/stm32f1xx_hal.c ****   * @brief  Initializes the MSP.
 214:c/stm32f1xx_hal.c ****   * @retval None
 215:c/stm32f1xx_hal.c ****   */
 216:c/stm32f1xx_hal.c **** __weak void HAL_MspInit(void)
 217:c/stm32f1xx_hal.c **** {
 218:c/stm32f1xx_hal.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 219:c/stm32f1xx_hal.c ****             the HAL_MspInit could be implemented in the user file
 220:c/stm32f1xx_hal.c ****    */
 221:c/stm32f1xx_hal.c **** }
 222:c/stm32f1xx_hal.c **** 
 223:c/stm32f1xx_hal.c **** /**
 224:c/stm32f1xx_hal.c ****   * @brief  DeInitializes the MSP.
 225:c/stm32f1xx_hal.c ****   * @retval None
 226:c/stm32f1xx_hal.c ****   */
 227:c/stm32f1xx_hal.c **** __weak void HAL_MspDeInit(void)
 228:c/stm32f1xx_hal.c **** {
  44              		.loc 1 228 0
  45              		.cfi_startproc
  46              		@ args = 0, pretend = 0, frame = 0
  47              		@ frame_needed = 0, uses_anonymous_args = 0
  48              		@ link register save eliminated.
  49 0000 7047     		bx	lr
  50              		.cfi_endproc
  51              	.LFE67:
  53              		.section	.text.HAL_DeInit,"ax",%progbits
  54              		.align	1
  55              		.global	HAL_DeInit
  56              		.syntax unified
  57              		.thumb
  58              		.thumb_func
  59              		.fpu softvfp
  61              	HAL_DeInit:
  62              	.LFB65:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s 			page 6


 192:c/stm32f1xx_hal.c ****   /* Reset of all peripherals */
  63              		.loc 1 192 0
  64              		.cfi_startproc
  65              		@ args = 0, pretend = 0, frame = 0
  66              		@ frame_needed = 0, uses_anonymous_args = 0
 192:c/stm32f1xx_hal.c ****   /* Reset of all peripherals */
  67              		.loc 1 192 0
  68 0000 10B5     		push	{r4, lr}
  69              		.cfi_def_cfa_offset 8
  70              		.cfi_offset 4, -8
  71              		.cfi_offset 14, -4
 194:c/stm32f1xx_hal.c ****   __HAL_RCC_APB1_RELEASE_RESET();
  72              		.loc 1 194 0
  73 0002 4FF0FF32 		mov	r2, #-1
 195:c/stm32f1xx_hal.c **** 
  74              		.loc 1 195 0
  75 0006 0024     		movs	r4, #0
 194:c/stm32f1xx_hal.c ****   __HAL_RCC_APB1_RELEASE_RESET();
  76              		.loc 1 194 0
  77 0008 044B     		ldr	r3, .L4
  78 000a DA60     		str	r2, [r3, #12]
 195:c/stm32f1xx_hal.c **** 
  79              		.loc 1 195 0
  80 000c 1C61     		str	r4, [r3, #16]
 197:c/stm32f1xx_hal.c ****   __HAL_RCC_APB2_RELEASE_RESET();
  81              		.loc 1 197 0
  82 000e DA60     		str	r2, [r3, #12]
 198:c/stm32f1xx_hal.c **** 
  83              		.loc 1 198 0
  84 0010 DC60     		str	r4, [r3, #12]
 206:c/stm32f1xx_hal.c ****     
  85              		.loc 1 206 0
  86 0012 FFF7FEFF 		bl	HAL_MspDeInit
  87              	.LVL0:
 210:c/stm32f1xx_hal.c **** 
  88              		.loc 1 210 0
  89 0016 2046     		mov	r0, r4
  90 0018 10BD     		pop	{r4, pc}
  91              	.L5:
  92 001a 00BF     		.align	2
  93              	.L4:
  94 001c 00100240 		.word	1073876992
  95              		.cfi_endproc
  96              	.LFE65:
  98              		.section	.text.HAL_InitTick,"ax",%progbits
  99              		.align	1
 100              		.weak	HAL_InitTick
 101              		.syntax unified
 102              		.thumb
 103              		.thumb_func
 104              		.fpu softvfp
 106              	HAL_InitTick:
 107              	.LFB68:
 229:c/stm32f1xx_hal.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 230:c/stm32f1xx_hal.c ****             the HAL_MspDeInit could be implemented in the user file
 231:c/stm32f1xx_hal.c ****    */
 232:c/stm32f1xx_hal.c **** }
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s 			page 7


 233:c/stm32f1xx_hal.c **** 
 234:c/stm32f1xx_hal.c **** /**
 235:c/stm32f1xx_hal.c ****   * @brief This function configures the source of the time base. 
 236:c/stm32f1xx_hal.c ****   *        The time source is configured  to have 1ms time base with a dedicated 
 237:c/stm32f1xx_hal.c ****   *        Tick interrupt priority.
 238:c/stm32f1xx_hal.c ****   * @note This function is called  automatically at the beginning of program after
 239:c/stm32f1xx_hal.c ****   *       reset by HAL_Init() or at any time when clock is reconfigured  by HAL_RCC_ClockConfig(). 
 240:c/stm32f1xx_hal.c ****   * @note In the default implementation, SysTick timer is the source of time base. 
 241:c/stm32f1xx_hal.c ****   *       It is used to generate interrupts at regular time intervals. 
 242:c/stm32f1xx_hal.c ****   *       Care must be taken if HAL_Delay() is called from a peripheral ISR process, 
 243:c/stm32f1xx_hal.c ****   *       The the SysTick interrupt must have higher priority (numerically lower) 
 244:c/stm32f1xx_hal.c ****   *       than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
 245:c/stm32f1xx_hal.c ****   *       The function is declared as __weak  to be overwritten  in case of other
 246:c/stm32f1xx_hal.c ****   *       implementation  in user file.
 247:c/stm32f1xx_hal.c ****   * @param TickPriority: Tick interrupt priority.
 248:c/stm32f1xx_hal.c ****   * @retval HAL status
 249:c/stm32f1xx_hal.c ****   */
 250:c/stm32f1xx_hal.c **** __weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 251:c/stm32f1xx_hal.c **** {
 108              		.loc 1 251 0
 109              		.cfi_startproc
 110              		@ args = 0, pretend = 0, frame = 0
 111              		@ frame_needed = 0, uses_anonymous_args = 0
 112              	.LVL1:
 252:c/stm32f1xx_hal.c ****   /*Configure the SysTick to have interrupt in 1ms time basis*/
 253:c/stm32f1xx_hal.c ****   HAL_SYSTICK_Config(SystemCoreClock/1000U);
 113              		.loc 1 253 0
 114 0000 084B     		ldr	r3, .L7
 251:c/stm32f1xx_hal.c ****   /*Configure the SysTick to have interrupt in 1ms time basis*/
 115              		.loc 1 251 0
 116 0002 10B5     		push	{r4, lr}
 117              		.cfi_def_cfa_offset 8
 118              		.cfi_offset 4, -8
 119              		.cfi_offset 14, -4
 251:c/stm32f1xx_hal.c ****   /*Configure the SysTick to have interrupt in 1ms time basis*/
 120              		.loc 1 251 0
 121 0004 0446     		mov	r4, r0
 122              		.loc 1 253 0
 123 0006 1868     		ldr	r0, [r3]
 124              	.LVL2:
 125 0008 4FF47A73 		mov	r3, #1000
 126 000c B0FBF3F0 		udiv	r0, r0, r3
 127 0010 FFF7FEFF 		bl	HAL_SYSTICK_Config
 128              	.LVL3:
 254:c/stm32f1xx_hal.c **** 
 255:c/stm32f1xx_hal.c ****   /*Configure the SysTick IRQ priority */
 256:c/stm32f1xx_hal.c ****   HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 129              		.loc 1 256 0
 130 0014 0022     		movs	r2, #0
 131 0016 2146     		mov	r1, r4
 132 0018 4FF0FF30 		mov	r0, #-1
 133 001c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 134              	.LVL4:
 257:c/stm32f1xx_hal.c **** 
 258:c/stm32f1xx_hal.c ****   /* Return function status */
 259:c/stm32f1xx_hal.c ****   return HAL_OK;
 260:c/stm32f1xx_hal.c **** }
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s 			page 8


 135              		.loc 1 260 0
 136 0020 0020     		movs	r0, #0
 137 0022 10BD     		pop	{r4, pc}
 138              	.LVL5:
 139              	.L8:
 140              		.align	2
 141              	.L7:
 142 0024 00000000 		.word	SystemCoreClock
 143              		.cfi_endproc
 144              	.LFE68:
 146              		.section	.text.HAL_Init,"ax",%progbits
 147              		.align	1
 148              		.global	HAL_Init
 149              		.syntax unified
 150              		.thumb
 151              		.thumb_func
 152              		.fpu softvfp
 154              	HAL_Init:
 155              	.LFB64:
 159:c/stm32f1xx_hal.c ****   /* Configure Flash prefetch */
 156              		.loc 1 159 0
 157              		.cfi_startproc
 158              		@ args = 0, pretend = 0, frame = 0
 159              		@ frame_needed = 0, uses_anonymous_args = 0
 168:c/stm32f1xx_hal.c **** #endif
 160              		.loc 1 168 0
 161 0000 074A     		ldr	r2, .L10
 159:c/stm32f1xx_hal.c ****   /* Configure Flash prefetch */
 162              		.loc 1 159 0
 163 0002 08B5     		push	{r3, lr}
 164              		.cfi_def_cfa_offset 8
 165              		.cfi_offset 3, -8
 166              		.cfi_offset 14, -4
 168:c/stm32f1xx_hal.c **** #endif
 167              		.loc 1 168 0
 168 0004 1368     		ldr	r3, [r2]
 173:c/stm32f1xx_hal.c **** 
 169              		.loc 1 173 0
 170 0006 0320     		movs	r0, #3
 168:c/stm32f1xx_hal.c **** #endif
 171              		.loc 1 168 0
 172 0008 43F01003 		orr	r3, r3, #16
 173 000c 1360     		str	r3, [r2]
 173:c/stm32f1xx_hal.c **** 
 174              		.loc 1 173 0
 175 000e FFF7FEFF 		bl	HAL_NVIC_SetPriorityGrouping
 176              	.LVL6:
 176:c/stm32f1xx_hal.c **** 
 177              		.loc 1 176 0
 178 0012 0020     		movs	r0, #0
 179 0014 FFF7FEFF 		bl	HAL_InitTick
 180              	.LVL7:
 179:c/stm32f1xx_hal.c **** 
 181              		.loc 1 179 0
 182 0018 FFF7FEFF 		bl	HAL_MspInit
 183              	.LVL8:
 183:c/stm32f1xx_hal.c **** 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s 			page 9


 184              		.loc 1 183 0
 185 001c 0020     		movs	r0, #0
 186 001e 08BD     		pop	{r3, pc}
 187              	.L11:
 188              		.align	2
 189              	.L10:
 190 0020 00200240 		.word	1073881088
 191              		.cfi_endproc
 192              	.LFE64:
 194              		.section	.text.HAL_IncTick,"ax",%progbits
 195              		.align	1
 196              		.weak	HAL_IncTick
 197              		.syntax unified
 198              		.thumb
 199              		.thumb_func
 200              		.fpu softvfp
 202              	HAL_IncTick:
 203              	.LFB69:
 261:c/stm32f1xx_hal.c **** 
 262:c/stm32f1xx_hal.c **** /**
 263:c/stm32f1xx_hal.c ****   * @}
 264:c/stm32f1xx_hal.c ****   */
 265:c/stm32f1xx_hal.c **** 
 266:c/stm32f1xx_hal.c **** /** @defgroup HAL_Exported_Functions_Group2 HAL Control functions 
 267:c/stm32f1xx_hal.c ****   *  @brief    HAL Control functions
 268:c/stm32f1xx_hal.c ****   *
 269:c/stm32f1xx_hal.c **** @verbatim
 270:c/stm32f1xx_hal.c ****  ===============================================================================
 271:c/stm32f1xx_hal.c ****                       ##### HAL Control functions #####
 272:c/stm32f1xx_hal.c ****  ===============================================================================
 273:c/stm32f1xx_hal.c ****     [..]  This section provides functions allowing to:
 274:c/stm32f1xx_hal.c ****       (+) Provide a tick value in millisecond
 275:c/stm32f1xx_hal.c ****       (+) Provide a blocking delay in millisecond
 276:c/stm32f1xx_hal.c ****       (+) Suspend the time base source interrupt
 277:c/stm32f1xx_hal.c ****       (+) Resume the time base source interrupt
 278:c/stm32f1xx_hal.c ****       (+) Get the HAL API driver version
 279:c/stm32f1xx_hal.c ****       (+) Get the device identifier
 280:c/stm32f1xx_hal.c ****       (+) Get the device revision identifier
 281:c/stm32f1xx_hal.c ****       (+) Enable/Disable Debug module during SLEEP mode
 282:c/stm32f1xx_hal.c ****       (+) Enable/Disable Debug module during STOP mode
 283:c/stm32f1xx_hal.c ****       (+) Enable/Disable Debug module during STANDBY mode
 284:c/stm32f1xx_hal.c **** 
 285:c/stm32f1xx_hal.c **** @endverbatim
 286:c/stm32f1xx_hal.c ****   * @{
 287:c/stm32f1xx_hal.c ****   */
 288:c/stm32f1xx_hal.c **** 
 289:c/stm32f1xx_hal.c **** /**
 290:c/stm32f1xx_hal.c ****   * @brief This function is called to increment  a global variable "uwTick"
 291:c/stm32f1xx_hal.c ****   *        used as application time base.
 292:c/stm32f1xx_hal.c ****   * @note In the default implementation, this variable is incremented each 1ms
 293:c/stm32f1xx_hal.c ****   *       in Systick ISR.
 294:c/stm32f1xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other 
 295:c/stm32f1xx_hal.c ****   *      implementations in user file.
 296:c/stm32f1xx_hal.c ****   * @retval None
 297:c/stm32f1xx_hal.c ****   */
 298:c/stm32f1xx_hal.c **** __weak void HAL_IncTick(void)
 299:c/stm32f1xx_hal.c **** {
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s 			page 10


 204              		.loc 1 299 0
 205              		.cfi_startproc
 206              		@ args = 0, pretend = 0, frame = 0
 207              		@ frame_needed = 0, uses_anonymous_args = 0
 208              		@ link register save eliminated.
 300:c/stm32f1xx_hal.c ****   uwTick++;
 209              		.loc 1 300 0
 210 0000 024A     		ldr	r2, .L13
 211 0002 1368     		ldr	r3, [r2]
 212 0004 0133     		adds	r3, r3, #1
 213 0006 1360     		str	r3, [r2]
 214 0008 7047     		bx	lr
 215              	.L14:
 216 000a 00BF     		.align	2
 217              	.L13:
 218 000c 00000000 		.word	.LANCHOR0
 219              		.cfi_endproc
 220              	.LFE69:
 222              		.section	.text.HAL_GetTick,"ax",%progbits
 223              		.align	1
 224              		.weak	HAL_GetTick
 225              		.syntax unified
 226              		.thumb
 227              		.thumb_func
 228              		.fpu softvfp
 230              	HAL_GetTick:
 231              	.LFB70:
 301:c/stm32f1xx_hal.c **** }
 302:c/stm32f1xx_hal.c **** 
 303:c/stm32f1xx_hal.c **** /**
 304:c/stm32f1xx_hal.c ****   * @brief Provides a tick value in millisecond.
 305:c/stm32f1xx_hal.c ****   * @note  This function is declared as __weak  to be overwritten  in case of other 
 306:c/stm32f1xx_hal.c ****   *       implementations in user file.
 307:c/stm32f1xx_hal.c ****   * @retval tick value
 308:c/stm32f1xx_hal.c ****   */
 309:c/stm32f1xx_hal.c **** __weak uint32_t HAL_GetTick(void)
 310:c/stm32f1xx_hal.c **** {
 232              		.loc 1 310 0
 233              		.cfi_startproc
 234              		@ args = 0, pretend = 0, frame = 0
 235              		@ frame_needed = 0, uses_anonymous_args = 0
 236              		@ link register save eliminated.
 311:c/stm32f1xx_hal.c ****   return uwTick;
 237              		.loc 1 311 0
 238 0000 014B     		ldr	r3, .L16
 239 0002 1868     		ldr	r0, [r3]
 312:c/stm32f1xx_hal.c **** }
 240              		.loc 1 312 0
 241 0004 7047     		bx	lr
 242              	.L17:
 243 0006 00BF     		.align	2
 244              	.L16:
 245 0008 00000000 		.word	.LANCHOR0
 246              		.cfi_endproc
 247              	.LFE70:
 249              		.section	.text.HAL_Delay,"ax",%progbits
 250              		.align	1
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s 			page 11


 251              		.weak	HAL_Delay
 252              		.syntax unified
 253              		.thumb
 254              		.thumb_func
 255              		.fpu softvfp
 257              	HAL_Delay:
 258              	.LFB71:
 313:c/stm32f1xx_hal.c **** 
 314:c/stm32f1xx_hal.c **** /**
 315:c/stm32f1xx_hal.c ****   * @brief This function provides minimum delay (in milliseconds) based 
 316:c/stm32f1xx_hal.c ****   *        on variable incremented.
 317:c/stm32f1xx_hal.c ****   * @note In the default implementation , SysTick timer is the source of time base.
 318:c/stm32f1xx_hal.c ****   *       It is used to generate interrupts at regular time intervals where uwTick
 319:c/stm32f1xx_hal.c ****   *       is incremented.
 320:c/stm32f1xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other
 321:c/stm32f1xx_hal.c ****   *       implementations in user file.
 322:c/stm32f1xx_hal.c ****   * @param Delay: specifies the delay time length, in milliseconds.
 323:c/stm32f1xx_hal.c ****   * @retval None
 324:c/stm32f1xx_hal.c ****   */
 325:c/stm32f1xx_hal.c **** __weak void HAL_Delay(__IO uint32_t Delay)
 326:c/stm32f1xx_hal.c **** {
 259              		.loc 1 326 0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 8
 262              		@ frame_needed = 0, uses_anonymous_args = 0
 263              	.LVL9:
 264 0000 37B5     		push	{r0, r1, r2, r4, r5, lr}
 265              		.cfi_def_cfa_offset 24
 266              		.cfi_offset 4, -12
 267              		.cfi_offset 5, -8
 268              		.cfi_offset 14, -4
 269              		.loc 1 326 0
 270 0002 0190     		str	r0, [sp, #4]
 327:c/stm32f1xx_hal.c ****   uint32_t tickstart = HAL_GetTick();
 271              		.loc 1 327 0
 272 0004 FFF7FEFF 		bl	HAL_GetTick
 273              	.LVL10:
 274 0008 0546     		mov	r5, r0
 275              	.LVL11:
 328:c/stm32f1xx_hal.c ****   uint32_t wait = Delay;
 276              		.loc 1 328 0
 277 000a 019C     		ldr	r4, [sp, #4]
 278              	.LVL12:
 329:c/stm32f1xx_hal.c ****   
 330:c/stm32f1xx_hal.c ****   /* Add a period to guarantee minimum wait */
 331:c/stm32f1xx_hal.c ****   if (wait < HAL_MAX_DELAY)
 279              		.loc 1 331 0
 280 000c 631C     		adds	r3, r4, #1
 332:c/stm32f1xx_hal.c ****   {
 333:c/stm32f1xx_hal.c ****      wait++;
 281              		.loc 1 333 0
 282 000e 18BF     		it	ne
 283 0010 0134     		addne	r4, r4, #1
 284              	.LVL13:
 285              	.L20:
 334:c/stm32f1xx_hal.c ****   }
 335:c/stm32f1xx_hal.c ****   
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s 			page 12


 336:c/stm32f1xx_hal.c ****   while((HAL_GetTick() - tickstart) < wait)
 286              		.loc 1 336 0 discriminator 1
 287 0012 FFF7FEFF 		bl	HAL_GetTick
 288              	.LVL14:
 289 0016 401B     		subs	r0, r0, r5
 290 0018 A042     		cmp	r0, r4
 291 001a FAD3     		bcc	.L20
 337:c/stm32f1xx_hal.c ****   {
 338:c/stm32f1xx_hal.c ****   }
 339:c/stm32f1xx_hal.c **** }
 292              		.loc 1 339 0
 293 001c 03B0     		add	sp, sp, #12
 294              		.cfi_def_cfa_offset 12
 295              		@ sp needed
 296 001e 30BD     		pop	{r4, r5, pc}
 297              		.cfi_endproc
 298              	.LFE71:
 300              		.section	.text.HAL_SuspendTick,"ax",%progbits
 301              		.align	1
 302              		.weak	HAL_SuspendTick
 303              		.syntax unified
 304              		.thumb
 305              		.thumb_func
 306              		.fpu softvfp
 308              	HAL_SuspendTick:
 309              	.LFB72:
 340:c/stm32f1xx_hal.c **** 
 341:c/stm32f1xx_hal.c **** /**
 342:c/stm32f1xx_hal.c ****   * @brief Suspend Tick increment.
 343:c/stm32f1xx_hal.c ****   * @note In the default implementation , SysTick timer is the source of time base. It is
 344:c/stm32f1xx_hal.c ****   *       used to generate interrupts at regular time intervals. Once HAL_SuspendTick()
 345:c/stm32f1xx_hal.c ****   *       is called, the SysTick interrupt will be disabled and so Tick increment 
 346:c/stm32f1xx_hal.c ****   *       is suspended.
 347:c/stm32f1xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other
 348:c/stm32f1xx_hal.c ****   *       implementations in user file.
 349:c/stm32f1xx_hal.c ****   * @retval None
 350:c/stm32f1xx_hal.c ****   */
 351:c/stm32f1xx_hal.c **** __weak void HAL_SuspendTick(void)
 352:c/stm32f1xx_hal.c **** {
 310              		.loc 1 352 0
 311              		.cfi_startproc
 312              		@ args = 0, pretend = 0, frame = 0
 313              		@ frame_needed = 0, uses_anonymous_args = 0
 314              		@ link register save eliminated.
 353:c/stm32f1xx_hal.c ****   /* Disable SysTick Interrupt */
 354:c/stm32f1xx_hal.c ****   CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 315              		.loc 1 354 0
 316 0000 024A     		ldr	r2, .L26
 317 0002 1368     		ldr	r3, [r2]
 318 0004 23F00203 		bic	r3, r3, #2
 319 0008 1360     		str	r3, [r2]
 320 000a 7047     		bx	lr
 321              	.L27:
 322              		.align	2
 323              	.L26:
 324 000c 10E000E0 		.word	-536813552
 325              		.cfi_endproc
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s 			page 13


 326              	.LFE72:
 328              		.section	.text.HAL_ResumeTick,"ax",%progbits
 329              		.align	1
 330              		.weak	HAL_ResumeTick
 331              		.syntax unified
 332              		.thumb
 333              		.thumb_func
 334              		.fpu softvfp
 336              	HAL_ResumeTick:
 337              	.LFB73:
 355:c/stm32f1xx_hal.c **** }
 356:c/stm32f1xx_hal.c **** 
 357:c/stm32f1xx_hal.c **** /**
 358:c/stm32f1xx_hal.c ****   * @brief Resume Tick increment.
 359:c/stm32f1xx_hal.c ****   * @note In the default implementation , SysTick timer is the source of time base. It is
 360:c/stm32f1xx_hal.c ****   *       used to generate interrupts at regular time intervals. Once HAL_ResumeTick()
 361:c/stm32f1xx_hal.c ****   *       is called, the SysTick interrupt will be enabled and so Tick increment 
 362:c/stm32f1xx_hal.c ****   *       is resumed.
 363:c/stm32f1xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other
 364:c/stm32f1xx_hal.c ****   *       implementations in user file.
 365:c/stm32f1xx_hal.c ****   * @retval None
 366:c/stm32f1xx_hal.c ****   */
 367:c/stm32f1xx_hal.c **** __weak void HAL_ResumeTick(void)
 368:c/stm32f1xx_hal.c **** {
 338              		.loc 1 368 0
 339              		.cfi_startproc
 340              		@ args = 0, pretend = 0, frame = 0
 341              		@ frame_needed = 0, uses_anonymous_args = 0
 342              		@ link register save eliminated.
 369:c/stm32f1xx_hal.c ****   /* Enable SysTick Interrupt */
 370:c/stm32f1xx_hal.c ****   SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 343              		.loc 1 370 0
 344 0000 024A     		ldr	r2, .L29
 345 0002 1368     		ldr	r3, [r2]
 346 0004 43F00203 		orr	r3, r3, #2
 347 0008 1360     		str	r3, [r2]
 348 000a 7047     		bx	lr
 349              	.L30:
 350              		.align	2
 351              	.L29:
 352 000c 10E000E0 		.word	-536813552
 353              		.cfi_endproc
 354              	.LFE73:
 356              		.section	.text.HAL_GetHalVersion,"ax",%progbits
 357              		.align	1
 358              		.global	HAL_GetHalVersion
 359              		.syntax unified
 360              		.thumb
 361              		.thumb_func
 362              		.fpu softvfp
 364              	HAL_GetHalVersion:
 365              	.LFB74:
 371:c/stm32f1xx_hal.c **** }
 372:c/stm32f1xx_hal.c **** 
 373:c/stm32f1xx_hal.c **** /**
 374:c/stm32f1xx_hal.c ****   * @brief  Returns the HAL revision
 375:c/stm32f1xx_hal.c ****   * @retval version : 0xXYZR (8bits for each decimal, R for RC)
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s 			page 14


 376:c/stm32f1xx_hal.c ****   */
 377:c/stm32f1xx_hal.c **** uint32_t HAL_GetHalVersion(void)
 378:c/stm32f1xx_hal.c **** {
 366              		.loc 1 378 0
 367              		.cfi_startproc
 368              		@ args = 0, pretend = 0, frame = 0
 369              		@ frame_needed = 0, uses_anonymous_args = 0
 370              		@ link register save eliminated.
 379:c/stm32f1xx_hal.c ****  return __STM32F1xx_HAL_VERSION;
 380:c/stm32f1xx_hal.c **** }
 371              		.loc 1 380 0
 372 0000 0048     		ldr	r0, .L32
 373 0002 7047     		bx	lr
 374              	.L33:
 375              		.align	2
 376              	.L32:
 377 0004 00010101 		.word	16843008
 378              		.cfi_endproc
 379              	.LFE74:
 381              		.section	.text.HAL_GetREVID,"ax",%progbits
 382              		.align	1
 383              		.global	HAL_GetREVID
 384              		.syntax unified
 385              		.thumb
 386              		.thumb_func
 387              		.fpu softvfp
 389              	HAL_GetREVID:
 390              	.LFB75:
 381:c/stm32f1xx_hal.c **** 
 382:c/stm32f1xx_hal.c **** /**
 383:c/stm32f1xx_hal.c ****   * @brief Returns the device revision identifier.
 384:c/stm32f1xx_hal.c ****   * Note: On devices STM32F10xx8 and STM32F10xxB,
 385:c/stm32f1xx_hal.c ****   *                  STM32F101xC/D/E and STM32F103xC/D/E,
 386:c/stm32f1xx_hal.c ****   *                  STM32F101xF/G and STM32F103xF/G
 387:c/stm32f1xx_hal.c ****   *                  STM32F10xx4 and STM32F10xx6
 388:c/stm32f1xx_hal.c ****   *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in 
 389:c/stm32f1xx_hal.c ****   *       debug mode (not accessible by the user software in normal mode).
 390:c/stm32f1xx_hal.c ****   *       Refer to errata sheet of these devices for more details.
 391:c/stm32f1xx_hal.c ****   * @retval Device revision identifier
 392:c/stm32f1xx_hal.c ****   */
 393:c/stm32f1xx_hal.c **** uint32_t HAL_GetREVID(void)
 394:c/stm32f1xx_hal.c **** {
 391              		.loc 1 394 0
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 0
 394              		@ frame_needed = 0, uses_anonymous_args = 0
 395              		@ link register save eliminated.
 395:c/stm32f1xx_hal.c ****   return((DBGMCU->IDCODE) >> DBGMCU_IDCODE_REV_ID_Pos);
 396              		.loc 1 395 0
 397 0000 014B     		ldr	r3, .L35
 398 0002 1868     		ldr	r0, [r3]
 396:c/stm32f1xx_hal.c **** }
 399              		.loc 1 396 0
 400 0004 000C     		lsrs	r0, r0, #16
 401 0006 7047     		bx	lr
 402              	.L36:
 403              		.align	2
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s 			page 15


 404              	.L35:
 405 0008 002004E0 		.word	-536600576
 406              		.cfi_endproc
 407              	.LFE75:
 409              		.section	.text.HAL_GetDEVID,"ax",%progbits
 410              		.align	1
 411              		.global	HAL_GetDEVID
 412              		.syntax unified
 413              		.thumb
 414              		.thumb_func
 415              		.fpu softvfp
 417              	HAL_GetDEVID:
 418              	.LFB76:
 397:c/stm32f1xx_hal.c **** 
 398:c/stm32f1xx_hal.c **** /**
 399:c/stm32f1xx_hal.c ****   * @brief  Returns the device identifier.
 400:c/stm32f1xx_hal.c ****   * Note: On devices STM32F10xx8 and STM32F10xxB,
 401:c/stm32f1xx_hal.c ****   *                  STM32F101xC/D/E and STM32F103xC/D/E,
 402:c/stm32f1xx_hal.c ****   *                  STM32F101xF/G and STM32F103xF/G
 403:c/stm32f1xx_hal.c ****   *                  STM32F10xx4 and STM32F10xx6
 404:c/stm32f1xx_hal.c ****   *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in 
 405:c/stm32f1xx_hal.c ****   *       debug mode (not accessible by the user software in normal mode).
 406:c/stm32f1xx_hal.c ****   *       Refer to errata sheet of these devices for more details.
 407:c/stm32f1xx_hal.c ****   * @retval Device identifier
 408:c/stm32f1xx_hal.c ****   */
 409:c/stm32f1xx_hal.c **** uint32_t HAL_GetDEVID(void)
 410:c/stm32f1xx_hal.c **** {
 419              		.loc 1 410 0
 420              		.cfi_startproc
 421              		@ args = 0, pretend = 0, frame = 0
 422              		@ frame_needed = 0, uses_anonymous_args = 0
 423              		@ link register save eliminated.
 411:c/stm32f1xx_hal.c ****    return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 424              		.loc 1 411 0
 425 0000 024B     		ldr	r3, .L38
 426 0002 1868     		ldr	r0, [r3]
 412:c/stm32f1xx_hal.c **** }
 427              		.loc 1 412 0
 428 0004 C0F30B00 		ubfx	r0, r0, #0, #12
 429 0008 7047     		bx	lr
 430              	.L39:
 431 000a 00BF     		.align	2
 432              	.L38:
 433 000c 002004E0 		.word	-536600576
 434              		.cfi_endproc
 435              	.LFE76:
 437              		.section	.text.HAL_DBGMCU_EnableDBGSleepMode,"ax",%progbits
 438              		.align	1
 439              		.global	HAL_DBGMCU_EnableDBGSleepMode
 440              		.syntax unified
 441              		.thumb
 442              		.thumb_func
 443              		.fpu softvfp
 445              	HAL_DBGMCU_EnableDBGSleepMode:
 446              	.LFB77:
 413:c/stm32f1xx_hal.c **** 
 414:c/stm32f1xx_hal.c **** /**
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s 			page 16


 415:c/stm32f1xx_hal.c ****   * @brief  Enable the Debug Module during SLEEP mode
 416:c/stm32f1xx_hal.c ****   * @retval None
 417:c/stm32f1xx_hal.c ****   */
 418:c/stm32f1xx_hal.c **** void HAL_DBGMCU_EnableDBGSleepMode(void)
 419:c/stm32f1xx_hal.c **** {
 447              		.loc 1 419 0
 448              		.cfi_startproc
 449              		@ args = 0, pretend = 0, frame = 0
 450              		@ frame_needed = 0, uses_anonymous_args = 0
 451              		@ link register save eliminated.
 420:c/stm32f1xx_hal.c ****   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 452              		.loc 1 420 0
 453 0000 024A     		ldr	r2, .L41
 454 0002 5368     		ldr	r3, [r2, #4]
 455 0004 43F00103 		orr	r3, r3, #1
 456 0008 5360     		str	r3, [r2, #4]
 457 000a 7047     		bx	lr
 458              	.L42:
 459              		.align	2
 460              	.L41:
 461 000c 002004E0 		.word	-536600576
 462              		.cfi_endproc
 463              	.LFE77:
 465              		.section	.text.HAL_DBGMCU_DisableDBGSleepMode,"ax",%progbits
 466              		.align	1
 467              		.global	HAL_DBGMCU_DisableDBGSleepMode
 468              		.syntax unified
 469              		.thumb
 470              		.thumb_func
 471              		.fpu softvfp
 473              	HAL_DBGMCU_DisableDBGSleepMode:
 474              	.LFB78:
 421:c/stm32f1xx_hal.c **** }
 422:c/stm32f1xx_hal.c **** 
 423:c/stm32f1xx_hal.c **** /**
 424:c/stm32f1xx_hal.c ****   * @brief  Disable the Debug Module during SLEEP mode
 425:c/stm32f1xx_hal.c ****   * Note: On devices STM32F10xx8 and STM32F10xxB,
 426:c/stm32f1xx_hal.c ****   *                  STM32F101xC/D/E and STM32F103xC/D/E,
 427:c/stm32f1xx_hal.c ****   *                  STM32F101xF/G and STM32F103xF/G
 428:c/stm32f1xx_hal.c ****   *                  STM32F10xx4 and STM32F10xx6
 429:c/stm32f1xx_hal.c ****   *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in 
 430:c/stm32f1xx_hal.c ****   *       debug mode (not accessible by the user software in normal mode).
 431:c/stm32f1xx_hal.c ****   *       Refer to errata sheet of these devices for more details.
 432:c/stm32f1xx_hal.c ****   * @retval None
 433:c/stm32f1xx_hal.c ****   */
 434:c/stm32f1xx_hal.c **** void HAL_DBGMCU_DisableDBGSleepMode(void)
 435:c/stm32f1xx_hal.c **** {
 475              		.loc 1 435 0
 476              		.cfi_startproc
 477              		@ args = 0, pretend = 0, frame = 0
 478              		@ frame_needed = 0, uses_anonymous_args = 0
 479              		@ link register save eliminated.
 436:c/stm32f1xx_hal.c ****   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 480              		.loc 1 436 0
 481 0000 024A     		ldr	r2, .L44
 482 0002 5368     		ldr	r3, [r2, #4]
 483 0004 23F00103 		bic	r3, r3, #1
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s 			page 17


 484 0008 5360     		str	r3, [r2, #4]
 485 000a 7047     		bx	lr
 486              	.L45:
 487              		.align	2
 488              	.L44:
 489 000c 002004E0 		.word	-536600576
 490              		.cfi_endproc
 491              	.LFE78:
 493              		.section	.text.HAL_DBGMCU_EnableDBGStopMode,"ax",%progbits
 494              		.align	1
 495              		.global	HAL_DBGMCU_EnableDBGStopMode
 496              		.syntax unified
 497              		.thumb
 498              		.thumb_func
 499              		.fpu softvfp
 501              	HAL_DBGMCU_EnableDBGStopMode:
 502              	.LFB79:
 437:c/stm32f1xx_hal.c **** }
 438:c/stm32f1xx_hal.c **** 
 439:c/stm32f1xx_hal.c **** /**
 440:c/stm32f1xx_hal.c ****   * @brief  Enable the Debug Module during STOP mode
 441:c/stm32f1xx_hal.c ****   * Note: On devices STM32F10xx8 and STM32F10xxB,
 442:c/stm32f1xx_hal.c ****   *                  STM32F101xC/D/E and STM32F103xC/D/E,
 443:c/stm32f1xx_hal.c ****   *                  STM32F101xF/G and STM32F103xF/G
 444:c/stm32f1xx_hal.c ****   *                  STM32F10xx4 and STM32F10xx6
 445:c/stm32f1xx_hal.c ****   *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in 
 446:c/stm32f1xx_hal.c ****   *       debug mode (not accessible by the user software in normal mode).
 447:c/stm32f1xx_hal.c ****   *       Refer to errata sheet of these devices for more details.
 448:c/stm32f1xx_hal.c ****   * Note: On all STM32F1 devices:
 449:c/stm32f1xx_hal.c ****   *       If the system tick timer interrupt is enabled during the Stop mode 
 450:c/stm32f1xx_hal.c ****   *       debug (DBG_STOP bit set in the DBGMCU_CR register ), it will wakeup
 451:c/stm32f1xx_hal.c ****   *       the system from Stop mode.
 452:c/stm32f1xx_hal.c ****   *       Workaround: To debug the Stop mode, disable the system tick timer 
 453:c/stm32f1xx_hal.c ****   *       interrupt.
 454:c/stm32f1xx_hal.c ****   *       Refer to errata sheet of these devices for more details.
 455:c/stm32f1xx_hal.c ****   * Note: On all STM32F1 devices:
 456:c/stm32f1xx_hal.c ****   *       If the system tick timer interrupt is enabled during the Stop mode  
 457:c/stm32f1xx_hal.c ****   *       debug (DBG_STOP bit set in the DBGMCU_CR register ), it will wakeup
 458:c/stm32f1xx_hal.c ****   *       the system from Stop mode.
 459:c/stm32f1xx_hal.c ****   *       Workaround: To debug the Stop mode, disable the system tick timer
 460:c/stm32f1xx_hal.c ****   *       interrupt.
 461:c/stm32f1xx_hal.c ****   *       Refer to errata sheet of these devices for more details.
 462:c/stm32f1xx_hal.c ****   * @retval None
 463:c/stm32f1xx_hal.c ****   */
 464:c/stm32f1xx_hal.c **** void HAL_DBGMCU_EnableDBGStopMode(void)
 465:c/stm32f1xx_hal.c **** {
 503              		.loc 1 465 0
 504              		.cfi_startproc
 505              		@ args = 0, pretend = 0, frame = 0
 506              		@ frame_needed = 0, uses_anonymous_args = 0
 507              		@ link register save eliminated.
 466:c/stm32f1xx_hal.c ****   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 508              		.loc 1 466 0
 509 0000 024A     		ldr	r2, .L47
 510 0002 5368     		ldr	r3, [r2, #4]
 511 0004 43F00203 		orr	r3, r3, #2
 512 0008 5360     		str	r3, [r2, #4]
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s 			page 18


 513 000a 7047     		bx	lr
 514              	.L48:
 515              		.align	2
 516              	.L47:
 517 000c 002004E0 		.word	-536600576
 518              		.cfi_endproc
 519              	.LFE79:
 521              		.section	.text.HAL_DBGMCU_DisableDBGStopMode,"ax",%progbits
 522              		.align	1
 523              		.global	HAL_DBGMCU_DisableDBGStopMode
 524              		.syntax unified
 525              		.thumb
 526              		.thumb_func
 527              		.fpu softvfp
 529              	HAL_DBGMCU_DisableDBGStopMode:
 530              	.LFB80:
 467:c/stm32f1xx_hal.c **** }
 468:c/stm32f1xx_hal.c **** 
 469:c/stm32f1xx_hal.c **** /**
 470:c/stm32f1xx_hal.c ****   * @brief  Disable the Debug Module during STOP mode
 471:c/stm32f1xx_hal.c ****   * Note: On devices STM32F10xx8 and STM32F10xxB,
 472:c/stm32f1xx_hal.c ****   *                  STM32F101xC/D/E and STM32F103xC/D/E,
 473:c/stm32f1xx_hal.c ****   *                  STM32F101xF/G and STM32F103xF/G
 474:c/stm32f1xx_hal.c ****   *                  STM32F10xx4 and STM32F10xx6
 475:c/stm32f1xx_hal.c ****   *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in 
 476:c/stm32f1xx_hal.c ****   *       debug mode (not accessible by the user software in normal mode).
 477:c/stm32f1xx_hal.c ****   *       Refer to errata sheet of these devices for more details.
 478:c/stm32f1xx_hal.c ****   * @retval None
 479:c/stm32f1xx_hal.c ****   */
 480:c/stm32f1xx_hal.c **** void HAL_DBGMCU_DisableDBGStopMode(void)
 481:c/stm32f1xx_hal.c **** {
 531              		.loc 1 481 0
 532              		.cfi_startproc
 533              		@ args = 0, pretend = 0, frame = 0
 534              		@ frame_needed = 0, uses_anonymous_args = 0
 535              		@ link register save eliminated.
 482:c/stm32f1xx_hal.c ****   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 536              		.loc 1 482 0
 537 0000 024A     		ldr	r2, .L50
 538 0002 5368     		ldr	r3, [r2, #4]
 539 0004 23F00203 		bic	r3, r3, #2
 540 0008 5360     		str	r3, [r2, #4]
 541 000a 7047     		bx	lr
 542              	.L51:
 543              		.align	2
 544              	.L50:
 545 000c 002004E0 		.word	-536600576
 546              		.cfi_endproc
 547              	.LFE80:
 549              		.section	.text.HAL_DBGMCU_EnableDBGStandbyMode,"ax",%progbits
 550              		.align	1
 551              		.global	HAL_DBGMCU_EnableDBGStandbyMode
 552              		.syntax unified
 553              		.thumb
 554              		.thumb_func
 555              		.fpu softvfp
 557              	HAL_DBGMCU_EnableDBGStandbyMode:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s 			page 19


 558              	.LFB81:
 483:c/stm32f1xx_hal.c **** }
 484:c/stm32f1xx_hal.c **** 
 485:c/stm32f1xx_hal.c **** /**
 486:c/stm32f1xx_hal.c ****   * @brief  Enable the Debug Module during STANDBY mode
 487:c/stm32f1xx_hal.c ****   * Note: On devices STM32F10xx8 and STM32F10xxB,
 488:c/stm32f1xx_hal.c ****   *                  STM32F101xC/D/E and STM32F103xC/D/E,
 489:c/stm32f1xx_hal.c ****   *                  STM32F101xF/G and STM32F103xF/G
 490:c/stm32f1xx_hal.c ****   *                  STM32F10xx4 and STM32F10xx6
 491:c/stm32f1xx_hal.c ****   *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in 
 492:c/stm32f1xx_hal.c ****   *       debug mode (not accessible by the user software in normal mode).
 493:c/stm32f1xx_hal.c ****   *       Refer to errata sheet of these devices for more details.
 494:c/stm32f1xx_hal.c ****   * @retval None
 495:c/stm32f1xx_hal.c ****   */
 496:c/stm32f1xx_hal.c **** void HAL_DBGMCU_EnableDBGStandbyMode(void)
 497:c/stm32f1xx_hal.c **** {
 559              		.loc 1 497 0
 560              		.cfi_startproc
 561              		@ args = 0, pretend = 0, frame = 0
 562              		@ frame_needed = 0, uses_anonymous_args = 0
 563              		@ link register save eliminated.
 498:c/stm32f1xx_hal.c ****   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 564              		.loc 1 498 0
 565 0000 024A     		ldr	r2, .L53
 566 0002 5368     		ldr	r3, [r2, #4]
 567 0004 43F00403 		orr	r3, r3, #4
 568 0008 5360     		str	r3, [r2, #4]
 569 000a 7047     		bx	lr
 570              	.L54:
 571              		.align	2
 572              	.L53:
 573 000c 002004E0 		.word	-536600576
 574              		.cfi_endproc
 575              	.LFE81:
 577              		.section	.text.HAL_DBGMCU_DisableDBGStandbyMode,"ax",%progbits
 578              		.align	1
 579              		.global	HAL_DBGMCU_DisableDBGStandbyMode
 580              		.syntax unified
 581              		.thumb
 582              		.thumb_func
 583              		.fpu softvfp
 585              	HAL_DBGMCU_DisableDBGStandbyMode:
 586              	.LFB82:
 499:c/stm32f1xx_hal.c **** }
 500:c/stm32f1xx_hal.c **** 
 501:c/stm32f1xx_hal.c **** /**
 502:c/stm32f1xx_hal.c ****   * @brief  Disable the Debug Module during STANDBY mode
 503:c/stm32f1xx_hal.c ****   * Note: On devices STM32F10xx8 and STM32F10xxB,
 504:c/stm32f1xx_hal.c ****   *                  STM32F101xC/D/E and STM32F103xC/D/E,
 505:c/stm32f1xx_hal.c ****   *                  STM32F101xF/G and STM32F103xF/G
 506:c/stm32f1xx_hal.c ****   *                  STM32F10xx4 and STM32F10xx6
 507:c/stm32f1xx_hal.c ****   *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in 
 508:c/stm32f1xx_hal.c ****   *       debug mode (not accessible by the user software in normal mode).
 509:c/stm32f1xx_hal.c ****   *       Refer to errata sheet of these devices for more details.
 510:c/stm32f1xx_hal.c ****   * @retval None
 511:c/stm32f1xx_hal.c ****   */
 512:c/stm32f1xx_hal.c **** void HAL_DBGMCU_DisableDBGStandbyMode(void)
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s 			page 20


 513:c/stm32f1xx_hal.c **** {
 587              		.loc 1 513 0
 588              		.cfi_startproc
 589              		@ args = 0, pretend = 0, frame = 0
 590              		@ frame_needed = 0, uses_anonymous_args = 0
 591              		@ link register save eliminated.
 514:c/stm32f1xx_hal.c ****   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 592              		.loc 1 514 0
 593 0000 024A     		ldr	r2, .L56
 594 0002 5368     		ldr	r3, [r2, #4]
 595 0004 23F00403 		bic	r3, r3, #4
 596 0008 5360     		str	r3, [r2, #4]
 597 000a 7047     		bx	lr
 598              	.L57:
 599              		.align	2
 600              	.L56:
 601 000c 002004E0 		.word	-536600576
 602              		.cfi_endproc
 603              	.LFE82:
 605              		.section	.text.HAL_GetUID,"ax",%progbits
 606              		.align	1
 607              		.global	HAL_GetUID
 608              		.syntax unified
 609              		.thumb
 610              		.thumb_func
 611              		.fpu softvfp
 613              	HAL_GetUID:
 614              	.LFB83:
 515:c/stm32f1xx_hal.c **** }
 516:c/stm32f1xx_hal.c **** 
 517:c/stm32f1xx_hal.c **** /**
 518:c/stm32f1xx_hal.c ****   * @brief Return the unique device identifier (UID based on 96 bits)
 519:c/stm32f1xx_hal.c ****   * @param UID: pointer to 3 words array.
 520:c/stm32f1xx_hal.c ****   * @retval Device identifier
 521:c/stm32f1xx_hal.c ****   */
 522:c/stm32f1xx_hal.c **** void HAL_GetUID(uint32_t *UID)
 523:c/stm32f1xx_hal.c **** {
 615              		.loc 1 523 0
 616              		.cfi_startproc
 617              		@ args = 0, pretend = 0, frame = 0
 618              		@ frame_needed = 0, uses_anonymous_args = 0
 619              		@ link register save eliminated.
 620              	.LVL15:
 524:c/stm32f1xx_hal.c ****   UID[0] = (uint32_t)(READ_REG(*((uint32_t *)UID_BASE)));
 621              		.loc 1 524 0
 622 0000 044B     		ldr	r3, .L59
 623 0002 1B68     		ldr	r3, [r3]
 624 0004 0360     		str	r3, [r0]
 525:c/stm32f1xx_hal.c ****   UID[1] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 625              		.loc 1 525 0
 626 0006 044B     		ldr	r3, .L59+4
 627 0008 1B68     		ldr	r3, [r3]
 628 000a 4360     		str	r3, [r0, #4]
 526:c/stm32f1xx_hal.c ****   UID[2] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 629              		.loc 1 526 0
 630 000c 034B     		ldr	r3, .L59+8
 631 000e 1B68     		ldr	r3, [r3]
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s 			page 21


 632 0010 8360     		str	r3, [r0, #8]
 633 0012 7047     		bx	lr
 634              	.L60:
 635              		.align	2
 636              	.L59:
 637 0014 E8F7FF1F 		.word	536868840
 638 0018 ECF7FF1F 		.word	536868844
 639 001c F0F7FF1F 		.word	536868848
 640              		.cfi_endproc
 641              	.LFE83:
 643              		.global	uwTick
 644              		.section	.bss.uwTick,"aw",%nobits
 645              		.align	2
 646              		.set	.LANCHOR0,. + 0
 649              	uwTick:
 650 0000 00000000 		.space	4
 651              		.text
 652              	.Letext0:
 653              		.file 2 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/machine/_
 654              		.file 3 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_stdi
 655              		.file 4 "c/core_cm3.h"
 656              		.file 5 "c/system_stm32f1xx.h"
 657              		.file 6 "c/stm32f103xb.h"
 658              		.file 7 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/lock.
 659              		.file 8 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_type
 660              		.file 9 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/lib/gcc/arm-none-eabi/6.3.1/inc
 661              		.file 10 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/reen
 662              		.file 11 "c/stm32f1xx_hal_def.h"
 663              		.file 12 "c/stm32f1xx_hal_cortex.h"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s 			page 22


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal.c
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:16     .text.HAL_MspInit:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:23     .text.HAL_MspInit:0000000000000000 HAL_MspInit
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:34     .text.HAL_MspDeInit:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:41     .text.HAL_MspDeInit:0000000000000000 HAL_MspDeInit
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:54     .text.HAL_DeInit:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:61     .text.HAL_DeInit:0000000000000000 HAL_DeInit
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:94     .text.HAL_DeInit:000000000000001c $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:99     .text.HAL_InitTick:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:106    .text.HAL_InitTick:0000000000000000 HAL_InitTick
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:142    .text.HAL_InitTick:0000000000000024 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:147    .text.HAL_Init:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:154    .text.HAL_Init:0000000000000000 HAL_Init
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:190    .text.HAL_Init:0000000000000020 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:195    .text.HAL_IncTick:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:202    .text.HAL_IncTick:0000000000000000 HAL_IncTick
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:218    .text.HAL_IncTick:000000000000000c $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:223    .text.HAL_GetTick:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:230    .text.HAL_GetTick:0000000000000000 HAL_GetTick
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:245    .text.HAL_GetTick:0000000000000008 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:250    .text.HAL_Delay:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:257    .text.HAL_Delay:0000000000000000 HAL_Delay
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:301    .text.HAL_SuspendTick:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:308    .text.HAL_SuspendTick:0000000000000000 HAL_SuspendTick
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:324    .text.HAL_SuspendTick:000000000000000c $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:329    .text.HAL_ResumeTick:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:336    .text.HAL_ResumeTick:0000000000000000 HAL_ResumeTick
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:352    .text.HAL_ResumeTick:000000000000000c $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:357    .text.HAL_GetHalVersion:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:364    .text.HAL_GetHalVersion:0000000000000000 HAL_GetHalVersion
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:377    .text.HAL_GetHalVersion:0000000000000004 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:382    .text.HAL_GetREVID:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:389    .text.HAL_GetREVID:0000000000000000 HAL_GetREVID
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:405    .text.HAL_GetREVID:0000000000000008 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:410    .text.HAL_GetDEVID:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:417    .text.HAL_GetDEVID:0000000000000000 HAL_GetDEVID
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:433    .text.HAL_GetDEVID:000000000000000c $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:438    .text.HAL_DBGMCU_EnableDBGSleepMode:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:445    .text.HAL_DBGMCU_EnableDBGSleepMode:0000000000000000 HAL_DBGMCU_EnableDBGSleepMode
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:461    .text.HAL_DBGMCU_EnableDBGSleepMode:000000000000000c $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:466    .text.HAL_DBGMCU_DisableDBGSleepMode:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:473    .text.HAL_DBGMCU_DisableDBGSleepMode:0000000000000000 HAL_DBGMCU_DisableDBGSleepMode
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:489    .text.HAL_DBGMCU_DisableDBGSleepMode:000000000000000c $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:494    .text.HAL_DBGMCU_EnableDBGStopMode:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:501    .text.HAL_DBGMCU_EnableDBGStopMode:0000000000000000 HAL_DBGMCU_EnableDBGStopMode
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:517    .text.HAL_DBGMCU_EnableDBGStopMode:000000000000000c $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:522    .text.HAL_DBGMCU_DisableDBGStopMode:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:529    .text.HAL_DBGMCU_DisableDBGStopMode:0000000000000000 HAL_DBGMCU_DisableDBGStopMode
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:545    .text.HAL_DBGMCU_DisableDBGStopMode:000000000000000c $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:550    .text.HAL_DBGMCU_EnableDBGStandbyMode:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:557    .text.HAL_DBGMCU_EnableDBGStandbyMode:0000000000000000 HAL_DBGMCU_EnableDBGStandbyMode
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:573    .text.HAL_DBGMCU_EnableDBGStandbyMode:000000000000000c $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:578    .text.HAL_DBGMCU_DisableDBGStandbyMode:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:585    .text.HAL_DBGMCU_DisableDBGStandbyMode:0000000000000000 HAL_DBGMCU_DisableDBGStandbyMode
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:601    .text.HAL_DBGMCU_DisableDBGStandbyMode:000000000000000c $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:606    .text.HAL_GetUID:0000000000000000 $t
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s 			page 23


/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:613    .text.HAL_GetUID:0000000000000000 HAL_GetUID
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:637    .text.HAL_GetUID:0000000000000014 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:649    .bss.uwTick:0000000000000000 uwTick
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccZJ4fSi.s:645    .bss.uwTick:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_SYSTICK_Config
HAL_NVIC_SetPriority
SystemCoreClock
HAL_NVIC_SetPriorityGrouping
exit code: 0
OPT_LEVEL = Some("s")
HOST = Some("x86_64-apple-darwin")
CFLAGS_arm-none-eabi = None
CFLAGS_arm_none_eabi = None
TARGET_CFLAGS = None
CFLAGS = None
DEBUG = Some("true")
running: "arm-none-eabi-gcc" "-Os" "-ffunction-sections" "-fdata-sections" "-g" "-DSTM32F103xB" "-DUSE_HAL_DRIVER" "-mcpu=cortex-m3" "-mthumb" "-Wall" "-fdata-sections" "-ffunction-sections" "-Wa,-a,-ad" "-g" "-Wall" "-Wextra" "-o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/stm32f1xx_hal_cortex.o" "-c" "c/stm32f1xx_hal_cortex.c"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_hal_cortex.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_NVIC_SetPriorityGrouping,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_NVIC_SetPriorityGrouping
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_NVIC_SetPriorityGrouping:
  24              	.LFB64:
  25              		.file 1 "c/stm32f1xx_hal_cortex.c"
   1:c/stm32f1xx_hal_cortex.c **** /**
   2:c/stm32f1xx_hal_cortex.c ****   ******************************************************************************
   3:c/stm32f1xx_hal_cortex.c ****   * @file    stm32f1xx_hal_cortex.c
   4:c/stm32f1xx_hal_cortex.c ****   * @author  MCD Application Team
   5:c/stm32f1xx_hal_cortex.c ****   * @version V1.1.1
   6:c/stm32f1xx_hal_cortex.c ****   * @date    12-May-2017
   7:c/stm32f1xx_hal_cortex.c ****   * @brief   CORTEX HAL module driver.
   8:c/stm32f1xx_hal_cortex.c ****   *          This file provides firmware functions to manage the following 
   9:c/stm32f1xx_hal_cortex.c ****   *          functionalities of the CORTEX:
  10:c/stm32f1xx_hal_cortex.c ****   *           + Initialization and de-initialization functions
  11:c/stm32f1xx_hal_cortex.c ****   *           + Peripheral Control functions 
  12:c/stm32f1xx_hal_cortex.c ****   *
  13:c/stm32f1xx_hal_cortex.c ****   @verbatim  
  14:c/stm32f1xx_hal_cortex.c ****   ==============================================================================
  15:c/stm32f1xx_hal_cortex.c ****                         ##### How to use this driver #####
  16:c/stm32f1xx_hal_cortex.c ****   ==============================================================================
  17:c/stm32f1xx_hal_cortex.c **** 
  18:c/stm32f1xx_hal_cortex.c ****     [..]  
  19:c/stm32f1xx_hal_cortex.c ****     *** How to configure Interrupts using CORTEX HAL driver ***
  20:c/stm32f1xx_hal_cortex.c ****     ===========================================================
  21:c/stm32f1xx_hal_cortex.c ****     [..]     
  22:c/stm32f1xx_hal_cortex.c ****     This section provides functions allowing to configure the NVIC interrupts (IRQ).
  23:c/stm32f1xx_hal_cortex.c ****     The Cortex-M3 exceptions are managed by CMSIS functions.
  24:c/stm32f1xx_hal_cortex.c ****    
  25:c/stm32f1xx_hal_cortex.c ****     (#) Configure the NVIC Priority Grouping using HAL_NVIC_SetPriorityGrouping()
  26:c/stm32f1xx_hal_cortex.c ****         function according to the following table.
  27:c/stm32f1xx_hal_cortex.c ****     (#) Configure the priority of the selected IRQ Channels using HAL_NVIC_SetPriority(). 
  28:c/stm32f1xx_hal_cortex.c ****     (#) Enable the selected IRQ Channels using HAL_NVIC_EnableIRQ().
  29:c/stm32f1xx_hal_cortex.c ****     (#) please refer to programming manual for details in how to configure priority. 
  30:c/stm32f1xx_hal_cortex.c ****       
  31:c/stm32f1xx_hal_cortex.c ****      -@- When the NVIC_PRIORITYGROUP_0 is selected, IRQ preemption is no more possible. 
  32:c/stm32f1xx_hal_cortex.c ****          The pending IRQ priority will be managed only by the sub priority.
  33:c/stm32f1xx_hal_cortex.c ****    
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 2


  34:c/stm32f1xx_hal_cortex.c ****      -@- IRQ priority order (sorted by highest to lowest priority):
  35:c/stm32f1xx_hal_cortex.c ****         (+@) Lowest preemption priority
  36:c/stm32f1xx_hal_cortex.c ****         (+@) Lowest sub priority
  37:c/stm32f1xx_hal_cortex.c ****         (+@) Lowest hardware priority (IRQ number)
  38:c/stm32f1xx_hal_cortex.c ****  
  39:c/stm32f1xx_hal_cortex.c ****     [..]  
  40:c/stm32f1xx_hal_cortex.c ****     *** How to configure Systick using CORTEX HAL driver ***
  41:c/stm32f1xx_hal_cortex.c ****     ========================================================
  42:c/stm32f1xx_hal_cortex.c ****     [..]
  43:c/stm32f1xx_hal_cortex.c ****     Setup SysTick Timer for time base.
  44:c/stm32f1xx_hal_cortex.c ****            
  45:c/stm32f1xx_hal_cortex.c ****    (+) The HAL_SYSTICK_Config()function calls the SysTick_Config() function which
  46:c/stm32f1xx_hal_cortex.c ****        is a CMSIS function that:
  47:c/stm32f1xx_hal_cortex.c ****         (++) Configures the SysTick Reload register with value passed as function parameter.
  48:c/stm32f1xx_hal_cortex.c ****         (++) Configures the SysTick IRQ priority to the lowest value 0x0F.
  49:c/stm32f1xx_hal_cortex.c ****         (++) Resets the SysTick Counter register.
  50:c/stm32f1xx_hal_cortex.c ****         (++) Configures the SysTick Counter clock source to be Core Clock Source (HCLK).
  51:c/stm32f1xx_hal_cortex.c ****         (++) Enables the SysTick Interrupt.
  52:c/stm32f1xx_hal_cortex.c ****         (++) Starts the SysTick Counter.
  53:c/stm32f1xx_hal_cortex.c ****     
  54:c/stm32f1xx_hal_cortex.c ****    (+) You can change the SysTick Clock source to be HCLK_Div8 by calling the macro
  55:c/stm32f1xx_hal_cortex.c ****        __HAL_CORTEX_SYSTICKCLK_CONFIG(SYSTICK_CLKSOURCE_HCLK_DIV8) just after the
  56:c/stm32f1xx_hal_cortex.c ****        HAL_SYSTICK_Config() function call. The __HAL_CORTEX_SYSTICKCLK_CONFIG() macro is defined
  57:c/stm32f1xx_hal_cortex.c ****        inside the stm32f1xx_hal_cortex.h file.
  58:c/stm32f1xx_hal_cortex.c **** 
  59:c/stm32f1xx_hal_cortex.c ****    (+) You can change the SysTick IRQ priority by calling the
  60:c/stm32f1xx_hal_cortex.c ****        HAL_NVIC_SetPriority(SysTick_IRQn,...) function just after the HAL_SYSTICK_Config() function
  61:c/stm32f1xx_hal_cortex.c ****        call. The HAL_NVIC_SetPriority() call the NVIC_SetPriority() function which is a CMSIS funct
  62:c/stm32f1xx_hal_cortex.c **** 
  63:c/stm32f1xx_hal_cortex.c ****    (+) To adjust the SysTick time base, use the following formula:
  64:c/stm32f1xx_hal_cortex.c ****                             
  65:c/stm32f1xx_hal_cortex.c ****        Reload Value = SysTick Counter Clock (Hz) x  Desired Time base (s)
  66:c/stm32f1xx_hal_cortex.c ****        (++) Reload Value is the parameter to be passed for HAL_SYSTICK_Config() function
  67:c/stm32f1xx_hal_cortex.c ****        (++) Reload Value should not exceed 0xFFFFFF
  68:c/stm32f1xx_hal_cortex.c ****    
  69:c/stm32f1xx_hal_cortex.c ****   @endverbatim
  70:c/stm32f1xx_hal_cortex.c ****   ******************************************************************************
  71:c/stm32f1xx_hal_cortex.c ****   * @attention
  72:c/stm32f1xx_hal_cortex.c ****   *
  73:c/stm32f1xx_hal_cortex.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  74:c/stm32f1xx_hal_cortex.c ****   *
  75:c/stm32f1xx_hal_cortex.c ****   * Redistribution and use in source and binary forms, with or without modification,
  76:c/stm32f1xx_hal_cortex.c ****   * are permitted provided that the following conditions are met:
  77:c/stm32f1xx_hal_cortex.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  78:c/stm32f1xx_hal_cortex.c ****   *      this list of conditions and the following disclaimer.
  79:c/stm32f1xx_hal_cortex.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  80:c/stm32f1xx_hal_cortex.c ****   *      this list of conditions and the following disclaimer in the documentation
  81:c/stm32f1xx_hal_cortex.c ****   *      and/or other materials provided with the distribution.
  82:c/stm32f1xx_hal_cortex.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  83:c/stm32f1xx_hal_cortex.c ****   *      may be used to endorse or promote products derived from this software
  84:c/stm32f1xx_hal_cortex.c ****   *      without specific prior written permission.
  85:c/stm32f1xx_hal_cortex.c ****   *
  86:c/stm32f1xx_hal_cortex.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  87:c/stm32f1xx_hal_cortex.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  88:c/stm32f1xx_hal_cortex.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  89:c/stm32f1xx_hal_cortex.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  90:c/stm32f1xx_hal_cortex.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 3


  91:c/stm32f1xx_hal_cortex.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  92:c/stm32f1xx_hal_cortex.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  93:c/stm32f1xx_hal_cortex.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  94:c/stm32f1xx_hal_cortex.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  95:c/stm32f1xx_hal_cortex.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  96:c/stm32f1xx_hal_cortex.c ****   *
  97:c/stm32f1xx_hal_cortex.c ****   ******************************************************************************
  98:c/stm32f1xx_hal_cortex.c ****   */
  99:c/stm32f1xx_hal_cortex.c **** 
 100:c/stm32f1xx_hal_cortex.c **** /* Includes ------------------------------------------------------------------*/
 101:c/stm32f1xx_hal_cortex.c **** #include "stm32f1xx_hal.h"
 102:c/stm32f1xx_hal_cortex.c **** 
 103:c/stm32f1xx_hal_cortex.c **** /** @addtogroup STM32F1xx_HAL_Driver
 104:c/stm32f1xx_hal_cortex.c ****   * @{
 105:c/stm32f1xx_hal_cortex.c ****   */
 106:c/stm32f1xx_hal_cortex.c **** 
 107:c/stm32f1xx_hal_cortex.c **** /** @defgroup CORTEX CORTEX
 108:c/stm32f1xx_hal_cortex.c ****   * @brief CORTEX HAL module driver
 109:c/stm32f1xx_hal_cortex.c ****   * @{
 110:c/stm32f1xx_hal_cortex.c ****   */
 111:c/stm32f1xx_hal_cortex.c **** 
 112:c/stm32f1xx_hal_cortex.c **** #ifdef HAL_CORTEX_MODULE_ENABLED
 113:c/stm32f1xx_hal_cortex.c **** 
 114:c/stm32f1xx_hal_cortex.c **** /* Private types -------------------------------------------------------------*/
 115:c/stm32f1xx_hal_cortex.c **** /* Private variables ---------------------------------------------------------*/
 116:c/stm32f1xx_hal_cortex.c **** /* Private constants ---------------------------------------------------------*/
 117:c/stm32f1xx_hal_cortex.c **** /* Private macros ------------------------------------------------------------*/
 118:c/stm32f1xx_hal_cortex.c **** /* Private functions ---------------------------------------------------------*/
 119:c/stm32f1xx_hal_cortex.c **** /* Exported functions --------------------------------------------------------*/
 120:c/stm32f1xx_hal_cortex.c **** 
 121:c/stm32f1xx_hal_cortex.c **** /** @defgroup CORTEX_Exported_Functions CORTEX Exported Functions
 122:c/stm32f1xx_hal_cortex.c ****   * @{
 123:c/stm32f1xx_hal_cortex.c ****   */
 124:c/stm32f1xx_hal_cortex.c **** 
 125:c/stm32f1xx_hal_cortex.c **** 
 126:c/stm32f1xx_hal_cortex.c **** /** @defgroup CORTEX_Exported_Functions_Group1 Initialization and de-initialization functions
 127:c/stm32f1xx_hal_cortex.c ****   *  @brief    Initialization and Configuration functions 
 128:c/stm32f1xx_hal_cortex.c ****   *
 129:c/stm32f1xx_hal_cortex.c **** @verbatim    
 130:c/stm32f1xx_hal_cortex.c ****   ==============================================================================
 131:c/stm32f1xx_hal_cortex.c ****               ##### Initialization and de-initialization functions #####
 132:c/stm32f1xx_hal_cortex.c ****   ==============================================================================
 133:c/stm32f1xx_hal_cortex.c ****     [..]
 134:c/stm32f1xx_hal_cortex.c ****       This section provides the CORTEX HAL driver functions allowing to configure Interrupts
 135:c/stm32f1xx_hal_cortex.c ****       Systick functionalities 
 136:c/stm32f1xx_hal_cortex.c **** 
 137:c/stm32f1xx_hal_cortex.c **** @endverbatim
 138:c/stm32f1xx_hal_cortex.c ****   * @{
 139:c/stm32f1xx_hal_cortex.c ****   */
 140:c/stm32f1xx_hal_cortex.c **** 
 141:c/stm32f1xx_hal_cortex.c **** 
 142:c/stm32f1xx_hal_cortex.c **** /**
 143:c/stm32f1xx_hal_cortex.c ****   * @brief  Sets the priority grouping field (preemption priority and subpriority)
 144:c/stm32f1xx_hal_cortex.c ****   *         using the required unlock sequence.
 145:c/stm32f1xx_hal_cortex.c ****   * @param  PriorityGroup: The priority grouping bits length. 
 146:c/stm32f1xx_hal_cortex.c ****   *         This parameter can be one of the following values:
 147:c/stm32f1xx_hal_cortex.c ****   *         @arg NVIC_PRIORITYGROUP_0: 0 bits for preemption priority
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 4


 148:c/stm32f1xx_hal_cortex.c ****   *                                    4 bits for subpriority
 149:c/stm32f1xx_hal_cortex.c ****   *         @arg NVIC_PRIORITYGROUP_1: 1 bits for preemption priority
 150:c/stm32f1xx_hal_cortex.c ****   *                                    3 bits for subpriority
 151:c/stm32f1xx_hal_cortex.c ****   *         @arg NVIC_PRIORITYGROUP_2: 2 bits for preemption priority
 152:c/stm32f1xx_hal_cortex.c ****   *                                    2 bits for subpriority
 153:c/stm32f1xx_hal_cortex.c ****   *         @arg NVIC_PRIORITYGROUP_3: 3 bits for preemption priority
 154:c/stm32f1xx_hal_cortex.c ****   *                                    1 bits for subpriority
 155:c/stm32f1xx_hal_cortex.c ****   *         @arg NVIC_PRIORITYGROUP_4: 4 bits for preemption priority
 156:c/stm32f1xx_hal_cortex.c ****   *                                    0 bits for subpriority
 157:c/stm32f1xx_hal_cortex.c ****   * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
 158:c/stm32f1xx_hal_cortex.c ****   *         The pending IRQ priority will be managed only by the subpriority. 
 159:c/stm32f1xx_hal_cortex.c ****   * @retval None
 160:c/stm32f1xx_hal_cortex.c ****   */
 161:c/stm32f1xx_hal_cortex.c **** void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
 162:c/stm32f1xx_hal_cortex.c **** {
  26              		.loc 1 162 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
  32              	.LBB12:
  33              	.LBB13:
  34              		.file 2 "c/core_cm3.h"
   1:c/core_cm3.h  **** /**************************************************************************//**
   2:c/core_cm3.h  ****  * @file     core_cm3.h
   3:c/core_cm3.h  ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:c/core_cm3.h  ****  * @version  V4.30
   5:c/core_cm3.h  ****  * @date     20. October 2015
   6:c/core_cm3.h  ****  ******************************************************************************/
   7:c/core_cm3.h  **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:c/core_cm3.h  **** 
   9:c/core_cm3.h  ****    All rights reserved.
  10:c/core_cm3.h  ****    Redistribution and use in source and binary forms, with or without
  11:c/core_cm3.h  ****    modification, are permitted provided that the following conditions are met:
  12:c/core_cm3.h  ****    - Redistributions of source code must retain the above copyright
  13:c/core_cm3.h  ****      notice, this list of conditions and the following disclaimer.
  14:c/core_cm3.h  ****    - Redistributions in binary form must reproduce the above copyright
  15:c/core_cm3.h  ****      notice, this list of conditions and the following disclaimer in the
  16:c/core_cm3.h  ****      documentation and/or other materials provided with the distribution.
  17:c/core_cm3.h  ****    - Neither the name of ARM nor the names of its contributors may be used
  18:c/core_cm3.h  ****      to endorse or promote products derived from this software without
  19:c/core_cm3.h  ****      specific prior written permission.
  20:c/core_cm3.h  ****    *
  21:c/core_cm3.h  ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c/core_cm3.h  ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c/core_cm3.h  ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c/core_cm3.h  ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:c/core_cm3.h  ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c/core_cm3.h  ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c/core_cm3.h  ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c/core_cm3.h  ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c/core_cm3.h  ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c/core_cm3.h  ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c/core_cm3.h  ****    POSSIBILITY OF SUCH DAMAGE.
  32:c/core_cm3.h  ****    ---------------------------------------------------------------------------*/
  33:c/core_cm3.h  **** 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 5


  34:c/core_cm3.h  **** 
  35:c/core_cm3.h  **** #if   defined ( __ICCARM__ )
  36:c/core_cm3.h  ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:c/core_cm3.h  **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:c/core_cm3.h  ****   #pragma clang system_header   /* treat file as system include file */
  39:c/core_cm3.h  **** #endif
  40:c/core_cm3.h  **** 
  41:c/core_cm3.h  **** #ifndef __CORE_CM3_H_GENERIC
  42:c/core_cm3.h  **** #define __CORE_CM3_H_GENERIC
  43:c/core_cm3.h  **** 
  44:c/core_cm3.h  **** #include <stdint.h>
  45:c/core_cm3.h  **** 
  46:c/core_cm3.h  **** #ifdef __cplusplus
  47:c/core_cm3.h  ****  extern "C" {
  48:c/core_cm3.h  **** #endif
  49:c/core_cm3.h  **** 
  50:c/core_cm3.h  **** /**
  51:c/core_cm3.h  ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:c/core_cm3.h  ****   CMSIS violates the following MISRA-C:2004 rules:
  53:c/core_cm3.h  **** 
  54:c/core_cm3.h  ****    \li Required Rule 8.5, object/function definition in header file.<br>
  55:c/core_cm3.h  ****      Function definitions in header files are used to allow 'inlining'.
  56:c/core_cm3.h  **** 
  57:c/core_cm3.h  ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  58:c/core_cm3.h  ****      Unions are used for effective representation of core registers.
  59:c/core_cm3.h  **** 
  60:c/core_cm3.h  ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:c/core_cm3.h  ****      Function-like macros are used to allow more efficient code.
  62:c/core_cm3.h  ****  */
  63:c/core_cm3.h  **** 
  64:c/core_cm3.h  **** 
  65:c/core_cm3.h  **** /*******************************************************************************
  66:c/core_cm3.h  ****  *                 CMSIS definitions
  67:c/core_cm3.h  ****  ******************************************************************************/
  68:c/core_cm3.h  **** /**
  69:c/core_cm3.h  ****   \ingroup Cortex_M3
  70:c/core_cm3.h  ****   @{
  71:c/core_cm3.h  ****  */
  72:c/core_cm3.h  **** 
  73:c/core_cm3.h  **** /*  CMSIS CM3 definitions */
  74:c/core_cm3.h  **** #define __CM3_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  75:c/core_cm3.h  **** #define __CM3_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  76:c/core_cm3.h  **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16U) | \
  77:c/core_cm3.h  ****                                     __CM3_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  78:c/core_cm3.h  **** 
  79:c/core_cm3.h  **** #define __CORTEX_M                (0x03U)                                      /*!< Cortex-M Core *
  80:c/core_cm3.h  **** 
  81:c/core_cm3.h  **** 
  82:c/core_cm3.h  **** #if   defined ( __CC_ARM )
  83:c/core_cm3.h  ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:c/core_cm3.h  ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:c/core_cm3.h  ****   #define __STATIC_INLINE  static __inline
  86:c/core_cm3.h  **** 
  87:c/core_cm3.h  **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:c/core_cm3.h  ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:c/core_cm3.h  ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  90:c/core_cm3.h  ****   #define __STATIC_INLINE  static __inline
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 6


  91:c/core_cm3.h  **** 
  92:c/core_cm3.h  **** #elif defined ( __GNUC__ )
  93:c/core_cm3.h  ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  94:c/core_cm3.h  ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:c/core_cm3.h  ****   #define __STATIC_INLINE  static inline
  96:c/core_cm3.h  **** 
  97:c/core_cm3.h  **** #elif defined ( __ICCARM__ )
  98:c/core_cm3.h  ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:c/core_cm3.h  ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 100:c/core_cm3.h  ****   #define __STATIC_INLINE  static inline
 101:c/core_cm3.h  **** 
 102:c/core_cm3.h  **** #elif defined ( __TMS470__ )
 103:c/core_cm3.h  ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:c/core_cm3.h  ****   #define __STATIC_INLINE  static inline
 105:c/core_cm3.h  **** 
 106:c/core_cm3.h  **** #elif defined ( __TASKING__ )
 107:c/core_cm3.h  ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:c/core_cm3.h  ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:c/core_cm3.h  ****   #define __STATIC_INLINE  static inline
 110:c/core_cm3.h  **** 
 111:c/core_cm3.h  **** #elif defined ( __CSMC__ )
 112:c/core_cm3.h  ****   #define __packed
 113:c/core_cm3.h  ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:c/core_cm3.h  ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 115:c/core_cm3.h  ****   #define __STATIC_INLINE  static inline
 116:c/core_cm3.h  **** 
 117:c/core_cm3.h  **** #else
 118:c/core_cm3.h  ****   #error Unknown compiler
 119:c/core_cm3.h  **** #endif
 120:c/core_cm3.h  **** 
 121:c/core_cm3.h  **** /** __FPU_USED indicates whether an FPU is used or not.
 122:c/core_cm3.h  ****     This core does not support an FPU at all
 123:c/core_cm3.h  **** */
 124:c/core_cm3.h  **** #define __FPU_USED       0U
 125:c/core_cm3.h  **** 
 126:c/core_cm3.h  **** #if defined ( __CC_ARM )
 127:c/core_cm3.h  ****   #if defined __TARGET_FPU_VFP
 128:c/core_cm3.h  ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 129:c/core_cm3.h  ****   #endif
 130:c/core_cm3.h  **** 
 131:c/core_cm3.h  **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 132:c/core_cm3.h  ****   #if defined __ARM_PCS_VFP
 133:c/core_cm3.h  ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 134:c/core_cm3.h  ****   #endif
 135:c/core_cm3.h  **** 
 136:c/core_cm3.h  **** #elif defined ( __GNUC__ )
 137:c/core_cm3.h  ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 138:c/core_cm3.h  ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 139:c/core_cm3.h  ****   #endif
 140:c/core_cm3.h  **** 
 141:c/core_cm3.h  **** #elif defined ( __ICCARM__ )
 142:c/core_cm3.h  ****   #if defined __ARMVFP__
 143:c/core_cm3.h  ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 144:c/core_cm3.h  ****   #endif
 145:c/core_cm3.h  **** 
 146:c/core_cm3.h  **** #elif defined ( __TMS470__ )
 147:c/core_cm3.h  ****   #if defined __TI_VFP_SUPPORT__
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 7


 148:c/core_cm3.h  ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 149:c/core_cm3.h  ****   #endif
 150:c/core_cm3.h  **** 
 151:c/core_cm3.h  **** #elif defined ( __TASKING__ )
 152:c/core_cm3.h  ****   #if defined __FPU_VFP__
 153:c/core_cm3.h  ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 154:c/core_cm3.h  ****   #endif
 155:c/core_cm3.h  **** 
 156:c/core_cm3.h  **** #elif defined ( __CSMC__ )
 157:c/core_cm3.h  ****   #if ( __CSMC__ & 0x400U)
 158:c/core_cm3.h  ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 159:c/core_cm3.h  ****   #endif
 160:c/core_cm3.h  **** 
 161:c/core_cm3.h  **** #endif
 162:c/core_cm3.h  **** 
 163:c/core_cm3.h  **** #include "core_cmInstr.h"                /* Core Instruction Access */
 164:c/core_cm3.h  **** #include "core_cmFunc.h"                 /* Core Function Access */
 165:c/core_cm3.h  **** 
 166:c/core_cm3.h  **** #ifdef __cplusplus
 167:c/core_cm3.h  **** }
 168:c/core_cm3.h  **** #endif
 169:c/core_cm3.h  **** 
 170:c/core_cm3.h  **** #endif /* __CORE_CM3_H_GENERIC */
 171:c/core_cm3.h  **** 
 172:c/core_cm3.h  **** #ifndef __CMSIS_GENERIC
 173:c/core_cm3.h  **** 
 174:c/core_cm3.h  **** #ifndef __CORE_CM3_H_DEPENDANT
 175:c/core_cm3.h  **** #define __CORE_CM3_H_DEPENDANT
 176:c/core_cm3.h  **** 
 177:c/core_cm3.h  **** #ifdef __cplusplus
 178:c/core_cm3.h  ****  extern "C" {
 179:c/core_cm3.h  **** #endif
 180:c/core_cm3.h  **** 
 181:c/core_cm3.h  **** /* check device defines and use defaults */
 182:c/core_cm3.h  **** #if defined __CHECK_DEVICE_DEFINES
 183:c/core_cm3.h  ****   #ifndef __CM3_REV
 184:c/core_cm3.h  ****     #define __CM3_REV               0x0200U
 185:c/core_cm3.h  ****     #warning "__CM3_REV not defined in device header file; using default!"
 186:c/core_cm3.h  ****   #endif
 187:c/core_cm3.h  **** 
 188:c/core_cm3.h  ****   #ifndef __MPU_PRESENT
 189:c/core_cm3.h  ****     #define __MPU_PRESENT             0U
 190:c/core_cm3.h  ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 191:c/core_cm3.h  ****   #endif
 192:c/core_cm3.h  **** 
 193:c/core_cm3.h  ****   #ifndef __NVIC_PRIO_BITS
 194:c/core_cm3.h  ****     #define __NVIC_PRIO_BITS          4U
 195:c/core_cm3.h  ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 196:c/core_cm3.h  ****   #endif
 197:c/core_cm3.h  **** 
 198:c/core_cm3.h  ****   #ifndef __Vendor_SysTickConfig
 199:c/core_cm3.h  ****     #define __Vendor_SysTickConfig    0U
 200:c/core_cm3.h  ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 201:c/core_cm3.h  ****   #endif
 202:c/core_cm3.h  **** #endif
 203:c/core_cm3.h  **** 
 204:c/core_cm3.h  **** /* IO definitions (access restrictions to peripheral registers) */
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 8


 205:c/core_cm3.h  **** /**
 206:c/core_cm3.h  ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 207:c/core_cm3.h  **** 
 208:c/core_cm3.h  ****     <strong>IO Type Qualifiers</strong> are used
 209:c/core_cm3.h  ****     \li to specify the access to peripheral variables.
 210:c/core_cm3.h  ****     \li for automatic generation of peripheral register debug information.
 211:c/core_cm3.h  **** */
 212:c/core_cm3.h  **** #ifdef __cplusplus
 213:c/core_cm3.h  ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 214:c/core_cm3.h  **** #else
 215:c/core_cm3.h  ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 216:c/core_cm3.h  **** #endif
 217:c/core_cm3.h  **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 218:c/core_cm3.h  **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 219:c/core_cm3.h  **** 
 220:c/core_cm3.h  **** /* following defines should be used for structure members */
 221:c/core_cm3.h  **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 222:c/core_cm3.h  **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 223:c/core_cm3.h  **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 224:c/core_cm3.h  **** 
 225:c/core_cm3.h  **** /*@} end of group Cortex_M3 */
 226:c/core_cm3.h  **** 
 227:c/core_cm3.h  **** 
 228:c/core_cm3.h  **** 
 229:c/core_cm3.h  **** /*******************************************************************************
 230:c/core_cm3.h  ****  *                 Register Abstraction
 231:c/core_cm3.h  ****   Core Register contain:
 232:c/core_cm3.h  ****   - Core Register
 233:c/core_cm3.h  ****   - Core NVIC Register
 234:c/core_cm3.h  ****   - Core SCB Register
 235:c/core_cm3.h  ****   - Core SysTick Register
 236:c/core_cm3.h  ****   - Core Debug Register
 237:c/core_cm3.h  ****   - Core MPU Register
 238:c/core_cm3.h  ****  ******************************************************************************/
 239:c/core_cm3.h  **** /**
 240:c/core_cm3.h  ****   \defgroup CMSIS_core_register Defines and Type Definitions
 241:c/core_cm3.h  ****   \brief Type definitions and defines for Cortex-M processor based devices.
 242:c/core_cm3.h  **** */
 243:c/core_cm3.h  **** 
 244:c/core_cm3.h  **** /**
 245:c/core_cm3.h  ****   \ingroup    CMSIS_core_register
 246:c/core_cm3.h  ****   \defgroup   CMSIS_CORE  Status and Control Registers
 247:c/core_cm3.h  ****   \brief      Core Register type definitions.
 248:c/core_cm3.h  ****   @{
 249:c/core_cm3.h  ****  */
 250:c/core_cm3.h  **** 
 251:c/core_cm3.h  **** /**
 252:c/core_cm3.h  ****   \brief  Union type to access the Application Program Status Register (APSR).
 253:c/core_cm3.h  ****  */
 254:c/core_cm3.h  **** typedef union
 255:c/core_cm3.h  **** {
 256:c/core_cm3.h  ****   struct
 257:c/core_cm3.h  ****   {
 258:c/core_cm3.h  ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved */
 259:c/core_cm3.h  ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 260:c/core_cm3.h  ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 261:c/core_cm3.h  ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 9


 262:c/core_cm3.h  ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 263:c/core_cm3.h  ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 264:c/core_cm3.h  ****   } b;                                   /*!< Structure used for bit  access */
 265:c/core_cm3.h  ****   uint32_t w;                            /*!< Type      used for word access */
 266:c/core_cm3.h  **** } APSR_Type;
 267:c/core_cm3.h  **** 
 268:c/core_cm3.h  **** /* APSR Register Definitions */
 269:c/core_cm3.h  **** #define APSR_N_Pos                         31U                                            /*!< APSR
 270:c/core_cm3.h  **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 271:c/core_cm3.h  **** 
 272:c/core_cm3.h  **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 273:c/core_cm3.h  **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 274:c/core_cm3.h  **** 
 275:c/core_cm3.h  **** #define APSR_C_Pos                         29U                                            /*!< APSR
 276:c/core_cm3.h  **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 277:c/core_cm3.h  **** 
 278:c/core_cm3.h  **** #define APSR_V_Pos                         28U                                            /*!< APSR
 279:c/core_cm3.h  **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 280:c/core_cm3.h  **** 
 281:c/core_cm3.h  **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 282:c/core_cm3.h  **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 283:c/core_cm3.h  **** 
 284:c/core_cm3.h  **** 
 285:c/core_cm3.h  **** /**
 286:c/core_cm3.h  ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 287:c/core_cm3.h  ****  */
 288:c/core_cm3.h  **** typedef union
 289:c/core_cm3.h  **** {
 290:c/core_cm3.h  ****   struct
 291:c/core_cm3.h  ****   {
 292:c/core_cm3.h  ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 293:c/core_cm3.h  ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 294:c/core_cm3.h  ****   } b;                                   /*!< Structure used for bit  access */
 295:c/core_cm3.h  ****   uint32_t w;                            /*!< Type      used for word access */
 296:c/core_cm3.h  **** } IPSR_Type;
 297:c/core_cm3.h  **** 
 298:c/core_cm3.h  **** /* IPSR Register Definitions */
 299:c/core_cm3.h  **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 300:c/core_cm3.h  **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 301:c/core_cm3.h  **** 
 302:c/core_cm3.h  **** 
 303:c/core_cm3.h  **** /**
 304:c/core_cm3.h  ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 305:c/core_cm3.h  ****  */
 306:c/core_cm3.h  **** typedef union
 307:c/core_cm3.h  **** {
 308:c/core_cm3.h  ****   struct
 309:c/core_cm3.h  ****   {
 310:c/core_cm3.h  ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 311:c/core_cm3.h  ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 312:c/core_cm3.h  ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 313:c/core_cm3.h  ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0) */
 314:c/core_cm3.h  ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 315:c/core_cm3.h  ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 316:c/core_cm3.h  ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 317:c/core_cm3.h  ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 318:c/core_cm3.h  ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 10


 319:c/core_cm3.h  ****   } b;                                   /*!< Structure used for bit  access */
 320:c/core_cm3.h  ****   uint32_t w;                            /*!< Type      used for word access */
 321:c/core_cm3.h  **** } xPSR_Type;
 322:c/core_cm3.h  **** 
 323:c/core_cm3.h  **** /* xPSR Register Definitions */
 324:c/core_cm3.h  **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 325:c/core_cm3.h  **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 326:c/core_cm3.h  **** 
 327:c/core_cm3.h  **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 328:c/core_cm3.h  **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 329:c/core_cm3.h  **** 
 330:c/core_cm3.h  **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 331:c/core_cm3.h  **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 332:c/core_cm3.h  **** 
 333:c/core_cm3.h  **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 334:c/core_cm3.h  **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 335:c/core_cm3.h  **** 
 336:c/core_cm3.h  **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 337:c/core_cm3.h  **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 338:c/core_cm3.h  **** 
 339:c/core_cm3.h  **** #define xPSR_IT_Pos                        25U                                            /*!< xPSR
 340:c/core_cm3.h  **** #define xPSR_IT_Msk                        (3UL << xPSR_IT_Pos)                           /*!< xPSR
 341:c/core_cm3.h  **** 
 342:c/core_cm3.h  **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 343:c/core_cm3.h  **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 344:c/core_cm3.h  **** 
 345:c/core_cm3.h  **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 346:c/core_cm3.h  **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 347:c/core_cm3.h  **** 
 348:c/core_cm3.h  **** 
 349:c/core_cm3.h  **** /**
 350:c/core_cm3.h  ****   \brief  Union type to access the Control Registers (CONTROL).
 351:c/core_cm3.h  ****  */
 352:c/core_cm3.h  **** typedef union
 353:c/core_cm3.h  **** {
 354:c/core_cm3.h  ****   struct
 355:c/core_cm3.h  ****   {
 356:c/core_cm3.h  ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 357:c/core_cm3.h  ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 358:c/core_cm3.h  ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 359:c/core_cm3.h  ****   } b;                                   /*!< Structure used for bit  access */
 360:c/core_cm3.h  ****   uint32_t w;                            /*!< Type      used for word access */
 361:c/core_cm3.h  **** } CONTROL_Type;
 362:c/core_cm3.h  **** 
 363:c/core_cm3.h  **** /* CONTROL Register Definitions */
 364:c/core_cm3.h  **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 365:c/core_cm3.h  **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 366:c/core_cm3.h  **** 
 367:c/core_cm3.h  **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 368:c/core_cm3.h  **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 369:c/core_cm3.h  **** 
 370:c/core_cm3.h  **** /*@} end of group CMSIS_CORE */
 371:c/core_cm3.h  **** 
 372:c/core_cm3.h  **** 
 373:c/core_cm3.h  **** /**
 374:c/core_cm3.h  ****   \ingroup    CMSIS_core_register
 375:c/core_cm3.h  ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 11


 376:c/core_cm3.h  ****   \brief      Type definitions for the NVIC Registers
 377:c/core_cm3.h  ****   @{
 378:c/core_cm3.h  ****  */
 379:c/core_cm3.h  **** 
 380:c/core_cm3.h  **** /**
 381:c/core_cm3.h  ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 382:c/core_cm3.h  ****  */
 383:c/core_cm3.h  **** typedef struct
 384:c/core_cm3.h  **** {
 385:c/core_cm3.h  ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 386:c/core_cm3.h  ****         uint32_t RESERVED0[24U];
 387:c/core_cm3.h  ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 388:c/core_cm3.h  ****         uint32_t RSERVED1[24U];
 389:c/core_cm3.h  ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 390:c/core_cm3.h  ****         uint32_t RESERVED2[24U];
 391:c/core_cm3.h  ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 392:c/core_cm3.h  ****         uint32_t RESERVED3[24U];
 393:c/core_cm3.h  ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 394:c/core_cm3.h  ****         uint32_t RESERVED4[56U];
 395:c/core_cm3.h  ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 396:c/core_cm3.h  ****         uint32_t RESERVED5[644U];
 397:c/core_cm3.h  ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 398:c/core_cm3.h  **** }  NVIC_Type;
 399:c/core_cm3.h  **** 
 400:c/core_cm3.h  **** /* Software Triggered Interrupt Register Definitions */
 401:c/core_cm3.h  **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 402:c/core_cm3.h  **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 403:c/core_cm3.h  **** 
 404:c/core_cm3.h  **** /*@} end of group CMSIS_NVIC */
 405:c/core_cm3.h  **** 
 406:c/core_cm3.h  **** 
 407:c/core_cm3.h  **** /**
 408:c/core_cm3.h  ****   \ingroup  CMSIS_core_register
 409:c/core_cm3.h  ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 410:c/core_cm3.h  ****   \brief    Type definitions for the System Control Block Registers
 411:c/core_cm3.h  ****   @{
 412:c/core_cm3.h  ****  */
 413:c/core_cm3.h  **** 
 414:c/core_cm3.h  **** /**
 415:c/core_cm3.h  ****   \brief  Structure type to access the System Control Block (SCB).
 416:c/core_cm3.h  ****  */
 417:c/core_cm3.h  **** typedef struct
 418:c/core_cm3.h  **** {
 419:c/core_cm3.h  ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 420:c/core_cm3.h  ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 421:c/core_cm3.h  ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 422:c/core_cm3.h  ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 423:c/core_cm3.h  ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 424:c/core_cm3.h  ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 425:c/core_cm3.h  ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 426:c/core_cm3.h  ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 427:c/core_cm3.h  ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 428:c/core_cm3.h  ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 429:c/core_cm3.h  ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 430:c/core_cm3.h  ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 431:c/core_cm3.h  ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 432:c/core_cm3.h  ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 12


 433:c/core_cm3.h  ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 434:c/core_cm3.h  ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 435:c/core_cm3.h  ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 436:c/core_cm3.h  ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 437:c/core_cm3.h  ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 438:c/core_cm3.h  ****         uint32_t RESERVED0[5U];
 439:c/core_cm3.h  ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 440:c/core_cm3.h  **** } SCB_Type;
 441:c/core_cm3.h  **** 
 442:c/core_cm3.h  **** /* SCB CPUID Register Definitions */
 443:c/core_cm3.h  **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 444:c/core_cm3.h  **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 445:c/core_cm3.h  **** 
 446:c/core_cm3.h  **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 447:c/core_cm3.h  **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 448:c/core_cm3.h  **** 
 449:c/core_cm3.h  **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 450:c/core_cm3.h  **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 451:c/core_cm3.h  **** 
 452:c/core_cm3.h  **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 453:c/core_cm3.h  **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 454:c/core_cm3.h  **** 
 455:c/core_cm3.h  **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 456:c/core_cm3.h  **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 457:c/core_cm3.h  **** 
 458:c/core_cm3.h  **** /* SCB Interrupt Control State Register Definitions */
 459:c/core_cm3.h  **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 460:c/core_cm3.h  **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 461:c/core_cm3.h  **** 
 462:c/core_cm3.h  **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 463:c/core_cm3.h  **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 464:c/core_cm3.h  **** 
 465:c/core_cm3.h  **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 466:c/core_cm3.h  **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 467:c/core_cm3.h  **** 
 468:c/core_cm3.h  **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 469:c/core_cm3.h  **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 470:c/core_cm3.h  **** 
 471:c/core_cm3.h  **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 472:c/core_cm3.h  **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 473:c/core_cm3.h  **** 
 474:c/core_cm3.h  **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 475:c/core_cm3.h  **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 476:c/core_cm3.h  **** 
 477:c/core_cm3.h  **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 478:c/core_cm3.h  **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 479:c/core_cm3.h  **** 
 480:c/core_cm3.h  **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 481:c/core_cm3.h  **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 482:c/core_cm3.h  **** 
 483:c/core_cm3.h  **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 484:c/core_cm3.h  **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 485:c/core_cm3.h  **** 
 486:c/core_cm3.h  **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 487:c/core_cm3.h  **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 488:c/core_cm3.h  **** 
 489:c/core_cm3.h  **** /* SCB Vector Table Offset Register Definitions */
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 13


 490:c/core_cm3.h  **** #if (__CM3_REV < 0x0201U)                   /* core r2p1 */
 491:c/core_cm3.h  **** #define SCB_VTOR_TBLBASE_Pos               29U                                            /*!< SCB 
 492:c/core_cm3.h  **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 493:c/core_cm3.h  **** 
 494:c/core_cm3.h  **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 495:c/core_cm3.h  **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 496:c/core_cm3.h  **** #else
 497:c/core_cm3.h  **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 498:c/core_cm3.h  **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 499:c/core_cm3.h  **** #endif
 500:c/core_cm3.h  **** 
 501:c/core_cm3.h  **** /* SCB Application Interrupt and Reset Control Register Definitions */
 502:c/core_cm3.h  **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 503:c/core_cm3.h  **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 504:c/core_cm3.h  **** 
 505:c/core_cm3.h  **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 506:c/core_cm3.h  **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 507:c/core_cm3.h  **** 
 508:c/core_cm3.h  **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 509:c/core_cm3.h  **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 510:c/core_cm3.h  **** 
 511:c/core_cm3.h  **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 512:c/core_cm3.h  **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 513:c/core_cm3.h  **** 
 514:c/core_cm3.h  **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 515:c/core_cm3.h  **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 516:c/core_cm3.h  **** 
 517:c/core_cm3.h  **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 518:c/core_cm3.h  **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 519:c/core_cm3.h  **** 
 520:c/core_cm3.h  **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 521:c/core_cm3.h  **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 522:c/core_cm3.h  **** 
 523:c/core_cm3.h  **** /* SCB System Control Register Definitions */
 524:c/core_cm3.h  **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 525:c/core_cm3.h  **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 526:c/core_cm3.h  **** 
 527:c/core_cm3.h  **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 528:c/core_cm3.h  **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 529:c/core_cm3.h  **** 
 530:c/core_cm3.h  **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 531:c/core_cm3.h  **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 532:c/core_cm3.h  **** 
 533:c/core_cm3.h  **** /* SCB Configuration Control Register Definitions */
 534:c/core_cm3.h  **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 535:c/core_cm3.h  **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 536:c/core_cm3.h  **** 
 537:c/core_cm3.h  **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 538:c/core_cm3.h  **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 539:c/core_cm3.h  **** 
 540:c/core_cm3.h  **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 541:c/core_cm3.h  **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 542:c/core_cm3.h  **** 
 543:c/core_cm3.h  **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 544:c/core_cm3.h  **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 545:c/core_cm3.h  **** 
 546:c/core_cm3.h  **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 14


 547:c/core_cm3.h  **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 548:c/core_cm3.h  **** 
 549:c/core_cm3.h  **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 550:c/core_cm3.h  **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 551:c/core_cm3.h  **** 
 552:c/core_cm3.h  **** /* SCB System Handler Control and State Register Definitions */
 553:c/core_cm3.h  **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 554:c/core_cm3.h  **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 555:c/core_cm3.h  **** 
 556:c/core_cm3.h  **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 557:c/core_cm3.h  **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 558:c/core_cm3.h  **** 
 559:c/core_cm3.h  **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 560:c/core_cm3.h  **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 561:c/core_cm3.h  **** 
 562:c/core_cm3.h  **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 563:c/core_cm3.h  **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 564:c/core_cm3.h  **** 
 565:c/core_cm3.h  **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 566:c/core_cm3.h  **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 567:c/core_cm3.h  **** 
 568:c/core_cm3.h  **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 569:c/core_cm3.h  **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 570:c/core_cm3.h  **** 
 571:c/core_cm3.h  **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 572:c/core_cm3.h  **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 573:c/core_cm3.h  **** 
 574:c/core_cm3.h  **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 575:c/core_cm3.h  **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 576:c/core_cm3.h  **** 
 577:c/core_cm3.h  **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 578:c/core_cm3.h  **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 579:c/core_cm3.h  **** 
 580:c/core_cm3.h  **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 581:c/core_cm3.h  **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 582:c/core_cm3.h  **** 
 583:c/core_cm3.h  **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 584:c/core_cm3.h  **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 585:c/core_cm3.h  **** 
 586:c/core_cm3.h  **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 587:c/core_cm3.h  **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 588:c/core_cm3.h  **** 
 589:c/core_cm3.h  **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 590:c/core_cm3.h  **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 591:c/core_cm3.h  **** 
 592:c/core_cm3.h  **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 593:c/core_cm3.h  **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 594:c/core_cm3.h  **** 
 595:c/core_cm3.h  **** /* SCB Configurable Fault Status Register Definitions */
 596:c/core_cm3.h  **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 597:c/core_cm3.h  **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 598:c/core_cm3.h  **** 
 599:c/core_cm3.h  **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 600:c/core_cm3.h  **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 601:c/core_cm3.h  **** 
 602:c/core_cm3.h  **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 603:c/core_cm3.h  **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 15


 604:c/core_cm3.h  **** 
 605:c/core_cm3.h  **** /* SCB Hard Fault Status Register Definitions */
 606:c/core_cm3.h  **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 607:c/core_cm3.h  **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 608:c/core_cm3.h  **** 
 609:c/core_cm3.h  **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 610:c/core_cm3.h  **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 611:c/core_cm3.h  **** 
 612:c/core_cm3.h  **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 613:c/core_cm3.h  **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 614:c/core_cm3.h  **** 
 615:c/core_cm3.h  **** /* SCB Debug Fault Status Register Definitions */
 616:c/core_cm3.h  **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 617:c/core_cm3.h  **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 618:c/core_cm3.h  **** 
 619:c/core_cm3.h  **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 620:c/core_cm3.h  **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 621:c/core_cm3.h  **** 
 622:c/core_cm3.h  **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 623:c/core_cm3.h  **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 624:c/core_cm3.h  **** 
 625:c/core_cm3.h  **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 626:c/core_cm3.h  **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 627:c/core_cm3.h  **** 
 628:c/core_cm3.h  **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 629:c/core_cm3.h  **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 630:c/core_cm3.h  **** 
 631:c/core_cm3.h  **** /*@} end of group CMSIS_SCB */
 632:c/core_cm3.h  **** 
 633:c/core_cm3.h  **** 
 634:c/core_cm3.h  **** /**
 635:c/core_cm3.h  ****   \ingroup  CMSIS_core_register
 636:c/core_cm3.h  ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 637:c/core_cm3.h  ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 638:c/core_cm3.h  ****   @{
 639:c/core_cm3.h  ****  */
 640:c/core_cm3.h  **** 
 641:c/core_cm3.h  **** /**
 642:c/core_cm3.h  ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 643:c/core_cm3.h  ****  */
 644:c/core_cm3.h  **** typedef struct
 645:c/core_cm3.h  **** {
 646:c/core_cm3.h  ****         uint32_t RESERVED0[1U];
 647:c/core_cm3.h  ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 648:c/core_cm3.h  **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200U))
 649:c/core_cm3.h  ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 650:c/core_cm3.h  **** #else
 651:c/core_cm3.h  ****         uint32_t RESERVED1[1U];
 652:c/core_cm3.h  **** #endif
 653:c/core_cm3.h  **** } SCnSCB_Type;
 654:c/core_cm3.h  **** 
 655:c/core_cm3.h  **** /* Interrupt Controller Type Register Definitions */
 656:c/core_cm3.h  **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 657:c/core_cm3.h  **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 658:c/core_cm3.h  **** 
 659:c/core_cm3.h  **** /* Auxiliary Control Register Definitions */
 660:c/core_cm3.h  **** 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 16


 661:c/core_cm3.h  **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 662:c/core_cm3.h  **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 663:c/core_cm3.h  **** 
 664:c/core_cm3.h  **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 665:c/core_cm3.h  **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 666:c/core_cm3.h  **** 
 667:c/core_cm3.h  **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 668:c/core_cm3.h  **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 669:c/core_cm3.h  **** 
 670:c/core_cm3.h  **** /*@} end of group CMSIS_SCnotSCB */
 671:c/core_cm3.h  **** 
 672:c/core_cm3.h  **** 
 673:c/core_cm3.h  **** /**
 674:c/core_cm3.h  ****   \ingroup  CMSIS_core_register
 675:c/core_cm3.h  ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 676:c/core_cm3.h  ****   \brief    Type definitions for the System Timer Registers.
 677:c/core_cm3.h  ****   @{
 678:c/core_cm3.h  ****  */
 679:c/core_cm3.h  **** 
 680:c/core_cm3.h  **** /**
 681:c/core_cm3.h  ****   \brief  Structure type to access the System Timer (SysTick).
 682:c/core_cm3.h  ****  */
 683:c/core_cm3.h  **** typedef struct
 684:c/core_cm3.h  **** {
 685:c/core_cm3.h  ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 686:c/core_cm3.h  ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 687:c/core_cm3.h  ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 688:c/core_cm3.h  ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 689:c/core_cm3.h  **** } SysTick_Type;
 690:c/core_cm3.h  **** 
 691:c/core_cm3.h  **** /* SysTick Control / Status Register Definitions */
 692:c/core_cm3.h  **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 693:c/core_cm3.h  **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 694:c/core_cm3.h  **** 
 695:c/core_cm3.h  **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 696:c/core_cm3.h  **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 697:c/core_cm3.h  **** 
 698:c/core_cm3.h  **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 699:c/core_cm3.h  **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 700:c/core_cm3.h  **** 
 701:c/core_cm3.h  **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 702:c/core_cm3.h  **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 703:c/core_cm3.h  **** 
 704:c/core_cm3.h  **** /* SysTick Reload Register Definitions */
 705:c/core_cm3.h  **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 706:c/core_cm3.h  **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 707:c/core_cm3.h  **** 
 708:c/core_cm3.h  **** /* SysTick Current Register Definitions */
 709:c/core_cm3.h  **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 710:c/core_cm3.h  **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 711:c/core_cm3.h  **** 
 712:c/core_cm3.h  **** /* SysTick Calibration Register Definitions */
 713:c/core_cm3.h  **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 714:c/core_cm3.h  **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 715:c/core_cm3.h  **** 
 716:c/core_cm3.h  **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 717:c/core_cm3.h  **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 17


 718:c/core_cm3.h  **** 
 719:c/core_cm3.h  **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 720:c/core_cm3.h  **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 721:c/core_cm3.h  **** 
 722:c/core_cm3.h  **** /*@} end of group CMSIS_SysTick */
 723:c/core_cm3.h  **** 
 724:c/core_cm3.h  **** 
 725:c/core_cm3.h  **** /**
 726:c/core_cm3.h  ****   \ingroup  CMSIS_core_register
 727:c/core_cm3.h  ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 728:c/core_cm3.h  ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 729:c/core_cm3.h  ****   @{
 730:c/core_cm3.h  ****  */
 731:c/core_cm3.h  **** 
 732:c/core_cm3.h  **** /**
 733:c/core_cm3.h  ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 734:c/core_cm3.h  ****  */
 735:c/core_cm3.h  **** typedef struct
 736:c/core_cm3.h  **** {
 737:c/core_cm3.h  ****   __OM  union
 738:c/core_cm3.h  ****   {
 739:c/core_cm3.h  ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 740:c/core_cm3.h  ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 741:c/core_cm3.h  ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 742:c/core_cm3.h  ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 743:c/core_cm3.h  ****         uint32_t RESERVED0[864U];
 744:c/core_cm3.h  ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 745:c/core_cm3.h  ****         uint32_t RESERVED1[15U];
 746:c/core_cm3.h  ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 747:c/core_cm3.h  ****         uint32_t RESERVED2[15U];
 748:c/core_cm3.h  ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 749:c/core_cm3.h  ****         uint32_t RESERVED3[29U];
 750:c/core_cm3.h  ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 751:c/core_cm3.h  ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 752:c/core_cm3.h  ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 753:c/core_cm3.h  ****         uint32_t RESERVED4[43U];
 754:c/core_cm3.h  ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 755:c/core_cm3.h  ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 756:c/core_cm3.h  ****         uint32_t RESERVED5[6U];
 757:c/core_cm3.h  ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 758:c/core_cm3.h  ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 759:c/core_cm3.h  ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 760:c/core_cm3.h  ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 761:c/core_cm3.h  ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 762:c/core_cm3.h  ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 763:c/core_cm3.h  ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 764:c/core_cm3.h  ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 765:c/core_cm3.h  ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 766:c/core_cm3.h  ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 767:c/core_cm3.h  ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 768:c/core_cm3.h  ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 769:c/core_cm3.h  **** } ITM_Type;
 770:c/core_cm3.h  **** 
 771:c/core_cm3.h  **** /* ITM Trace Privilege Register Definitions */
 772:c/core_cm3.h  **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 773:c/core_cm3.h  **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM 
 774:c/core_cm3.h  **** 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 18


 775:c/core_cm3.h  **** /* ITM Trace Control Register Definitions */
 776:c/core_cm3.h  **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 777:c/core_cm3.h  **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 778:c/core_cm3.h  **** 
 779:c/core_cm3.h  **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 780:c/core_cm3.h  **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 781:c/core_cm3.h  **** 
 782:c/core_cm3.h  **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 783:c/core_cm3.h  **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 784:c/core_cm3.h  **** 
 785:c/core_cm3.h  **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 786:c/core_cm3.h  **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 787:c/core_cm3.h  **** 
 788:c/core_cm3.h  **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 789:c/core_cm3.h  **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 790:c/core_cm3.h  **** 
 791:c/core_cm3.h  **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 792:c/core_cm3.h  **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 793:c/core_cm3.h  **** 
 794:c/core_cm3.h  **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 795:c/core_cm3.h  **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 796:c/core_cm3.h  **** 
 797:c/core_cm3.h  **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 798:c/core_cm3.h  **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 799:c/core_cm3.h  **** 
 800:c/core_cm3.h  **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 801:c/core_cm3.h  **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 802:c/core_cm3.h  **** 
 803:c/core_cm3.h  **** /* ITM Integration Write Register Definitions */
 804:c/core_cm3.h  **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 805:c/core_cm3.h  **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 806:c/core_cm3.h  **** 
 807:c/core_cm3.h  **** /* ITM Integration Read Register Definitions */
 808:c/core_cm3.h  **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 809:c/core_cm3.h  **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 810:c/core_cm3.h  **** 
 811:c/core_cm3.h  **** /* ITM Integration Mode Control Register Definitions */
 812:c/core_cm3.h  **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 813:c/core_cm3.h  **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 814:c/core_cm3.h  **** 
 815:c/core_cm3.h  **** /* ITM Lock Status Register Definitions */
 816:c/core_cm3.h  **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 817:c/core_cm3.h  **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 818:c/core_cm3.h  **** 
 819:c/core_cm3.h  **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 820:c/core_cm3.h  **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 821:c/core_cm3.h  **** 
 822:c/core_cm3.h  **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 823:c/core_cm3.h  **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 824:c/core_cm3.h  **** 
 825:c/core_cm3.h  **** /*@}*/ /* end of group CMSIS_ITM */
 826:c/core_cm3.h  **** 
 827:c/core_cm3.h  **** 
 828:c/core_cm3.h  **** /**
 829:c/core_cm3.h  ****   \ingroup  CMSIS_core_register
 830:c/core_cm3.h  ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 831:c/core_cm3.h  ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 19


 832:c/core_cm3.h  ****   @{
 833:c/core_cm3.h  ****  */
 834:c/core_cm3.h  **** 
 835:c/core_cm3.h  **** /**
 836:c/core_cm3.h  ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 837:c/core_cm3.h  ****  */
 838:c/core_cm3.h  **** typedef struct
 839:c/core_cm3.h  **** {
 840:c/core_cm3.h  ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 841:c/core_cm3.h  ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 842:c/core_cm3.h  ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 843:c/core_cm3.h  ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 844:c/core_cm3.h  ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 845:c/core_cm3.h  ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 846:c/core_cm3.h  ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 847:c/core_cm3.h  ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 848:c/core_cm3.h  ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 849:c/core_cm3.h  ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 850:c/core_cm3.h  ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 851:c/core_cm3.h  ****         uint32_t RESERVED0[1U];
 852:c/core_cm3.h  ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 853:c/core_cm3.h  ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 854:c/core_cm3.h  ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 855:c/core_cm3.h  ****         uint32_t RESERVED1[1U];
 856:c/core_cm3.h  ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 857:c/core_cm3.h  ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 858:c/core_cm3.h  ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 859:c/core_cm3.h  ****         uint32_t RESERVED2[1U];
 860:c/core_cm3.h  ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 861:c/core_cm3.h  ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 862:c/core_cm3.h  ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 863:c/core_cm3.h  **** } DWT_Type;
 864:c/core_cm3.h  **** 
 865:c/core_cm3.h  **** /* DWT Control Register Definitions */
 866:c/core_cm3.h  **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 867:c/core_cm3.h  **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 868:c/core_cm3.h  **** 
 869:c/core_cm3.h  **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 870:c/core_cm3.h  **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 871:c/core_cm3.h  **** 
 872:c/core_cm3.h  **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 873:c/core_cm3.h  **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 874:c/core_cm3.h  **** 
 875:c/core_cm3.h  **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 876:c/core_cm3.h  **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 877:c/core_cm3.h  **** 
 878:c/core_cm3.h  **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 879:c/core_cm3.h  **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 880:c/core_cm3.h  **** 
 881:c/core_cm3.h  **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 882:c/core_cm3.h  **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 883:c/core_cm3.h  **** 
 884:c/core_cm3.h  **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 885:c/core_cm3.h  **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 886:c/core_cm3.h  **** 
 887:c/core_cm3.h  **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 888:c/core_cm3.h  **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 20


 889:c/core_cm3.h  **** 
 890:c/core_cm3.h  **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 891:c/core_cm3.h  **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 892:c/core_cm3.h  **** 
 893:c/core_cm3.h  **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 894:c/core_cm3.h  **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 895:c/core_cm3.h  **** 
 896:c/core_cm3.h  **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 897:c/core_cm3.h  **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 898:c/core_cm3.h  **** 
 899:c/core_cm3.h  **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 900:c/core_cm3.h  **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 901:c/core_cm3.h  **** 
 902:c/core_cm3.h  **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 903:c/core_cm3.h  **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 904:c/core_cm3.h  **** 
 905:c/core_cm3.h  **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 906:c/core_cm3.h  **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 907:c/core_cm3.h  **** 
 908:c/core_cm3.h  **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 909:c/core_cm3.h  **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 910:c/core_cm3.h  **** 
 911:c/core_cm3.h  **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 912:c/core_cm3.h  **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 913:c/core_cm3.h  **** 
 914:c/core_cm3.h  **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 915:c/core_cm3.h  **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 916:c/core_cm3.h  **** 
 917:c/core_cm3.h  **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 918:c/core_cm3.h  **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 919:c/core_cm3.h  **** 
 920:c/core_cm3.h  **** /* DWT CPI Count Register Definitions */
 921:c/core_cm3.h  **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 922:c/core_cm3.h  **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 923:c/core_cm3.h  **** 
 924:c/core_cm3.h  **** /* DWT Exception Overhead Count Register Definitions */
 925:c/core_cm3.h  **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
 926:c/core_cm3.h  **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
 927:c/core_cm3.h  **** 
 928:c/core_cm3.h  **** /* DWT Sleep Count Register Definitions */
 929:c/core_cm3.h  **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
 930:c/core_cm3.h  **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
 931:c/core_cm3.h  **** 
 932:c/core_cm3.h  **** /* DWT LSU Count Register Definitions */
 933:c/core_cm3.h  **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
 934:c/core_cm3.h  **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
 935:c/core_cm3.h  **** 
 936:c/core_cm3.h  **** /* DWT Folded-instruction Count Register Definitions */
 937:c/core_cm3.h  **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
 938:c/core_cm3.h  **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
 939:c/core_cm3.h  **** 
 940:c/core_cm3.h  **** /* DWT Comparator Mask Register Definitions */
 941:c/core_cm3.h  **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
 942:c/core_cm3.h  **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
 943:c/core_cm3.h  **** 
 944:c/core_cm3.h  **** /* DWT Comparator Function Register Definitions */
 945:c/core_cm3.h  **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 21


 946:c/core_cm3.h  **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
 947:c/core_cm3.h  **** 
 948:c/core_cm3.h  **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
 949:c/core_cm3.h  **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
 950:c/core_cm3.h  **** 
 951:c/core_cm3.h  **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
 952:c/core_cm3.h  **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
 953:c/core_cm3.h  **** 
 954:c/core_cm3.h  **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
 955:c/core_cm3.h  **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
 956:c/core_cm3.h  **** 
 957:c/core_cm3.h  **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
 958:c/core_cm3.h  **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
 959:c/core_cm3.h  **** 
 960:c/core_cm3.h  **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
 961:c/core_cm3.h  **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
 962:c/core_cm3.h  **** 
 963:c/core_cm3.h  **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
 964:c/core_cm3.h  **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
 965:c/core_cm3.h  **** 
 966:c/core_cm3.h  **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
 967:c/core_cm3.h  **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
 968:c/core_cm3.h  **** 
 969:c/core_cm3.h  **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
 970:c/core_cm3.h  **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
 971:c/core_cm3.h  **** 
 972:c/core_cm3.h  **** /*@}*/ /* end of group CMSIS_DWT */
 973:c/core_cm3.h  **** 
 974:c/core_cm3.h  **** 
 975:c/core_cm3.h  **** /**
 976:c/core_cm3.h  ****   \ingroup  CMSIS_core_register
 977:c/core_cm3.h  ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
 978:c/core_cm3.h  ****   \brief    Type definitions for the Trace Port Interface (TPI)
 979:c/core_cm3.h  ****   @{
 980:c/core_cm3.h  ****  */
 981:c/core_cm3.h  **** 
 982:c/core_cm3.h  **** /**
 983:c/core_cm3.h  ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
 984:c/core_cm3.h  ****  */
 985:c/core_cm3.h  **** typedef struct
 986:c/core_cm3.h  **** {
 987:c/core_cm3.h  ****   __IOM uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
 988:c/core_cm3.h  ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
 989:c/core_cm3.h  ****         uint32_t RESERVED0[2U];
 990:c/core_cm3.h  ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
 991:c/core_cm3.h  ****         uint32_t RESERVED1[55U];
 992:c/core_cm3.h  ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
 993:c/core_cm3.h  ****         uint32_t RESERVED2[131U];
 994:c/core_cm3.h  ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
 995:c/core_cm3.h  ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
 996:c/core_cm3.h  ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
 997:c/core_cm3.h  ****         uint32_t RESERVED3[759U];
 998:c/core_cm3.h  ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER */
 999:c/core_cm3.h  ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1000:c/core_cm3.h  ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1001:c/core_cm3.h  ****         uint32_t RESERVED4[1U];
1002:c/core_cm3.h  ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 22


1003:c/core_cm3.h  ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1004:c/core_cm3.h  ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1005:c/core_cm3.h  ****         uint32_t RESERVED5[39U];
1006:c/core_cm3.h  ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1007:c/core_cm3.h  ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1008:c/core_cm3.h  ****         uint32_t RESERVED7[8U];
1009:c/core_cm3.h  ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1010:c/core_cm3.h  ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1011:c/core_cm3.h  **** } TPI_Type;
1012:c/core_cm3.h  **** 
1013:c/core_cm3.h  **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1014:c/core_cm3.h  **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1015:c/core_cm3.h  **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1016:c/core_cm3.h  **** 
1017:c/core_cm3.h  **** /* TPI Selected Pin Protocol Register Definitions */
1018:c/core_cm3.h  **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1019:c/core_cm3.h  **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1020:c/core_cm3.h  **** 
1021:c/core_cm3.h  **** /* TPI Formatter and Flush Status Register Definitions */
1022:c/core_cm3.h  **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1023:c/core_cm3.h  **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1024:c/core_cm3.h  **** 
1025:c/core_cm3.h  **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1026:c/core_cm3.h  **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1027:c/core_cm3.h  **** 
1028:c/core_cm3.h  **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1029:c/core_cm3.h  **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1030:c/core_cm3.h  **** 
1031:c/core_cm3.h  **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1032:c/core_cm3.h  **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1033:c/core_cm3.h  **** 
1034:c/core_cm3.h  **** /* TPI Formatter and Flush Control Register Definitions */
1035:c/core_cm3.h  **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1036:c/core_cm3.h  **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1037:c/core_cm3.h  **** 
1038:c/core_cm3.h  **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1039:c/core_cm3.h  **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1040:c/core_cm3.h  **** 
1041:c/core_cm3.h  **** /* TPI TRIGGER Register Definitions */
1042:c/core_cm3.h  **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1043:c/core_cm3.h  **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1044:c/core_cm3.h  **** 
1045:c/core_cm3.h  **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1046:c/core_cm3.h  **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1047:c/core_cm3.h  **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1048:c/core_cm3.h  **** 
1049:c/core_cm3.h  **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1050:c/core_cm3.h  **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1051:c/core_cm3.h  **** 
1052:c/core_cm3.h  **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1053:c/core_cm3.h  **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1054:c/core_cm3.h  **** 
1055:c/core_cm3.h  **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1056:c/core_cm3.h  **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1057:c/core_cm3.h  **** 
1058:c/core_cm3.h  **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1059:c/core_cm3.h  **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 23


1060:c/core_cm3.h  **** 
1061:c/core_cm3.h  **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1062:c/core_cm3.h  **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1063:c/core_cm3.h  **** 
1064:c/core_cm3.h  **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1065:c/core_cm3.h  **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1066:c/core_cm3.h  **** 
1067:c/core_cm3.h  **** /* TPI ITATBCTR2 Register Definitions */
1068:c/core_cm3.h  **** #define TPI_ITATBCTR2_ATREADY_Pos           0U                                         /*!< TPI ITA
1069:c/core_cm3.h  **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITA
1070:c/core_cm3.h  **** 
1071:c/core_cm3.h  **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1072:c/core_cm3.h  **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1073:c/core_cm3.h  **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1074:c/core_cm3.h  **** 
1075:c/core_cm3.h  **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1076:c/core_cm3.h  **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1077:c/core_cm3.h  **** 
1078:c/core_cm3.h  **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1079:c/core_cm3.h  **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1080:c/core_cm3.h  **** 
1081:c/core_cm3.h  **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1082:c/core_cm3.h  **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1083:c/core_cm3.h  **** 
1084:c/core_cm3.h  **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1085:c/core_cm3.h  **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1086:c/core_cm3.h  **** 
1087:c/core_cm3.h  **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1088:c/core_cm3.h  **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1089:c/core_cm3.h  **** 
1090:c/core_cm3.h  **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1091:c/core_cm3.h  **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1092:c/core_cm3.h  **** 
1093:c/core_cm3.h  **** /* TPI ITATBCTR0 Register Definitions */
1094:c/core_cm3.h  **** #define TPI_ITATBCTR0_ATREADY_Pos           0U                                         /*!< TPI ITA
1095:c/core_cm3.h  **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITA
1096:c/core_cm3.h  **** 
1097:c/core_cm3.h  **** /* TPI Integration Mode Control Register Definitions */
1098:c/core_cm3.h  **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1099:c/core_cm3.h  **** #define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1100:c/core_cm3.h  **** 
1101:c/core_cm3.h  **** /* TPI DEVID Register Definitions */
1102:c/core_cm3.h  **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1103:c/core_cm3.h  **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1104:c/core_cm3.h  **** 
1105:c/core_cm3.h  **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1106:c/core_cm3.h  **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1107:c/core_cm3.h  **** 
1108:c/core_cm3.h  **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1109:c/core_cm3.h  **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1110:c/core_cm3.h  **** 
1111:c/core_cm3.h  **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1112:c/core_cm3.h  **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1113:c/core_cm3.h  **** 
1114:c/core_cm3.h  **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1115:c/core_cm3.h  **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1116:c/core_cm3.h  **** 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 24


1117:c/core_cm3.h  **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1118:c/core_cm3.h  **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1119:c/core_cm3.h  **** 
1120:c/core_cm3.h  **** /* TPI DEVTYPE Register Definitions */
1121:c/core_cm3.h  **** #define TPI_DEVTYPE_MajorType_Pos           4U                                         /*!< TPI DEV
1122:c/core_cm3.h  **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1123:c/core_cm3.h  **** 
1124:c/core_cm3.h  **** #define TPI_DEVTYPE_SubType_Pos             0U                                         /*!< TPI DEV
1125:c/core_cm3.h  **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1126:c/core_cm3.h  **** 
1127:c/core_cm3.h  **** /*@}*/ /* end of group CMSIS_TPI */
1128:c/core_cm3.h  **** 
1129:c/core_cm3.h  **** 
1130:c/core_cm3.h  **** #if (__MPU_PRESENT == 1U)
1131:c/core_cm3.h  **** /**
1132:c/core_cm3.h  ****   \ingroup  CMSIS_core_register
1133:c/core_cm3.h  ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1134:c/core_cm3.h  ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1135:c/core_cm3.h  ****   @{
1136:c/core_cm3.h  ****  */
1137:c/core_cm3.h  **** 
1138:c/core_cm3.h  **** /**
1139:c/core_cm3.h  ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1140:c/core_cm3.h  ****  */
1141:c/core_cm3.h  **** typedef struct
1142:c/core_cm3.h  **** {
1143:c/core_cm3.h  ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1144:c/core_cm3.h  ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1145:c/core_cm3.h  ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1146:c/core_cm3.h  ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1147:c/core_cm3.h  ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1148:c/core_cm3.h  ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1149:c/core_cm3.h  ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1150:c/core_cm3.h  ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1151:c/core_cm3.h  ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1152:c/core_cm3.h  ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1153:c/core_cm3.h  ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1154:c/core_cm3.h  **** } MPU_Type;
1155:c/core_cm3.h  **** 
1156:c/core_cm3.h  **** /* MPU Type Register Definitions */
1157:c/core_cm3.h  **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1158:c/core_cm3.h  **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1159:c/core_cm3.h  **** 
1160:c/core_cm3.h  **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1161:c/core_cm3.h  **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1162:c/core_cm3.h  **** 
1163:c/core_cm3.h  **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1164:c/core_cm3.h  **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1165:c/core_cm3.h  **** 
1166:c/core_cm3.h  **** /* MPU Control Register Definitions */
1167:c/core_cm3.h  **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1168:c/core_cm3.h  **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1169:c/core_cm3.h  **** 
1170:c/core_cm3.h  **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1171:c/core_cm3.h  **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1172:c/core_cm3.h  **** 
1173:c/core_cm3.h  **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 25


1174:c/core_cm3.h  **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1175:c/core_cm3.h  **** 
1176:c/core_cm3.h  **** /* MPU Region Number Register Definitions */
1177:c/core_cm3.h  **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1178:c/core_cm3.h  **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1179:c/core_cm3.h  **** 
1180:c/core_cm3.h  **** /* MPU Region Base Address Register Definitions */
1181:c/core_cm3.h  **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1182:c/core_cm3.h  **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1183:c/core_cm3.h  **** 
1184:c/core_cm3.h  **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1185:c/core_cm3.h  **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1186:c/core_cm3.h  **** 
1187:c/core_cm3.h  **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1188:c/core_cm3.h  **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1189:c/core_cm3.h  **** 
1190:c/core_cm3.h  **** /* MPU Region Attribute and Size Register Definitions */
1191:c/core_cm3.h  **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1192:c/core_cm3.h  **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1193:c/core_cm3.h  **** 
1194:c/core_cm3.h  **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1195:c/core_cm3.h  **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1196:c/core_cm3.h  **** 
1197:c/core_cm3.h  **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1198:c/core_cm3.h  **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1199:c/core_cm3.h  **** 
1200:c/core_cm3.h  **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1201:c/core_cm3.h  **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1202:c/core_cm3.h  **** 
1203:c/core_cm3.h  **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1204:c/core_cm3.h  **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1205:c/core_cm3.h  **** 
1206:c/core_cm3.h  **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1207:c/core_cm3.h  **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1208:c/core_cm3.h  **** 
1209:c/core_cm3.h  **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1210:c/core_cm3.h  **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1211:c/core_cm3.h  **** 
1212:c/core_cm3.h  **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1213:c/core_cm3.h  **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1214:c/core_cm3.h  **** 
1215:c/core_cm3.h  **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1216:c/core_cm3.h  **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1217:c/core_cm3.h  **** 
1218:c/core_cm3.h  **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1219:c/core_cm3.h  **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1220:c/core_cm3.h  **** 
1221:c/core_cm3.h  **** /*@} end of group CMSIS_MPU */
1222:c/core_cm3.h  **** #endif
1223:c/core_cm3.h  **** 
1224:c/core_cm3.h  **** 
1225:c/core_cm3.h  **** /**
1226:c/core_cm3.h  ****   \ingroup  CMSIS_core_register
1227:c/core_cm3.h  ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1228:c/core_cm3.h  ****   \brief    Type definitions for the Core Debug Registers
1229:c/core_cm3.h  ****   @{
1230:c/core_cm3.h  ****  */
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 26


1231:c/core_cm3.h  **** 
1232:c/core_cm3.h  **** /**
1233:c/core_cm3.h  ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1234:c/core_cm3.h  ****  */
1235:c/core_cm3.h  **** typedef struct
1236:c/core_cm3.h  **** {
1237:c/core_cm3.h  ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1238:c/core_cm3.h  ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1239:c/core_cm3.h  ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1240:c/core_cm3.h  ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1241:c/core_cm3.h  **** } CoreDebug_Type;
1242:c/core_cm3.h  **** 
1243:c/core_cm3.h  **** /* Debug Halting Control and Status Register Definitions */
1244:c/core_cm3.h  **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1245:c/core_cm3.h  **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1246:c/core_cm3.h  **** 
1247:c/core_cm3.h  **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1248:c/core_cm3.h  **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1249:c/core_cm3.h  **** 
1250:c/core_cm3.h  **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1251:c/core_cm3.h  **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1252:c/core_cm3.h  **** 
1253:c/core_cm3.h  **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1254:c/core_cm3.h  **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1255:c/core_cm3.h  **** 
1256:c/core_cm3.h  **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1257:c/core_cm3.h  **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1258:c/core_cm3.h  **** 
1259:c/core_cm3.h  **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1260:c/core_cm3.h  **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1261:c/core_cm3.h  **** 
1262:c/core_cm3.h  **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1263:c/core_cm3.h  **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1264:c/core_cm3.h  **** 
1265:c/core_cm3.h  **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1266:c/core_cm3.h  **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1267:c/core_cm3.h  **** 
1268:c/core_cm3.h  **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1269:c/core_cm3.h  **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1270:c/core_cm3.h  **** 
1271:c/core_cm3.h  **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1272:c/core_cm3.h  **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1273:c/core_cm3.h  **** 
1274:c/core_cm3.h  **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1275:c/core_cm3.h  **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1276:c/core_cm3.h  **** 
1277:c/core_cm3.h  **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1278:c/core_cm3.h  **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1279:c/core_cm3.h  **** 
1280:c/core_cm3.h  **** /* Debug Core Register Selector Register Definitions */
1281:c/core_cm3.h  **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1282:c/core_cm3.h  **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1283:c/core_cm3.h  **** 
1284:c/core_cm3.h  **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1285:c/core_cm3.h  **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1286:c/core_cm3.h  **** 
1287:c/core_cm3.h  **** /* Debug Exception and Monitor Control Register Definitions */
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 27


1288:c/core_cm3.h  **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1289:c/core_cm3.h  **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1290:c/core_cm3.h  **** 
1291:c/core_cm3.h  **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1292:c/core_cm3.h  **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1293:c/core_cm3.h  **** 
1294:c/core_cm3.h  **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1295:c/core_cm3.h  **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1296:c/core_cm3.h  **** 
1297:c/core_cm3.h  **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1298:c/core_cm3.h  **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1299:c/core_cm3.h  **** 
1300:c/core_cm3.h  **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1301:c/core_cm3.h  **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1302:c/core_cm3.h  **** 
1303:c/core_cm3.h  **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1304:c/core_cm3.h  **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1305:c/core_cm3.h  **** 
1306:c/core_cm3.h  **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1307:c/core_cm3.h  **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1308:c/core_cm3.h  **** 
1309:c/core_cm3.h  **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1310:c/core_cm3.h  **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1311:c/core_cm3.h  **** 
1312:c/core_cm3.h  **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1313:c/core_cm3.h  **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1314:c/core_cm3.h  **** 
1315:c/core_cm3.h  **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1316:c/core_cm3.h  **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1317:c/core_cm3.h  **** 
1318:c/core_cm3.h  **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1319:c/core_cm3.h  **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1320:c/core_cm3.h  **** 
1321:c/core_cm3.h  **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1322:c/core_cm3.h  **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1323:c/core_cm3.h  **** 
1324:c/core_cm3.h  **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1325:c/core_cm3.h  **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1326:c/core_cm3.h  **** 
1327:c/core_cm3.h  **** /*@} end of group CMSIS_CoreDebug */
1328:c/core_cm3.h  **** 
1329:c/core_cm3.h  **** 
1330:c/core_cm3.h  **** /**
1331:c/core_cm3.h  ****   \ingroup    CMSIS_core_register
1332:c/core_cm3.h  ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1333:c/core_cm3.h  ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1334:c/core_cm3.h  ****   @{
1335:c/core_cm3.h  ****  */
1336:c/core_cm3.h  **** 
1337:c/core_cm3.h  **** /**
1338:c/core_cm3.h  ****   \brief   Mask and shift a bit field value for use in a register bit range.
1339:c/core_cm3.h  ****   \param[in] field  Name of the register bit field.
1340:c/core_cm3.h  ****   \param[in] value  Value of the bit field.
1341:c/core_cm3.h  ****   \return           Masked and shifted value.
1342:c/core_cm3.h  **** */
1343:c/core_cm3.h  **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
1344:c/core_cm3.h  **** 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 28


1345:c/core_cm3.h  **** /**
1346:c/core_cm3.h  ****   \brief     Mask and shift a register value to extract a bit filed value.
1347:c/core_cm3.h  ****   \param[in] field  Name of the register bit field.
1348:c/core_cm3.h  ****   \param[in] value  Value of register.
1349:c/core_cm3.h  ****   \return           Masked and shifted bit field value.
1350:c/core_cm3.h  **** */
1351:c/core_cm3.h  **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
1352:c/core_cm3.h  **** 
1353:c/core_cm3.h  **** /*@} end of group CMSIS_core_bitfield */
1354:c/core_cm3.h  **** 
1355:c/core_cm3.h  **** 
1356:c/core_cm3.h  **** /**
1357:c/core_cm3.h  ****   \ingroup    CMSIS_core_register
1358:c/core_cm3.h  ****   \defgroup   CMSIS_core_base     Core Definitions
1359:c/core_cm3.h  ****   \brief      Definitions for base addresses, unions, and structures.
1360:c/core_cm3.h  ****   @{
1361:c/core_cm3.h  ****  */
1362:c/core_cm3.h  **** 
1363:c/core_cm3.h  **** /* Memory mapping of Cortex-M3 Hardware */
1364:c/core_cm3.h  **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1365:c/core_cm3.h  **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1366:c/core_cm3.h  **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1367:c/core_cm3.h  **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1368:c/core_cm3.h  **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1369:c/core_cm3.h  **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1370:c/core_cm3.h  **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1371:c/core_cm3.h  **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1372:c/core_cm3.h  **** 
1373:c/core_cm3.h  **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1374:c/core_cm3.h  **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1375:c/core_cm3.h  **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1376:c/core_cm3.h  **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1377:c/core_cm3.h  **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1378:c/core_cm3.h  **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1379:c/core_cm3.h  **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1380:c/core_cm3.h  **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1381:c/core_cm3.h  **** 
1382:c/core_cm3.h  **** #if (__MPU_PRESENT == 1U)
1383:c/core_cm3.h  ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1384:c/core_cm3.h  ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1385:c/core_cm3.h  **** #endif
1386:c/core_cm3.h  **** 
1387:c/core_cm3.h  **** /*@} */
1388:c/core_cm3.h  **** 
1389:c/core_cm3.h  **** 
1390:c/core_cm3.h  **** 
1391:c/core_cm3.h  **** /*******************************************************************************
1392:c/core_cm3.h  ****  *                Hardware Abstraction Layer
1393:c/core_cm3.h  ****   Core Function Interface contains:
1394:c/core_cm3.h  ****   - Core NVIC Functions
1395:c/core_cm3.h  ****   - Core SysTick Functions
1396:c/core_cm3.h  ****   - Core Debug Functions
1397:c/core_cm3.h  ****   - Core Register Access Functions
1398:c/core_cm3.h  ****  ******************************************************************************/
1399:c/core_cm3.h  **** /**
1400:c/core_cm3.h  ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1401:c/core_cm3.h  **** */
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 29


1402:c/core_cm3.h  **** 
1403:c/core_cm3.h  **** 
1404:c/core_cm3.h  **** 
1405:c/core_cm3.h  **** /* ##########################   NVIC functions  #################################### */
1406:c/core_cm3.h  **** /**
1407:c/core_cm3.h  ****   \ingroup  CMSIS_Core_FunctionInterface
1408:c/core_cm3.h  ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1409:c/core_cm3.h  ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1410:c/core_cm3.h  ****   @{
1411:c/core_cm3.h  ****  */
1412:c/core_cm3.h  **** 
1413:c/core_cm3.h  **** /**
1414:c/core_cm3.h  ****   \brief   Set Priority Grouping
1415:c/core_cm3.h  ****   \details Sets the priority grouping field using the required unlock sequence.
1416:c/core_cm3.h  ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1417:c/core_cm3.h  ****            Only values from 0..7 are used.
1418:c/core_cm3.h  ****            In case of a conflict between priority grouping and available
1419:c/core_cm3.h  ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1420:c/core_cm3.h  ****   \param [in]      PriorityGroup  Priority grouping field.
1421:c/core_cm3.h  ****  */
1422:c/core_cm3.h  **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1423:c/core_cm3.h  **** {
1424:c/core_cm3.h  ****   uint32_t reg_value;
1425:c/core_cm3.h  ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1426:c/core_cm3.h  **** 
1427:c/core_cm3.h  ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
  35              		.loc 2 1427 0
  36 0000 074A     		ldr	r2, .L2
1428:c/core_cm3.h  ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1429:c/core_cm3.h  ****   reg_value  =  (reg_value                                   |
1430:c/core_cm3.h  ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1431:c/core_cm3.h  ****                 (PriorityGroupTmp << 8U)                      );              /* Insert write key a
  37              		.loc 2 1431 0
  38 0002 0002     		lsls	r0, r0, #8
  39              	.LVL1:
1427:c/core_cm3.h  ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
  40              		.loc 2 1427 0
  41 0004 D368     		ldr	r3, [r2, #12]
  42              	.LVL2:
  43              		.loc 2 1431 0
  44 0006 00F4E060 		and	r0, r0, #1792
1428:c/core_cm3.h  ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
  45              		.loc 2 1428 0
  46 000a 23F4E063 		bic	r3, r3, #1792
  47              	.LVL3:
  48 000e 1B04     		lsls	r3, r3, #16
  49 0010 1B0C     		lsrs	r3, r3, #16
  50 0012 43F0BF63 		orr	r3, r3, #100139008
  51 0016 43F40033 		orr	r3, r3, #131072
1429:c/core_cm3.h  ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
  52              		.loc 2 1429 0
  53 001a 0343     		orrs	r3, r3, r0
  54              	.LVL4:
1432:c/core_cm3.h  ****   SCB->AIRCR =  reg_value;
  55              		.loc 2 1432 0
  56 001c D360     		str	r3, [r2, #12]
  57              	.LVL5:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 30


  58 001e 7047     		bx	lr
  59              	.L3:
  60              		.align	2
  61              	.L2:
  62 0020 00ED00E0 		.word	-536810240
  63              	.LBE13:
  64              	.LBE12:
  65              		.cfi_endproc
  66              	.LFE64:
  68              		.section	.text.HAL_NVIC_SetPriority,"ax",%progbits
  69              		.align	1
  70              		.global	HAL_NVIC_SetPriority
  71              		.syntax unified
  72              		.thumb
  73              		.thumb_func
  74              		.fpu softvfp
  76              	HAL_NVIC_SetPriority:
  77              	.LFB65:
 163:c/stm32f1xx_hal_cortex.c ****   /* Check the parameters */
 164:c/stm32f1xx_hal_cortex.c ****   assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 165:c/stm32f1xx_hal_cortex.c ****   
 166:c/stm32f1xx_hal_cortex.c ****   /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
 167:c/stm32f1xx_hal_cortex.c ****   NVIC_SetPriorityGrouping(PriorityGroup);
 168:c/stm32f1xx_hal_cortex.c **** }
 169:c/stm32f1xx_hal_cortex.c **** 
 170:c/stm32f1xx_hal_cortex.c **** /**
 171:c/stm32f1xx_hal_cortex.c ****   * @brief  Sets the priority of an interrupt.
 172:c/stm32f1xx_hal_cortex.c ****   * @param  IRQn: External interrupt number.
 173:c/stm32f1xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 174:c/stm32f1xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 175:c/stm32f1xx_hal_cortex.c ****   * @param  PreemptPriority: The preemption priority for the IRQn channel.
 176:c/stm32f1xx_hal_cortex.c ****   *         This parameter can be a value between 0 and 15
 177:c/stm32f1xx_hal_cortex.c ****   *         A lower priority value indicates a higher priority 
 178:c/stm32f1xx_hal_cortex.c ****   * @param  SubPriority: the subpriority level for the IRQ channel.
 179:c/stm32f1xx_hal_cortex.c ****   *         This parameter can be a value between 0 and 15
 180:c/stm32f1xx_hal_cortex.c ****   *         A lower priority value indicates a higher priority.          
 181:c/stm32f1xx_hal_cortex.c ****   * @retval None
 182:c/stm32f1xx_hal_cortex.c ****   */
 183:c/stm32f1xx_hal_cortex.c **** void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
 184:c/stm32f1xx_hal_cortex.c **** { 
  78              		.loc 1 184 0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  82              	.LVL6:
  83              	.LBB20:
  84              	.LBB21:
1433:c/core_cm3.h  **** }
1434:c/core_cm3.h  **** 
1435:c/core_cm3.h  **** 
1436:c/core_cm3.h  **** /**
1437:c/core_cm3.h  ****   \brief   Get Priority Grouping
1438:c/core_cm3.h  ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1439:c/core_cm3.h  ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1440:c/core_cm3.h  ****  */
1441:c/core_cm3.h  **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1442:c/core_cm3.h  **** {
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 31


1443:c/core_cm3.h  ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
  85              		.loc 2 1443 0
  86 0000 174B     		ldr	r3, .L9
  87              	.LBE21:
  88              	.LBE20:
  89              		.loc 1 184 0
  90 0002 30B5     		push	{r4, r5, lr}
  91              		.cfi_def_cfa_offset 12
  92              		.cfi_offset 4, -12
  93              		.cfi_offset 5, -8
  94              		.cfi_offset 14, -4
  95              	.LBB23:
  96              	.LBB22:
  97              		.loc 2 1443 0
  98 0004 DC68     		ldr	r4, [r3, #12]
  99 0006 C4F30224 		ubfx	r4, r4, #8, #3
 100              	.LVL7:
 101              	.LBE22:
 102              	.LBE23:
 103              	.LBB24:
 104              	.LBB25:
1444:c/core_cm3.h  **** }
1445:c/core_cm3.h  **** 
1446:c/core_cm3.h  **** 
1447:c/core_cm3.h  **** /**
1448:c/core_cm3.h  ****   \brief   Enable External Interrupt
1449:c/core_cm3.h  ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
1450:c/core_cm3.h  ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1451:c/core_cm3.h  ****  */
1452:c/core_cm3.h  **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1453:c/core_cm3.h  **** {
1454:c/core_cm3.h  ****   NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1455:c/core_cm3.h  **** }
1456:c/core_cm3.h  **** 
1457:c/core_cm3.h  **** 
1458:c/core_cm3.h  **** /**
1459:c/core_cm3.h  ****   \brief   Disable External Interrupt
1460:c/core_cm3.h  ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
1461:c/core_cm3.h  ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1462:c/core_cm3.h  ****  */
1463:c/core_cm3.h  **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1464:c/core_cm3.h  **** {
1465:c/core_cm3.h  ****   NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1466:c/core_cm3.h  **** }
1467:c/core_cm3.h  **** 
1468:c/core_cm3.h  **** 
1469:c/core_cm3.h  **** /**
1470:c/core_cm3.h  ****   \brief   Get Pending Interrupt
1471:c/core_cm3.h  ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
1472:c/core_cm3.h  ****   \param [in]      IRQn  Interrupt number.
1473:c/core_cm3.h  ****   \return             0  Interrupt status is not pending.
1474:c/core_cm3.h  ****   \return             1  Interrupt status is pending.
1475:c/core_cm3.h  ****  */
1476:c/core_cm3.h  **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1477:c/core_cm3.h  **** {
1478:c/core_cm3.h  ****   return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1479:c/core_cm3.h  **** }
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 32


1480:c/core_cm3.h  **** 
1481:c/core_cm3.h  **** 
1482:c/core_cm3.h  **** /**
1483:c/core_cm3.h  ****   \brief   Set Pending Interrupt
1484:c/core_cm3.h  ****   \details Sets the pending bit of an external interrupt.
1485:c/core_cm3.h  ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
1486:c/core_cm3.h  ****  */
1487:c/core_cm3.h  **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1488:c/core_cm3.h  **** {
1489:c/core_cm3.h  ****   NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1490:c/core_cm3.h  **** }
1491:c/core_cm3.h  **** 
1492:c/core_cm3.h  **** 
1493:c/core_cm3.h  **** /**
1494:c/core_cm3.h  ****   \brief   Clear Pending Interrupt
1495:c/core_cm3.h  ****   \details Clears the pending bit of an external interrupt.
1496:c/core_cm3.h  ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1497:c/core_cm3.h  ****  */
1498:c/core_cm3.h  **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1499:c/core_cm3.h  **** {
1500:c/core_cm3.h  ****   NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1501:c/core_cm3.h  **** }
1502:c/core_cm3.h  **** 
1503:c/core_cm3.h  **** 
1504:c/core_cm3.h  **** /**
1505:c/core_cm3.h  ****   \brief   Get Active Interrupt
1506:c/core_cm3.h  ****   \details Reads the active register in NVIC and returns the active bit.
1507:c/core_cm3.h  ****   \param [in]      IRQn  Interrupt number.
1508:c/core_cm3.h  ****   \return             0  Interrupt status is not active.
1509:c/core_cm3.h  ****   \return             1  Interrupt status is active.
1510:c/core_cm3.h  ****  */
1511:c/core_cm3.h  **** __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1512:c/core_cm3.h  **** {
1513:c/core_cm3.h  ****   return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1514:c/core_cm3.h  **** }
1515:c/core_cm3.h  **** 
1516:c/core_cm3.h  **** 
1517:c/core_cm3.h  **** /**
1518:c/core_cm3.h  ****   \brief   Set Interrupt Priority
1519:c/core_cm3.h  ****   \details Sets the priority of an interrupt.
1520:c/core_cm3.h  ****   \note    The priority cannot be set for every core interrupt.
1521:c/core_cm3.h  ****   \param [in]      IRQn  Interrupt number.
1522:c/core_cm3.h  ****   \param [in]  priority  Priority to set.
1523:c/core_cm3.h  ****  */
1524:c/core_cm3.h  **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1525:c/core_cm3.h  **** {
1526:c/core_cm3.h  ****   if ((int32_t)(IRQn) < 0)
1527:c/core_cm3.h  ****   {
1528:c/core_cm3.h  ****     SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BI
1529:c/core_cm3.h  ****   }
1530:c/core_cm3.h  ****   else
1531:c/core_cm3.h  ****   {
1532:c/core_cm3.h  ****     NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BI
1533:c/core_cm3.h  ****   }
1534:c/core_cm3.h  **** }
1535:c/core_cm3.h  **** 
1536:c/core_cm3.h  **** 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 33


1537:c/core_cm3.h  **** /**
1538:c/core_cm3.h  ****   \brief   Get Interrupt Priority
1539:c/core_cm3.h  ****   \details Reads the priority of an interrupt.
1540:c/core_cm3.h  ****            The interrupt number can be positive to specify an external (device specific) interrupt,
1541:c/core_cm3.h  ****            or negative to specify an internal (core) interrupt.
1542:c/core_cm3.h  ****   \param [in]   IRQn  Interrupt number.
1543:c/core_cm3.h  ****   \return             Interrupt Priority.
1544:c/core_cm3.h  ****                       Value is aligned automatically to the implemented priority bits of the microc
1545:c/core_cm3.h  ****  */
1546:c/core_cm3.h  **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
1547:c/core_cm3.h  **** {
1548:c/core_cm3.h  **** 
1549:c/core_cm3.h  ****   if ((int32_t)(IRQn) < 0)
1550:c/core_cm3.h  ****   {
1551:c/core_cm3.h  ****     return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS))
1552:c/core_cm3.h  ****   }
1553:c/core_cm3.h  ****   else
1554:c/core_cm3.h  ****   {
1555:c/core_cm3.h  ****     return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS))
1556:c/core_cm3.h  ****   }
1557:c/core_cm3.h  **** }
1558:c/core_cm3.h  **** 
1559:c/core_cm3.h  **** 
1560:c/core_cm3.h  **** /**
1561:c/core_cm3.h  ****   \brief   Encode Priority
1562:c/core_cm3.h  ****   \details Encodes the priority for an interrupt with the given priority group,
1563:c/core_cm3.h  ****            preemptive priority value, and subpriority value.
1564:c/core_cm3.h  ****            In case of a conflict between priority grouping and available
1565:c/core_cm3.h  ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1566:c/core_cm3.h  ****   \param [in]     PriorityGroup  Used priority group.
1567:c/core_cm3.h  ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
1568:c/core_cm3.h  ****   \param [in]       SubPriority  Subpriority value (starting from 0).
1569:c/core_cm3.h  ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
1570:c/core_cm3.h  ****  */
1571:c/core_cm3.h  **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1572:c/core_cm3.h  **** {
1573:c/core_cm3.h  ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1574:c/core_cm3.h  ****   uint32_t PreemptPriorityBits;
1575:c/core_cm3.h  ****   uint32_t SubPriorityBits;
1576:c/core_cm3.h  **** 
1577:c/core_cm3.h  ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
 105              		.loc 2 1577 0
 106 000a C4F10703 		rsb	r3, r4, #7
1578:c/core_cm3.h  ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 107              		.loc 2 1578 0
 108 000e 251D     		adds	r5, r4, #4
1577:c/core_cm3.h  ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 109              		.loc 2 1577 0
 110 0010 042B     		cmp	r3, #4
 111 0012 28BF     		it	cs
 112 0014 0423     		movcs	r3, #4
 113              	.LVL8:
 114              		.loc 2 1578 0
 115 0016 062D     		cmp	r5, #6
1579:c/core_cm3.h  **** 
1580:c/core_cm3.h  ****   return (
1581:c/core_cm3.h  ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 34


 116              		.loc 2 1581 0
 117 0018 4FF00105 		mov	r5, #1
1578:c/core_cm3.h  **** 
 118              		.loc 2 1578 0
 119 001c 98BF     		it	ls
 120 001e 0024     		movls	r4, #0
 121              	.LVL9:
 122              		.loc 2 1581 0
 123 0020 05FA03F3 		lsl	r3, r5, r3
 124              	.LVL10:
 125 0024 03F1FF33 		add	r3, r3, #-1
1578:c/core_cm3.h  **** 
 126              		.loc 2 1578 0
 127 0028 88BF     		it	hi
 128 002a 033C     		subhi	r4, r4, #3
 129              	.LVL11:
 130              		.loc 2 1581 0
 131 002c 1940     		ands	r1, r1, r3
 132              	.LVL12:
 133 002e A140     		lsls	r1, r1, r4
1582:c/core_cm3.h  ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 134              		.loc 2 1582 0
 135 0030 05FA04F4 		lsl	r4, r5, r4
 136              	.LVL13:
 137 0034 013C     		subs	r4, r4, #1
 138 0036 2240     		ands	r2, r2, r4
 139              	.LVL14:
 140              	.LBE25:
 141              	.LBE24:
 142              	.LBB27:
 143              	.LBB28:
1526:c/core_cm3.h  ****   {
 144              		.loc 2 1526 0
 145 0038 0028     		cmp	r0, #0
 146              	.LBE28:
 147              	.LBE27:
 148              	.LBB30:
 149              	.LBB26:
1581:c/core_cm3.h  ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 150              		.loc 2 1581 0
 151 003a 42EA0102 		orr	r2, r2, r1
 152              	.LVL15:
 153 003e 4FEA0212 		lsl	r2, r2, #4
 154              	.LBE26:
 155              	.LBE30:
 156              	.LBB31:
 157              	.LBB29:
1532:c/core_cm3.h  ****   }
 158              		.loc 2 1532 0
 159 0042 AFBF     		iteee	ge
 160 0044 00F16040 		addge	r0, r0, #-536870912
 161              	.LVL16:
1528:c/core_cm3.h  ****   }
 162              		.loc 2 1528 0
 163 0048 064B     		ldrlt	r3, .L9+4
 164 004a 00F00F00 		andlt	r0, r0, #15
 165 004e D2B2     		uxtblt	r2, r2
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 35


1532:c/core_cm3.h  ****   }
 166              		.loc 2 1532 0
 167 0050 A5BF     		ittet	ge
 168 0052 D2B2     		uxtbge	r2, r2
 169 0054 00F56140 		addge	r0, r0, #57600
1528:c/core_cm3.h  ****   }
 170              		.loc 2 1528 0
 171 0058 1A54     		strblt	r2, [r3, r0]
1532:c/core_cm3.h  ****   }
 172              		.loc 2 1532 0
 173 005a 80F80023 		strbge	r2, [r0, #768]
 174              	.LVL17:
 175 005e 30BD     		pop	{r4, r5, pc}
 176              	.L10:
 177              		.align	2
 178              	.L9:
 179 0060 00ED00E0 		.word	-536810240
 180 0064 14ED00E0 		.word	-536810220
 181              	.LBE29:
 182              	.LBE31:
 183              		.cfi_endproc
 184              	.LFE65:
 186              		.section	.text.HAL_NVIC_EnableIRQ,"ax",%progbits
 187              		.align	1
 188              		.global	HAL_NVIC_EnableIRQ
 189              		.syntax unified
 190              		.thumb
 191              		.thumb_func
 192              		.fpu softvfp
 194              	HAL_NVIC_EnableIRQ:
 195              	.LFB66:
 185:c/stm32f1xx_hal_cortex.c ****   uint32_t prioritygroup = 0x00U;
 186:c/stm32f1xx_hal_cortex.c ****   
 187:c/stm32f1xx_hal_cortex.c ****   /* Check the parameters */
 188:c/stm32f1xx_hal_cortex.c ****   assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 189:c/stm32f1xx_hal_cortex.c ****   assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 190:c/stm32f1xx_hal_cortex.c ****   
 191:c/stm32f1xx_hal_cortex.c ****   prioritygroup = NVIC_GetPriorityGrouping();
 192:c/stm32f1xx_hal_cortex.c ****   
 193:c/stm32f1xx_hal_cortex.c ****   NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 194:c/stm32f1xx_hal_cortex.c **** }
 195:c/stm32f1xx_hal_cortex.c **** 
 196:c/stm32f1xx_hal_cortex.c **** /**
 197:c/stm32f1xx_hal_cortex.c ****   * @brief  Enables a device specific interrupt in the NVIC interrupt controller.
 198:c/stm32f1xx_hal_cortex.c ****   * @note   To configure interrupts priority correctly, the NVIC_PriorityGroupConfig()
 199:c/stm32f1xx_hal_cortex.c ****   *         function should be called before. 
 200:c/stm32f1xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 201:c/stm32f1xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 202:c/stm32f1xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 203:c/stm32f1xx_hal_cortex.c ****   * @retval None
 204:c/stm32f1xx_hal_cortex.c ****   */
 205:c/stm32f1xx_hal_cortex.c **** void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
 206:c/stm32f1xx_hal_cortex.c **** {
 196              		.loc 1 206 0
 197              		.cfi_startproc
 198              		@ args = 0, pretend = 0, frame = 0
 199              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 36


 200              		@ link register save eliminated.
 201              	.LVL18:
 202              	.LBB34:
 203              	.LBB35:
1454:c/core_cm3.h  **** }
 204              		.loc 2 1454 0
 205 0000 0123     		movs	r3, #1
 206 0002 4209     		lsrs	r2, r0, #5
 207 0004 00F01F00 		and	r0, r0, #31
 208              	.LVL19:
 209 0008 03FA00F0 		lsl	r0, r3, r0
 210 000c 014B     		ldr	r3, .L12
 211 000e 43F82200 		str	r0, [r3, r2, lsl #2]
 212              	.LVL20:
 213 0012 7047     		bx	lr
 214              	.L13:
 215              		.align	2
 216              	.L12:
 217 0014 00E100E0 		.word	-536813312
 218              	.LBE35:
 219              	.LBE34:
 220              		.cfi_endproc
 221              	.LFE66:
 223              		.section	.text.HAL_NVIC_DisableIRQ,"ax",%progbits
 224              		.align	1
 225              		.global	HAL_NVIC_DisableIRQ
 226              		.syntax unified
 227              		.thumb
 228              		.thumb_func
 229              		.fpu softvfp
 231              	HAL_NVIC_DisableIRQ:
 232              	.LFB67:
 207:c/stm32f1xx_hal_cortex.c ****   /* Check the parameters */
 208:c/stm32f1xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 209:c/stm32f1xx_hal_cortex.c **** 
 210:c/stm32f1xx_hal_cortex.c ****   /* Enable interrupt */
 211:c/stm32f1xx_hal_cortex.c ****   NVIC_EnableIRQ(IRQn);
 212:c/stm32f1xx_hal_cortex.c **** }
 213:c/stm32f1xx_hal_cortex.c **** 
 214:c/stm32f1xx_hal_cortex.c **** /**
 215:c/stm32f1xx_hal_cortex.c ****   * @brief  Disables a device specific interrupt in the NVIC interrupt controller.
 216:c/stm32f1xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 217:c/stm32f1xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 218:c/stm32f1xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 219:c/stm32f1xx_hal_cortex.c ****   * @retval None
 220:c/stm32f1xx_hal_cortex.c ****   */
 221:c/stm32f1xx_hal_cortex.c **** void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
 222:c/stm32f1xx_hal_cortex.c **** {
 233              		.loc 1 222 0
 234              		.cfi_startproc
 235              		@ args = 0, pretend = 0, frame = 0
 236              		@ frame_needed = 0, uses_anonymous_args = 0
 237              		@ link register save eliminated.
 238              	.LVL21:
 239              	.LBB38:
 240              	.LBB39:
1465:c/core_cm3.h  **** }
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 37


 241              		.loc 2 1465 0
 242 0000 0122     		movs	r2, #1
 243 0002 4309     		lsrs	r3, r0, #5
 244 0004 00F01F00 		and	r0, r0, #31
 245              	.LVL22:
 246 0008 02FA00F0 		lsl	r0, r2, r0
 247 000c 024A     		ldr	r2, .L15
 248 000e 2033     		adds	r3, r3, #32
 249 0010 42F82300 		str	r0, [r2, r3, lsl #2]
 250              	.LVL23:
 251 0014 7047     		bx	lr
 252              	.L16:
 253 0016 00BF     		.align	2
 254              	.L15:
 255 0018 00E100E0 		.word	-536813312
 256              	.LBE39:
 257              	.LBE38:
 258              		.cfi_endproc
 259              	.LFE67:
 261              		.section	.text.HAL_NVIC_SystemReset,"ax",%progbits
 262              		.align	1
 263              		.global	HAL_NVIC_SystemReset
 264              		.syntax unified
 265              		.thumb
 266              		.thumb_func
 267              		.fpu softvfp
 269              	HAL_NVIC_SystemReset:
 270              	.LFB68:
 223:c/stm32f1xx_hal_cortex.c ****   /* Check the parameters */
 224:c/stm32f1xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 225:c/stm32f1xx_hal_cortex.c **** 
 226:c/stm32f1xx_hal_cortex.c ****   /* Disable interrupt */
 227:c/stm32f1xx_hal_cortex.c ****   NVIC_DisableIRQ(IRQn);
 228:c/stm32f1xx_hal_cortex.c **** }
 229:c/stm32f1xx_hal_cortex.c **** 
 230:c/stm32f1xx_hal_cortex.c **** /**
 231:c/stm32f1xx_hal_cortex.c ****   * @brief  Initiates a system reset request to reset the MCU.
 232:c/stm32f1xx_hal_cortex.c ****   * @retval None
 233:c/stm32f1xx_hal_cortex.c ****   */
 234:c/stm32f1xx_hal_cortex.c **** void HAL_NVIC_SystemReset(void)
 235:c/stm32f1xx_hal_cortex.c **** {
 271              		.loc 1 235 0
 272              		.cfi_startproc
 273              		@ Volatile: function does not return.
 274              		@ args = 0, pretend = 0, frame = 0
 275              		@ frame_needed = 0, uses_anonymous_args = 0
 276              		@ link register save eliminated.
 277              	.LBB48:
 278              	.LBB49:
 279              	.LBB50:
 280              	.LBB51:
 281              		.file 3 "c/cmsis_gcc.h"
   1:c/cmsis_gcc.h **** /**************************************************************************//**
   2:c/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:c/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:c/cmsis_gcc.h ****  * @version  V4.30
   5:c/cmsis_gcc.h ****  * @date     20. October 2015
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 38


   6:c/cmsis_gcc.h ****  ******************************************************************************/
   7:c/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:c/cmsis_gcc.h **** 
   9:c/cmsis_gcc.h ****    All rights reserved.
  10:c/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:c/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:c/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:c/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:c/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:c/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:c/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:c/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:c/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:c/cmsis_gcc.h ****      specific prior written permission.
  20:c/cmsis_gcc.h ****    *
  21:c/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:c/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:c/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:c/cmsis_gcc.h **** 
  34:c/cmsis_gcc.h **** 
  35:c/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:c/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:c/cmsis_gcc.h **** 
  38:c/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:c/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:c/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:c/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:c/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:c/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:c/cmsis_gcc.h **** #endif
  45:c/cmsis_gcc.h **** 
  46:c/cmsis_gcc.h **** 
  47:c/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:c/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:c/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:c/cmsis_gcc.h ****   @{
  51:c/cmsis_gcc.h ****  */
  52:c/cmsis_gcc.h **** 
  53:c/cmsis_gcc.h **** /**
  54:c/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:c/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:c/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:c/cmsis_gcc.h ****  */
  58:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:c/cmsis_gcc.h **** {
  60:c/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:c/cmsis_gcc.h **** }
  62:c/cmsis_gcc.h **** 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 39


  63:c/cmsis_gcc.h **** 
  64:c/cmsis_gcc.h **** /**
  65:c/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:c/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:c/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:c/cmsis_gcc.h ****  */
  69:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:c/cmsis_gcc.h **** {
  71:c/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:c/cmsis_gcc.h **** }
  73:c/cmsis_gcc.h **** 
  74:c/cmsis_gcc.h **** 
  75:c/cmsis_gcc.h **** /**
  76:c/cmsis_gcc.h ****   \brief   Get Control Register
  77:c/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:c/cmsis_gcc.h ****   \return               Control Register value
  79:c/cmsis_gcc.h ****  */
  80:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:c/cmsis_gcc.h **** {
  82:c/cmsis_gcc.h ****   uint32_t result;
  83:c/cmsis_gcc.h **** 
  84:c/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:c/cmsis_gcc.h ****   return(result);
  86:c/cmsis_gcc.h **** }
  87:c/cmsis_gcc.h **** 
  88:c/cmsis_gcc.h **** 
  89:c/cmsis_gcc.h **** /**
  90:c/cmsis_gcc.h ****   \brief   Set Control Register
  91:c/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:c/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:c/cmsis_gcc.h ****  */
  94:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:c/cmsis_gcc.h **** {
  96:c/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:c/cmsis_gcc.h **** }
  98:c/cmsis_gcc.h **** 
  99:c/cmsis_gcc.h **** 
 100:c/cmsis_gcc.h **** /**
 101:c/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:c/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:c/cmsis_gcc.h ****   \return               IPSR Register value
 104:c/cmsis_gcc.h ****  */
 105:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:c/cmsis_gcc.h **** {
 107:c/cmsis_gcc.h ****   uint32_t result;
 108:c/cmsis_gcc.h **** 
 109:c/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:c/cmsis_gcc.h ****   return(result);
 111:c/cmsis_gcc.h **** }
 112:c/cmsis_gcc.h **** 
 113:c/cmsis_gcc.h **** 
 114:c/cmsis_gcc.h **** /**
 115:c/cmsis_gcc.h ****   \brief   Get APSR Register
 116:c/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:c/cmsis_gcc.h ****   \return               APSR Register value
 118:c/cmsis_gcc.h ****  */
 119:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 40


 120:c/cmsis_gcc.h **** {
 121:c/cmsis_gcc.h ****   uint32_t result;
 122:c/cmsis_gcc.h **** 
 123:c/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:c/cmsis_gcc.h ****   return(result);
 125:c/cmsis_gcc.h **** }
 126:c/cmsis_gcc.h **** 
 127:c/cmsis_gcc.h **** 
 128:c/cmsis_gcc.h **** /**
 129:c/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:c/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:c/cmsis_gcc.h **** 
 132:c/cmsis_gcc.h ****     \return               xPSR Register value
 133:c/cmsis_gcc.h ****  */
 134:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:c/cmsis_gcc.h **** {
 136:c/cmsis_gcc.h ****   uint32_t result;
 137:c/cmsis_gcc.h **** 
 138:c/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:c/cmsis_gcc.h ****   return(result);
 140:c/cmsis_gcc.h **** }
 141:c/cmsis_gcc.h **** 
 142:c/cmsis_gcc.h **** 
 143:c/cmsis_gcc.h **** /**
 144:c/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:c/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:c/cmsis_gcc.h ****   \return               PSP Register value
 147:c/cmsis_gcc.h ****  */
 148:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:c/cmsis_gcc.h **** {
 150:c/cmsis_gcc.h ****   register uint32_t result;
 151:c/cmsis_gcc.h **** 
 152:c/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:c/cmsis_gcc.h ****   return(result);
 154:c/cmsis_gcc.h **** }
 155:c/cmsis_gcc.h **** 
 156:c/cmsis_gcc.h **** 
 157:c/cmsis_gcc.h **** /**
 158:c/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:c/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:c/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:c/cmsis_gcc.h ****  */
 162:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:c/cmsis_gcc.h **** {
 164:c/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:c/cmsis_gcc.h **** }
 166:c/cmsis_gcc.h **** 
 167:c/cmsis_gcc.h **** 
 168:c/cmsis_gcc.h **** /**
 169:c/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:c/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:c/cmsis_gcc.h ****   \return               MSP Register value
 172:c/cmsis_gcc.h ****  */
 173:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:c/cmsis_gcc.h **** {
 175:c/cmsis_gcc.h ****   register uint32_t result;
 176:c/cmsis_gcc.h **** 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 41


 177:c/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:c/cmsis_gcc.h ****   return(result);
 179:c/cmsis_gcc.h **** }
 180:c/cmsis_gcc.h **** 
 181:c/cmsis_gcc.h **** 
 182:c/cmsis_gcc.h **** /**
 183:c/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:c/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:c/cmsis_gcc.h **** 
 186:c/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:c/cmsis_gcc.h ****  */
 188:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:c/cmsis_gcc.h **** {
 190:c/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:c/cmsis_gcc.h **** }
 192:c/cmsis_gcc.h **** 
 193:c/cmsis_gcc.h **** 
 194:c/cmsis_gcc.h **** /**
 195:c/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:c/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:c/cmsis_gcc.h ****   \return               Priority Mask value
 198:c/cmsis_gcc.h ****  */
 199:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:c/cmsis_gcc.h **** {
 201:c/cmsis_gcc.h ****   uint32_t result;
 202:c/cmsis_gcc.h **** 
 203:c/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:c/cmsis_gcc.h ****   return(result);
 205:c/cmsis_gcc.h **** }
 206:c/cmsis_gcc.h **** 
 207:c/cmsis_gcc.h **** 
 208:c/cmsis_gcc.h **** /**
 209:c/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:c/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:c/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:c/cmsis_gcc.h ****  */
 213:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:c/cmsis_gcc.h **** {
 215:c/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:c/cmsis_gcc.h **** }
 217:c/cmsis_gcc.h **** 
 218:c/cmsis_gcc.h **** 
 219:c/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:c/cmsis_gcc.h **** 
 221:c/cmsis_gcc.h **** /**
 222:c/cmsis_gcc.h ****   \brief   Enable FIQ
 223:c/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:c/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:c/cmsis_gcc.h ****  */
 226:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:c/cmsis_gcc.h **** {
 228:c/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:c/cmsis_gcc.h **** }
 230:c/cmsis_gcc.h **** 
 231:c/cmsis_gcc.h **** 
 232:c/cmsis_gcc.h **** /**
 233:c/cmsis_gcc.h ****   \brief   Disable FIQ
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 42


 234:c/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:c/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:c/cmsis_gcc.h ****  */
 237:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:c/cmsis_gcc.h **** {
 239:c/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:c/cmsis_gcc.h **** }
 241:c/cmsis_gcc.h **** 
 242:c/cmsis_gcc.h **** 
 243:c/cmsis_gcc.h **** /**
 244:c/cmsis_gcc.h ****   \brief   Get Base Priority
 245:c/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:c/cmsis_gcc.h ****   \return               Base Priority register value
 247:c/cmsis_gcc.h ****  */
 248:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:c/cmsis_gcc.h **** {
 250:c/cmsis_gcc.h ****   uint32_t result;
 251:c/cmsis_gcc.h **** 
 252:c/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:c/cmsis_gcc.h ****   return(result);
 254:c/cmsis_gcc.h **** }
 255:c/cmsis_gcc.h **** 
 256:c/cmsis_gcc.h **** 
 257:c/cmsis_gcc.h **** /**
 258:c/cmsis_gcc.h ****   \brief   Set Base Priority
 259:c/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:c/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:c/cmsis_gcc.h ****  */
 262:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:c/cmsis_gcc.h **** {
 264:c/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:c/cmsis_gcc.h **** }
 266:c/cmsis_gcc.h **** 
 267:c/cmsis_gcc.h **** 
 268:c/cmsis_gcc.h **** /**
 269:c/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:c/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:c/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:c/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:c/cmsis_gcc.h ****  */
 274:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:c/cmsis_gcc.h **** {
 276:c/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:c/cmsis_gcc.h **** }
 278:c/cmsis_gcc.h **** 
 279:c/cmsis_gcc.h **** 
 280:c/cmsis_gcc.h **** /**
 281:c/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:c/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:c/cmsis_gcc.h ****   \return               Fault Mask register value
 284:c/cmsis_gcc.h ****  */
 285:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:c/cmsis_gcc.h **** {
 287:c/cmsis_gcc.h ****   uint32_t result;
 288:c/cmsis_gcc.h **** 
 289:c/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:c/cmsis_gcc.h ****   return(result);
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 43


 291:c/cmsis_gcc.h **** }
 292:c/cmsis_gcc.h **** 
 293:c/cmsis_gcc.h **** 
 294:c/cmsis_gcc.h **** /**
 295:c/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:c/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:c/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:c/cmsis_gcc.h ****  */
 299:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:c/cmsis_gcc.h **** {
 301:c/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:c/cmsis_gcc.h **** }
 303:c/cmsis_gcc.h **** 
 304:c/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:c/cmsis_gcc.h **** 
 306:c/cmsis_gcc.h **** 
 307:c/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:c/cmsis_gcc.h **** 
 309:c/cmsis_gcc.h **** /**
 310:c/cmsis_gcc.h ****   \brief   Get FPSCR
 311:c/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:c/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:c/cmsis_gcc.h ****  */
 314:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:c/cmsis_gcc.h **** {
 316:c/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:c/cmsis_gcc.h ****   uint32_t result;
 318:c/cmsis_gcc.h **** 
 319:c/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:c/cmsis_gcc.h ****   __ASM volatile ("");
 321:c/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:c/cmsis_gcc.h ****   __ASM volatile ("");
 323:c/cmsis_gcc.h ****   return(result);
 324:c/cmsis_gcc.h **** #else
 325:c/cmsis_gcc.h ****    return(0);
 326:c/cmsis_gcc.h **** #endif
 327:c/cmsis_gcc.h **** }
 328:c/cmsis_gcc.h **** 
 329:c/cmsis_gcc.h **** 
 330:c/cmsis_gcc.h **** /**
 331:c/cmsis_gcc.h ****   \brief   Set FPSCR
 332:c/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:c/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:c/cmsis_gcc.h ****  */
 335:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:c/cmsis_gcc.h **** {
 337:c/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:c/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:c/cmsis_gcc.h ****   __ASM volatile ("");
 340:c/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:c/cmsis_gcc.h ****   __ASM volatile ("");
 342:c/cmsis_gcc.h **** #endif
 343:c/cmsis_gcc.h **** }
 344:c/cmsis_gcc.h **** 
 345:c/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:c/cmsis_gcc.h **** 
 347:c/cmsis_gcc.h **** 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 44


 348:c/cmsis_gcc.h **** 
 349:c/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:c/cmsis_gcc.h **** 
 351:c/cmsis_gcc.h **** 
 352:c/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:c/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:c/cmsis_gcc.h ****   Access to dedicated instructions
 355:c/cmsis_gcc.h ****   @{
 356:c/cmsis_gcc.h **** */
 357:c/cmsis_gcc.h **** 
 358:c/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:c/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:c/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:c/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:c/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:c/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:c/cmsis_gcc.h **** #else
 365:c/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:c/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:c/cmsis_gcc.h **** #endif
 368:c/cmsis_gcc.h **** 
 369:c/cmsis_gcc.h **** /**
 370:c/cmsis_gcc.h ****   \brief   No Operation
 371:c/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:c/cmsis_gcc.h ****  */
 373:c/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:c/cmsis_gcc.h **** {
 375:c/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:c/cmsis_gcc.h **** }
 377:c/cmsis_gcc.h **** 
 378:c/cmsis_gcc.h **** 
 379:c/cmsis_gcc.h **** /**
 380:c/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:c/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:c/cmsis_gcc.h ****  */
 383:c/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:c/cmsis_gcc.h **** {
 385:c/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:c/cmsis_gcc.h **** }
 387:c/cmsis_gcc.h **** 
 388:c/cmsis_gcc.h **** 
 389:c/cmsis_gcc.h **** /**
 390:c/cmsis_gcc.h ****   \brief   Wait For Event
 391:c/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:c/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:c/cmsis_gcc.h ****  */
 394:c/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:c/cmsis_gcc.h **** {
 396:c/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:c/cmsis_gcc.h **** }
 398:c/cmsis_gcc.h **** 
 399:c/cmsis_gcc.h **** 
 400:c/cmsis_gcc.h **** /**
 401:c/cmsis_gcc.h ****   \brief   Send Event
 402:c/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:c/cmsis_gcc.h ****  */
 404:c/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 45


 405:c/cmsis_gcc.h **** {
 406:c/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:c/cmsis_gcc.h **** }
 408:c/cmsis_gcc.h **** 
 409:c/cmsis_gcc.h **** 
 410:c/cmsis_gcc.h **** /**
 411:c/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:c/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:c/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:c/cmsis_gcc.h ****            after the instruction has been completed.
 415:c/cmsis_gcc.h ****  */
 416:c/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:c/cmsis_gcc.h **** {
 418:c/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:c/cmsis_gcc.h **** }
 420:c/cmsis_gcc.h **** 
 421:c/cmsis_gcc.h **** 
 422:c/cmsis_gcc.h **** /**
 423:c/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:c/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:c/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:c/cmsis_gcc.h ****  */
 427:c/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:c/cmsis_gcc.h **** {
 429:c/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 282              		.loc 3 429 0
 283              		.syntax unified
 284              	@ 429 "c/cmsis_gcc.h" 1
 285 0000 BFF34F8F 		dsb 0xF
 286              	@ 0 "" 2
 287              		.thumb
 288              		.syntax unified
 289              	.LBE51:
 290              	.LBE50:
1583:c/core_cm3.h  ****          );
1584:c/core_cm3.h  **** }
1585:c/core_cm3.h  **** 
1586:c/core_cm3.h  **** 
1587:c/core_cm3.h  **** /**
1588:c/core_cm3.h  ****   \brief   Decode Priority
1589:c/core_cm3.h  ****   \details Decodes an interrupt priority value with a given priority group to
1590:c/core_cm3.h  ****            preemptive priority value and subpriority value.
1591:c/core_cm3.h  ****            In case of a conflict between priority grouping and available
1592:c/core_cm3.h  ****            priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1593:c/core_cm3.h  ****   \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC
1594:c/core_cm3.h  ****   \param [in]     PriorityGroup  Used priority group.
1595:c/core_cm3.h  ****   \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
1596:c/core_cm3.h  ****   \param [out]     pSubPriority  Subpriority value (starting from 0).
1597:c/core_cm3.h  ****  */
1598:c/core_cm3.h  **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* cons
1599:c/core_cm3.h  **** {
1600:c/core_cm3.h  ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1601:c/core_cm3.h  ****   uint32_t PreemptPriorityBits;
1602:c/core_cm3.h  ****   uint32_t SubPriorityBits;
1603:c/core_cm3.h  **** 
1604:c/core_cm3.h  ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
1605:c/core_cm3.h  ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 46


1606:c/core_cm3.h  **** 
1607:c/core_cm3.h  ****   *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1
1608:c/core_cm3.h  ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
1609:c/core_cm3.h  **** }
1610:c/core_cm3.h  **** 
1611:c/core_cm3.h  **** 
1612:c/core_cm3.h  **** /**
1613:c/core_cm3.h  ****   \brief   System Reset
1614:c/core_cm3.h  ****   \details Initiates a system reset request to reset the MCU.
1615:c/core_cm3.h  ****  */
1616:c/core_cm3.h  **** __STATIC_INLINE void NVIC_SystemReset(void)
1617:c/core_cm3.h  **** {
1618:c/core_cm3.h  ****   __DSB();                                                          /* Ensure all outstanding memor
1619:c/core_cm3.h  ****                                                                        buffered write are completed
1620:c/core_cm3.h  ****   SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
1621:c/core_cm3.h  ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 291              		.loc 2 1621 0
 292 0004 0549     		ldr	r1, .L19
1620:c/core_cm3.h  ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 293              		.loc 2 1620 0
 294 0006 064B     		ldr	r3, .L19+4
 295              		.loc 2 1621 0
 296 0008 CA68     		ldr	r2, [r1, #12]
 297 000a 02F4E062 		and	r2, r2, #1792
1620:c/core_cm3.h  ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 298              		.loc 2 1620 0
 299 000e 1343     		orrs	r3, r3, r2
 300 0010 CB60     		str	r3, [r1, #12]
 301              	.LBB52:
 302              	.LBB53:
 303              		.loc 3 429 0
 304              		.syntax unified
 305              	@ 429 "c/cmsis_gcc.h" 1
 306 0012 BFF34F8F 		dsb 0xF
 307              	@ 0 "" 2
 308              		.thumb
 309              		.syntax unified
 310              	.L18:
 311              	.LBE53:
 312              	.LBE52:
 313              	.LBB54:
 314              	.LBB55:
 375:c/cmsis_gcc.h **** }
 315              		.loc 3 375 0
 316              		.syntax unified
 317              	@ 375 "c/cmsis_gcc.h" 1
 318 0016 00BF     		nop
 319              	@ 0 "" 2
 320              		.thumb
 321              		.syntax unified
 322 0018 FDE7     		b	.L18
 323              	.L20:
 324 001a 00BF     		.align	2
 325              	.L19:
 326 001c 00ED00E0 		.word	-536810240
 327 0020 0400FA05 		.word	100270084
 328              	.LBE55:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 47


 329              	.LBE54:
 330              	.LBE49:
 331              	.LBE48:
 332              		.cfi_endproc
 333              	.LFE68:
 335              		.section	.text.HAL_SYSTICK_Config,"ax",%progbits
 336              		.align	1
 337              		.global	HAL_SYSTICK_Config
 338              		.syntax unified
 339              		.thumb
 340              		.thumb_func
 341              		.fpu softvfp
 343              	HAL_SYSTICK_Config:
 344              	.LFB69:
 236:c/stm32f1xx_hal_cortex.c ****   /* System Reset */
 237:c/stm32f1xx_hal_cortex.c ****   NVIC_SystemReset();
 238:c/stm32f1xx_hal_cortex.c **** }
 239:c/stm32f1xx_hal_cortex.c **** 
 240:c/stm32f1xx_hal_cortex.c **** /**
 241:c/stm32f1xx_hal_cortex.c ****   * @brief  Initializes the System Timer and its interrupt, and starts the System Tick Timer.
 242:c/stm32f1xx_hal_cortex.c ****   *         Counter is in free running mode to generate periodic interrupts.
 243:c/stm32f1xx_hal_cortex.c ****   * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
 244:c/stm32f1xx_hal_cortex.c ****   * @retval status:  - 0  Function succeeded.
 245:c/stm32f1xx_hal_cortex.c ****   *                  - 1  Function failed.
 246:c/stm32f1xx_hal_cortex.c ****   */
 247:c/stm32f1xx_hal_cortex.c **** uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
 248:c/stm32f1xx_hal_cortex.c **** {
 345              		.loc 1 248 0
 346              		.cfi_startproc
 347              		@ args = 0, pretend = 0, frame = 0
 348              		@ frame_needed = 0, uses_anonymous_args = 0
 349              		@ link register save eliminated.
 350              	.LVL24:
 351              	.LBB60:
 352              	.LBB61:
1622:c/core_cm3.h  ****                             SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchange
1623:c/core_cm3.h  ****   __DSB();                                                          /* Ensure completion of memory 
1624:c/core_cm3.h  **** 
1625:c/core_cm3.h  ****   for(;;)                                                           /* wait until reset */
1626:c/core_cm3.h  ****   {
1627:c/core_cm3.h  ****     __NOP();
1628:c/core_cm3.h  ****   }
1629:c/core_cm3.h  **** }
1630:c/core_cm3.h  **** 
1631:c/core_cm3.h  **** /*@} end of CMSIS_Core_NVICFunctions */
1632:c/core_cm3.h  **** 
1633:c/core_cm3.h  **** 
1634:c/core_cm3.h  **** 
1635:c/core_cm3.h  **** /* ##################################    SysTick function  ########################################
1636:c/core_cm3.h  **** /**
1637:c/core_cm3.h  ****   \ingroup  CMSIS_Core_FunctionInterface
1638:c/core_cm3.h  ****   \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
1639:c/core_cm3.h  ****   \brief    Functions that configure the System.
1640:c/core_cm3.h  ****   @{
1641:c/core_cm3.h  ****  */
1642:c/core_cm3.h  **** 
1643:c/core_cm3.h  **** #if (__Vendor_SysTickConfig == 0U)
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 48


1644:c/core_cm3.h  **** 
1645:c/core_cm3.h  **** /**
1646:c/core_cm3.h  ****   \brief   System Tick Configuration
1647:c/core_cm3.h  ****   \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
1648:c/core_cm3.h  ****            Counter is in free running mode to generate periodic interrupts.
1649:c/core_cm3.h  ****   \param [in]  ticks  Number of ticks between two interrupts.
1650:c/core_cm3.h  ****   \return          0  Function succeeded.
1651:c/core_cm3.h  ****   \return          1  Function failed.
1652:c/core_cm3.h  ****   \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
1653:c/core_cm3.h  ****            function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.
1654:c/core_cm3.h  ****            must contain a vendor-specific implementation of this function.
1655:c/core_cm3.h  ****  */
1656:c/core_cm3.h  **** __STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
1657:c/core_cm3.h  **** {
1658:c/core_cm3.h  ****   if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 353              		.loc 2 1658 0
 354 0000 0138     		subs	r0, r0, #1
 355              	.LVL25:
 356 0002 B0F1807F 		cmp	r0, #16777216
 357 0006 0AD2     		bcs	.L23
 358              	.LBB62:
 359              	.LBB63:
1528:c/core_cm3.h  ****   }
 360              		.loc 2 1528 0
 361 0008 F021     		movs	r1, #240
 362              	.LBE63:
 363              	.LBE62:
1659:c/core_cm3.h  ****   {
1660:c/core_cm3.h  ****     return (1UL);                                                   /* Reload value impossible */
1661:c/core_cm3.h  ****   }
1662:c/core_cm3.h  **** 
1663:c/core_cm3.h  ****   SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 364              		.loc 2 1663 0
 365 000a 064B     		ldr	r3, .L24
 366              	.LBB66:
 367              	.LBB64:
1528:c/core_cm3.h  ****   }
 368              		.loc 2 1528 0
 369 000c 064A     		ldr	r2, .L24+4
 370              	.LBE64:
 371              	.LBE66:
 372              		.loc 2 1663 0
 373 000e 5860     		str	r0, [r3, #4]
 374              	.LVL26:
 375              	.LBB67:
 376              	.LBB65:
1528:c/core_cm3.h  ****   }
 377              		.loc 2 1528 0
 378 0010 82F82310 		strb	r1, [r2, #35]
 379              	.LVL27:
 380              	.LBE65:
 381              	.LBE67:
1664:c/core_cm3.h  ****   NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Int
1665:c/core_cm3.h  ****   SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Val
 382              		.loc 2 1665 0
 383 0014 0020     		movs	r0, #0
 384              	.LVL28:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 49


1666:c/core_cm3.h  ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 385              		.loc 2 1666 0
 386 0016 0722     		movs	r2, #7
1665:c/core_cm3.h  ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 387              		.loc 2 1665 0
 388 0018 9860     		str	r0, [r3, #8]
 389              		.loc 2 1666 0
 390 001a 1A60     		str	r2, [r3]
 391 001c 7047     		bx	lr
 392              	.L23:
1660:c/core_cm3.h  ****   }
 393              		.loc 2 1660 0
 394 001e 0120     		movs	r0, #1
 395              	.LVL29:
 396              	.LBE61:
 397              	.LBE60:
 249:c/stm32f1xx_hal_cortex.c ****    return SysTick_Config(TicksNumb);
 250:c/stm32f1xx_hal_cortex.c **** }
 398              		.loc 1 250 0
 399 0020 7047     		bx	lr
 400              	.L25:
 401 0022 00BF     		.align	2
 402              	.L24:
 403 0024 10E000E0 		.word	-536813552
 404 0028 00ED00E0 		.word	-536810240
 405              		.cfi_endproc
 406              	.LFE69:
 408              		.section	.text.HAL_NVIC_GetPriorityGrouping,"ax",%progbits
 409              		.align	1
 410              		.global	HAL_NVIC_GetPriorityGrouping
 411              		.syntax unified
 412              		.thumb
 413              		.thumb_func
 414              		.fpu softvfp
 416              	HAL_NVIC_GetPriorityGrouping:
 417              	.LFB70:
 251:c/stm32f1xx_hal_cortex.c **** /**
 252:c/stm32f1xx_hal_cortex.c ****   * @}
 253:c/stm32f1xx_hal_cortex.c ****   */
 254:c/stm32f1xx_hal_cortex.c **** 
 255:c/stm32f1xx_hal_cortex.c **** /** @defgroup CORTEX_Exported_Functions_Group2 Peripheral Control functions
 256:c/stm32f1xx_hal_cortex.c ****   *  @brief   Cortex control functions 
 257:c/stm32f1xx_hal_cortex.c ****   *
 258:c/stm32f1xx_hal_cortex.c **** @verbatim   
 259:c/stm32f1xx_hal_cortex.c ****   ==============================================================================
 260:c/stm32f1xx_hal_cortex.c ****                       ##### Peripheral Control functions #####
 261:c/stm32f1xx_hal_cortex.c ****   ==============================================================================
 262:c/stm32f1xx_hal_cortex.c ****     [..]
 263:c/stm32f1xx_hal_cortex.c ****       This subsection provides a set of functions allowing to control the CORTEX
 264:c/stm32f1xx_hal_cortex.c ****       (NVIC, SYSTICK, MPU) functionalities. 
 265:c/stm32f1xx_hal_cortex.c ****  
 266:c/stm32f1xx_hal_cortex.c ****       
 267:c/stm32f1xx_hal_cortex.c **** @endverbatim
 268:c/stm32f1xx_hal_cortex.c ****   * @{
 269:c/stm32f1xx_hal_cortex.c ****   */
 270:c/stm32f1xx_hal_cortex.c **** 
 271:c/stm32f1xx_hal_cortex.c **** #if (__MPU_PRESENT == 1U)
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 50


 272:c/stm32f1xx_hal_cortex.c **** /**
 273:c/stm32f1xx_hal_cortex.c ****   * @brief  Disables the MPU
 274:c/stm32f1xx_hal_cortex.c ****   * @retval None
 275:c/stm32f1xx_hal_cortex.c ****   */
 276:c/stm32f1xx_hal_cortex.c **** void HAL_MPU_Disable(void)
 277:c/stm32f1xx_hal_cortex.c **** {
 278:c/stm32f1xx_hal_cortex.c ****   /* Make sure outstanding transfers are done */
 279:c/stm32f1xx_hal_cortex.c ****   __DMB();
 280:c/stm32f1xx_hal_cortex.c **** 
 281:c/stm32f1xx_hal_cortex.c ****   /* Disable fault exceptions */
 282:c/stm32f1xx_hal_cortex.c ****   SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 283:c/stm32f1xx_hal_cortex.c ****   
 284:c/stm32f1xx_hal_cortex.c ****   /* Disable the MPU and clear the control register*/
 285:c/stm32f1xx_hal_cortex.c ****   MPU->CTRL = 0U;
 286:c/stm32f1xx_hal_cortex.c **** }
 287:c/stm32f1xx_hal_cortex.c **** 
 288:c/stm32f1xx_hal_cortex.c **** /**
 289:c/stm32f1xx_hal_cortex.c ****   * @brief  Enable the MPU.
 290:c/stm32f1xx_hal_cortex.c ****   * @param  MPU_Control: Specifies the control mode of the MPU during hard fault, 
 291:c/stm32f1xx_hal_cortex.c ****   *          NMI, FAULTMASK and privileged access to the default memory 
 292:c/stm32f1xx_hal_cortex.c ****   *          This parameter can be one of the following values:
 293:c/stm32f1xx_hal_cortex.c ****   *            @arg MPU_HFNMI_PRIVDEF_NONE
 294:c/stm32f1xx_hal_cortex.c ****   *            @arg MPU_HARDFAULT_NMI
 295:c/stm32f1xx_hal_cortex.c ****   *            @arg MPU_PRIVILEGED_DEFAULT
 296:c/stm32f1xx_hal_cortex.c ****   *            @arg MPU_HFNMI_PRIVDEF
 297:c/stm32f1xx_hal_cortex.c ****   * @retval None
 298:c/stm32f1xx_hal_cortex.c ****   */
 299:c/stm32f1xx_hal_cortex.c **** void HAL_MPU_Enable(uint32_t MPU_Control)
 300:c/stm32f1xx_hal_cortex.c **** {
 301:c/stm32f1xx_hal_cortex.c ****   /* Enable the MPU */
 302:c/stm32f1xx_hal_cortex.c ****   MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 303:c/stm32f1xx_hal_cortex.c ****   
 304:c/stm32f1xx_hal_cortex.c ****   /* Enable fault exceptions */
 305:c/stm32f1xx_hal_cortex.c ****   SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 306:c/stm32f1xx_hal_cortex.c ****   
 307:c/stm32f1xx_hal_cortex.c ****   /* Ensure MPU setting take effects */
 308:c/stm32f1xx_hal_cortex.c ****   __DSB();
 309:c/stm32f1xx_hal_cortex.c ****   __ISB();
 310:c/stm32f1xx_hal_cortex.c **** }
 311:c/stm32f1xx_hal_cortex.c **** 
 312:c/stm32f1xx_hal_cortex.c **** /**
 313:c/stm32f1xx_hal_cortex.c ****   * @brief  Initializes and configures the Region and the memory to be protected.
 314:c/stm32f1xx_hal_cortex.c ****   * @param  MPU_Init: Pointer to a MPU_Region_InitTypeDef structure that contains
 315:c/stm32f1xx_hal_cortex.c ****   *                the initialization and configuration information.
 316:c/stm32f1xx_hal_cortex.c ****   * @retval None
 317:c/stm32f1xx_hal_cortex.c ****   */
 318:c/stm32f1xx_hal_cortex.c **** void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
 319:c/stm32f1xx_hal_cortex.c **** {
 320:c/stm32f1xx_hal_cortex.c ****   /* Check the parameters */
 321:c/stm32f1xx_hal_cortex.c ****   assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
 322:c/stm32f1xx_hal_cortex.c ****   assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));
 323:c/stm32f1xx_hal_cortex.c **** 
 324:c/stm32f1xx_hal_cortex.c ****   /* Set the Region number */
 325:c/stm32f1xx_hal_cortex.c ****   MPU->RNR = MPU_Init->Number;
 326:c/stm32f1xx_hal_cortex.c **** 
 327:c/stm32f1xx_hal_cortex.c ****   if ((MPU_Init->Enable) != RESET)
 328:c/stm32f1xx_hal_cortex.c ****   {
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 51


 329:c/stm32f1xx_hal_cortex.c ****     /* Check the parameters */
 330:c/stm32f1xx_hal_cortex.c ****     assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
 331:c/stm32f1xx_hal_cortex.c ****     assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
 332:c/stm32f1xx_hal_cortex.c ****     assert_param(IS_MPU_TEX_LEVEL(MPU_Init->TypeExtField));
 333:c/stm32f1xx_hal_cortex.c ****     assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
 334:c/stm32f1xx_hal_cortex.c ****     assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
 335:c/stm32f1xx_hal_cortex.c ****     assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
 336:c/stm32f1xx_hal_cortex.c ****     assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
 337:c/stm32f1xx_hal_cortex.c ****     assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
 338:c/stm32f1xx_hal_cortex.c ****     
 339:c/stm32f1xx_hal_cortex.c ****     MPU->RBAR = MPU_Init->BaseAddress;
 340:c/stm32f1xx_hal_cortex.c ****     MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 341:c/stm32f1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 342:c/stm32f1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 343:c/stm32f1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 344:c/stm32f1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 345:c/stm32f1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 346:c/stm32f1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 347:c/stm32f1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 348:c/stm32f1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 349:c/stm32f1xx_hal_cortex.c ****   }
 350:c/stm32f1xx_hal_cortex.c ****   else
 351:c/stm32f1xx_hal_cortex.c ****   {
 352:c/stm32f1xx_hal_cortex.c ****     MPU->RBAR = 0x00U;
 353:c/stm32f1xx_hal_cortex.c ****     MPU->RASR = 0x00U;
 354:c/stm32f1xx_hal_cortex.c ****   }
 355:c/stm32f1xx_hal_cortex.c **** }
 356:c/stm32f1xx_hal_cortex.c **** #endif /* __MPU_PRESENT */
 357:c/stm32f1xx_hal_cortex.c **** 
 358:c/stm32f1xx_hal_cortex.c **** /**
 359:c/stm32f1xx_hal_cortex.c ****   * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
 360:c/stm32f1xx_hal_cortex.c ****   * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
 361:c/stm32f1xx_hal_cortex.c ****   */
 362:c/stm32f1xx_hal_cortex.c **** uint32_t HAL_NVIC_GetPriorityGrouping(void)
 363:c/stm32f1xx_hal_cortex.c **** {
 418              		.loc 1 363 0
 419              		.cfi_startproc
 420              		@ args = 0, pretend = 0, frame = 0
 421              		@ frame_needed = 0, uses_anonymous_args = 0
 422              		@ link register save eliminated.
 423              	.LBB70:
 424              	.LBB71:
1443:c/core_cm3.h  **** }
 425              		.loc 2 1443 0
 426 0000 024B     		ldr	r3, .L27
 427 0002 D868     		ldr	r0, [r3, #12]
 428              	.LBE71:
 429              	.LBE70:
 364:c/stm32f1xx_hal_cortex.c ****   /* Get the PRIGROUP[10:8] field value */
 365:c/stm32f1xx_hal_cortex.c ****   return NVIC_GetPriorityGrouping();
 366:c/stm32f1xx_hal_cortex.c **** }
 430              		.loc 1 366 0
 431 0004 C0F30220 		ubfx	r0, r0, #8, #3
 432 0008 7047     		bx	lr
 433              	.L28:
 434 000a 00BF     		.align	2
 435              	.L27:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 52


 436 000c 00ED00E0 		.word	-536810240
 437              		.cfi_endproc
 438              	.LFE70:
 440              		.section	.text.HAL_NVIC_GetPriority,"ax",%progbits
 441              		.align	1
 442              		.global	HAL_NVIC_GetPriority
 443              		.syntax unified
 444              		.thumb
 445              		.thumb_func
 446              		.fpu softvfp
 448              	HAL_NVIC_GetPriority:
 449              	.LFB71:
 367:c/stm32f1xx_hal_cortex.c **** 
 368:c/stm32f1xx_hal_cortex.c **** /**
 369:c/stm32f1xx_hal_cortex.c ****   * @brief  Gets the priority of an interrupt.
 370:c/stm32f1xx_hal_cortex.c ****   * @param  IRQn: External interrupt number.
 371:c/stm32f1xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 372:c/stm32f1xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 373:c/stm32f1xx_hal_cortex.c ****   * @param   PriorityGroup: the priority grouping bits length.
 374:c/stm32f1xx_hal_cortex.c ****   *         This parameter can be one of the following values:
 375:c/stm32f1xx_hal_cortex.c ****   *           @arg NVIC_PRIORITYGROUP_0: 0 bits for preemption priority
 376:c/stm32f1xx_hal_cortex.c ****   *                                      4 bits for subpriority
 377:c/stm32f1xx_hal_cortex.c ****   *           @arg NVIC_PRIORITYGROUP_1: 1 bits for preemption priority
 378:c/stm32f1xx_hal_cortex.c ****   *                                      3 bits for subpriority
 379:c/stm32f1xx_hal_cortex.c ****   *           @arg NVIC_PRIORITYGROUP_2: 2 bits for preemption priority
 380:c/stm32f1xx_hal_cortex.c ****   *                                      2 bits for subpriority
 381:c/stm32f1xx_hal_cortex.c ****   *           @arg NVIC_PRIORITYGROUP_3: 3 bits for preemption priority
 382:c/stm32f1xx_hal_cortex.c ****   *                                      1 bits for subpriority
 383:c/stm32f1xx_hal_cortex.c ****   *           @arg NVIC_PRIORITYGROUP_4: 4 bits for preemption priority
 384:c/stm32f1xx_hal_cortex.c ****   *                                      0 bits for subpriority
 385:c/stm32f1xx_hal_cortex.c ****   * @param  pPreemptPriority: Pointer on the Preemptive priority value (starting from 0).
 386:c/stm32f1xx_hal_cortex.c ****   * @param  pSubPriority: Pointer on the Subpriority value (starting from 0).
 387:c/stm32f1xx_hal_cortex.c ****   * @retval None
 388:c/stm32f1xx_hal_cortex.c ****   */
 389:c/stm32f1xx_hal_cortex.c **** void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint3
 390:c/stm32f1xx_hal_cortex.c **** {
 450              		.loc 1 390 0
 451              		.cfi_startproc
 452              		@ args = 0, pretend = 0, frame = 0
 453              		@ frame_needed = 0, uses_anonymous_args = 0
 454              	.LVL30:
 455 0000 70B5     		push	{r4, r5, r6, lr}
 456              		.cfi_def_cfa_offset 16
 457              		.cfi_offset 4, -16
 458              		.cfi_offset 5, -12
 459              		.cfi_offset 6, -8
 460              		.cfi_offset 14, -4
 461              	.LBB76:
 462              	.LBB77:
1549:c/core_cm3.h  ****   {
 463              		.loc 2 1549 0
 464 0002 0028     		cmp	r0, #0
 465              	.LVL31:
1555:c/core_cm3.h  ****   }
 466              		.loc 2 1555 0
 467 0004 ACBF     		ite	ge
 468 0006 00F16040 		addge	r0, r0, #-536870912
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 53


1551:c/core_cm3.h  ****   }
 469              		.loc 2 1551 0
 470 000a 134C     		ldrlt	r4, .L35
 471              	.LBE77:
 472              	.LBE76:
 473              	.LBB80:
 474              	.LBB81:
1600:c/core_cm3.h  ****   uint32_t PreemptPriorityBits;
 475              		.loc 2 1600 0
 476 000c 01F00701 		and	r1, r1, #7
 477              	.LVL32:
 478              	.LBE81:
 479              	.LBE80:
 480              	.LBB84:
 481              	.LBB78:
1551:c/core_cm3.h  ****   }
 482              		.loc 2 1551 0
 483 0010 B5BF     		itete	lt
 484 0012 00F00F00 		andlt	r0, r0, #15
1555:c/core_cm3.h  ****   }
 485              		.loc 2 1555 0
 486 0016 00F56140 		addge	r0, r0, #57600
1551:c/core_cm3.h  ****   }
 487              		.loc 2 1551 0
 488 001a 255C     		ldrblt	r5, [r4, r0]	@ zero_extendqisi2
1555:c/core_cm3.h  ****   }
 489              		.loc 2 1555 0
 490 001c 90F80053 		ldrbge	r5, [r0, #768]	@ zero_extendqisi2
 491              	.LBE78:
 492              	.LBE84:
 493              	.LBB85:
 494              	.LBB82:
1604:c/core_cm3.h  ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 495              		.loc 2 1604 0
 496 0020 C1F10700 		rsb	r0, r1, #7
1605:c/core_cm3.h  **** 
 497              		.loc 2 1605 0
 498 0024 0C1D     		adds	r4, r1, #4
1604:c/core_cm3.h  ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 499              		.loc 2 1604 0
 500 0026 0428     		cmp	r0, #4
 501 0028 28BF     		it	cs
 502 002a 0420     		movcs	r0, #4
1605:c/core_cm3.h  **** 
 503              		.loc 2 1605 0
 504 002c 062C     		cmp	r4, #6
 505 002e 98BF     		it	ls
 506 0030 0021     		movls	r1, #0
1607:c/core_cm3.h  ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
 507              		.loc 2 1607 0
 508 0032 4FF00104 		mov	r4, #1
 509              	.LBE82:
 510              	.LBE85:
 511              	.LBB86:
 512              	.LBB79:
1555:c/core_cm3.h  ****   }
 513              		.loc 2 1555 0
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 54


 514 0036 4FEA1515 		lsr	r5, r5, #4
 515              	.LVL33:
 516              	.LBE79:
 517              	.LBE86:
 518              	.LBB87:
 519              	.LBB83:
1605:c/core_cm3.h  **** 
 520              		.loc 2 1605 0
 521 003a 88BF     		it	hi
 522 003c 0339     		subhi	r1, r1, #3
 523              	.LVL34:
1607:c/core_cm3.h  ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
 524              		.loc 2 1607 0
 525 003e 25FA01F6 		lsr	r6, r5, r1
 526 0042 04FA00F0 		lsl	r0, r4, r0
 527              	.LVL35:
1608:c/core_cm3.h  **** }
 528              		.loc 2 1608 0
 529 0046 04FA01F1 		lsl	r1, r4, r1
 530              	.LVL36:
1607:c/core_cm3.h  ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
 531              		.loc 2 1607 0
 532 004a 0138     		subs	r0, r0, #1
1608:c/core_cm3.h  **** }
 533              		.loc 2 1608 0
 534 004c 0139     		subs	r1, r1, #1
1607:c/core_cm3.h  ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
 535              		.loc 2 1607 0
 536 004e 3040     		ands	r0, r0, r6
1608:c/core_cm3.h  **** }
 537              		.loc 2 1608 0
 538 0050 2940     		ands	r1, r1, r5
1607:c/core_cm3.h  ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
 539              		.loc 2 1607 0
 540 0052 1060     		str	r0, [r2]
1608:c/core_cm3.h  **** }
 541              		.loc 2 1608 0
 542 0054 1960     		str	r1, [r3]
 543              	.LVL37:
 544 0056 70BD     		pop	{r4, r5, r6, pc}
 545              	.L36:
 546              		.align	2
 547              	.L35:
 548 0058 14ED00E0 		.word	-536810220
 549              	.LBE83:
 550              	.LBE87:
 551              		.cfi_endproc
 552              	.LFE71:
 554              		.section	.text.HAL_NVIC_SetPendingIRQ,"ax",%progbits
 555              		.align	1
 556              		.global	HAL_NVIC_SetPendingIRQ
 557              		.syntax unified
 558              		.thumb
 559              		.thumb_func
 560              		.fpu softvfp
 562              	HAL_NVIC_SetPendingIRQ:
 563              	.LFB72:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 55


 391:c/stm32f1xx_hal_cortex.c ****   /* Check the parameters */
 392:c/stm32f1xx_hal_cortex.c ****   assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 393:c/stm32f1xx_hal_cortex.c ****  /* Get priority for Cortex-M system or device specific interrupts */
 394:c/stm32f1xx_hal_cortex.c ****   NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 395:c/stm32f1xx_hal_cortex.c **** }
 396:c/stm32f1xx_hal_cortex.c **** 
 397:c/stm32f1xx_hal_cortex.c **** /**
 398:c/stm32f1xx_hal_cortex.c ****   * @brief  Sets Pending bit of an external interrupt.
 399:c/stm32f1xx_hal_cortex.c ****   * @param  IRQn External interrupt number
 400:c/stm32f1xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 401:c/stm32f1xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 402:c/stm32f1xx_hal_cortex.c ****   * @retval None
 403:c/stm32f1xx_hal_cortex.c ****   */
 404:c/stm32f1xx_hal_cortex.c **** void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
 405:c/stm32f1xx_hal_cortex.c **** {
 564              		.loc 1 405 0
 565              		.cfi_startproc
 566              		@ args = 0, pretend = 0, frame = 0
 567              		@ frame_needed = 0, uses_anonymous_args = 0
 568              		@ link register save eliminated.
 569              	.LVL38:
 570              	.LBB90:
 571              	.LBB91:
1489:c/core_cm3.h  **** }
 572              		.loc 2 1489 0
 573 0000 0122     		movs	r2, #1
 574 0002 4309     		lsrs	r3, r0, #5
 575 0004 00F01F00 		and	r0, r0, #31
 576              	.LVL39:
 577 0008 02FA00F0 		lsl	r0, r2, r0
 578 000c 024A     		ldr	r2, .L38
 579 000e 4033     		adds	r3, r3, #64
 580 0010 42F82300 		str	r0, [r2, r3, lsl #2]
 581              	.LVL40:
 582 0014 7047     		bx	lr
 583              	.L39:
 584 0016 00BF     		.align	2
 585              	.L38:
 586 0018 00E100E0 		.word	-536813312
 587              	.LBE91:
 588              	.LBE90:
 589              		.cfi_endproc
 590              	.LFE72:
 592              		.section	.text.HAL_NVIC_GetPendingIRQ,"ax",%progbits
 593              		.align	1
 594              		.global	HAL_NVIC_GetPendingIRQ
 595              		.syntax unified
 596              		.thumb
 597              		.thumb_func
 598              		.fpu softvfp
 600              	HAL_NVIC_GetPendingIRQ:
 601              	.LFB73:
 406:c/stm32f1xx_hal_cortex.c ****   /* Check the parameters */
 407:c/stm32f1xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 408:c/stm32f1xx_hal_cortex.c ****   
 409:c/stm32f1xx_hal_cortex.c ****   /* Set interrupt pending */
 410:c/stm32f1xx_hal_cortex.c ****   NVIC_SetPendingIRQ(IRQn);
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 56


 411:c/stm32f1xx_hal_cortex.c **** }
 412:c/stm32f1xx_hal_cortex.c **** 
 413:c/stm32f1xx_hal_cortex.c **** /**
 414:c/stm32f1xx_hal_cortex.c ****   * @brief  Gets Pending Interrupt (reads the pending register in the NVIC 
 415:c/stm32f1xx_hal_cortex.c ****   *         and returns the pending bit for the specified interrupt).
 416:c/stm32f1xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 417:c/stm32f1xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 418:c/stm32f1xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 419:c/stm32f1xx_hal_cortex.c ****   * @retval status: - 0  Interrupt status is not pending.
 420:c/stm32f1xx_hal_cortex.c ****   *                 - 1  Interrupt status is pending.
 421:c/stm32f1xx_hal_cortex.c ****   */
 422:c/stm32f1xx_hal_cortex.c **** uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
 423:c/stm32f1xx_hal_cortex.c **** {
 602              		.loc 1 423 0
 603              		.cfi_startproc
 604              		@ args = 0, pretend = 0, frame = 0
 605              		@ frame_needed = 0, uses_anonymous_args = 0
 606              		@ link register save eliminated.
 607              	.LVL41:
 608              	.LBB94:
 609              	.LBB95:
1478:c/core_cm3.h  **** }
 610              		.loc 2 1478 0
 611 0000 4309     		lsrs	r3, r0, #5
 612 0002 054A     		ldr	r2, .L41
 613 0004 4033     		adds	r3, r3, #64
 614 0006 52F82330 		ldr	r3, [r2, r3, lsl #2]
 615              	.LVL42:
 616 000a 00F01F00 		and	r0, r0, #31
 617              	.LVL43:
 618 000e 23FA00F0 		lsr	r0, r3, r0
 619              	.LBE95:
 620              	.LBE94:
 424:c/stm32f1xx_hal_cortex.c ****   /* Check the parameters */
 425:c/stm32f1xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 426:c/stm32f1xx_hal_cortex.c **** 
 427:c/stm32f1xx_hal_cortex.c ****   /* Return 1 if pending else 0 */
 428:c/stm32f1xx_hal_cortex.c ****   return NVIC_GetPendingIRQ(IRQn);
 429:c/stm32f1xx_hal_cortex.c **** }
 621              		.loc 1 429 0
 622 0012 00F00100 		and	r0, r0, #1
 623 0016 7047     		bx	lr
 624              	.L42:
 625              		.align	2
 626              	.L41:
 627 0018 00E100E0 		.word	-536813312
 628              		.cfi_endproc
 629              	.LFE73:
 631              		.section	.text.HAL_NVIC_ClearPendingIRQ,"ax",%progbits
 632              		.align	1
 633              		.global	HAL_NVIC_ClearPendingIRQ
 634              		.syntax unified
 635              		.thumb
 636              		.thumb_func
 637              		.fpu softvfp
 639              	HAL_NVIC_ClearPendingIRQ:
 640              	.LFB74:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 57


 430:c/stm32f1xx_hal_cortex.c **** 
 431:c/stm32f1xx_hal_cortex.c **** /**
 432:c/stm32f1xx_hal_cortex.c ****   * @brief  Clears the pending bit of an external interrupt.
 433:c/stm32f1xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 434:c/stm32f1xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 435:c/stm32f1xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 436:c/stm32f1xx_hal_cortex.c ****   * @retval None
 437:c/stm32f1xx_hal_cortex.c ****   */
 438:c/stm32f1xx_hal_cortex.c **** void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 439:c/stm32f1xx_hal_cortex.c **** {
 641              		.loc 1 439 0
 642              		.cfi_startproc
 643              		@ args = 0, pretend = 0, frame = 0
 644              		@ frame_needed = 0, uses_anonymous_args = 0
 645              		@ link register save eliminated.
 646              	.LVL44:
 647              	.LBB98:
 648              	.LBB99:
1500:c/core_cm3.h  **** }
 649              		.loc 2 1500 0
 650 0000 0122     		movs	r2, #1
 651 0002 4309     		lsrs	r3, r0, #5
 652 0004 00F01F00 		and	r0, r0, #31
 653              	.LVL45:
 654 0008 02FA00F0 		lsl	r0, r2, r0
 655 000c 024A     		ldr	r2, .L44
 656 000e 6033     		adds	r3, r3, #96
 657 0010 42F82300 		str	r0, [r2, r3, lsl #2]
 658              	.LVL46:
 659 0014 7047     		bx	lr
 660              	.L45:
 661 0016 00BF     		.align	2
 662              	.L44:
 663 0018 00E100E0 		.word	-536813312
 664              	.LBE99:
 665              	.LBE98:
 666              		.cfi_endproc
 667              	.LFE74:
 669              		.section	.text.HAL_NVIC_GetActive,"ax",%progbits
 670              		.align	1
 671              		.global	HAL_NVIC_GetActive
 672              		.syntax unified
 673              		.thumb
 674              		.thumb_func
 675              		.fpu softvfp
 677              	HAL_NVIC_GetActive:
 678              	.LFB75:
 440:c/stm32f1xx_hal_cortex.c ****   /* Check the parameters */
 441:c/stm32f1xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 442:c/stm32f1xx_hal_cortex.c **** 
 443:c/stm32f1xx_hal_cortex.c ****   /* Clear pending interrupt */
 444:c/stm32f1xx_hal_cortex.c ****   NVIC_ClearPendingIRQ(IRQn);
 445:c/stm32f1xx_hal_cortex.c **** }
 446:c/stm32f1xx_hal_cortex.c **** 
 447:c/stm32f1xx_hal_cortex.c **** /**
 448:c/stm32f1xx_hal_cortex.c ****   * @brief Gets active interrupt ( reads the active register in NVIC and returns the active bit).
 449:c/stm32f1xx_hal_cortex.c ****   * @param IRQn External interrupt number
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 58


 450:c/stm32f1xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 451:c/stm32f1xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 452:c/stm32f1xx_hal_cortex.c ****   * @retval status: - 0  Interrupt status is not pending.
 453:c/stm32f1xx_hal_cortex.c ****   *                 - 1  Interrupt status is pending.
 454:c/stm32f1xx_hal_cortex.c ****   */
 455:c/stm32f1xx_hal_cortex.c **** uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
 456:c/stm32f1xx_hal_cortex.c **** {
 679              		.loc 1 456 0
 680              		.cfi_startproc
 681              		@ args = 0, pretend = 0, frame = 0
 682              		@ frame_needed = 0, uses_anonymous_args = 0
 683              		@ link register save eliminated.
 684              	.LVL47:
 685              	.LBB102:
 686              	.LBB103:
1513:c/core_cm3.h  **** }
 687              		.loc 2 1513 0
 688 0000 4309     		lsrs	r3, r0, #5
 689 0002 054A     		ldr	r2, .L47
 690 0004 8033     		adds	r3, r3, #128
 691 0006 52F82330 		ldr	r3, [r2, r3, lsl #2]
 692              	.LVL48:
 693 000a 00F01F00 		and	r0, r0, #31
 694              	.LVL49:
 695 000e 23FA00F0 		lsr	r0, r3, r0
 696              	.LBE103:
 697              	.LBE102:
 457:c/stm32f1xx_hal_cortex.c ****   /* Check the parameters */
 458:c/stm32f1xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 459:c/stm32f1xx_hal_cortex.c **** 
 460:c/stm32f1xx_hal_cortex.c ****   /* Return 1 if active else 0 */
 461:c/stm32f1xx_hal_cortex.c ****   return NVIC_GetActive(IRQn);
 462:c/stm32f1xx_hal_cortex.c **** }
 698              		.loc 1 462 0
 699 0012 00F00100 		and	r0, r0, #1
 700 0016 7047     		bx	lr
 701              	.L48:
 702              		.align	2
 703              	.L47:
 704 0018 00E100E0 		.word	-536813312
 705              		.cfi_endproc
 706              	.LFE75:
 708              		.section	.text.HAL_SYSTICK_CLKSourceConfig,"ax",%progbits
 709              		.align	1
 710              		.global	HAL_SYSTICK_CLKSourceConfig
 711              		.syntax unified
 712              		.thumb
 713              		.thumb_func
 714              		.fpu softvfp
 716              	HAL_SYSTICK_CLKSourceConfig:
 717              	.LFB76:
 463:c/stm32f1xx_hal_cortex.c **** 
 464:c/stm32f1xx_hal_cortex.c **** /**
 465:c/stm32f1xx_hal_cortex.c ****   * @brief  Configures the SysTick clock source.
 466:c/stm32f1xx_hal_cortex.c ****   * @param  CLKSource: specifies the SysTick clock source.
 467:c/stm32f1xx_hal_cortex.c ****   *         This parameter can be one of the following values:
 468:c/stm32f1xx_hal_cortex.c ****   *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 59


 469:c/stm32f1xx_hal_cortex.c ****   *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
 470:c/stm32f1xx_hal_cortex.c ****   * @retval None
 471:c/stm32f1xx_hal_cortex.c ****   */
 472:c/stm32f1xx_hal_cortex.c **** void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
 473:c/stm32f1xx_hal_cortex.c **** {
 718              		.loc 1 473 0
 719              		.cfi_startproc
 720              		@ args = 0, pretend = 0, frame = 0
 721              		@ frame_needed = 0, uses_anonymous_args = 0
 722              		@ link register save eliminated.
 723              	.LVL50:
 724 0000 044B     		ldr	r3, .L53
 474:c/stm32f1xx_hal_cortex.c ****   /* Check the parameters */
 475:c/stm32f1xx_hal_cortex.c ****   assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 476:c/stm32f1xx_hal_cortex.c ****   if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 725              		.loc 1 476 0
 726 0002 0428     		cmp	r0, #4
 477:c/stm32f1xx_hal_cortex.c ****   {
 478:c/stm32f1xx_hal_cortex.c ****     SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 727              		.loc 1 478 0
 728 0004 1A68     		ldr	r2, [r3]
 729 0006 0CBF     		ite	eq
 730 0008 42F00402 		orreq	r2, r2, #4
 479:c/stm32f1xx_hal_cortex.c ****   }
 480:c/stm32f1xx_hal_cortex.c ****   else
 481:c/stm32f1xx_hal_cortex.c ****   {
 482:c/stm32f1xx_hal_cortex.c ****     SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 731              		.loc 1 482 0
 732 000c 22F00402 		bicne	r2, r2, #4
 733 0010 1A60     		str	r2, [r3]
 734 0012 7047     		bx	lr
 735              	.L54:
 736              		.align	2
 737              	.L53:
 738 0014 10E000E0 		.word	-536813552
 739              		.cfi_endproc
 740              	.LFE76:
 742              		.section	.text.HAL_SYSTICK_Callback,"ax",%progbits
 743              		.align	1
 744              		.weak	HAL_SYSTICK_Callback
 745              		.syntax unified
 746              		.thumb
 747              		.thumb_func
 748              		.fpu softvfp
 750              	HAL_SYSTICK_Callback:
 751              	.LFB78:
 483:c/stm32f1xx_hal_cortex.c ****   }
 484:c/stm32f1xx_hal_cortex.c **** }
 485:c/stm32f1xx_hal_cortex.c **** 
 486:c/stm32f1xx_hal_cortex.c **** /**
 487:c/stm32f1xx_hal_cortex.c ****   * @brief  This function handles SYSTICK interrupt request.
 488:c/stm32f1xx_hal_cortex.c ****   * @retval None
 489:c/stm32f1xx_hal_cortex.c ****   */
 490:c/stm32f1xx_hal_cortex.c **** void HAL_SYSTICK_IRQHandler(void)
 491:c/stm32f1xx_hal_cortex.c **** {
 492:c/stm32f1xx_hal_cortex.c ****   HAL_SYSTICK_Callback();
 493:c/stm32f1xx_hal_cortex.c **** }
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 60


 494:c/stm32f1xx_hal_cortex.c **** 
 495:c/stm32f1xx_hal_cortex.c **** /**
 496:c/stm32f1xx_hal_cortex.c ****   * @brief  SYSTICK callback.
 497:c/stm32f1xx_hal_cortex.c ****   * @retval None
 498:c/stm32f1xx_hal_cortex.c ****   */
 499:c/stm32f1xx_hal_cortex.c **** __weak void HAL_SYSTICK_Callback(void)
 500:c/stm32f1xx_hal_cortex.c **** {
 752              		.loc 1 500 0
 753              		.cfi_startproc
 754              		@ args = 0, pretend = 0, frame = 0
 755              		@ frame_needed = 0, uses_anonymous_args = 0
 756              		@ link register save eliminated.
 757 0000 7047     		bx	lr
 758              		.cfi_endproc
 759              	.LFE78:
 761              		.section	.text.HAL_SYSTICK_IRQHandler,"ax",%progbits
 762              		.align	1
 763              		.global	HAL_SYSTICK_IRQHandler
 764              		.syntax unified
 765              		.thumb
 766              		.thumb_func
 767              		.fpu softvfp
 769              	HAL_SYSTICK_IRQHandler:
 770              	.LFB77:
 491:c/stm32f1xx_hal_cortex.c ****   HAL_SYSTICK_Callback();
 771              		.loc 1 491 0
 772              		.cfi_startproc
 773              		@ args = 0, pretend = 0, frame = 0
 774              		@ frame_needed = 0, uses_anonymous_args = 0
 491:c/stm32f1xx_hal_cortex.c ****   HAL_SYSTICK_Callback();
 775              		.loc 1 491 0
 776 0000 08B5     		push	{r3, lr}
 777              		.cfi_def_cfa_offset 8
 778              		.cfi_offset 3, -8
 779              		.cfi_offset 14, -4
 492:c/stm32f1xx_hal_cortex.c **** }
 780              		.loc 1 492 0
 781 0002 FFF7FEFF 		bl	HAL_SYSTICK_Callback
 782              	.LVL51:
 783 0006 08BD     		pop	{r3, pc}
 784              		.cfi_endproc
 785              	.LFE77:
 787              		.text
 788              	.Letext0:
 789              		.file 4 "c/stm32f103xb.h"
 790              		.file 5 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/machine/_
 791              		.file 6 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_stdi
 792              		.file 7 "c/system_stm32f1xx.h"
 793              		.file 8 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/lock.
 794              		.file 9 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_type
 795              		.file 10 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/lib/gcc/arm-none-eabi/6.3.1/in
 796              		.file 11 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/reen
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s 			page 61


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_cortex.c
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:16     .text.HAL_NVIC_SetPriorityGrouping:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:23     .text.HAL_NVIC_SetPriorityGrouping:0000000000000000 HAL_NVIC_SetPriorityGrouping
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:62     .text.HAL_NVIC_SetPriorityGrouping:0000000000000020 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:69     .text.HAL_NVIC_SetPriority:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:76     .text.HAL_NVIC_SetPriority:0000000000000000 HAL_NVIC_SetPriority
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:179    .text.HAL_NVIC_SetPriority:0000000000000060 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:187    .text.HAL_NVIC_EnableIRQ:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:194    .text.HAL_NVIC_EnableIRQ:0000000000000000 HAL_NVIC_EnableIRQ
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:217    .text.HAL_NVIC_EnableIRQ:0000000000000014 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:224    .text.HAL_NVIC_DisableIRQ:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:231    .text.HAL_NVIC_DisableIRQ:0000000000000000 HAL_NVIC_DisableIRQ
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:255    .text.HAL_NVIC_DisableIRQ:0000000000000018 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:262    .text.HAL_NVIC_SystemReset:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:269    .text.HAL_NVIC_SystemReset:0000000000000000 HAL_NVIC_SystemReset
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:326    .text.HAL_NVIC_SystemReset:000000000000001c $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:336    .text.HAL_SYSTICK_Config:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:343    .text.HAL_SYSTICK_Config:0000000000000000 HAL_SYSTICK_Config
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:403    .text.HAL_SYSTICK_Config:0000000000000024 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:409    .text.HAL_NVIC_GetPriorityGrouping:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:416    .text.HAL_NVIC_GetPriorityGrouping:0000000000000000 HAL_NVIC_GetPriorityGrouping
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:436    .text.HAL_NVIC_GetPriorityGrouping:000000000000000c $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:441    .text.HAL_NVIC_GetPriority:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:448    .text.HAL_NVIC_GetPriority:0000000000000000 HAL_NVIC_GetPriority
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:548    .text.HAL_NVIC_GetPriority:0000000000000058 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:555    .text.HAL_NVIC_SetPendingIRQ:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:562    .text.HAL_NVIC_SetPendingIRQ:0000000000000000 HAL_NVIC_SetPendingIRQ
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:586    .text.HAL_NVIC_SetPendingIRQ:0000000000000018 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:593    .text.HAL_NVIC_GetPendingIRQ:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:600    .text.HAL_NVIC_GetPendingIRQ:0000000000000000 HAL_NVIC_GetPendingIRQ
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:627    .text.HAL_NVIC_GetPendingIRQ:0000000000000018 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:632    .text.HAL_NVIC_ClearPendingIRQ:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:639    .text.HAL_NVIC_ClearPendingIRQ:0000000000000000 HAL_NVIC_ClearPendingIRQ
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:663    .text.HAL_NVIC_ClearPendingIRQ:0000000000000018 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:670    .text.HAL_NVIC_GetActive:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:677    .text.HAL_NVIC_GetActive:0000000000000000 HAL_NVIC_GetActive
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:704    .text.HAL_NVIC_GetActive:0000000000000018 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:709    .text.HAL_SYSTICK_CLKSourceConfig:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:716    .text.HAL_SYSTICK_CLKSourceConfig:0000000000000000 HAL_SYSTICK_CLKSourceConfig
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:738    .text.HAL_SYSTICK_CLKSourceConfig:0000000000000014 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:743    .text.HAL_SYSTICK_Callback:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:750    .text.HAL_SYSTICK_Callback:0000000000000000 HAL_SYSTICK_Callback
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:762    .text.HAL_SYSTICK_IRQHandler:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmkIR7O.s:769    .text.HAL_SYSTICK_IRQHandler:0000000000000000 HAL_SYSTICK_IRQHandler
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
exit code: 0
OPT_LEVEL = Some("s")
HOST = Some("x86_64-apple-darwin")
CFLAGS_arm-none-eabi = None
CFLAGS_arm_none_eabi = None
TARGET_CFLAGS = None
CFLAGS = None
DEBUG = Some("true")
running: "arm-none-eabi-gcc" "-Os" "-ffunction-sections" "-fdata-sections" "-g" "-DSTM32F103xB" "-DUSE_HAL_DRIVER" "-mcpu=cortex-m3" "-mthumb" "-Wall" "-fdata-sections" "-ffunction-sections" "-Wa,-a,-ad" "-g" "-Wall" "-Wextra" "-o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/stm32f1xx_hal_gpio.o" "-c" "c/stm32f1xx_hal_gpio.c"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_hal_gpio.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_GPIO_Init
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_GPIO_Init:
  24              	.LFB64:
  25              		.file 1 "c/stm32f1xx_hal_gpio.c"
   1:c/stm32f1xx_hal_gpio.c **** /**
   2:c/stm32f1xx_hal_gpio.c ****   ******************************************************************************
   3:c/stm32f1xx_hal_gpio.c ****   * @file    stm32f1xx_hal_gpio.c
   4:c/stm32f1xx_hal_gpio.c ****   * @author  MCD Application Team
   5:c/stm32f1xx_hal_gpio.c ****   * @version V1.1.1
   6:c/stm32f1xx_hal_gpio.c ****   * @date    12-May-2017
   7:c/stm32f1xx_hal_gpio.c ****   * @brief   GPIO HAL module driver.
   8:c/stm32f1xx_hal_gpio.c ****   *          This file provides firmware functions to manage the following 
   9:c/stm32f1xx_hal_gpio.c ****   *          functionalities of the General Purpose Input/Output (GPIO) peripheral:
  10:c/stm32f1xx_hal_gpio.c ****   *           + Initialization and de-initialization functions
  11:c/stm32f1xx_hal_gpio.c ****   *           + IO operation functions
  12:c/stm32f1xx_hal_gpio.c ****   *
  13:c/stm32f1xx_hal_gpio.c ****   @verbatim
  14:c/stm32f1xx_hal_gpio.c ****   ==============================================================================
  15:c/stm32f1xx_hal_gpio.c ****                     ##### GPIO Peripheral features #####
  16:c/stm32f1xx_hal_gpio.c ****   ==============================================================================
  17:c/stm32f1xx_hal_gpio.c ****   [..] 
  18:c/stm32f1xx_hal_gpio.c ****   Subject to the specific hardware characteristics of each I/O port listed in the datasheet, each
  19:c/stm32f1xx_hal_gpio.c ****   port bit of the General Purpose IO (GPIO) Ports, can be individually configured by software
  20:c/stm32f1xx_hal_gpio.c ****   in several modes:
  21:c/stm32f1xx_hal_gpio.c ****   (+) Input mode 
  22:c/stm32f1xx_hal_gpio.c ****   (+) Analog mode
  23:c/stm32f1xx_hal_gpio.c ****   (+) Output mode
  24:c/stm32f1xx_hal_gpio.c ****   (+) Alternate function mode
  25:c/stm32f1xx_hal_gpio.c ****   (+) External interrupt/event lines
  26:c/stm32f1xx_hal_gpio.c **** 
  27:c/stm32f1xx_hal_gpio.c ****   [..]  
  28:c/stm32f1xx_hal_gpio.c ****   During and just after reset, the alternate functions and external interrupt  
  29:c/stm32f1xx_hal_gpio.c ****   lines are not active and the I/O ports are configured in input floating mode.
  30:c/stm32f1xx_hal_gpio.c ****   
  31:c/stm32f1xx_hal_gpio.c ****   [..]   
  32:c/stm32f1xx_hal_gpio.c ****   All GPIO pins have weak internal pull-up and pull-down resistors, which can be 
  33:c/stm32f1xx_hal_gpio.c ****   activated or not.
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s 			page 2


  34:c/stm32f1xx_hal_gpio.c **** 
  35:c/stm32f1xx_hal_gpio.c ****   [..]
  36:c/stm32f1xx_hal_gpio.c ****   In Output or Alternate mode, each IO can be configured on open-drain or push-pull
  37:c/stm32f1xx_hal_gpio.c ****   type and the IO speed can be selected depending on the VDD value.
  38:c/stm32f1xx_hal_gpio.c **** 
  39:c/stm32f1xx_hal_gpio.c ****   [..]  
  40:c/stm32f1xx_hal_gpio.c ****   All ports have external interrupt/event capability. To use external interrupt 
  41:c/stm32f1xx_hal_gpio.c ****   lines, the port must be configured in input mode. All available GPIO pins are 
  42:c/stm32f1xx_hal_gpio.c ****   connected to the 16 external interrupt/event lines from EXTI0 to EXTI15.
  43:c/stm32f1xx_hal_gpio.c ****   
  44:c/stm32f1xx_hal_gpio.c ****   [..]  
  45:c/stm32f1xx_hal_gpio.c ****   The external interrupt/event controller consists of up to 20 edge detectors in connectivity
  46:c/stm32f1xx_hal_gpio.c ****   line devices, or 19 edge detectors in other devices for generating event/interrupt requests.
  47:c/stm32f1xx_hal_gpio.c ****   Each input line can be independently configured to select the type (event or interrupt) and
  48:c/stm32f1xx_hal_gpio.c ****   the corresponding trigger event (rising or falling or both). Each line can also masked
  49:c/stm32f1xx_hal_gpio.c ****   independently. A pending register maintains the status line of the interrupt requests
  50:c/stm32f1xx_hal_gpio.c ****  
  51:c/stm32f1xx_hal_gpio.c ****                      ##### How to use this driver #####
  52:c/stm32f1xx_hal_gpio.c ****   ==============================================================================  
  53:c/stm32f1xx_hal_gpio.c ****  [..]
  54:c/stm32f1xx_hal_gpio.c ****    (#) Enable the GPIO APB2 clock using the following function : __HAL_RCC_GPIOx_CLK_ENABLE(). 
  55:c/stm32f1xx_hal_gpio.c ****    
  56:c/stm32f1xx_hal_gpio.c ****    (#) Configure the GPIO pin(s) using HAL_GPIO_Init().
  57:c/stm32f1xx_hal_gpio.c ****        (++) Configure the IO mode using "Mode" member from GPIO_InitTypeDef structure
  58:c/stm32f1xx_hal_gpio.c ****        (++) Activate Pull-up, Pull-down resistor using "Pull" member from GPIO_InitTypeDef 
  59:c/stm32f1xx_hal_gpio.c ****             structure.
  60:c/stm32f1xx_hal_gpio.c ****        (++) In case of Output or alternate function mode selection: the speed is 
  61:c/stm32f1xx_hal_gpio.c ****             configured through "Speed" member from GPIO_InitTypeDef structure
  62:c/stm32f1xx_hal_gpio.c ****        (++) Analog mode is required when a pin is to be used as ADC channel 
  63:c/stm32f1xx_hal_gpio.c ****             or DAC output.
  64:c/stm32f1xx_hal_gpio.c ****        (++) In case of external interrupt/event selection the "Mode" member from 
  65:c/stm32f1xx_hal_gpio.c ****             GPIO_InitTypeDef structure select the type (interrupt or event) and 
  66:c/stm32f1xx_hal_gpio.c ****             the corresponding trigger event (rising or falling or both).
  67:c/stm32f1xx_hal_gpio.c ****    
  68:c/stm32f1xx_hal_gpio.c ****    (#) In case of external interrupt/event mode selection, configure NVIC IRQ priority 
  69:c/stm32f1xx_hal_gpio.c ****        mapped to the EXTI line using HAL_NVIC_SetPriority() and enable it using
  70:c/stm32f1xx_hal_gpio.c ****        HAL_NVIC_EnableIRQ().
  71:c/stm32f1xx_hal_gpio.c ****          
  72:c/stm32f1xx_hal_gpio.c ****    (#) To get the level of a pin configured in input mode use HAL_GPIO_ReadPin().
  73:c/stm32f1xx_hal_gpio.c ****             
  74:c/stm32f1xx_hal_gpio.c ****    (#) To set/reset the level of a pin configured in output mode use 
  75:c/stm32f1xx_hal_gpio.c ****        HAL_GPIO_WritePin()/HAL_GPIO_TogglePin().
  76:c/stm32f1xx_hal_gpio.c ****   
  77:c/stm32f1xx_hal_gpio.c ****    (#) To lock pin configuration until next reset use HAL_GPIO_LockPin().
  78:c/stm32f1xx_hal_gpio.c ****                  
  79:c/stm32f1xx_hal_gpio.c ****    (#) During and just after reset, the alternate functions are not 
  80:c/stm32f1xx_hal_gpio.c ****        active and the GPIO pins are configured in input floating mode (except JTAG
  81:c/stm32f1xx_hal_gpio.c ****        pins).
  82:c/stm32f1xx_hal_gpio.c ****   
  83:c/stm32f1xx_hal_gpio.c ****    (#) The LSE oscillator pins OSC32_IN and OSC32_OUT can be used as general purpose 
  84:c/stm32f1xx_hal_gpio.c ****        (PC14 and PC15, respectively) when the LSE oscillator is off. The LSE has 
  85:c/stm32f1xx_hal_gpio.c ****        priority over the GPIO function.
  86:c/stm32f1xx_hal_gpio.c ****   
  87:c/stm32f1xx_hal_gpio.c ****    (#) The HSE oscillator pins OSC_IN/OSC_OUT can be used as 
  88:c/stm32f1xx_hal_gpio.c ****        general purpose PD0 and PD1, respectively, when the HSE oscillator is off. 
  89:c/stm32f1xx_hal_gpio.c ****        The HSE has priority over the GPIO function.
  90:c/stm32f1xx_hal_gpio.c ****   
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s 			page 3


  91:c/stm32f1xx_hal_gpio.c ****   @endverbatim
  92:c/stm32f1xx_hal_gpio.c ****   ******************************************************************************
  93:c/stm32f1xx_hal_gpio.c ****   * @attention
  94:c/stm32f1xx_hal_gpio.c ****   *
  95:c/stm32f1xx_hal_gpio.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  96:c/stm32f1xx_hal_gpio.c ****   *
  97:c/stm32f1xx_hal_gpio.c ****   * Redistribution and use in source and binary forms, with or without modification,
  98:c/stm32f1xx_hal_gpio.c ****   * are permitted provided that the following conditions are met:
  99:c/stm32f1xx_hal_gpio.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 100:c/stm32f1xx_hal_gpio.c ****   *      this list of conditions and the following disclaimer.
 101:c/stm32f1xx_hal_gpio.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 102:c/stm32f1xx_hal_gpio.c ****   *      this list of conditions and the following disclaimer in the documentation
 103:c/stm32f1xx_hal_gpio.c ****   *      and/or other materials provided with the distribution.
 104:c/stm32f1xx_hal_gpio.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 105:c/stm32f1xx_hal_gpio.c ****   *      may be used to endorse or promote products derived from this software
 106:c/stm32f1xx_hal_gpio.c ****   *      without specific prior written permission.
 107:c/stm32f1xx_hal_gpio.c ****   *
 108:c/stm32f1xx_hal_gpio.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 109:c/stm32f1xx_hal_gpio.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 110:c/stm32f1xx_hal_gpio.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 111:c/stm32f1xx_hal_gpio.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 112:c/stm32f1xx_hal_gpio.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 113:c/stm32f1xx_hal_gpio.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 114:c/stm32f1xx_hal_gpio.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 115:c/stm32f1xx_hal_gpio.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 116:c/stm32f1xx_hal_gpio.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 117:c/stm32f1xx_hal_gpio.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 118:c/stm32f1xx_hal_gpio.c ****   *
 119:c/stm32f1xx_hal_gpio.c ****   ******************************************************************************  
 120:c/stm32f1xx_hal_gpio.c ****   */ 
 121:c/stm32f1xx_hal_gpio.c **** 
 122:c/stm32f1xx_hal_gpio.c **** /* Includes ------------------------------------------------------------------*/
 123:c/stm32f1xx_hal_gpio.c **** #include "stm32f1xx_hal.h"
 124:c/stm32f1xx_hal_gpio.c **** 
 125:c/stm32f1xx_hal_gpio.c **** /** @addtogroup STM32F1xx_HAL_Driver
 126:c/stm32f1xx_hal_gpio.c ****   * @{
 127:c/stm32f1xx_hal_gpio.c ****   */
 128:c/stm32f1xx_hal_gpio.c **** 
 129:c/stm32f1xx_hal_gpio.c **** /** @defgroup GPIO GPIO
 130:c/stm32f1xx_hal_gpio.c ****   * @brief GPIO HAL module driver
 131:c/stm32f1xx_hal_gpio.c ****   * @{
 132:c/stm32f1xx_hal_gpio.c ****   */
 133:c/stm32f1xx_hal_gpio.c **** 
 134:c/stm32f1xx_hal_gpio.c **** #ifdef HAL_GPIO_MODULE_ENABLED
 135:c/stm32f1xx_hal_gpio.c **** 
 136:c/stm32f1xx_hal_gpio.c **** /* Private typedef -----------------------------------------------------------*/
 137:c/stm32f1xx_hal_gpio.c **** /* Private define ------------------------------------------------------------*/
 138:c/stm32f1xx_hal_gpio.c **** /** @addtogroup GPIO_Private_Constants GPIO Private Constants
 139:c/stm32f1xx_hal_gpio.c ****   * @{
 140:c/stm32f1xx_hal_gpio.c ****   */
 141:c/stm32f1xx_hal_gpio.c **** #define GPIO_MODE             0x00000003U
 142:c/stm32f1xx_hal_gpio.c **** #define EXTI_MODE             0x10000000U
 143:c/stm32f1xx_hal_gpio.c **** #define GPIO_MODE_IT          0x00010000U
 144:c/stm32f1xx_hal_gpio.c **** #define GPIO_MODE_EVT         0x00020000U
 145:c/stm32f1xx_hal_gpio.c **** #define RISING_EDGE           0x00100000U
 146:c/stm32f1xx_hal_gpio.c **** #define FALLING_EDGE          0x00200000U
 147:c/stm32f1xx_hal_gpio.c **** #define GPIO_OUTPUT_TYPE      0x00000010U
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s 			page 4


 148:c/stm32f1xx_hal_gpio.c **** 
 149:c/stm32f1xx_hal_gpio.c **** #define GPIO_NUMBER           16U
 150:c/stm32f1xx_hal_gpio.c **** 
 151:c/stm32f1xx_hal_gpio.c **** /* Definitions for bit manipulation of CRL and CRH register */
 152:c/stm32f1xx_hal_gpio.c **** #define  GPIO_CR_MODE_INPUT         0x00000000U /*!< 00: Input mode (reset state)  */
 153:c/stm32f1xx_hal_gpio.c **** #define  GPIO_CR_CNF_ANALOG         0x00000000U /*!< 00: Analog mode  */
 154:c/stm32f1xx_hal_gpio.c **** #define  GPIO_CR_CNF_INPUT_FLOATING 0x00000004U /*!< 01: Floating input (reset state)  */
 155:c/stm32f1xx_hal_gpio.c **** #define  GPIO_CR_CNF_INPUT_PU_PD    0x00000008U /*!< 10: Input with pull-up / pull-down  */
 156:c/stm32f1xx_hal_gpio.c **** #define  GPIO_CR_CNF_GP_OUTPUT_PP   0x00000000U /*!< 00: General purpose output push-pull  */
 157:c/stm32f1xx_hal_gpio.c **** #define  GPIO_CR_CNF_GP_OUTPUT_OD   0x00000004U /*!< 01: General purpose output Open-drain  */
 158:c/stm32f1xx_hal_gpio.c **** #define  GPIO_CR_CNF_AF_OUTPUT_PP   0x00000008U /*!< 10: Alternate function output Push-pull  */
 159:c/stm32f1xx_hal_gpio.c **** #define  GPIO_CR_CNF_AF_OUTPUT_OD   0x0000000CU /*!< 11: Alternate function output Open-drain  */
 160:c/stm32f1xx_hal_gpio.c ****  
 161:c/stm32f1xx_hal_gpio.c **** /**
 162:c/stm32f1xx_hal_gpio.c ****   * @}
 163:c/stm32f1xx_hal_gpio.c ****   */
 164:c/stm32f1xx_hal_gpio.c **** /* Private macro -------------------------------------------------------------*/
 165:c/stm32f1xx_hal_gpio.c **** /* Private variables ---------------------------------------------------------*/
 166:c/stm32f1xx_hal_gpio.c **** /* Private function prototypes -----------------------------------------------*/
 167:c/stm32f1xx_hal_gpio.c **** /* Private functions ---------------------------------------------------------*/
 168:c/stm32f1xx_hal_gpio.c **** /* Exported functions --------------------------------------------------------*/
 169:c/stm32f1xx_hal_gpio.c **** /** @defgroup GPIO_Exported_Functions GPIO Exported Functions
 170:c/stm32f1xx_hal_gpio.c ****   * @{
 171:c/stm32f1xx_hal_gpio.c ****   */
 172:c/stm32f1xx_hal_gpio.c **** 
 173:c/stm32f1xx_hal_gpio.c **** /** @defgroup GPIO_Exported_Functions_Group1 Initialization and de-initialization functions
 174:c/stm32f1xx_hal_gpio.c ****  *  @brief    Initialization and Configuration functions
 175:c/stm32f1xx_hal_gpio.c ****  *
 176:c/stm32f1xx_hal_gpio.c **** @verbatim    
 177:c/stm32f1xx_hal_gpio.c ****  ===============================================================================
 178:c/stm32f1xx_hal_gpio.c ****               ##### Initialization and de-initialization functions #####
 179:c/stm32f1xx_hal_gpio.c ****  ===============================================================================
 180:c/stm32f1xx_hal_gpio.c ****   [..]
 181:c/stm32f1xx_hal_gpio.c ****     This section provides functions allowing to initialize and de-initialize the GPIOs
 182:c/stm32f1xx_hal_gpio.c ****     to be ready for use.
 183:c/stm32f1xx_hal_gpio.c ****  
 184:c/stm32f1xx_hal_gpio.c **** @endverbatim
 185:c/stm32f1xx_hal_gpio.c ****   * @{
 186:c/stm32f1xx_hal_gpio.c ****   */
 187:c/stm32f1xx_hal_gpio.c **** 
 188:c/stm32f1xx_hal_gpio.c **** 
 189:c/stm32f1xx_hal_gpio.c **** /**
 190:c/stm32f1xx_hal_gpio.c ****   * @brief  Initializes the GPIOx peripheral according to the specified parameters in the GPIO_Init
 191:c/stm32f1xx_hal_gpio.c ****   * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
 192:c/stm32f1xx_hal_gpio.c ****   * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
 193:c/stm32f1xx_hal_gpio.c ****   *         the configuration information for the specified GPIO peripheral.
 194:c/stm32f1xx_hal_gpio.c ****   * @retval None
 195:c/stm32f1xx_hal_gpio.c ****   */
 196:c/stm32f1xx_hal_gpio.c **** void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
 197:c/stm32f1xx_hal_gpio.c **** {
  26              		.loc 1 197 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
  32              		.cfi_def_cfa_offset 48
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s 			page 5


  33              		.cfi_offset 4, -36
  34              		.cfi_offset 5, -32
  35              		.cfi_offset 6, -28
  36              		.cfi_offset 7, -24
  37              		.cfi_offset 8, -20
  38              		.cfi_offset 9, -16
  39              		.cfi_offset 10, -12
  40              		.cfi_offset 11, -8
  41              		.cfi_offset 14, -4
 198:c/stm32f1xx_hal_gpio.c ****   uint32_t position;
 199:c/stm32f1xx_hal_gpio.c ****   uint32_t ioposition = 0x00U;
 200:c/stm32f1xx_hal_gpio.c ****   uint32_t iocurrent = 0x00U;
 201:c/stm32f1xx_hal_gpio.c ****   uint32_t temp = 0x00U;
 202:c/stm32f1xx_hal_gpio.c ****   uint32_t config = 0x00U;
  42              		.loc 1 202 0
  43 0004 0022     		movs	r2, #0
 203:c/stm32f1xx_hal_gpio.c ****   __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
 204:c/stm32f1xx_hal_gpio.c ****   uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement in
 205:c/stm32f1xx_hal_gpio.c ****   
 206:c/stm32f1xx_hal_gpio.c ****   /* Check the parameters */
 207:c/stm32f1xx_hal_gpio.c ****   assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 208:c/stm32f1xx_hal_gpio.c ****   assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 209:c/stm32f1xx_hal_gpio.c ****   assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 210:c/stm32f1xx_hal_gpio.c **** 
 211:c/stm32f1xx_hal_gpio.c ****   /* Configure the port pins */
 212:c/stm32f1xx_hal_gpio.c ****   for (position = 0U; position < GPIO_NUMBER; position++)
  44              		.loc 1 212 0
  45 0006 1646     		mov	r6, r2
  46 0008 654B     		ldr	r3, .L44
 213:c/stm32f1xx_hal_gpio.c ****   {
 214:c/stm32f1xx_hal_gpio.c ****     /* Get the IO position */
 215:c/stm32f1xx_hal_gpio.c ****     ioposition = (0x01U << position);
 216:c/stm32f1xx_hal_gpio.c ****     
 217:c/stm32f1xx_hal_gpio.c ****     /* Get the current IO position */
 218:c/stm32f1xx_hal_gpio.c ****     iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 219:c/stm32f1xx_hal_gpio.c **** 
 220:c/stm32f1xx_hal_gpio.c ****     if (iocurrent == ioposition)
 221:c/stm32f1xx_hal_gpio.c ****     {
 222:c/stm32f1xx_hal_gpio.c ****       /* Check the Alternate function parameters */
 223:c/stm32f1xx_hal_gpio.c ****       assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 224:c/stm32f1xx_hal_gpio.c **** 
 225:c/stm32f1xx_hal_gpio.c ****       /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] correspo
 226:c/stm32f1xx_hal_gpio.c ****       switch (GPIO_Init->Mode)
  47              		.loc 1 226 0
  48 000a DFF8A4E1 		ldr	lr, .L44+16
  49 000e DFF8A4C1 		ldr	ip, .L44+20
  50              	.LVL1:
  51              	.L24:
 215:c/stm32f1xx_hal_gpio.c ****     
  52              		.loc 1 215 0
  53 0012 4FF00108 		mov	r8, #1
 218:c/stm32f1xx_hal_gpio.c **** 
  54              		.loc 1 218 0
  55 0016 0C68     		ldr	r4, [r1]
 215:c/stm32f1xx_hal_gpio.c ****     
  56              		.loc 1 215 0
  57 0018 08FA06F8 		lsl	r8, r8, r6
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s 			page 6


  58              	.LVL2:
 218:c/stm32f1xx_hal_gpio.c **** 
  59              		.loc 1 218 0
  60 001c 08EA0404 		and	r4, r8, r4
  61              	.LVL3:
 220:c/stm32f1xx_hal_gpio.c ****     {
  62              		.loc 1 220 0
  63 0020 A045     		cmp	r8, r4
  64 0022 7FD1     		bne	.L2
  65              		.loc 1 226 0
  66 0024 4D68     		ldr	r5, [r1, #4]
  67 0026 122D     		cmp	r5, #18
  68 0028 00F0AF80 		beq	.L4
  69 002c 00F28880 		bhi	.L5
  70 0030 022D     		cmp	r5, #2
  71 0032 00F0A780 		beq	.L6
  72 0036 7CD8     		bhi	.L7
  73 0038 002D     		cmp	r5, #0
  74 003a 00F08E80 		beq	.L8
  75 003e 012D     		cmp	r5, #1
  76 0040 00F09E80 		beq	.L9
  77              	.LVL4:
  78              	.L3:
 227:c/stm32f1xx_hal_gpio.c ****       {
 228:c/stm32f1xx_hal_gpio.c ****         /* If we are configuring the pin in OUTPUT push-pull mode */
 229:c/stm32f1xx_hal_gpio.c ****         case GPIO_MODE_OUTPUT_PP:
 230:c/stm32f1xx_hal_gpio.c ****           /* Check the GPIO speed parameter */
 231:c/stm32f1xx_hal_gpio.c ****           assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 232:c/stm32f1xx_hal_gpio.c ****           config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 233:c/stm32f1xx_hal_gpio.c ****           break;
 234:c/stm32f1xx_hal_gpio.c ****           
 235:c/stm32f1xx_hal_gpio.c ****         /* If we are configuring the pin in OUTPUT open-drain mode */
 236:c/stm32f1xx_hal_gpio.c ****         case GPIO_MODE_OUTPUT_OD:
 237:c/stm32f1xx_hal_gpio.c ****           /* Check the GPIO speed parameter */
 238:c/stm32f1xx_hal_gpio.c ****           assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 239:c/stm32f1xx_hal_gpio.c ****           config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 240:c/stm32f1xx_hal_gpio.c ****           break;
 241:c/stm32f1xx_hal_gpio.c ****           
 242:c/stm32f1xx_hal_gpio.c ****         /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
 243:c/stm32f1xx_hal_gpio.c ****         case GPIO_MODE_AF_PP:
 244:c/stm32f1xx_hal_gpio.c ****           /* Check the GPIO speed parameter */
 245:c/stm32f1xx_hal_gpio.c ****           assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 246:c/stm32f1xx_hal_gpio.c ****           config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 247:c/stm32f1xx_hal_gpio.c ****           break;
 248:c/stm32f1xx_hal_gpio.c ****           
 249:c/stm32f1xx_hal_gpio.c ****         /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
 250:c/stm32f1xx_hal_gpio.c ****         case GPIO_MODE_AF_OD:
 251:c/stm32f1xx_hal_gpio.c ****           /* Check the GPIO speed parameter */
 252:c/stm32f1xx_hal_gpio.c ****           assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 253:c/stm32f1xx_hal_gpio.c ****           config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 254:c/stm32f1xx_hal_gpio.c ****           break;
 255:c/stm32f1xx_hal_gpio.c ****           
 256:c/stm32f1xx_hal_gpio.c ****         /* If we are configuring the pin in INPUT (also applicable to EVENT and IT mode) */
 257:c/stm32f1xx_hal_gpio.c ****         case GPIO_MODE_INPUT:
 258:c/stm32f1xx_hal_gpio.c ****         case GPIO_MODE_IT_RISING:
 259:c/stm32f1xx_hal_gpio.c ****         case GPIO_MODE_IT_FALLING:
 260:c/stm32f1xx_hal_gpio.c ****         case GPIO_MODE_IT_RISING_FALLING:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s 			page 7


 261:c/stm32f1xx_hal_gpio.c ****         case GPIO_MODE_EVT_RISING:
 262:c/stm32f1xx_hal_gpio.c ****         case GPIO_MODE_EVT_FALLING:
 263:c/stm32f1xx_hal_gpio.c ****         case GPIO_MODE_EVT_RISING_FALLING:
 264:c/stm32f1xx_hal_gpio.c ****           /* Check the GPIO pull parameter */
 265:c/stm32f1xx_hal_gpio.c ****           assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 266:c/stm32f1xx_hal_gpio.c ****           if(GPIO_Init->Pull == GPIO_NOPULL)
 267:c/stm32f1xx_hal_gpio.c ****           {  
 268:c/stm32f1xx_hal_gpio.c ****             config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 269:c/stm32f1xx_hal_gpio.c ****           }
 270:c/stm32f1xx_hal_gpio.c ****           else if(GPIO_Init->Pull == GPIO_PULLUP)
 271:c/stm32f1xx_hal_gpio.c ****           {
 272:c/stm32f1xx_hal_gpio.c ****             config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 273:c/stm32f1xx_hal_gpio.c ****             
 274:c/stm32f1xx_hal_gpio.c ****             /* Set the corresponding ODR bit */
 275:c/stm32f1xx_hal_gpio.c ****             GPIOx->BSRR = ioposition;
 276:c/stm32f1xx_hal_gpio.c ****           }
 277:c/stm32f1xx_hal_gpio.c ****           else /* GPIO_PULLDOWN */
 278:c/stm32f1xx_hal_gpio.c ****           {
 279:c/stm32f1xx_hal_gpio.c ****             config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 280:c/stm32f1xx_hal_gpio.c ****             
 281:c/stm32f1xx_hal_gpio.c ****             /* Reset the corresponding ODR bit */
 282:c/stm32f1xx_hal_gpio.c ****             GPIOx->BRR = ioposition;
 283:c/stm32f1xx_hal_gpio.c ****           }
 284:c/stm32f1xx_hal_gpio.c ****           break; 
 285:c/stm32f1xx_hal_gpio.c ****           
 286:c/stm32f1xx_hal_gpio.c ****         /* If we are configuring the pin in INPUT analog mode */
 287:c/stm32f1xx_hal_gpio.c ****         case GPIO_MODE_ANALOG:
 288:c/stm32f1xx_hal_gpio.c ****             config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 289:c/stm32f1xx_hal_gpio.c ****           break;
 290:c/stm32f1xx_hal_gpio.c ****         
 291:c/stm32f1xx_hal_gpio.c ****         /* Parameters are checked with assert_param */
 292:c/stm32f1xx_hal_gpio.c ****         default:
 293:c/stm32f1xx_hal_gpio.c ****           break;
 294:c/stm32f1xx_hal_gpio.c ****       }
 295:c/stm32f1xx_hal_gpio.c ****       
 296:c/stm32f1xx_hal_gpio.c ****       /* Check if the current bit belongs to first half or last half of the pin count number
 297:c/stm32f1xx_hal_gpio.c ****        in order to address CRH or CRL register*/
 298:c/stm32f1xx_hal_gpio.c ****       configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 299:c/stm32f1xx_hal_gpio.c ****       registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 300:c/stm32f1xx_hal_gpio.c ****       
 301:c/stm32f1xx_hal_gpio.c ****       /* Apply the new configuration of the pin to the register */
 302:c/stm32f1xx_hal_gpio.c ****       MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config 
  79              		.loc 1 302 0
  80 0044 4FF00F09 		mov	r9, #15
 298:c/stm32f1xx_hal_gpio.c ****       registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
  81              		.loc 1 298 0
  82 0048 FF2C     		cmp	r4, #255
  83 004a 93BF     		iteet	ls
  84 004c 8246     		movls	r10, r0
  85 004e 06F18045 		addhi	r5, r6, #1073741824
  86 0052 083D     		subhi	r5, r5, #8
  87 0054 D0F800B0 		ldrls	fp, [r0]
  88              	.LVL5:
  89 0058 92BF     		itee	ls
  90 005a B500     		lslls	r5, r6, #2
  91 005c D0F804B0 		ldrhi	fp, [r0, #4]
  92 0060 AD00     		lslhi	r5, r5, #2
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s 			page 8


  93              		.loc 1 302 0
  94 0062 09FA05F8 		lsl	r8, r9, r5
  95              	.LVL6:
  96 0066 2BEA0808 		bic	r8, fp, r8
  97 006a 02FA05F5 		lsl	r5, r2, r5
 298:c/stm32f1xx_hal_gpio.c ****       registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
  98              		.loc 1 298 0
  99 006e 88BF     		it	hi
 100 0070 00F1040A 		addhi	r10, r0, #4
 101              	.LVL7:
 102              		.loc 1 302 0
 103 0074 48EA0505 		orr	r5, r8, r5
 104 0078 CAF80050 		str	r5, [r10]
 303:c/stm32f1xx_hal_gpio.c ****       
 304:c/stm32f1xx_hal_gpio.c ****       /*--------------------- EXTI Mode Configuration ------------------------*/
 305:c/stm32f1xx_hal_gpio.c ****       /* Configure the External Interrupt or event for the current IO */
 306:c/stm32f1xx_hal_gpio.c ****       if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 105              		.loc 1 306 0
 106 007c D1F804A0 		ldr	r10, [r1, #4]
 107              	.LVL8:
 108 0080 1AF0805F 		tst	r10, #268435456
 109 0084 4ED0     		beq	.L2
 110              	.LBB2:
 307:c/stm32f1xx_hal_gpio.c ****       {
 308:c/stm32f1xx_hal_gpio.c ****         /* Enable AFIO Clock */
 309:c/stm32f1xx_hal_gpio.c ****         __HAL_RCC_AFIO_CLK_ENABLE();
 111              		.loc 1 309 0
 112 0086 474D     		ldr	r5, .L44+4
 113 0088 464F     		ldr	r7, .L44+4
 114 008a AD69     		ldr	r5, [r5, #24]
 115 008c 26F00308 		bic	r8, r6, #3
 116 0090 45F00105 		orr	r5, r5, #1
 117 0094 BD61     		str	r5, [r7, #24]
 118 0096 BD69     		ldr	r5, [r7, #24]
 119 0098 08F18048 		add	r8, r8, #1073741824
 120 009c 05F00105 		and	r5, r5, #1
 121 00a0 0195     		str	r5, [sp, #4]
 122 00a2 08F58038 		add	r8, r8, #65536
 123              	.LBE2:
 310:c/stm32f1xx_hal_gpio.c ****         temp = AFIO->EXTICR[position >> 2U];
 311:c/stm32f1xx_hal_gpio.c ****         CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 124              		.loc 1 311 0
 125 00a6 06F0030B 		and	fp, r6, #3
 126              	.LBB3:
 309:c/stm32f1xx_hal_gpio.c ****         temp = AFIO->EXTICR[position >> 2U];
 127              		.loc 1 309 0
 128 00aa 019D     		ldr	r5, [sp, #4]
 129              	.LBE3:
 130              		.loc 1 311 0
 131 00ac 4FEA8B0B 		lsl	fp, fp, #2
 310:c/stm32f1xx_hal_gpio.c ****         temp = AFIO->EXTICR[position >> 2U];
 132              		.loc 1 310 0
 133 00b0 D8F80850 		ldr	r5, [r8, #8]
 134              	.LVL9:
 135              		.loc 1 311 0
 136 00b4 09FA0BF9 		lsl	r9, r9, fp
 137 00b8 25EA0909 		bic	r9, r5, r9
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s 			page 9


 138              	.LVL10:
 312:c/stm32f1xx_hal_gpio.c ****         SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 139              		.loc 1 312 0
 140 00bc 3A4D     		ldr	r5, .L44+8
 141 00be A842     		cmp	r0, r5
 142 00c0 68D0     		beq	.L26
 143              		.loc 1 312 0 is_stmt 0 discriminator 1
 144 00c2 05F58065 		add	r5, r5, #1024
 145 00c6 A842     		cmp	r0, r5
 146 00c8 66D0     		beq	.L27
 147              		.loc 1 312 0 discriminator 3
 148 00ca 05F58065 		add	r5, r5, #1024
 149 00ce A842     		cmp	r0, r5
 150 00d0 64D0     		beq	.L28
 151              		.loc 1 312 0 discriminator 5
 152 00d2 05F58065 		add	r5, r5, #1024
 153 00d6 A842     		cmp	r0, r5
 154 00d8 0CBF     		ite	eq
 155 00da 0325     		moveq	r5, #3
 156 00dc 0425     		movne	r5, #4
 157              	.L16:
 158              		.loc 1 312 0 discriminator 16
 159 00de 05FA0BF5 		lsl	r5, r5, fp
 160 00e2 45EA0905 		orr	r5, r5, r9
 161              	.LVL11:
 313:c/stm32f1xx_hal_gpio.c ****         AFIO->EXTICR[position >> 2U] = temp;
 162              		.loc 1 313 0 is_stmt 1 discriminator 16
 163 00e6 C8F80850 		str	r5, [r8, #8]
 314:c/stm32f1xx_hal_gpio.c ****         
 315:c/stm32f1xx_hal_gpio.c **** 
 316:c/stm32f1xx_hal_gpio.c ****         /* Configure the interrupt mask */
 317:c/stm32f1xx_hal_gpio.c ****         if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 318:c/stm32f1xx_hal_gpio.c ****         {
 319:c/stm32f1xx_hal_gpio.c ****           SET_BIT(EXTI->IMR, iocurrent); 
 164              		.loc 1 319 0 discriminator 16
 165 00ea 1D68     		ldr	r5, [r3]
 166              	.LVL12:
 317:c/stm32f1xx_hal_gpio.c ****         {
 167              		.loc 1 317 0 discriminator 16
 168 00ec 1AF4803F 		tst	r10, #65536
 169              		.loc 1 319 0 discriminator 16
 170 00f0 14BF     		ite	ne
 171 00f2 2543     		orrne	r5, r5, r4
 320:c/stm32f1xx_hal_gpio.c ****         } 
 321:c/stm32f1xx_hal_gpio.c ****         else
 322:c/stm32f1xx_hal_gpio.c ****         {
 323:c/stm32f1xx_hal_gpio.c ****           CLEAR_BIT(EXTI->IMR, iocurrent); 
 172              		.loc 1 323 0 discriminator 16
 173 00f4 A543     		biceq	r5, r5, r4
 174 00f6 1D60     		str	r5, [r3]
 175              	.LVL13:
 324:c/stm32f1xx_hal_gpio.c ****         } 
 325:c/stm32f1xx_hal_gpio.c ****         
 326:c/stm32f1xx_hal_gpio.c ****         /* Configure the event mask */
 327:c/stm32f1xx_hal_gpio.c ****         if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 328:c/stm32f1xx_hal_gpio.c ****         {
 329:c/stm32f1xx_hal_gpio.c ****           SET_BIT(EXTI->EMR, iocurrent); 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s 			page 10


 176              		.loc 1 329 0 discriminator 16
 177 00f8 5D68     		ldr	r5, [r3, #4]
 327:c/stm32f1xx_hal_gpio.c ****         {
 178              		.loc 1 327 0 discriminator 16
 179 00fa 1AF4003F 		tst	r10, #131072
 180              		.loc 1 329 0 discriminator 16
 181 00fe 14BF     		ite	ne
 182 0100 2543     		orrne	r5, r5, r4
 330:c/stm32f1xx_hal_gpio.c ****         } 
 331:c/stm32f1xx_hal_gpio.c ****         else
 332:c/stm32f1xx_hal_gpio.c ****         {
 333:c/stm32f1xx_hal_gpio.c ****           CLEAR_BIT(EXTI->EMR, iocurrent); 
 183              		.loc 1 333 0 discriminator 16
 184 0102 A543     		biceq	r5, r5, r4
 185 0104 5D60     		str	r5, [r3, #4]
 334:c/stm32f1xx_hal_gpio.c ****         }
 335:c/stm32f1xx_hal_gpio.c ****         
 336:c/stm32f1xx_hal_gpio.c ****         /* Enable or disable the rising trigger */
 337:c/stm32f1xx_hal_gpio.c ****         if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 338:c/stm32f1xx_hal_gpio.c ****         {
 339:c/stm32f1xx_hal_gpio.c ****           SET_BIT(EXTI->RTSR, iocurrent); 
 186              		.loc 1 339 0 discriminator 16
 187 0106 9D68     		ldr	r5, [r3, #8]
 337:c/stm32f1xx_hal_gpio.c ****         {
 188              		.loc 1 337 0 discriminator 16
 189 0108 1AF4801F 		tst	r10, #1048576
 190              		.loc 1 339 0 discriminator 16
 191 010c 14BF     		ite	ne
 192 010e 2543     		orrne	r5, r5, r4
 340:c/stm32f1xx_hal_gpio.c ****         } 
 341:c/stm32f1xx_hal_gpio.c ****         else
 342:c/stm32f1xx_hal_gpio.c ****         {
 343:c/stm32f1xx_hal_gpio.c ****           CLEAR_BIT(EXTI->RTSR, iocurrent); 
 193              		.loc 1 343 0 discriminator 16
 194 0110 A543     		biceq	r5, r5, r4
 195 0112 9D60     		str	r5, [r3, #8]
 344:c/stm32f1xx_hal_gpio.c ****         }
 345:c/stm32f1xx_hal_gpio.c ****         
 346:c/stm32f1xx_hal_gpio.c ****         /* Enable or disable the falling trigger */
 347:c/stm32f1xx_hal_gpio.c ****         if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 348:c/stm32f1xx_hal_gpio.c ****         {
 349:c/stm32f1xx_hal_gpio.c ****           SET_BIT(EXTI->FTSR, iocurrent); 
 196              		.loc 1 349 0 discriminator 16
 197 0114 DD68     		ldr	r5, [r3, #12]
 347:c/stm32f1xx_hal_gpio.c ****         {
 198              		.loc 1 347 0 discriminator 16
 199 0116 1AF4001F 		tst	r10, #2097152
 200              		.loc 1 349 0 discriminator 16
 201 011a 14BF     		ite	ne
 202 011c 2C43     		orrne	r4, r4, r5
 203              	.LVL14:
 350:c/stm32f1xx_hal_gpio.c ****         } 
 351:c/stm32f1xx_hal_gpio.c ****         else
 352:c/stm32f1xx_hal_gpio.c ****         {
 353:c/stm32f1xx_hal_gpio.c ****           CLEAR_BIT(EXTI->FTSR, iocurrent); 
 204              		.loc 1 353 0 discriminator 16
 205 011e 25EA0404 		biceq	r4, r5, r4
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s 			page 11


 206 0122 DC60     		str	r4, [r3, #12]
 207              	.L2:
 212:c/stm32f1xx_hal_gpio.c ****   {
 208              		.loc 1 212 0 discriminator 2
 209 0124 0136     		adds	r6, r6, #1
 210              	.LVL15:
 211 0126 102E     		cmp	r6, #16
 212 0128 7FF473AF 		bne	.L24
 354:c/stm32f1xx_hal_gpio.c ****         }
 355:c/stm32f1xx_hal_gpio.c ****       }
 356:c/stm32f1xx_hal_gpio.c ****     }
 357:c/stm32f1xx_hal_gpio.c ****   }
 358:c/stm32f1xx_hal_gpio.c **** }
 213              		.loc 1 358 0
 214 012c 03B0     		add	sp, sp, #12
 215              		.cfi_remember_state
 216              		.cfi_def_cfa_offset 36
 217              		@ sp needed
 218 012e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 219              	.LVL16:
 220              	.L7:
 221              		.cfi_restore_state
 226:c/stm32f1xx_hal_gpio.c ****       {
 222              		.loc 1 226 0
 223 0132 032D     		cmp	r5, #3
 224 0134 22D0     		beq	.L10
 225 0136 112D     		cmp	r5, #17
 226 0138 84D1     		bne	.L3
 239:c/stm32f1xx_hal_gpio.c ****           break;
 227              		.loc 1 239 0
 228 013a CA68     		ldr	r2, [r1, #12]
 229              	.LVL17:
 230 013c 0432     		adds	r2, r2, #4
 231              	.LVL18:
 240:c/stm32f1xx_hal_gpio.c ****           
 232              		.loc 1 240 0
 233 013e 81E7     		b	.L3
 234              	.L5:
 226:c/stm32f1xx_hal_gpio.c ****       {
 235              		.loc 1 226 0
 236 0140 1A4F     		ldr	r7, .L44+12
 237 0142 BD42     		cmp	r5, r7
 238 0144 09D0     		beq	.L8
 239 0146 12D8     		bhi	.L12
 240 0148 DFF86C90 		ldr	r9, .L44+24
 241 014c 4D45     		cmp	r5, r9
 242 014e 04D0     		beq	.L8
 243 0150 09F58039 		add	r9, r9, #65536
 244              	.L38:
 245 0154 4D45     		cmp	r5, r9
 246 0156 7FF475AF 		bne	.L3
 247              	.L8:
 266:c/stm32f1xx_hal_gpio.c ****           {  
 248              		.loc 1 266 0
 249 015a 8A68     		ldr	r2, [r1, #8]
 250              	.LVL19:
 251 015c C2B1     		cbz	r2, .L25
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s 			page 12


 270:c/stm32f1xx_hal_gpio.c ****           {
 252              		.loc 1 270 0
 253 015e 012A     		cmp	r2, #1
 254              	.LVL20:
 275:c/stm32f1xx_hal_gpio.c ****           }
 255              		.loc 1 275 0
 256 0160 0CBF     		ite	eq
 257 0162 C0F81080 		streq	r8, [r0, #16]
 282:c/stm32f1xx_hal_gpio.c ****           }
 258              		.loc 1 282 0
 259 0166 C0F81480 		strne	r8, [r0, #20]
 279:c/stm32f1xx_hal_gpio.c ****             
 260              		.loc 1 279 0
 261 016a 0822     		movs	r2, #8
 262 016c 6AE7     		b	.L3
 263              	.LVL21:
 264              	.L12:
 226:c/stm32f1xx_hal_gpio.c ****       {
 265              		.loc 1 226 0
 266 016e 7545     		cmp	r5, lr
 267 0170 F3D0     		beq	.L8
 268 0172 6545     		cmp	r5, ip
 269 0174 F1D0     		beq	.L8
 270 0176 DFF84490 		ldr	r9, .L44+28
 271 017a EBE7     		b	.L38
 272              	.L10:
 288:c/stm32f1xx_hal_gpio.c ****           break;
 273              		.loc 1 288 0
 274 017c 0022     		movs	r2, #0
 275              	.LVL22:
 276 017e 61E7     		b	.L3
 277              	.LVL23:
 278              	.L9:
 232:c/stm32f1xx_hal_gpio.c ****           break;
 279              		.loc 1 232 0
 280 0180 CA68     		ldr	r2, [r1, #12]
 281              	.LVL24:
 233:c/stm32f1xx_hal_gpio.c ****           
 282              		.loc 1 233 0
 283 0182 5FE7     		b	.L3
 284              	.L6:
 246:c/stm32f1xx_hal_gpio.c ****           break;
 285              		.loc 1 246 0
 286 0184 CA68     		ldr	r2, [r1, #12]
 287              	.LVL25:
 288 0186 0832     		adds	r2, r2, #8
 289              	.LVL26:
 247:c/stm32f1xx_hal_gpio.c ****           
 290              		.loc 1 247 0
 291 0188 5CE7     		b	.L3
 292              	.L4:
 253:c/stm32f1xx_hal_gpio.c ****           break;
 293              		.loc 1 253 0
 294 018a CA68     		ldr	r2, [r1, #12]
 295              	.LVL27:
 296 018c 0C32     		adds	r2, r2, #12
 297              	.LVL28:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s 			page 13


 254:c/stm32f1xx_hal_gpio.c ****           
 298              		.loc 1 254 0
 299 018e 59E7     		b	.L3
 300              	.LVL29:
 301              	.L25:
 268:c/stm32f1xx_hal_gpio.c ****           }
 302              		.loc 1 268 0
 303 0190 0422     		movs	r2, #4
 304 0192 57E7     		b	.L3
 305              	.LVL30:
 306              	.L26:
 312:c/stm32f1xx_hal_gpio.c ****         AFIO->EXTICR[position >> 2U] = temp;
 307              		.loc 1 312 0
 308 0194 0025     		movs	r5, #0
 309 0196 A2E7     		b	.L16
 310              	.L27:
 311 0198 0125     		movs	r5, #1
 312              	.LVL31:
 313 019a A0E7     		b	.L16
 314              	.LVL32:
 315              	.L28:
 316 019c 0225     		movs	r5, #2
 317 019e 9EE7     		b	.L16
 318              	.L45:
 319              		.align	2
 320              	.L44:
 321 01a0 00040140 		.word	1073808384
 322 01a4 00100240 		.word	1073876992
 323 01a8 00080140 		.word	1073809408
 324 01ac 00002110 		.word	270598144
 325 01b0 00003110 		.word	271646720
 326 01b4 00003210 		.word	271712256
 327 01b8 00001110 		.word	269549568
 328 01bc 00002210 		.word	270663680
 329              		.cfi_endproc
 330              	.LFE64:
 332              		.section	.text.HAL_GPIO_DeInit,"ax",%progbits
 333              		.align	1
 334              		.global	HAL_GPIO_DeInit
 335              		.syntax unified
 336              		.thumb
 337              		.thumb_func
 338              		.fpu softvfp
 340              	HAL_GPIO_DeInit:
 341              	.LFB65:
 359:c/stm32f1xx_hal_gpio.c **** 
 360:c/stm32f1xx_hal_gpio.c **** /**
 361:c/stm32f1xx_hal_gpio.c ****   * @brief  De-initializes the GPIOx peripheral registers to their default reset values.
 362:c/stm32f1xx_hal_gpio.c ****   * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
 363:c/stm32f1xx_hal_gpio.c ****   * @param  GPIO_Pin: specifies the port bit to be written.
 364:c/stm32f1xx_hal_gpio.c ****   *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
 365:c/stm32f1xx_hal_gpio.c ****   * @retval None
 366:c/stm32f1xx_hal_gpio.c ****   */
 367:c/stm32f1xx_hal_gpio.c **** void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
 368:c/stm32f1xx_hal_gpio.c **** { 
 342              		.loc 1 368 0
 343              		.cfi_startproc
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s 			page 14


 344              		@ args = 0, pretend = 0, frame = 0
 345              		@ frame_needed = 0, uses_anonymous_args = 0
 346              	.LVL33:
 347 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 348              		.cfi_def_cfa_offset 36
 349              		.cfi_offset 4, -36
 350              		.cfi_offset 5, -32
 351              		.cfi_offset 6, -28
 352              		.cfi_offset 7, -24
 353              		.cfi_offset 8, -20
 354              		.cfi_offset 9, -16
 355              		.cfi_offset 10, -12
 356              		.cfi_offset 11, -8
 357              		.cfi_offset 14, -4
 369:c/stm32f1xx_hal_gpio.c ****   uint32_t position = 0x00U;
 358              		.loc 1 369 0
 359 0004 0022     		movs	r2, #0
 370:c/stm32f1xx_hal_gpio.c ****   uint32_t iocurrent = 0x00U;
 371:c/stm32f1xx_hal_gpio.c ****   uint32_t tmp = 0x00U;
 372:c/stm32f1xx_hal_gpio.c ****   __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
 373:c/stm32f1xx_hal_gpio.c ****   uint32_t registeroffset = 0U;
 374:c/stm32f1xx_hal_gpio.c ****  
 375:c/stm32f1xx_hal_gpio.c ****   /* Check the parameters */
 376:c/stm32f1xx_hal_gpio.c ****   assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 377:c/stm32f1xx_hal_gpio.c ****   assert_param(IS_GPIO_PIN(GPIO_Pin));
 378:c/stm32f1xx_hal_gpio.c **** 
 379:c/stm32f1xx_hal_gpio.c ****   /* Configure the port pins */
 380:c/stm32f1xx_hal_gpio.c ****   while ((GPIO_Pin >> position) != 0U)
 381:c/stm32f1xx_hal_gpio.c ****   {
 382:c/stm32f1xx_hal_gpio.c ****     /* Get current io position */
 383:c/stm32f1xx_hal_gpio.c ****     iocurrent = (GPIO_Pin) & (1U << position);
 360              		.loc 1 383 0
 361 0006 4FF00109 		mov	r9, #1
 384:c/stm32f1xx_hal_gpio.c **** 
 385:c/stm32f1xx_hal_gpio.c ****     if (iocurrent)
 386:c/stm32f1xx_hal_gpio.c ****     {
 387:c/stm32f1xx_hal_gpio.c ****       /*------------------------- GPIO Mode Configuration --------------------*/
 388:c/stm32f1xx_hal_gpio.c ****       /* Check if the current bit belongs to first half or last half of the pin count number
 389:c/stm32f1xx_hal_gpio.c ****        in order to address CRH or CRL register */
 390:c/stm32f1xx_hal_gpio.c ****       configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 391:c/stm32f1xx_hal_gpio.c ****       registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 392:c/stm32f1xx_hal_gpio.c ****       
 393:c/stm32f1xx_hal_gpio.c ****       /* CRL/CRH default value is floating input(0x04) shifted to correct position */
 394:c/stm32f1xx_hal_gpio.c ****       MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), GPIO_CRL_C
 362              		.loc 1 394 0
 363 000a 4FF00F0C 		mov	ip, #15
 364 000e 4FF0040A 		mov	r10, #4
 395:c/stm32f1xx_hal_gpio.c ****       
 396:c/stm32f1xx_hal_gpio.c ****       /* ODR default value is 0 */
 397:c/stm32f1xx_hal_gpio.c ****       CLEAR_BIT(GPIOx->ODR, iocurrent);
 398:c/stm32f1xx_hal_gpio.c ****       
 399:c/stm32f1xx_hal_gpio.c ****       /*------------------------- EXTI Mode Configuration --------------------*/
 400:c/stm32f1xx_hal_gpio.c ****       /* Clear the External Interrupt or Event for the current IO */
 401:c/stm32f1xx_hal_gpio.c ****       
 402:c/stm32f1xx_hal_gpio.c ****       tmp = AFIO->EXTICR[position >> 2U];
 403:c/stm32f1xx_hal_gpio.c ****       tmp &= 0x0FU << (4U * (position & 0x03U));
 404:c/stm32f1xx_hal_gpio.c ****       if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s 			page 15


 405:c/stm32f1xx_hal_gpio.c ****       {
 406:c/stm32f1xx_hal_gpio.c ****         tmp = 0x0FU << (4U * (position & 0x03U));
 407:c/stm32f1xx_hal_gpio.c ****         CLEAR_BIT(AFIO->EXTICR[position >> 2U], tmp);
 408:c/stm32f1xx_hal_gpio.c ****           
 409:c/stm32f1xx_hal_gpio.c ****         /* Clear EXTI line configuration */
 410:c/stm32f1xx_hal_gpio.c ****         CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 365              		.loc 1 410 0
 366 0012 304C     		ldr	r4, .L59
 404:c/stm32f1xx_hal_gpio.c ****       {
 367              		.loc 1 404 0
 368 0014 DFF8C4B0 		ldr	fp, .L59+8
 369              	.LVL34:
 370              	.L47:
 380:c/stm32f1xx_hal_gpio.c ****   {
 371              		.loc 1 380 0
 372 0018 31FA02F3 		lsrs	r3, r1, r2
 373 001c 01D1     		bne	.L54
 411:c/stm32f1xx_hal_gpio.c ****         CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 412:c/stm32f1xx_hal_gpio.c ****         
 413:c/stm32f1xx_hal_gpio.c ****         /* Clear Rising Falling edge configuration */
 414:c/stm32f1xx_hal_gpio.c ****         CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 415:c/stm32f1xx_hal_gpio.c ****         CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 416:c/stm32f1xx_hal_gpio.c ****       }
 417:c/stm32f1xx_hal_gpio.c ****     }
 418:c/stm32f1xx_hal_gpio.c ****     
 419:c/stm32f1xx_hal_gpio.c ****     position++;
 420:c/stm32f1xx_hal_gpio.c ****   }
 421:c/stm32f1xx_hal_gpio.c **** }
 374              		.loc 1 421 0
 375 001e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 376              	.L54:
 383:c/stm32f1xx_hal_gpio.c **** 
 377              		.loc 1 383 0
 378 0022 09FA02F3 		lsl	r3, r9, r2
 379              	.LVL35:
 385:c/stm32f1xx_hal_gpio.c ****     {
 380              		.loc 1 385 0
 381 0026 0B40     		ands	r3, r3, r1
 382              	.LVL36:
 383 0028 4CD0     		beq	.L49
 390:c/stm32f1xx_hal_gpio.c ****       registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 384              		.loc 1 390 0
 385 002a FF2B     		cmp	r3, #255
 386 002c 98BF     		it	ls
 387 002e 0746     		movls	r7, r0
 397:c/stm32f1xx_hal_gpio.c ****       
 388              		.loc 1 397 0
 389 0030 6FEA0303 		mvn	r3, r3
 390              	.LVL37:
 391 0034 85BF     		ittet	hi
 392 0036 02F18045 		addhi	r5, r2, #1073741824
 393 003a 083D     		subhi	r5, r5, #8
 390:c/stm32f1xx_hal_gpio.c ****       registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 394              		.loc 1 390 0
 395 003c D0F800E0 		ldrls	lr, [r0]
 396              	.LVL38:
 397 0040 D0F804E0 		ldrhi	lr, [r0, #4]
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s 			page 16


 398 0044 94BF     		ite	ls
 399 0046 9500     		lslls	r5, r2, #2
 400 0048 AD00     		lslhi	r5, r5, #2
 394:c/stm32f1xx_hal_gpio.c ****       
 401              		.loc 1 394 0
 402 004a 0CFA05F6 		lsl	r6, ip, r5
 403 004e 2EEA0606 		bic	r6, lr, r6
 404 0052 0AFA05F5 		lsl	r5, r10, r5
 390:c/stm32f1xx_hal_gpio.c ****       registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 405              		.loc 1 390 0
 406 0056 88BF     		it	hi
 407 0058 071D     		addhi	r7, r0, #4
 408              	.LVL39:
 394:c/stm32f1xx_hal_gpio.c ****       
 409              		.loc 1 394 0
 410 005a 2E43     		orrs	r6, r6, r5
 411 005c 3E60     		str	r6, [r7]
 397:c/stm32f1xx_hal_gpio.c ****       
 412              		.loc 1 397 0
 413 005e C568     		ldr	r5, [r0, #12]
 403:c/stm32f1xx_hal_gpio.c ****       if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 414              		.loc 1 403 0
 415 0060 02F00307 		and	r7, r2, #3
 416              	.LVL40:
 397:c/stm32f1xx_hal_gpio.c ****       
 417              		.loc 1 397 0
 418 0064 1D40     		ands	r5, r5, r3
 419 0066 C560     		str	r5, [r0, #12]
 420 0068 22F00305 		bic	r5, r2, #3
 421 006c 05F18045 		add	r5, r5, #1073741824
 422 0070 05F58035 		add	r5, r5, #65536
 402:c/stm32f1xx_hal_gpio.c ****       tmp &= 0x0FU << (4U * (position & 0x03U));
 423              		.loc 1 402 0
 424 0074 AE68     		ldr	r6, [r5, #8]
 425              	.LVL41:
 403:c/stm32f1xx_hal_gpio.c ****       if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 426              		.loc 1 403 0
 427 0076 BF00     		lsls	r7, r7, #2
 428 0078 0CFA07F8 		lsl	r8, ip, r7
 429 007c 06EA080E 		and	lr, r6, r8
 430              	.LVL42:
 404:c/stm32f1xx_hal_gpio.c ****       {
 431              		.loc 1 404 0
 432 0080 154E     		ldr	r6, .L59+4
 433 0082 B042     		cmp	r0, r6
 434 0084 20D0     		beq	.L55
 404:c/stm32f1xx_hal_gpio.c ****       {
 435              		.loc 1 404 0 is_stmt 0 discriminator 1
 436 0086 06F58066 		add	r6, r6, #1024
 437 008a B042     		cmp	r0, r6
 438 008c 1ED0     		beq	.L56
 404:c/stm32f1xx_hal_gpio.c ****       {
 439              		.loc 1 404 0 discriminator 3
 440 008e 06F58066 		add	r6, r6, #1024
 441 0092 B042     		cmp	r0, r6
 442 0094 1CD0     		beq	.L57
 404:c/stm32f1xx_hal_gpio.c ****       {
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s 			page 17


 443              		.loc 1 404 0 discriminator 5
 444 0096 5845     		cmp	r0, fp
 445 0098 0CBF     		ite	eq
 446 009a 0326     		moveq	r6, #3
 447 009c 0426     		movne	r6, #4
 448              	.L52:
 404:c/stm32f1xx_hal_gpio.c ****       {
 449              		.loc 1 404 0 discriminator 16
 450 009e BE40     		lsls	r6, r6, r7
 451 00a0 B645     		cmp	lr, r6
 452 00a2 0FD1     		bne	.L49
 453              	.LVL43:
 407:c/stm32f1xx_hal_gpio.c ****           
 454              		.loc 1 407 0 is_stmt 1
 455 00a4 AE68     		ldr	r6, [r5, #8]
 456 00a6 26EA0806 		bic	r6, r6, r8
 457 00aa AE60     		str	r6, [r5, #8]
 410:c/stm32f1xx_hal_gpio.c ****         CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 458              		.loc 1 410 0
 459 00ac 2568     		ldr	r5, [r4]
 460 00ae 1D40     		ands	r5, r5, r3
 461 00b0 2560     		str	r5, [r4]
 411:c/stm32f1xx_hal_gpio.c ****         
 462              		.loc 1 411 0
 463 00b2 6568     		ldr	r5, [r4, #4]
 464 00b4 1D40     		ands	r5, r5, r3
 465 00b6 6560     		str	r5, [r4, #4]
 414:c/stm32f1xx_hal_gpio.c ****         CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 466              		.loc 1 414 0
 467 00b8 A568     		ldr	r5, [r4, #8]
 468 00ba 1D40     		ands	r5, r5, r3
 469 00bc A560     		str	r5, [r4, #8]
 415:c/stm32f1xx_hal_gpio.c ****       }
 470              		.loc 1 415 0
 471 00be E568     		ldr	r5, [r4, #12]
 472 00c0 2B40     		ands	r3, r3, r5
 473              	.LVL44:
 474 00c2 E360     		str	r3, [r4, #12]
 475              	.LVL45:
 476              	.L49:
 419:c/stm32f1xx_hal_gpio.c ****   }
 477              		.loc 1 419 0
 478 00c4 0132     		adds	r2, r2, #1
 479              	.LVL46:
 480 00c6 A7E7     		b	.L47
 481              	.LVL47:
 482              	.L55:
 404:c/stm32f1xx_hal_gpio.c ****       {
 483              		.loc 1 404 0
 484 00c8 0026     		movs	r6, #0
 485 00ca E8E7     		b	.L52
 486              	.L56:
 487 00cc 0126     		movs	r6, #1
 488 00ce E6E7     		b	.L52
 489              	.L57:
 490 00d0 0226     		movs	r6, #2
 491 00d2 E4E7     		b	.L52
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s 			page 18


 492              	.L60:
 493              		.align	2
 494              	.L59:
 495 00d4 00040140 		.word	1073808384
 496 00d8 00080140 		.word	1073809408
 497 00dc 00140140 		.word	1073812480
 498              		.cfi_endproc
 499              	.LFE65:
 501              		.section	.text.HAL_GPIO_ReadPin,"ax",%progbits
 502              		.align	1
 503              		.global	HAL_GPIO_ReadPin
 504              		.syntax unified
 505              		.thumb
 506              		.thumb_func
 507              		.fpu softvfp
 509              	HAL_GPIO_ReadPin:
 510              	.LFB66:
 422:c/stm32f1xx_hal_gpio.c **** 
 423:c/stm32f1xx_hal_gpio.c **** /**
 424:c/stm32f1xx_hal_gpio.c ****   * @}
 425:c/stm32f1xx_hal_gpio.c ****   */
 426:c/stm32f1xx_hal_gpio.c **** 
 427:c/stm32f1xx_hal_gpio.c **** /** @defgroup GPIO_Exported_Functions_Group2 IO operation functions 
 428:c/stm32f1xx_hal_gpio.c ****  *  @brief   GPIO Read and Write
 429:c/stm32f1xx_hal_gpio.c ****  *
 430:c/stm32f1xx_hal_gpio.c **** @verbatim
 431:c/stm32f1xx_hal_gpio.c ****  ===============================================================================
 432:c/stm32f1xx_hal_gpio.c ****                        ##### IO operation functions #####
 433:c/stm32f1xx_hal_gpio.c ****  ===============================================================================
 434:c/stm32f1xx_hal_gpio.c ****   [..]
 435:c/stm32f1xx_hal_gpio.c ****     This subsection provides a set of functions allowing to manage the GPIOs.
 436:c/stm32f1xx_hal_gpio.c **** 
 437:c/stm32f1xx_hal_gpio.c **** @endverbatim
 438:c/stm32f1xx_hal_gpio.c ****   * @{
 439:c/stm32f1xx_hal_gpio.c ****   */
 440:c/stm32f1xx_hal_gpio.c **** 
 441:c/stm32f1xx_hal_gpio.c **** /**
 442:c/stm32f1xx_hal_gpio.c ****   * @brief  Reads the specified input port pin.
 443:c/stm32f1xx_hal_gpio.c ****   * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
 444:c/stm32f1xx_hal_gpio.c ****   * @param  GPIO_Pin: specifies the port bit to read.
 445:c/stm32f1xx_hal_gpio.c ****   *         This parameter can be GPIO_PIN_x where x can be (0..15).
 446:c/stm32f1xx_hal_gpio.c ****   * @retval The input port pin value.
 447:c/stm32f1xx_hal_gpio.c ****   */
 448:c/stm32f1xx_hal_gpio.c **** GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
 449:c/stm32f1xx_hal_gpio.c **** {
 511              		.loc 1 449 0
 512              		.cfi_startproc
 513              		@ args = 0, pretend = 0, frame = 0
 514              		@ frame_needed = 0, uses_anonymous_args = 0
 515              		@ link register save eliminated.
 516              	.LVL48:
 450:c/stm32f1xx_hal_gpio.c ****   GPIO_PinState bitstatus;
 451:c/stm32f1xx_hal_gpio.c **** 
 452:c/stm32f1xx_hal_gpio.c ****   /* Check the parameters */
 453:c/stm32f1xx_hal_gpio.c ****   assert_param(IS_GPIO_PIN(GPIO_Pin));
 454:c/stm32f1xx_hal_gpio.c **** 
 455:c/stm32f1xx_hal_gpio.c ****   if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s 			page 19


 517              		.loc 1 455 0
 518 0000 8368     		ldr	r3, [r0, #8]
 519              	.LVL49:
 520 0002 1942     		tst	r1, r3
 456:c/stm32f1xx_hal_gpio.c ****   {
 457:c/stm32f1xx_hal_gpio.c ****     bitstatus = GPIO_PIN_SET;
 458:c/stm32f1xx_hal_gpio.c ****   }
 459:c/stm32f1xx_hal_gpio.c ****   else
 460:c/stm32f1xx_hal_gpio.c ****   {
 461:c/stm32f1xx_hal_gpio.c ****     bitstatus = GPIO_PIN_RESET;
 462:c/stm32f1xx_hal_gpio.c ****   }
 463:c/stm32f1xx_hal_gpio.c ****   return bitstatus;
 464:c/stm32f1xx_hal_gpio.c **** }
 521              		.loc 1 464 0
 522 0004 14BF     		ite	ne
 523 0006 0120     		movne	r0, #1
 524              	.LVL50:
 525 0008 0020     		moveq	r0, #0
 526 000a 7047     		bx	lr
 527              		.cfi_endproc
 528              	.LFE66:
 530              		.section	.text.HAL_GPIO_WritePin,"ax",%progbits
 531              		.align	1
 532              		.global	HAL_GPIO_WritePin
 533              		.syntax unified
 534              		.thumb
 535              		.thumb_func
 536              		.fpu softvfp
 538              	HAL_GPIO_WritePin:
 539              	.LFB67:
 465:c/stm32f1xx_hal_gpio.c **** 
 466:c/stm32f1xx_hal_gpio.c **** /**
 467:c/stm32f1xx_hal_gpio.c ****   * @brief  Sets or clears the selected data port bit.
 468:c/stm32f1xx_hal_gpio.c ****   * 
 469:c/stm32f1xx_hal_gpio.c ****   * @note   This function uses GPIOx_BSRR register to allow atomic read/modify 
 470:c/stm32f1xx_hal_gpio.c ****   *         accesses. In this way, there is no risk of an IRQ occurring between
 471:c/stm32f1xx_hal_gpio.c ****   *         the read and the modify access.
 472:c/stm32f1xx_hal_gpio.c ****   *               
 473:c/stm32f1xx_hal_gpio.c ****   * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
 474:c/stm32f1xx_hal_gpio.c ****   * @param  GPIO_Pin: specifies the port bit to be written.
 475:c/stm32f1xx_hal_gpio.c ****   *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
 476:c/stm32f1xx_hal_gpio.c ****   * @param  PinState: specifies the value to be written to the selected bit.
 477:c/stm32f1xx_hal_gpio.c ****   *          This parameter can be one of the GPIO_PinState enum values:
 478:c/stm32f1xx_hal_gpio.c ****   *            @arg GPIO_BIT_RESET: to clear the port pin
 479:c/stm32f1xx_hal_gpio.c ****   *            @arg GPIO_BIT_SET: to set the port pin
 480:c/stm32f1xx_hal_gpio.c ****   * @retval None
 481:c/stm32f1xx_hal_gpio.c ****   */
 482:c/stm32f1xx_hal_gpio.c **** void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
 483:c/stm32f1xx_hal_gpio.c **** {
 540              		.loc 1 483 0
 541              		.cfi_startproc
 542              		@ args = 0, pretend = 0, frame = 0
 543              		@ frame_needed = 0, uses_anonymous_args = 0
 544              		@ link register save eliminated.
 545              	.LVL51:
 484:c/stm32f1xx_hal_gpio.c ****   /* Check the parameters */
 485:c/stm32f1xx_hal_gpio.c ****   assert_param(IS_GPIO_PIN(GPIO_Pin));
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s 			page 20


 486:c/stm32f1xx_hal_gpio.c ****   assert_param(IS_GPIO_PIN_ACTION(PinState));
 487:c/stm32f1xx_hal_gpio.c **** 
 488:c/stm32f1xx_hal_gpio.c ****   if(PinState != GPIO_PIN_RESET)
 546              		.loc 1 488 0
 547 0000 0AB1     		cbz	r2, .L63
 548              	.LVL52:
 549              	.L65:
 489:c/stm32f1xx_hal_gpio.c ****   {
 490:c/stm32f1xx_hal_gpio.c ****     GPIOx->BSRR = GPIO_Pin;
 491:c/stm32f1xx_hal_gpio.c ****   }
 492:c/stm32f1xx_hal_gpio.c ****   else
 493:c/stm32f1xx_hal_gpio.c ****   {
 494:c/stm32f1xx_hal_gpio.c ****     GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 550              		.loc 1 494 0
 551 0002 0161     		str	r1, [r0, #16]
 552 0004 7047     		bx	lr
 553              	.LVL53:
 554              	.L63:
 555 0006 0904     		lsls	r1, r1, #16
 556              	.LVL54:
 557 0008 FBE7     		b	.L65
 558              		.cfi_endproc
 559              	.LFE67:
 561              		.section	.text.HAL_GPIO_TogglePin,"ax",%progbits
 562              		.align	1
 563              		.global	HAL_GPIO_TogglePin
 564              		.syntax unified
 565              		.thumb
 566              		.thumb_func
 567              		.fpu softvfp
 569              	HAL_GPIO_TogglePin:
 570              	.LFB68:
 495:c/stm32f1xx_hal_gpio.c ****   }
 496:c/stm32f1xx_hal_gpio.c **** }
 497:c/stm32f1xx_hal_gpio.c **** 
 498:c/stm32f1xx_hal_gpio.c **** /**
 499:c/stm32f1xx_hal_gpio.c ****   * @brief  Toggles the specified GPIO pin
 500:c/stm32f1xx_hal_gpio.c ****   * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral 
 501:c/stm32f1xx_hal_gpio.c ****   * @param  GPIO_Pin: Specifies the pins to be toggled.
 502:c/stm32f1xx_hal_gpio.c ****   * @retval None
 503:c/stm32f1xx_hal_gpio.c ****   */
 504:c/stm32f1xx_hal_gpio.c **** void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
 505:c/stm32f1xx_hal_gpio.c **** {
 571              		.loc 1 505 0
 572              		.cfi_startproc
 573              		@ args = 0, pretend = 0, frame = 0
 574              		@ frame_needed = 0, uses_anonymous_args = 0
 575              		@ link register save eliminated.
 576              	.LVL55:
 506:c/stm32f1xx_hal_gpio.c ****   /* Check the parameters */
 507:c/stm32f1xx_hal_gpio.c ****   assert_param(IS_GPIO_PIN(GPIO_Pin));
 508:c/stm32f1xx_hal_gpio.c **** 
 509:c/stm32f1xx_hal_gpio.c ****   GPIOx->ODR ^= GPIO_Pin;
 577              		.loc 1 509 0
 578 0000 C368     		ldr	r3, [r0, #12]
 579 0002 5940     		eors	r1, r1, r3
 580              	.LVL56:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s 			page 21


 581 0004 C160     		str	r1, [r0, #12]
 582 0006 7047     		bx	lr
 583              		.cfi_endproc
 584              	.LFE68:
 586              		.section	.text.HAL_GPIO_LockPin,"ax",%progbits
 587              		.align	1
 588              		.global	HAL_GPIO_LockPin
 589              		.syntax unified
 590              		.thumb
 591              		.thumb_func
 592              		.fpu softvfp
 594              	HAL_GPIO_LockPin:
 595              	.LFB69:
 510:c/stm32f1xx_hal_gpio.c **** }
 511:c/stm32f1xx_hal_gpio.c **** 
 512:c/stm32f1xx_hal_gpio.c **** /**
 513:c/stm32f1xx_hal_gpio.c **** * @brief  Locks GPIO Pins configuration registers.
 514:c/stm32f1xx_hal_gpio.c **** * @note   The locking mechanism allows the IO configuration to be frozen. When the LOCK sequence
 515:c/stm32f1xx_hal_gpio.c **** *         has been applied on a port bit, it is no longer possible to modify the value of the port 
 516:c/stm32f1xx_hal_gpio.c **** *         the next reset.
 517:c/stm32f1xx_hal_gpio.c **** * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
 518:c/stm32f1xx_hal_gpio.c **** * @param  GPIO_Pin: specifies the port bit to be locked.
 519:c/stm32f1xx_hal_gpio.c **** *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
 520:c/stm32f1xx_hal_gpio.c **** * @retval None
 521:c/stm32f1xx_hal_gpio.c **** */
 522:c/stm32f1xx_hal_gpio.c **** HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
 523:c/stm32f1xx_hal_gpio.c **** {
 596              		.loc 1 523 0
 597              		.cfi_startproc
 598              		@ args = 0, pretend = 0, frame = 8
 599              		@ frame_needed = 0, uses_anonymous_args = 0
 600              		@ link register save eliminated.
 601              	.LVL57:
 524:c/stm32f1xx_hal_gpio.c ****   __IO uint32_t tmp = GPIO_LCKR_LCKK;
 602              		.loc 1 524 0
 603 0000 4FF48033 		mov	r3, #65536
 523:c/stm32f1xx_hal_gpio.c ****   __IO uint32_t tmp = GPIO_LCKR_LCKK;
 604              		.loc 1 523 0
 605 0004 82B0     		sub	sp, sp, #8
 606              		.cfi_def_cfa_offset 8
 607              		.loc 1 524 0
 608 0006 0193     		str	r3, [sp, #4]
 525:c/stm32f1xx_hal_gpio.c **** 
 526:c/stm32f1xx_hal_gpio.c ****   /* Check the parameters */
 527:c/stm32f1xx_hal_gpio.c ****   assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
 528:c/stm32f1xx_hal_gpio.c ****   assert_param(IS_GPIO_PIN(GPIO_Pin));
 529:c/stm32f1xx_hal_gpio.c **** 
 530:c/stm32f1xx_hal_gpio.c ****   /* Apply lock key write sequence */
 531:c/stm32f1xx_hal_gpio.c ****   SET_BIT(tmp, GPIO_Pin);
 609              		.loc 1 531 0
 610 0008 019B     		ldr	r3, [sp, #4]
 611 000a 0B43     		orrs	r3, r3, r1
 612 000c 0193     		str	r3, [sp, #4]
 532:c/stm32f1xx_hal_gpio.c ****   /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
 533:c/stm32f1xx_hal_gpio.c ****   GPIOx->LCKR = tmp;
 613              		.loc 1 533 0
 614 000e 019B     		ldr	r3, [sp, #4]
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s 			page 22


 615 0010 8361     		str	r3, [r0, #24]
 534:c/stm32f1xx_hal_gpio.c ****   /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
 535:c/stm32f1xx_hal_gpio.c ****   GPIOx->LCKR = GPIO_Pin;
 616              		.loc 1 535 0
 617 0012 8161     		str	r1, [r0, #24]
 536:c/stm32f1xx_hal_gpio.c ****   /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
 537:c/stm32f1xx_hal_gpio.c ****   GPIOx->LCKR = tmp;
 618              		.loc 1 537 0
 619 0014 019B     		ldr	r3, [sp, #4]
 620 0016 8361     		str	r3, [r0, #24]
 538:c/stm32f1xx_hal_gpio.c ****   /* Read LCKK bit*/
 539:c/stm32f1xx_hal_gpio.c ****   tmp = GPIOx->LCKR;
 621              		.loc 1 539 0
 622 0018 8369     		ldr	r3, [r0, #24]
 623 001a 0193     		str	r3, [sp, #4]
 540:c/stm32f1xx_hal_gpio.c **** 
 541:c/stm32f1xx_hal_gpio.c ****   if((uint32_t)(GPIOx->LCKR & GPIO_LCKR_LCKK))
 624              		.loc 1 541 0
 625 001c 8069     		ldr	r0, [r0, #24]
 626              	.LVL58:
 627 001e 80F48030 		eor	r0, r0, #65536
 542:c/stm32f1xx_hal_gpio.c ****   {
 543:c/stm32f1xx_hal_gpio.c ****     return HAL_OK;
 544:c/stm32f1xx_hal_gpio.c ****   }
 545:c/stm32f1xx_hal_gpio.c ****   else
 546:c/stm32f1xx_hal_gpio.c ****   {
 547:c/stm32f1xx_hal_gpio.c ****     return HAL_ERROR;
 548:c/stm32f1xx_hal_gpio.c ****   }
 549:c/stm32f1xx_hal_gpio.c **** }
 628              		.loc 1 549 0
 629 0022 C0F30040 		ubfx	r0, r0, #16, #1
 630 0026 02B0     		add	sp, sp, #8
 631              		.cfi_def_cfa_offset 0
 632              		@ sp needed
 633 0028 7047     		bx	lr
 634              		.cfi_endproc
 635              	.LFE69:
 637              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 638              		.align	1
 639              		.weak	HAL_GPIO_EXTI_Callback
 640              		.syntax unified
 641              		.thumb
 642              		.thumb_func
 643              		.fpu softvfp
 645              	HAL_GPIO_EXTI_Callback:
 646              	.LFB71:
 550:c/stm32f1xx_hal_gpio.c **** 
 551:c/stm32f1xx_hal_gpio.c **** /**
 552:c/stm32f1xx_hal_gpio.c ****   * @brief  This function handles EXTI interrupt request.
 553:c/stm32f1xx_hal_gpio.c ****   * @param  GPIO_Pin: Specifies the pins connected EXTI line
 554:c/stm32f1xx_hal_gpio.c ****   * @retval None
 555:c/stm32f1xx_hal_gpio.c ****   */
 556:c/stm32f1xx_hal_gpio.c **** void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
 557:c/stm32f1xx_hal_gpio.c **** {
 558:c/stm32f1xx_hal_gpio.c ****   /* EXTI line interrupt detected */
 559:c/stm32f1xx_hal_gpio.c ****   if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 560:c/stm32f1xx_hal_gpio.c ****   {
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s 			page 23


 561:c/stm32f1xx_hal_gpio.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 562:c/stm32f1xx_hal_gpio.c ****     HAL_GPIO_EXTI_Callback(GPIO_Pin);
 563:c/stm32f1xx_hal_gpio.c ****   }
 564:c/stm32f1xx_hal_gpio.c **** }
 565:c/stm32f1xx_hal_gpio.c **** 
 566:c/stm32f1xx_hal_gpio.c **** /**
 567:c/stm32f1xx_hal_gpio.c ****   * @brief  EXTI line detection callbacks.
 568:c/stm32f1xx_hal_gpio.c ****   * @param  GPIO_Pin: Specifies the pins connected EXTI line
 569:c/stm32f1xx_hal_gpio.c ****   * @retval None
 570:c/stm32f1xx_hal_gpio.c ****   */
 571:c/stm32f1xx_hal_gpio.c **** __weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 572:c/stm32f1xx_hal_gpio.c **** {
 647              		.loc 1 572 0
 648              		.cfi_startproc
 649              		@ args = 0, pretend = 0, frame = 0
 650              		@ frame_needed = 0, uses_anonymous_args = 0
 651              		@ link register save eliminated.
 652              	.LVL59:
 653 0000 7047     		bx	lr
 654              		.cfi_endproc
 655              	.LFE71:
 657              		.section	.text.HAL_GPIO_EXTI_IRQHandler,"ax",%progbits
 658              		.align	1
 659              		.global	HAL_GPIO_EXTI_IRQHandler
 660              		.syntax unified
 661              		.thumb
 662              		.thumb_func
 663              		.fpu softvfp
 665              	HAL_GPIO_EXTI_IRQHandler:
 666              	.LFB70:
 557:c/stm32f1xx_hal_gpio.c ****   /* EXTI line interrupt detected */
 667              		.loc 1 557 0
 668              		.cfi_startproc
 669              		@ args = 0, pretend = 0, frame = 0
 670              		@ frame_needed = 0, uses_anonymous_args = 0
 671              	.LVL60:
 557:c/stm32f1xx_hal_gpio.c ****   /* EXTI line interrupt detected */
 672              		.loc 1 557 0
 673 0000 08B5     		push	{r3, lr}
 674              		.cfi_def_cfa_offset 8
 675              		.cfi_offset 3, -8
 676              		.cfi_offset 14, -4
 559:c/stm32f1xx_hal_gpio.c ****   {
 677              		.loc 1 559 0
 678 0002 044B     		ldr	r3, .L74
 679 0004 5969     		ldr	r1, [r3, #20]
 680 0006 0142     		tst	r1, r0
 681 0008 02D0     		beq	.L69
 561:c/stm32f1xx_hal_gpio.c ****     HAL_GPIO_EXTI_Callback(GPIO_Pin);
 682              		.loc 1 561 0
 683 000a 5861     		str	r0, [r3, #20]
 562:c/stm32f1xx_hal_gpio.c ****   }
 684              		.loc 1 562 0
 685 000c FFF7FEFF 		bl	HAL_GPIO_EXTI_Callback
 686              	.LVL61:
 687              	.L69:
 688 0010 08BD     		pop	{r3, pc}
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s 			page 24


 689              	.L75:
 690 0012 00BF     		.align	2
 691              	.L74:
 692 0014 00040140 		.word	1073808384
 693              		.cfi_endproc
 694              	.LFE70:
 696              		.text
 697              	.Letext0:
 698              		.file 2 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/machine/_
 699              		.file 3 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_stdi
 700              		.file 4 "c/core_cm3.h"
 701              		.file 5 "c/system_stm32f1xx.h"
 702              		.file 6 "c/stm32f103xb.h"
 703              		.file 7 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/lock.
 704              		.file 8 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_type
 705              		.file 9 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/lib/gcc/arm-none-eabi/6.3.1/inc
 706              		.file 10 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/reen
 707              		.file 11 "c/stm32f1xx.h"
 708              		.file 12 "c/stm32f1xx_hal_def.h"
 709              		.file 13 "c/stm32f1xx_hal_gpio.h"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s 			page 25


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_gpio.c
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s:16     .text.HAL_GPIO_Init:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s:23     .text.HAL_GPIO_Init:0000000000000000 HAL_GPIO_Init
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s:321    .text.HAL_GPIO_Init:00000000000001a0 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s:333    .text.HAL_GPIO_DeInit:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s:340    .text.HAL_GPIO_DeInit:0000000000000000 HAL_GPIO_DeInit
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s:495    .text.HAL_GPIO_DeInit:00000000000000d4 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s:502    .text.HAL_GPIO_ReadPin:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s:509    .text.HAL_GPIO_ReadPin:0000000000000000 HAL_GPIO_ReadPin
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s:531    .text.HAL_GPIO_WritePin:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s:538    .text.HAL_GPIO_WritePin:0000000000000000 HAL_GPIO_WritePin
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s:562    .text.HAL_GPIO_TogglePin:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s:569    .text.HAL_GPIO_TogglePin:0000000000000000 HAL_GPIO_TogglePin
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s:587    .text.HAL_GPIO_LockPin:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s:594    .text.HAL_GPIO_LockPin:0000000000000000 HAL_GPIO_LockPin
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s:638    .text.HAL_GPIO_EXTI_Callback:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s:645    .text.HAL_GPIO_EXTI_Callback:0000000000000000 HAL_GPIO_EXTI_Callback
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s:658    .text.HAL_GPIO_EXTI_IRQHandler:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s:665    .text.HAL_GPIO_EXTI_IRQHandler:0000000000000000 HAL_GPIO_EXTI_IRQHandler
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHmHBcX.s:692    .text.HAL_GPIO_EXTI_IRQHandler:0000000000000014 $d
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
exit code: 0
OPT_LEVEL = Some("s")
HOST = Some("x86_64-apple-darwin")
CFLAGS_arm-none-eabi = None
CFLAGS_arm_none_eabi = None
TARGET_CFLAGS = None
CFLAGS = None
DEBUG = Some("true")
running: "arm-none-eabi-gcc" "-Os" "-ffunction-sections" "-fdata-sections" "-g" "-DSTM32F103xB" "-DUSE_HAL_DRIVER" "-mcpu=cortex-m3" "-mthumb" "-Wall" "-fdata-sections" "-ffunction-sections" "-Wa,-a,-ad" "-g" "-Wall" "-Wextra" "-o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/stm32f1xx_hal_pcd.o" "-c" "c/stm32f1xx_hal_pcd.c"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_hal_pcd.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_PCD_MspInit,"ax",%progbits
  16              		.align	1
  17              		.weak	HAL_PCD_MspInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_PCD_MspInit:
  24              	.LFB120:
  25              		.cfi_startproc
  26              		@ args = 0, pretend = 0, frame = 0
  27              		@ frame_needed = 0, uses_anonymous_args = 0
  28              		@ link register save eliminated.
  29 0000 7047     		bx	lr
  30              		.cfi_endproc
  31              	.LFE120:
  33              		.section	.text.HAL_PCD_Init,"ax",%progbits
  34              		.align	1
  35              		.global	HAL_PCD_Init
  36              		.syntax unified
  37              		.thumb
  38              		.thumb_func
  39              		.fpu softvfp
  41              	HAL_PCD_Init:
  42              	.LFB64:
  43              		.file 1 "c/stm32f1xx_hal_pcd.c"
   1:c/stm32f1xx_hal_pcd.c **** /**
   2:c/stm32f1xx_hal_pcd.c ****   ******************************************************************************
   3:c/stm32f1xx_hal_pcd.c ****   * @file    stm32f1xx_hal_pcd.c
   4:c/stm32f1xx_hal_pcd.c ****   * @author  MCD Application Team
   5:c/stm32f1xx_hal_pcd.c ****   * @version V1.1.1
   6:c/stm32f1xx_hal_pcd.c ****   * @date    12-May-2017
   7:c/stm32f1xx_hal_pcd.c ****   * @brief   PCD HAL module driver.
   8:c/stm32f1xx_hal_pcd.c ****   *          This file provides firmware functions to manage the following 
   9:c/stm32f1xx_hal_pcd.c ****   *          functionalities of the USB Peripheral Controller:
  10:c/stm32f1xx_hal_pcd.c ****   *           + Initialization and de-initialization functions
  11:c/stm32f1xx_hal_pcd.c ****   *           + IO operation functions
  12:c/stm32f1xx_hal_pcd.c ****   *           + Peripheral Control functions 
  13:c/stm32f1xx_hal_pcd.c ****   *           + Peripheral State functions
  14:c/stm32f1xx_hal_pcd.c ****   *
  15:c/stm32f1xx_hal_pcd.c ****   @verbatim
  16:c/stm32f1xx_hal_pcd.c ****   ==============================================================================
  17:c/stm32f1xx_hal_pcd.c ****                     ##### How to use this driver #####
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 2


  18:c/stm32f1xx_hal_pcd.c ****   ==============================================================================
  19:c/stm32f1xx_hal_pcd.c ****     [..]
  20:c/stm32f1xx_hal_pcd.c ****       The PCD HAL driver can be used as follows:
  21:c/stm32f1xx_hal_pcd.c **** 
  22:c/stm32f1xx_hal_pcd.c ****      (#) Declare a PCD_HandleTypeDef handle structure, for example:
  23:c/stm32f1xx_hal_pcd.c ****          PCD_HandleTypeDef  hpcd;
  24:c/stm32f1xx_hal_pcd.c **** 
  25:c/stm32f1xx_hal_pcd.c ****      (#) Fill parameters of Init structure in HCD handle
  26:c/stm32f1xx_hal_pcd.c **** 
  27:c/stm32f1xx_hal_pcd.c ****      (#) Call HAL_PCD_Init() API to initialize the HCD peripheral (Core, Device core, ...)
  28:c/stm32f1xx_hal_pcd.c **** 
  29:c/stm32f1xx_hal_pcd.c ****      (#) Initialize the PCD low level resources through the HAL_PCD_MspInit() API:
  30:c/stm32f1xx_hal_pcd.c ****          (##) Enable the PCD/USB Low Level interface clock using the following macro
  31:c/stm32f1xx_hal_pcd.c ****               (+++) __HAL_RCC_USB_CLK_ENABLE(); For USB Device FS peripheral available
  32:c/stm32f1xx_hal_pcd.c ****                     on STM32F102xx and STM32F103xx devices
  33:c/stm32f1xx_hal_pcd.c ****               (+++) __HAL_RCC_USB_OTG_FS_CLK_ENABLE(); For USB OTG FS peripheral available
  34:c/stm32f1xx_hal_pcd.c ****                     on STM32F105xx and STM32F107xx devices 
  35:c/stm32f1xx_hal_pcd.c **** 
  36:c/stm32f1xx_hal_pcd.c ****          (##) Initialize the related GPIO clocks
  37:c/stm32f1xx_hal_pcd.c ****          (##) Configure PCD pin-out
  38:c/stm32f1xx_hal_pcd.c ****          (##) Configure PCD NVIC interrupt
  39:c/stm32f1xx_hal_pcd.c **** 
  40:c/stm32f1xx_hal_pcd.c ****      (#)Associate the Upper USB device stack to the HAL PCD Driver:
  41:c/stm32f1xx_hal_pcd.c ****          (##) hpcd.pData = pdev;
  42:c/stm32f1xx_hal_pcd.c **** 
  43:c/stm32f1xx_hal_pcd.c ****      (#)Enable HCD transmission and reception:
  44:c/stm32f1xx_hal_pcd.c ****          (##) HAL_PCD_Start();
  45:c/stm32f1xx_hal_pcd.c **** 
  46:c/stm32f1xx_hal_pcd.c ****   @endverbatim
  47:c/stm32f1xx_hal_pcd.c ****   ******************************************************************************
  48:c/stm32f1xx_hal_pcd.c ****   * @attention
  49:c/stm32f1xx_hal_pcd.c ****   *
  50:c/stm32f1xx_hal_pcd.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  51:c/stm32f1xx_hal_pcd.c ****   *
  52:c/stm32f1xx_hal_pcd.c ****   * Redistribution and use in source and binary forms, with or without modification,
  53:c/stm32f1xx_hal_pcd.c ****   * are permitted provided that the following conditions are met:
  54:c/stm32f1xx_hal_pcd.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  55:c/stm32f1xx_hal_pcd.c ****   *      this list of conditions and the following disclaimer.
  56:c/stm32f1xx_hal_pcd.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  57:c/stm32f1xx_hal_pcd.c ****   *      this list of conditions and the following disclaimer in the documentation
  58:c/stm32f1xx_hal_pcd.c ****   *      and/or other materials provided with the distribution.
  59:c/stm32f1xx_hal_pcd.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  60:c/stm32f1xx_hal_pcd.c ****   *      may be used to endorse or promote products derived from this software
  61:c/stm32f1xx_hal_pcd.c ****   *      without specific prior written permission.
  62:c/stm32f1xx_hal_pcd.c ****   *
  63:c/stm32f1xx_hal_pcd.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  64:c/stm32f1xx_hal_pcd.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  65:c/stm32f1xx_hal_pcd.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  66:c/stm32f1xx_hal_pcd.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  67:c/stm32f1xx_hal_pcd.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  68:c/stm32f1xx_hal_pcd.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  69:c/stm32f1xx_hal_pcd.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  70:c/stm32f1xx_hal_pcd.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  71:c/stm32f1xx_hal_pcd.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  72:c/stm32f1xx_hal_pcd.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  73:c/stm32f1xx_hal_pcd.c ****   *
  74:c/stm32f1xx_hal_pcd.c ****   ******************************************************************************
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 3


  75:c/stm32f1xx_hal_pcd.c ****   */
  76:c/stm32f1xx_hal_pcd.c **** 
  77:c/stm32f1xx_hal_pcd.c **** /* Includes ------------------------------------------------------------------*/
  78:c/stm32f1xx_hal_pcd.c **** #include "stm32f1xx_hal.h"
  79:c/stm32f1xx_hal_pcd.c **** 
  80:c/stm32f1xx_hal_pcd.c **** /** @addtogroup STM32F1xx_HAL_Driver
  81:c/stm32f1xx_hal_pcd.c ****   * @{
  82:c/stm32f1xx_hal_pcd.c ****   */
  83:c/stm32f1xx_hal_pcd.c **** 
  84:c/stm32f1xx_hal_pcd.c **** 
  85:c/stm32f1xx_hal_pcd.c **** 
  86:c/stm32f1xx_hal_pcd.c **** #ifdef HAL_PCD_MODULE_ENABLED
  87:c/stm32f1xx_hal_pcd.c **** 
  88:c/stm32f1xx_hal_pcd.c **** #if defined(STM32F102x6) || defined(STM32F102xB) || \
  89:c/stm32f1xx_hal_pcd.c ****     defined(STM32F103x6) || defined(STM32F103xB) || \
  90:c/stm32f1xx_hal_pcd.c ****     defined(STM32F103xE) || defined(STM32F103xG) || \
  91:c/stm32f1xx_hal_pcd.c ****     defined(STM32F105xC) || defined(STM32F107xC)
  92:c/stm32f1xx_hal_pcd.c **** 
  93:c/stm32f1xx_hal_pcd.c **** /** @defgroup PCD PCD
  94:c/stm32f1xx_hal_pcd.c ****   * @brief PCD HAL module driver
  95:c/stm32f1xx_hal_pcd.c ****   * @{
  96:c/stm32f1xx_hal_pcd.c ****   */
  97:c/stm32f1xx_hal_pcd.c **** 
  98:c/stm32f1xx_hal_pcd.c **** /* Private types -------------------------------------------------------------*/
  99:c/stm32f1xx_hal_pcd.c **** /* Private variables ---------------------------------------------------------*/
 100:c/stm32f1xx_hal_pcd.c **** /* Private constants ---------------------------------------------------------*/
 101:c/stm32f1xx_hal_pcd.c **** /* Private macros ------------------------------------------------------------*/
 102:c/stm32f1xx_hal_pcd.c **** /** @defgroup PCD_Private_Macros PCD Private Macros
 103:c/stm32f1xx_hal_pcd.c ****   * @{
 104:c/stm32f1xx_hal_pcd.c ****   */ 
 105:c/stm32f1xx_hal_pcd.c **** #define PCD_MIN(a, b)  (((a) < (b)) ? (a) : (b))
 106:c/stm32f1xx_hal_pcd.c **** #define PCD_MAX(a, b)  (((a) > (b)) ? (a) : (b))
 107:c/stm32f1xx_hal_pcd.c **** /**
 108:c/stm32f1xx_hal_pcd.c ****   * @}
 109:c/stm32f1xx_hal_pcd.c ****   */
 110:c/stm32f1xx_hal_pcd.c **** 
 111:c/stm32f1xx_hal_pcd.c **** /* Private functions ---------------------------------------------------------*/
 112:c/stm32f1xx_hal_pcd.c **** /** @defgroup PCD_Private_Functions PCD Private Functions
 113:c/stm32f1xx_hal_pcd.c ****   * @{
 114:c/stm32f1xx_hal_pcd.c ****   */
 115:c/stm32f1xx_hal_pcd.c **** #if defined (USB_OTG_FS)
 116:c/stm32f1xx_hal_pcd.c **** static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum);
 117:c/stm32f1xx_hal_pcd.c **** #endif /* USB_OTG_FS */
 118:c/stm32f1xx_hal_pcd.c **** 
 119:c/stm32f1xx_hal_pcd.c **** #if defined (USB)
 120:c/stm32f1xx_hal_pcd.c **** static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd);
 121:c/stm32f1xx_hal_pcd.c **** #endif /* USB */
 122:c/stm32f1xx_hal_pcd.c **** /**
 123:c/stm32f1xx_hal_pcd.c ****   * @}
 124:c/stm32f1xx_hal_pcd.c ****   */
 125:c/stm32f1xx_hal_pcd.c **** 
 126:c/stm32f1xx_hal_pcd.c **** /* Exported functions --------------------------------------------------------*/
 127:c/stm32f1xx_hal_pcd.c **** /** @defgroup PCD_Exported_Functions PCD Exported Functions
 128:c/stm32f1xx_hal_pcd.c ****   * @{
 129:c/stm32f1xx_hal_pcd.c ****   */
 130:c/stm32f1xx_hal_pcd.c **** 
 131:c/stm32f1xx_hal_pcd.c **** /** @defgroup PCD_Exported_Functions_Group1 Initialization and de-initialization functions 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 4


 132:c/stm32f1xx_hal_pcd.c ****  *  @brief    Initialization and Configuration functions 
 133:c/stm32f1xx_hal_pcd.c ****  *
 134:c/stm32f1xx_hal_pcd.c **** @verbatim
 135:c/stm32f1xx_hal_pcd.c ****  ===============================================================================
 136:c/stm32f1xx_hal_pcd.c ****             ##### Initialization and de-initialization functions #####
 137:c/stm32f1xx_hal_pcd.c ****  ===============================================================================
 138:c/stm32f1xx_hal_pcd.c ****     [..]  This section provides functions allowing to:
 139:c/stm32f1xx_hal_pcd.c ****  
 140:c/stm32f1xx_hal_pcd.c **** @endverbatim
 141:c/stm32f1xx_hal_pcd.c ****   * @{
 142:c/stm32f1xx_hal_pcd.c ****   */
 143:c/stm32f1xx_hal_pcd.c **** 
 144:c/stm32f1xx_hal_pcd.c **** /**
 145:c/stm32f1xx_hal_pcd.c ****   * @brief  Initializes the PCD according to the specified
 146:c/stm32f1xx_hal_pcd.c ****   *         parameters in the PCD_InitTypeDef and create the associated handle.
 147:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
 148:c/stm32f1xx_hal_pcd.c ****   * @retval HAL status
 149:c/stm32f1xx_hal_pcd.c ****   */
 150:c/stm32f1xx_hal_pcd.c **** HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
 151:c/stm32f1xx_hal_pcd.c **** {
  44              		.loc 1 151 0
  45              		.cfi_startproc
  46              		@ args = 0, pretend = 0, frame = 0
  47              		@ frame_needed = 0, uses_anonymous_args = 0
  48              	.LVL0:
  49              		.loc 1 151 0
  50 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  51              		.cfi_def_cfa_offset 24
  52              		.cfi_offset 4, -24
  53              		.cfi_offset 5, -20
  54              		.cfi_offset 6, -16
  55              		.cfi_offset 7, -12
  56              		.cfi_offset 8, -8
  57              		.cfi_offset 14, -4
 152:c/stm32f1xx_hal_pcd.c ****   uint32_t index = 0U;
 153:c/stm32f1xx_hal_pcd.c ****   
 154:c/stm32f1xx_hal_pcd.c ****   /* Check the PCD handle allocation */
 155:c/stm32f1xx_hal_pcd.c ****   if(hpcd == NULL)
  58              		.loc 1 155 0
  59 0004 0446     		mov	r4, r0
 151:c/stm32f1xx_hal_pcd.c ****   uint32_t index = 0U;
  60              		.loc 1 151 0
  61 0006 86B0     		sub	sp, sp, #24
  62              		.cfi_def_cfa_offset 48
  63              		.loc 1 155 0
  64 0008 0028     		cmp	r0, #0
  65 000a 60D0     		beq	.L7
 156:c/stm32f1xx_hal_pcd.c ****   {
 157:c/stm32f1xx_hal_pcd.c ****     return HAL_ERROR;
 158:c/stm32f1xx_hal_pcd.c ****   }
 159:c/stm32f1xx_hal_pcd.c ****   
 160:c/stm32f1xx_hal_pcd.c ****   /* Check the parameters */
 161:c/stm32f1xx_hal_pcd.c ****   assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 162:c/stm32f1xx_hal_pcd.c **** 
 163:c/stm32f1xx_hal_pcd.c ****   if(hpcd->State == HAL_PCD_STATE_RESET)
  66              		.loc 1 163 0
  67 000c 90F82934 		ldrb	r3, [r0, #1065]	@ zero_extendqisi2
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 5


  68 0010 03F0FF02 		and	r2, r3, #255
  69 0014 1BB9     		cbnz	r3, .L4
 164:c/stm32f1xx_hal_pcd.c ****   {  
 165:c/stm32f1xx_hal_pcd.c ****     /* Allocate lock resource and initialize it */
 166:c/stm32f1xx_hal_pcd.c ****     hpcd->Lock = HAL_UNLOCKED;
  70              		.loc 1 166 0
  71 0016 80F82824 		strb	r2, [r0, #1064]
 167:c/stm32f1xx_hal_pcd.c **** 
 168:c/stm32f1xx_hal_pcd.c ****     /* Init the low level hardware : GPIO, CLOCK, NVIC... */
 169:c/stm32f1xx_hal_pcd.c ****     HAL_PCD_MspInit(hpcd);
  72              		.loc 1 169 0
  73 001a FFF7FEFF 		bl	HAL_PCD_MspInit
  74              	.LVL1:
  75              	.L4:
 170:c/stm32f1xx_hal_pcd.c ****   }
 171:c/stm32f1xx_hal_pcd.c ****   
 172:c/stm32f1xx_hal_pcd.c ****   hpcd->State = HAL_PCD_STATE_BUSY;
 173:c/stm32f1xx_hal_pcd.c ****   
 174:c/stm32f1xx_hal_pcd.c ****   /* Disable the Interrupts */
 175:c/stm32f1xx_hal_pcd.c ****   __HAL_PCD_DISABLE(hpcd);
  76              		.loc 1 175 0
  77 001e 2546     		mov	r5, r4
 172:c/stm32f1xx_hal_pcd.c ****   
  78              		.loc 1 172 0
  79 0020 0323     		movs	r3, #3
 176:c/stm32f1xx_hal_pcd.c **** 
 177:c/stm32f1xx_hal_pcd.c ****   /*Init the Core (common init.) */
 178:c/stm32f1xx_hal_pcd.c ****   USB_CoreInit(hpcd->Instance, hpcd->Init);
  80              		.loc 1 178 0
  81 0022 6E46     		mov	r6, sp
 175:c/stm32f1xx_hal_pcd.c **** 
  82              		.loc 1 175 0
  83 0024 55F8100B 		ldr	r0, [r5], #16
 172:c/stm32f1xx_hal_pcd.c ****   
  84              		.loc 1 172 0
  85 0028 84F82934 		strb	r3, [r4, #1065]
 175:c/stm32f1xx_hal_pcd.c **** 
  86              		.loc 1 175 0
  87 002c FFF7FEFF 		bl	USB_DisableGlobalInt
  88              	.LVL2:
  89              		.loc 1 178 0
  90 0030 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
  91 0032 0FC6     		stmia	r6!, {r0, r1, r2, r3}
  92 0034 2B68     		ldr	r3, [r5]
  93 0036 04F10408 		add	r8, r4, #4
  94 003a 3360     		str	r3, [r6]
  95 003c 98E80E00 		ldm	r8, {r1, r2, r3}
  96 0040 2068     		ldr	r0, [r4]
  97 0042 FFF7FEFF 		bl	USB_CoreInit
  98              	.LVL3:
 179:c/stm32f1xx_hal_pcd.c ****  
 180:c/stm32f1xx_hal_pcd.c ****   /* Force Device Mode*/
 181:c/stm32f1xx_hal_pcd.c ****   USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
  99              		.loc 1 181 0
 100 0046 0021     		movs	r1, #0
 101 0048 2068     		ldr	r0, [r4]
 102 004a FFF7FEFF 		bl	USB_SetCurrentMode
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 6


 103              	.LVL4:
 182:c/stm32f1xx_hal_pcd.c ****  
 183:c/stm32f1xx_hal_pcd.c ****   /* Init endpoints structures */
 184:c/stm32f1xx_hal_pcd.c ****   for (index = 0U; index < 15U ; index++)
 104              		.loc 1 184 0
 105 004e 0021     		movs	r1, #0
 106 0050 2346     		mov	r3, r4
 181:c/stm32f1xx_hal_pcd.c ****  
 107              		.loc 1 181 0
 108 0052 2246     		mov	r2, r4
 185:c/stm32f1xx_hal_pcd.c ****   {
 186:c/stm32f1xx_hal_pcd.c ****     /* Init ep structure */
 187:c/stm32f1xx_hal_pcd.c ****     hpcd->IN_ep[index].is_in = 1U;
 109              		.loc 1 187 0
 110 0054 0126     		movs	r6, #1
 188:c/stm32f1xx_hal_pcd.c ****     hpcd->IN_ep[index].num = index;
 189:c/stm32f1xx_hal_pcd.c ****     hpcd->IN_ep[index].tx_fifo_num = index;
 190:c/stm32f1xx_hal_pcd.c ****     /* Control until ep is actvated */
 191:c/stm32f1xx_hal_pcd.c ****     hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 111              		.loc 1 191 0
 112 0056 0846     		mov	r0, r1
 113 0058 04F11005 		add	r5, r4, #16
 114              	.LVL5:
 115              	.L5:
 188:c/stm32f1xx_hal_pcd.c ****     hpcd->IN_ep[index].num = index;
 116              		.loc 1 188 0 discriminator 3
 117 005c 82F82810 		strb	r1, [r2, #40]
 189:c/stm32f1xx_hal_pcd.c ****     /* Control until ep is actvated */
 118              		.loc 1 189 0 discriminator 3
 119 0060 9186     		strh	r1, [r2, #52]	@ movhi
 184:c/stm32f1xx_hal_pcd.c ****   {
 120              		.loc 1 184 0 discriminator 3
 121 0062 0131     		adds	r1, r1, #1
 122              	.LVL6:
 123 0064 0F29     		cmp	r1, #15
 187:c/stm32f1xx_hal_pcd.c ****     hpcd->IN_ep[index].num = index;
 124              		.loc 1 187 0 discriminator 3
 125 0066 82F82960 		strb	r6, [r2, #41]
 126              		.loc 1 191 0 discriminator 3
 127 006a 82F82B00 		strb	r0, [r2, #43]
 192:c/stm32f1xx_hal_pcd.c ****     hpcd->IN_ep[index].maxpacket =  0U;
 128              		.loc 1 192 0 discriminator 3
 129 006e 9063     		str	r0, [r2, #56]
 193:c/stm32f1xx_hal_pcd.c ****     hpcd->IN_ep[index].xfer_buff = 0U;
 130              		.loc 1 193 0 discriminator 3
 131 0070 D063     		str	r0, [r2, #60]
 194:c/stm32f1xx_hal_pcd.c ****     hpcd->IN_ep[index].xfer_len = 0U;
 132              		.loc 1 194 0 discriminator 3
 133 0072 1064     		str	r0, [r2, #64]
 134 0074 02F12002 		add	r2, r2, #32
 184:c/stm32f1xx_hal_pcd.c ****   {
 135              		.loc 1 184 0 discriminator 3
 136 0078 F0D1     		bne	.L5
 137 007a 0022     		movs	r2, #0
 195:c/stm32f1xx_hal_pcd.c ****   }
 196:c/stm32f1xx_hal_pcd.c ****  
 197:c/stm32f1xx_hal_pcd.c ****   for (index = 0U; index < 15U ; index++)
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 7


 198:c/stm32f1xx_hal_pcd.c ****   {
 199:c/stm32f1xx_hal_pcd.c ****     hpcd->OUT_ep[index].is_in = 0U;
 138              		.loc 1 199 0
 139 007c 1746     		mov	r7, r2
 140              	.LVL7:
 141              	.L6:
 200:c/stm32f1xx_hal_pcd.c ****     hpcd->OUT_ep[index].num = index;
 142              		.loc 1 200 0 discriminator 3
 143 007e 83F82822 		strb	r2, [r3, #552]
 201:c/stm32f1xx_hal_pcd.c ****     hpcd->IN_ep[index].tx_fifo_num = index;
 144              		.loc 1 201 0 discriminator 3
 145 0082 9A86     		strh	r2, [r3, #52]	@ movhi
 197:c/stm32f1xx_hal_pcd.c ****   {
 146              		.loc 1 197 0 discriminator 3
 147 0084 0132     		adds	r2, r2, #1
 148              	.LVL8:
 149 0086 0F2A     		cmp	r2, #15
 199:c/stm32f1xx_hal_pcd.c ****     hpcd->OUT_ep[index].num = index;
 150              		.loc 1 199 0 discriminator 3
 151 0088 83F82972 		strb	r7, [r3, #553]
 202:c/stm32f1xx_hal_pcd.c ****     /* Control until ep is activated */
 203:c/stm32f1xx_hal_pcd.c ****     hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 152              		.loc 1 203 0 discriminator 3
 153 008c 83F82B72 		strb	r7, [r3, #555]
 204:c/stm32f1xx_hal_pcd.c ****     hpcd->OUT_ep[index].maxpacket = 0U;
 154              		.loc 1 204 0 discriminator 3
 155 0090 C3F83872 		str	r7, [r3, #568]
 205:c/stm32f1xx_hal_pcd.c ****     hpcd->OUT_ep[index].xfer_buff = 0U;
 156              		.loc 1 205 0 discriminator 3
 157 0094 C3F83C72 		str	r7, [r3, #572]
 206:c/stm32f1xx_hal_pcd.c ****     hpcd->OUT_ep[index].xfer_len = 0U;
 158              		.loc 1 206 0 discriminator 3
 159 0098 C3F84072 		str	r7, [r3, #576]
 160 009c 03F12003 		add	r3, r3, #32
 197:c/stm32f1xx_hal_pcd.c ****   {
 161              		.loc 1 197 0 discriminator 3
 162 00a0 EDD1     		bne	.L6
 207:c/stm32f1xx_hal_pcd.c ****   }
 208:c/stm32f1xx_hal_pcd.c ****   
 209:c/stm32f1xx_hal_pcd.c ****   /* Init Device */
 210:c/stm32f1xx_hal_pcd.c ****   USB_DevInit(hpcd->Instance, hpcd->Init);
 163              		.loc 1 210 0
 164 00a2 6E46     		mov	r6, sp
 165 00a4 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 166              	.LVL9:
 167 00a6 0FC6     		stmia	r6!, {r0, r1, r2, r3}
 168 00a8 2B68     		ldr	r3, [r5]
 169 00aa 3360     		str	r3, [r6]
 170 00ac 98E80E00 		ldm	r8, {r1, r2, r3}
 171 00b0 2068     		ldr	r0, [r4]
 172 00b2 FFF7FEFF 		bl	USB_DevInit
 173              	.LVL10:
 211:c/stm32f1xx_hal_pcd.c ****   
 212:c/stm32f1xx_hal_pcd.c ****   hpcd->USB_Address = 0U;
 213:c/stm32f1xx_hal_pcd.c ****   hpcd->State= HAL_PCD_STATE_READY;
 174              		.loc 1 213 0
 175 00b6 0123     		movs	r3, #1
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 8


 212:c/stm32f1xx_hal_pcd.c ****   hpcd->State= HAL_PCD_STATE_READY;
 176              		.loc 1 212 0
 177 00b8 84F82470 		strb	r7, [r4, #36]
 214:c/stm32f1xx_hal_pcd.c ****   
 215:c/stm32f1xx_hal_pcd.c ****   USB_DevDisconnect (hpcd->Instance);  
 178              		.loc 1 215 0
 179 00bc 2068     		ldr	r0, [r4]
 213:c/stm32f1xx_hal_pcd.c ****   
 180              		.loc 1 213 0
 181 00be 84F82934 		strb	r3, [r4, #1065]
 182              		.loc 1 215 0
 183 00c2 FFF7FEFF 		bl	USB_DevDisconnect
 184              	.LVL11:
 216:c/stm32f1xx_hal_pcd.c ****   return HAL_OK;
 185              		.loc 1 216 0
 186 00c6 0020     		movs	r0, #0
 187              	.L3:
 217:c/stm32f1xx_hal_pcd.c **** }
 188              		.loc 1 217 0
 189 00c8 06B0     		add	sp, sp, #24
 190              		.cfi_remember_state
 191              		.cfi_def_cfa_offset 24
 192              		@ sp needed
 193 00ca BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 194              	.LVL12:
 195              	.L7:
 196              		.cfi_restore_state
 157:c/stm32f1xx_hal_pcd.c ****   }
 197              		.loc 1 157 0
 198 00ce 0120     		movs	r0, #1
 199              	.LVL13:
 200 00d0 FAE7     		b	.L3
 201              		.cfi_endproc
 202              	.LFE64:
 204              		.section	.text.HAL_PCD_MspDeInit,"ax",%progbits
 205              		.align	1
 206              		.weak	HAL_PCD_MspDeInit
 207              		.syntax unified
 208              		.thumb
 209              		.thumb_func
 210              		.fpu softvfp
 212              	HAL_PCD_MspDeInit:
 213              	.LFB118:
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 0
 216              		@ frame_needed = 0, uses_anonymous_args = 0
 217              		@ link register save eliminated.
 218 0000 7047     		bx	lr
 219              		.cfi_endproc
 220              	.LFE118:
 222              		.section	.text.HAL_PCD_Start,"ax",%progbits
 223              		.align	1
 224              		.global	HAL_PCD_Start
 225              		.syntax unified
 226              		.thumb
 227              		.thumb_func
 228              		.fpu softvfp
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 9


 230              	HAL_PCD_Start:
 231              	.LFB68:
 218:c/stm32f1xx_hal_pcd.c **** 
 219:c/stm32f1xx_hal_pcd.c **** /**
 220:c/stm32f1xx_hal_pcd.c ****   * @brief  DeInitializes the PCD peripheral 
 221:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
 222:c/stm32f1xx_hal_pcd.c ****   * @retval HAL status
 223:c/stm32f1xx_hal_pcd.c ****   */
 224:c/stm32f1xx_hal_pcd.c **** HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
 225:c/stm32f1xx_hal_pcd.c **** {
 226:c/stm32f1xx_hal_pcd.c ****   /* Check the PCD handle allocation */
 227:c/stm32f1xx_hal_pcd.c ****   if(hpcd == NULL)
 228:c/stm32f1xx_hal_pcd.c ****   {
 229:c/stm32f1xx_hal_pcd.c ****     return HAL_ERROR;
 230:c/stm32f1xx_hal_pcd.c ****   }
 231:c/stm32f1xx_hal_pcd.c **** 
 232:c/stm32f1xx_hal_pcd.c ****   hpcd->State = HAL_PCD_STATE_BUSY;
 233:c/stm32f1xx_hal_pcd.c ****   
 234:c/stm32f1xx_hal_pcd.c ****   /* Stop Device */
 235:c/stm32f1xx_hal_pcd.c ****   HAL_PCD_Stop(hpcd);
 236:c/stm32f1xx_hal_pcd.c ****   
 237:c/stm32f1xx_hal_pcd.c ****   /* DeInit the low level hardware */
 238:c/stm32f1xx_hal_pcd.c ****   HAL_PCD_MspDeInit(hpcd);
 239:c/stm32f1xx_hal_pcd.c ****   
 240:c/stm32f1xx_hal_pcd.c ****   hpcd->State = HAL_PCD_STATE_RESET; 
 241:c/stm32f1xx_hal_pcd.c ****   
 242:c/stm32f1xx_hal_pcd.c ****   return HAL_OK;
 243:c/stm32f1xx_hal_pcd.c **** }
 244:c/stm32f1xx_hal_pcd.c **** 
 245:c/stm32f1xx_hal_pcd.c **** /**
 246:c/stm32f1xx_hal_pcd.c ****   * @brief  Initializes the PCD MSP.
 247:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
 248:c/stm32f1xx_hal_pcd.c ****   * @retval None
 249:c/stm32f1xx_hal_pcd.c ****   */
 250:c/stm32f1xx_hal_pcd.c **** __weak void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
 251:c/stm32f1xx_hal_pcd.c **** {
 252:c/stm32f1xx_hal_pcd.c ****   /* Prevent unused argument(s) compilation warning */
 253:c/stm32f1xx_hal_pcd.c ****   UNUSED(hpcd);
 254:c/stm32f1xx_hal_pcd.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 255:c/stm32f1xx_hal_pcd.c ****             the HAL_PCD_MspInit could be implemented in the user file
 256:c/stm32f1xx_hal_pcd.c ****    */
 257:c/stm32f1xx_hal_pcd.c **** }
 258:c/stm32f1xx_hal_pcd.c **** 
 259:c/stm32f1xx_hal_pcd.c **** /**
 260:c/stm32f1xx_hal_pcd.c ****   * @brief  DeInitializes PCD MSP.
 261:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
 262:c/stm32f1xx_hal_pcd.c ****   * @retval None
 263:c/stm32f1xx_hal_pcd.c ****   */
 264:c/stm32f1xx_hal_pcd.c **** __weak void HAL_PCD_MspDeInit(PCD_HandleTypeDef *hpcd)
 265:c/stm32f1xx_hal_pcd.c **** {
 266:c/stm32f1xx_hal_pcd.c ****   /* Prevent unused argument(s) compilation warning */
 267:c/stm32f1xx_hal_pcd.c ****   UNUSED(hpcd);
 268:c/stm32f1xx_hal_pcd.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 269:c/stm32f1xx_hal_pcd.c ****             the HAL_PCD_MspDeInit could be implemented in the user file
 270:c/stm32f1xx_hal_pcd.c ****    */
 271:c/stm32f1xx_hal_pcd.c **** }
 272:c/stm32f1xx_hal_pcd.c **** 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 10


 273:c/stm32f1xx_hal_pcd.c **** /**
 274:c/stm32f1xx_hal_pcd.c ****   * @}
 275:c/stm32f1xx_hal_pcd.c ****   */
 276:c/stm32f1xx_hal_pcd.c **** 
 277:c/stm32f1xx_hal_pcd.c **** /** @defgroup PCD_Exported_Functions_Group2 IO operation functions 
 278:c/stm32f1xx_hal_pcd.c ****  *  @brief   Data transfers functions 
 279:c/stm32f1xx_hal_pcd.c ****  *
 280:c/stm32f1xx_hal_pcd.c **** @verbatim
 281:c/stm32f1xx_hal_pcd.c ****  ===============================================================================
 282:c/stm32f1xx_hal_pcd.c ****                       ##### IO operation functions #####
 283:c/stm32f1xx_hal_pcd.c ****  ===============================================================================
 284:c/stm32f1xx_hal_pcd.c ****     [..]
 285:c/stm32f1xx_hal_pcd.c ****     This subsection provides a set of functions allowing to manage the PCD data 
 286:c/stm32f1xx_hal_pcd.c ****     transfers.
 287:c/stm32f1xx_hal_pcd.c **** 
 288:c/stm32f1xx_hal_pcd.c **** @endverbatim
 289:c/stm32f1xx_hal_pcd.c ****   * @{
 290:c/stm32f1xx_hal_pcd.c ****   */
 291:c/stm32f1xx_hal_pcd.c **** 
 292:c/stm32f1xx_hal_pcd.c **** /**
 293:c/stm32f1xx_hal_pcd.c ****   * @brief  Start The USB Device.
 294:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
 295:c/stm32f1xx_hal_pcd.c ****   * @retval HAL status
 296:c/stm32f1xx_hal_pcd.c ****   */
 297:c/stm32f1xx_hal_pcd.c **** HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
 298:c/stm32f1xx_hal_pcd.c **** {
 232              		.loc 1 298 0
 233              		.cfi_startproc
 234              		@ args = 0, pretend = 0, frame = 0
 235              		@ frame_needed = 0, uses_anonymous_args = 0
 236              	.LVL14:
 299:c/stm32f1xx_hal_pcd.c ****   __HAL_LOCK(hpcd);
 237              		.loc 1 299 0
 238 0000 90F82834 		ldrb	r3, [r0, #1064]	@ zero_extendqisi2
 298:c/stm32f1xx_hal_pcd.c ****   __HAL_LOCK(hpcd);
 239              		.loc 1 298 0
 240 0004 10B5     		push	{r4, lr}
 241              		.cfi_def_cfa_offset 8
 242              		.cfi_offset 4, -8
 243              		.cfi_offset 14, -4
 244              		.loc 1 299 0
 245 0006 012B     		cmp	r3, #1
 298:c/stm32f1xx_hal_pcd.c ****   __HAL_LOCK(hpcd);
 246              		.loc 1 298 0
 247 0008 0446     		mov	r4, r0
 248              		.loc 1 299 0
 249 000a 0ED0     		beq	.L13
 250              		.loc 1 299 0 is_stmt 0 discriminator 2
 251 000c 0121     		movs	r1, #1
 252 000e 80F82814 		strb	r1, [r0, #1064]
 300:c/stm32f1xx_hal_pcd.c ****   HAL_PCDEx_SetConnectionState (hpcd, 1);
 253              		.loc 1 300 0 is_stmt 1 discriminator 2
 254 0012 FFF7FEFF 		bl	HAL_PCDEx_SetConnectionState
 255              	.LVL15:
 301:c/stm32f1xx_hal_pcd.c ****   USB_DevConnect (hpcd->Instance);
 256              		.loc 1 301 0 discriminator 2
 257 0016 2068     		ldr	r0, [r4]
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 11


 258 0018 FFF7FEFF 		bl	USB_DevConnect
 259              	.LVL16:
 302:c/stm32f1xx_hal_pcd.c ****   __HAL_PCD_ENABLE(hpcd);
 260              		.loc 1 302 0 discriminator 2
 261 001c 2068     		ldr	r0, [r4]
 262 001e FFF7FEFF 		bl	USB_EnableGlobalInt
 263              	.LVL17:
 303:c/stm32f1xx_hal_pcd.c ****   __HAL_UNLOCK(hpcd);
 264              		.loc 1 303 0 discriminator 2
 265 0022 0020     		movs	r0, #0
 266 0024 84F82804 		strb	r0, [r4, #1064]
 304:c/stm32f1xx_hal_pcd.c ****   return HAL_OK;
 267              		.loc 1 304 0 discriminator 2
 268 0028 10BD     		pop	{r4, pc}
 269              	.LVL18:
 270              	.L13:
 299:c/stm32f1xx_hal_pcd.c ****   HAL_PCDEx_SetConnectionState (hpcd, 1);
 271              		.loc 1 299 0
 272 002a 0220     		movs	r0, #2
 273              	.LVL19:
 305:c/stm32f1xx_hal_pcd.c **** }
 274              		.loc 1 305 0
 275 002c 10BD     		pop	{r4, pc}
 276              		.cfi_endproc
 277              	.LFE68:
 279              		.section	.text.HAL_PCD_Stop,"ax",%progbits
 280              		.align	1
 281              		.global	HAL_PCD_Stop
 282              		.syntax unified
 283              		.thumb
 284              		.thumb_func
 285              		.fpu softvfp
 287              	HAL_PCD_Stop:
 288              	.LFB69:
 306:c/stm32f1xx_hal_pcd.c **** 
 307:c/stm32f1xx_hal_pcd.c **** /**
 308:c/stm32f1xx_hal_pcd.c ****   * @brief  Stop The USB Device.
 309:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
 310:c/stm32f1xx_hal_pcd.c ****   * @retval HAL status
 311:c/stm32f1xx_hal_pcd.c ****   */
 312:c/stm32f1xx_hal_pcd.c **** HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
 313:c/stm32f1xx_hal_pcd.c **** {
 289              		.loc 1 313 0
 290              		.cfi_startproc
 291              		@ args = 0, pretend = 0, frame = 0
 292              		@ frame_needed = 0, uses_anonymous_args = 0
 293              	.LVL20:
 314:c/stm32f1xx_hal_pcd.c ****   __HAL_LOCK(hpcd);
 294              		.loc 1 314 0
 295 0000 90F82834 		ldrb	r3, [r0, #1064]	@ zero_extendqisi2
 313:c/stm32f1xx_hal_pcd.c ****   __HAL_LOCK(hpcd);
 296              		.loc 1 313 0
 297 0004 10B5     		push	{r4, lr}
 298              		.cfi_def_cfa_offset 8
 299              		.cfi_offset 4, -8
 300              		.cfi_offset 14, -4
 301              		.loc 1 314 0
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 12


 302 0006 012B     		cmp	r3, #1
 313:c/stm32f1xx_hal_pcd.c ****   __HAL_LOCK(hpcd);
 303              		.loc 1 313 0
 304 0008 0446     		mov	r4, r0
 305              		.loc 1 314 0
 306 000a 0FD0     		beq	.L16
 307              	.LVL21:
 308              	.LBB4:
 309              	.LBB5:
 310 000c 0123     		movs	r3, #1
 311 000e 80F82834 		strb	r3, [r0, #1064]
 315:c/stm32f1xx_hal_pcd.c ****   __HAL_PCD_DISABLE(hpcd);
 312              		.loc 1 315 0
 313 0012 0068     		ldr	r0, [r0]
 314              	.LVL22:
 315 0014 FFF7FEFF 		bl	USB_DisableGlobalInt
 316              	.LVL23:
 316:c/stm32f1xx_hal_pcd.c ****   USB_StopDevice(hpcd->Instance);
 317              		.loc 1 316 0
 318 0018 2068     		ldr	r0, [r4]
 319 001a FFF7FEFF 		bl	USB_StopDevice
 320              	.LVL24:
 317:c/stm32f1xx_hal_pcd.c ****   USB_DevDisconnect (hpcd->Instance);
 321              		.loc 1 317 0
 322 001e 2068     		ldr	r0, [r4]
 323 0020 FFF7FEFF 		bl	USB_DevDisconnect
 324              	.LVL25:
 318:c/stm32f1xx_hal_pcd.c ****   __HAL_UNLOCK(hpcd);
 325              		.loc 1 318 0
 326 0024 0020     		movs	r0, #0
 327 0026 84F82804 		strb	r0, [r4, #1064]
 328              	.LVL26:
 329 002a 10BD     		pop	{r4, pc}
 330              	.LVL27:
 331              	.L16:
 332              	.LBE5:
 333              	.LBE4:
 314:c/stm32f1xx_hal_pcd.c ****   __HAL_PCD_DISABLE(hpcd);
 334              		.loc 1 314 0
 335 002c 0220     		movs	r0, #2
 336              	.LVL28:
 319:c/stm32f1xx_hal_pcd.c ****   return HAL_OK;
 320:c/stm32f1xx_hal_pcd.c **** }
 337              		.loc 1 320 0
 338 002e 10BD     		pop	{r4, pc}
 339              		.cfi_endproc
 340              	.LFE69:
 342              		.section	.text.HAL_PCD_DeInit,"ax",%progbits
 343              		.align	1
 344              		.global	HAL_PCD_DeInit
 345              		.syntax unified
 346              		.thumb
 347              		.thumb_func
 348              		.fpu softvfp
 350              	HAL_PCD_DeInit:
 351              	.LFB65:
 225:c/stm32f1xx_hal_pcd.c ****   /* Check the PCD handle allocation */
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 13


 352              		.loc 1 225 0
 353              		.cfi_startproc
 354              		@ args = 0, pretend = 0, frame = 0
 355              		@ frame_needed = 0, uses_anonymous_args = 0
 356              	.LVL29:
 357 0000 10B5     		push	{r4, lr}
 358              		.cfi_def_cfa_offset 8
 359              		.cfi_offset 4, -8
 360              		.cfi_offset 14, -4
 227:c/stm32f1xx_hal_pcd.c ****   {
 361              		.loc 1 227 0
 362 0002 0446     		mov	r4, r0
 363 0004 58B1     		cbz	r0, .L19
 232:c/stm32f1xx_hal_pcd.c ****   
 364              		.loc 1 232 0
 365 0006 0323     		movs	r3, #3
 366 0008 80F82934 		strb	r3, [r0, #1065]
 235:c/stm32f1xx_hal_pcd.c ****   
 367              		.loc 1 235 0
 368 000c FFF7FEFF 		bl	HAL_PCD_Stop
 369              	.LVL30:
 238:c/stm32f1xx_hal_pcd.c ****   
 370              		.loc 1 238 0
 371 0010 2046     		mov	r0, r4
 372 0012 FFF7FEFF 		bl	HAL_PCD_MspDeInit
 373              	.LVL31:
 240:c/stm32f1xx_hal_pcd.c ****   
 374              		.loc 1 240 0
 375 0016 0020     		movs	r0, #0
 376 0018 84F82904 		strb	r0, [r4, #1065]
 242:c/stm32f1xx_hal_pcd.c **** }
 377              		.loc 1 242 0
 378 001c 10BD     		pop	{r4, pc}
 379              	.LVL32:
 380              	.L19:
 229:c/stm32f1xx_hal_pcd.c ****   }
 381              		.loc 1 229 0
 382 001e 0120     		movs	r0, #1
 383              	.LVL33:
 243:c/stm32f1xx_hal_pcd.c **** 
 384              		.loc 1 243 0
 385 0020 10BD     		pop	{r4, pc}
 386              		.cfi_endproc
 387              	.LFE65:
 389              		.section	.text.HAL_PCD_DataOutStageCallback,"ax",%progbits
 390              		.align	1
 391              		.weak	HAL_PCD_DataOutStageCallback
 392              		.syntax unified
 393              		.thumb
 394              		.thumb_func
 395              		.fpu softvfp
 397              	HAL_PCD_DataOutStageCallback:
 398              	.LFB104:
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 0
 401              		@ frame_needed = 0, uses_anonymous_args = 0
 402              		@ link register save eliminated.
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 14


 403 0000 7047     		bx	lr
 404              		.cfi_endproc
 405              	.LFE104:
 407              		.section	.text.HAL_PCD_DataInStageCallback,"ax",%progbits
 408              		.align	1
 409              		.weak	HAL_PCD_DataInStageCallback
 410              		.syntax unified
 411              		.thumb
 412              		.thumb_func
 413              		.fpu softvfp
 415              	HAL_PCD_DataInStageCallback:
 416              	.LFB102:
 417              		.cfi_startproc
 418              		@ args = 0, pretend = 0, frame = 0
 419              		@ frame_needed = 0, uses_anonymous_args = 0
 420              		@ link register save eliminated.
 421 0000 7047     		bx	lr
 422              		.cfi_endproc
 423              	.LFE102:
 425              		.section	.text.HAL_PCD_SetupStageCallback,"ax",%progbits
 426              		.align	1
 427              		.weak	HAL_PCD_SetupStageCallback
 428              		.syntax unified
 429              		.thumb
 430              		.thumb_func
 431              		.fpu softvfp
 433              	HAL_PCD_SetupStageCallback:
 434              	.LFB116:
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 0
 437              		@ frame_needed = 0, uses_anonymous_args = 0
 438              		@ link register save eliminated.
 439 0000 7047     		bx	lr
 440              		.cfi_endproc
 441              	.LFE116:
 443              		.section	.text.HAL_PCD_SOFCallback,"ax",%progbits
 444              		.align	1
 445              		.weak	HAL_PCD_SOFCallback
 446              		.syntax unified
 447              		.thumb
 448              		.thumb_func
 449              		.fpu softvfp
 451              	HAL_PCD_SOFCallback:
 452              	.LFB114:
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 0
 455              		@ frame_needed = 0, uses_anonymous_args = 0
 456              		@ link register save eliminated.
 457 0000 7047     		bx	lr
 458              		.cfi_endproc
 459              	.LFE114:
 461              		.section	.text.HAL_PCD_ResetCallback,"ax",%progbits
 462              		.align	1
 463              		.weak	HAL_PCD_ResetCallback
 464              		.syntax unified
 465              		.thumb
 466              		.thumb_func
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 15


 467              		.fpu softvfp
 469              	HAL_PCD_ResetCallback:
 470              	.LFB112:
 471              		.cfi_startproc
 472              		@ args = 0, pretend = 0, frame = 0
 473              		@ frame_needed = 0, uses_anonymous_args = 0
 474              		@ link register save eliminated.
 475 0000 7047     		bx	lr
 476              		.cfi_endproc
 477              	.LFE112:
 479              		.section	.text.HAL_PCD_SuspendCallback,"ax",%progbits
 480              		.align	1
 481              		.weak	HAL_PCD_SuspendCallback
 482              		.syntax unified
 483              		.thumb
 484              		.thumb_func
 485              		.fpu softvfp
 487              	HAL_PCD_SuspendCallback:
 488              	.LFB110:
 489              		.cfi_startproc
 490              		@ args = 0, pretend = 0, frame = 0
 491              		@ frame_needed = 0, uses_anonymous_args = 0
 492              		@ link register save eliminated.
 493 0000 7047     		bx	lr
 494              		.cfi_endproc
 495              	.LFE110:
 497              		.section	.text.HAL_PCD_ResumeCallback,"ax",%progbits
 498              		.align	1
 499              		.weak	HAL_PCD_ResumeCallback
 500              		.syntax unified
 501              		.thumb
 502              		.thumb_func
 503              		.fpu softvfp
 505              	HAL_PCD_ResumeCallback:
 506              	.LFB108:
 507              		.cfi_startproc
 508              		@ args = 0, pretend = 0, frame = 0
 509              		@ frame_needed = 0, uses_anonymous_args = 0
 510              		@ link register save eliminated.
 511 0000 7047     		bx	lr
 512              		.cfi_endproc
 513              	.LFE108:
 515              		.section	.text.HAL_PCD_ISOOUTIncompleteCallback,"ax",%progbits
 516              		.align	1
 517              		.weak	HAL_PCD_ISOOUTIncompleteCallback
 518              		.syntax unified
 519              		.thumb
 520              		.thumb_func
 521              		.fpu softvfp
 523              	HAL_PCD_ISOOUTIncompleteCallback:
 524              	.LFB100:
 525              		.cfi_startproc
 526              		@ args = 0, pretend = 0, frame = 0
 527              		@ frame_needed = 0, uses_anonymous_args = 0
 528              		@ link register save eliminated.
 529 0000 7047     		bx	lr
 530              		.cfi_endproc
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 16


 531              	.LFE100:
 533              		.section	.text.HAL_PCD_ISOINIncompleteCallback,"ax",%progbits
 534              		.align	1
 535              		.weak	HAL_PCD_ISOINIncompleteCallback
 536              		.syntax unified
 537              		.thumb
 538              		.thumb_func
 539              		.fpu softvfp
 541              	HAL_PCD_ISOINIncompleteCallback:
 542              	.LFB79:
 321:c/stm32f1xx_hal_pcd.c **** 
 322:c/stm32f1xx_hal_pcd.c **** #if defined (USB_OTG_FS)
 323:c/stm32f1xx_hal_pcd.c **** /**
 324:c/stm32f1xx_hal_pcd.c ****   * @brief  This function handles PCD interrupt request.
 325:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
 326:c/stm32f1xx_hal_pcd.c ****   * @retval HAL status
 327:c/stm32f1xx_hal_pcd.c ****   */
 328:c/stm32f1xx_hal_pcd.c **** void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
 329:c/stm32f1xx_hal_pcd.c **** {
 330:c/stm32f1xx_hal_pcd.c ****   USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 331:c/stm32f1xx_hal_pcd.c ****   uint32_t index = 0U, ep_intr = 0U, epint = 0U, epnum = 0U;
 332:c/stm32f1xx_hal_pcd.c ****   uint32_t fifoemptymsk = 0U, temp = 0U;
 333:c/stm32f1xx_hal_pcd.c ****   USB_OTG_EPTypeDef *ep = NULL;
 334:c/stm32f1xx_hal_pcd.c ****   
 335:c/stm32f1xx_hal_pcd.c ****   /* ensure that we are in device mode */
 336:c/stm32f1xx_hal_pcd.c ****   if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 337:c/stm32f1xx_hal_pcd.c ****   {
 338:c/stm32f1xx_hal_pcd.c ****     /* avoid spurious interrupt */
 339:c/stm32f1xx_hal_pcd.c ****     if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 340:c/stm32f1xx_hal_pcd.c ****     {
 341:c/stm32f1xx_hal_pcd.c ****       return;
 342:c/stm32f1xx_hal_pcd.c ****     }
 343:c/stm32f1xx_hal_pcd.c ****     
 344:c/stm32f1xx_hal_pcd.c ****     if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 345:c/stm32f1xx_hal_pcd.c ****     {
 346:c/stm32f1xx_hal_pcd.c ****      /* incorrect mode, acknowledge the interrupt */
 347:c/stm32f1xx_hal_pcd.c ****       __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 348:c/stm32f1xx_hal_pcd.c ****     }
 349:c/stm32f1xx_hal_pcd.c ****     
 350:c/stm32f1xx_hal_pcd.c ****     if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 351:c/stm32f1xx_hal_pcd.c ****     {
 352:c/stm32f1xx_hal_pcd.c ****       epnum = 0U;
 353:c/stm32f1xx_hal_pcd.c ****       
 354:c/stm32f1xx_hal_pcd.c ****       /* Read in the device interrupt bits */
 355:c/stm32f1xx_hal_pcd.c ****       ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 356:c/stm32f1xx_hal_pcd.c ****       
 357:c/stm32f1xx_hal_pcd.c ****       while ( ep_intr )
 358:c/stm32f1xx_hal_pcd.c ****       {
 359:c/stm32f1xx_hal_pcd.c ****         if (ep_intr & 0x1U)
 360:c/stm32f1xx_hal_pcd.c ****         {
 361:c/stm32f1xx_hal_pcd.c ****           epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 362:c/stm32f1xx_hal_pcd.c ****           
 363:c/stm32f1xx_hal_pcd.c ****           if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 364:c/stm32f1xx_hal_pcd.c ****           {
 365:c/stm32f1xx_hal_pcd.c ****             CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 366:c/stm32f1xx_hal_pcd.c ****             
 367:c/stm32f1xx_hal_pcd.c ****             HAL_PCD_DataOutStageCallback(hpcd, epnum);
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 17


 368:c/stm32f1xx_hal_pcd.c ****           }
 369:c/stm32f1xx_hal_pcd.c ****           
 370:c/stm32f1xx_hal_pcd.c ****           if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 371:c/stm32f1xx_hal_pcd.c ****           {
 372:c/stm32f1xx_hal_pcd.c ****             /* Inform the upper layer that a setup packet is available */
 373:c/stm32f1xx_hal_pcd.c ****             HAL_PCD_SetupStageCallback(hpcd);
 374:c/stm32f1xx_hal_pcd.c ****             CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 375:c/stm32f1xx_hal_pcd.c ****           }
 376:c/stm32f1xx_hal_pcd.c ****           
 377:c/stm32f1xx_hal_pcd.c ****           if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 378:c/stm32f1xx_hal_pcd.c ****           {
 379:c/stm32f1xx_hal_pcd.c ****             CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 380:c/stm32f1xx_hal_pcd.c ****           }
 381:c/stm32f1xx_hal_pcd.c ****         }
 382:c/stm32f1xx_hal_pcd.c ****         epnum++;
 383:c/stm32f1xx_hal_pcd.c ****         ep_intr >>= 1U;
 384:c/stm32f1xx_hal_pcd.c ****       }
 385:c/stm32f1xx_hal_pcd.c ****     }
 386:c/stm32f1xx_hal_pcd.c ****     
 387:c/stm32f1xx_hal_pcd.c ****     if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 388:c/stm32f1xx_hal_pcd.c ****     {
 389:c/stm32f1xx_hal_pcd.c ****       /* Read in the device interrupt bits */
 390:c/stm32f1xx_hal_pcd.c ****       ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 391:c/stm32f1xx_hal_pcd.c ****       
 392:c/stm32f1xx_hal_pcd.c ****       epnum = 0U;
 393:c/stm32f1xx_hal_pcd.c ****       
 394:c/stm32f1xx_hal_pcd.c ****       while ( ep_intr )
 395:c/stm32f1xx_hal_pcd.c ****       {
 396:c/stm32f1xx_hal_pcd.c ****         if (ep_intr & 0x1U) /* In ITR */
 397:c/stm32f1xx_hal_pcd.c ****         {
 398:c/stm32f1xx_hal_pcd.c ****           epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 399:c/stm32f1xx_hal_pcd.c **** 
 400:c/stm32f1xx_hal_pcd.c ****           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 401:c/stm32f1xx_hal_pcd.c ****           {
 402:c/stm32f1xx_hal_pcd.c ****             fifoemptymsk = 0x1U << epnum;
 403:c/stm32f1xx_hal_pcd.c ****             USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 404:c/stm32f1xx_hal_pcd.c ****             
 405:c/stm32f1xx_hal_pcd.c ****             CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 406:c/stm32f1xx_hal_pcd.c ****             
 407:c/stm32f1xx_hal_pcd.c ****             HAL_PCD_DataInStageCallback(hpcd, epnum);
 408:c/stm32f1xx_hal_pcd.c ****           }
 409:c/stm32f1xx_hal_pcd.c ****           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 410:c/stm32f1xx_hal_pcd.c ****           {
 411:c/stm32f1xx_hal_pcd.c ****             CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 412:c/stm32f1xx_hal_pcd.c ****           }
 413:c/stm32f1xx_hal_pcd.c ****           if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 414:c/stm32f1xx_hal_pcd.c ****           {
 415:c/stm32f1xx_hal_pcd.c ****             CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 416:c/stm32f1xx_hal_pcd.c ****           }
 417:c/stm32f1xx_hal_pcd.c ****           if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 418:c/stm32f1xx_hal_pcd.c ****           {
 419:c/stm32f1xx_hal_pcd.c ****             CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 420:c/stm32f1xx_hal_pcd.c ****           }
 421:c/stm32f1xx_hal_pcd.c ****           if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 422:c/stm32f1xx_hal_pcd.c ****           {
 423:c/stm32f1xx_hal_pcd.c ****             CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 424:c/stm32f1xx_hal_pcd.c ****           }
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 18


 425:c/stm32f1xx_hal_pcd.c ****           if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 426:c/stm32f1xx_hal_pcd.c ****           {
 427:c/stm32f1xx_hal_pcd.c ****             PCD_WriteEmptyTxFifo(hpcd , epnum);
 428:c/stm32f1xx_hal_pcd.c ****           }
 429:c/stm32f1xx_hal_pcd.c ****         }
 430:c/stm32f1xx_hal_pcd.c ****         epnum++;
 431:c/stm32f1xx_hal_pcd.c ****         ep_intr >>= 1U;
 432:c/stm32f1xx_hal_pcd.c ****       }
 433:c/stm32f1xx_hal_pcd.c ****     }
 434:c/stm32f1xx_hal_pcd.c ****     
 435:c/stm32f1xx_hal_pcd.c ****     /* Handle Resume Interrupt */
 436:c/stm32f1xx_hal_pcd.c ****     if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 437:c/stm32f1xx_hal_pcd.c ****     {
 438:c/stm32f1xx_hal_pcd.c ****      /* Clear the Remote Wake-up signalling */
 439:c/stm32f1xx_hal_pcd.c ****       USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 440:c/stm32f1xx_hal_pcd.c ****      
 441:c/stm32f1xx_hal_pcd.c ****      HAL_PCD_ResumeCallback(hpcd);
 442:c/stm32f1xx_hal_pcd.c ****      
 443:c/stm32f1xx_hal_pcd.c ****      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 444:c/stm32f1xx_hal_pcd.c ****     }
 445:c/stm32f1xx_hal_pcd.c ****     
 446:c/stm32f1xx_hal_pcd.c ****     /* Handle Suspend Interrupt */
 447:c/stm32f1xx_hal_pcd.c ****     if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 448:c/stm32f1xx_hal_pcd.c ****     {
 449:c/stm32f1xx_hal_pcd.c ****       if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 450:c/stm32f1xx_hal_pcd.c ****       {
 451:c/stm32f1xx_hal_pcd.c ****         
 452:c/stm32f1xx_hal_pcd.c ****         HAL_PCD_SuspendCallback(hpcd);
 453:c/stm32f1xx_hal_pcd.c ****       }
 454:c/stm32f1xx_hal_pcd.c ****       __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 455:c/stm32f1xx_hal_pcd.c ****     }
 456:c/stm32f1xx_hal_pcd.c **** 
 457:c/stm32f1xx_hal_pcd.c ****     /* Handle Reset Interrupt */
 458:c/stm32f1xx_hal_pcd.c ****     if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 459:c/stm32f1xx_hal_pcd.c ****     {
 460:c/stm32f1xx_hal_pcd.c ****       USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 461:c/stm32f1xx_hal_pcd.c ****       USB_FlushTxFifo(hpcd->Instance ,  0x10U);
 462:c/stm32f1xx_hal_pcd.c ****       
 463:c/stm32f1xx_hal_pcd.c ****       for (index = 0U; index < hpcd->Init.dev_endpoints ; index++)
 464:c/stm32f1xx_hal_pcd.c ****       {
 465:c/stm32f1xx_hal_pcd.c ****         USBx_INEP(index)->DIEPINT = 0xFFU;
 466:c/stm32f1xx_hal_pcd.c ****         USBx_OUTEP(index)->DOEPINT = 0xFFU;
 467:c/stm32f1xx_hal_pcd.c ****       }
 468:c/stm32f1xx_hal_pcd.c ****       USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 469:c/stm32f1xx_hal_pcd.c ****       USBx_DEVICE->DAINTMSK |= 0x10001U;
 470:c/stm32f1xx_hal_pcd.c ****       
 471:c/stm32f1xx_hal_pcd.c ****       USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM
 472:c/stm32f1xx_hal_pcd.c ****       USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 473:c/stm32f1xx_hal_pcd.c ****       
 474:c/stm32f1xx_hal_pcd.c ****       /* Set Default Address to 0 */
 475:c/stm32f1xx_hal_pcd.c ****       USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 476:c/stm32f1xx_hal_pcd.c ****       
 477:c/stm32f1xx_hal_pcd.c ****       /* setup EP0 to receive SETUP packets */
 478:c/stm32f1xx_hal_pcd.c ****       USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 479:c/stm32f1xx_hal_pcd.c ****       
 480:c/stm32f1xx_hal_pcd.c ****       __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 481:c/stm32f1xx_hal_pcd.c ****     }
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 19


 482:c/stm32f1xx_hal_pcd.c ****     
 483:c/stm32f1xx_hal_pcd.c ****     /* Handle Enumeration done Interrupt */
 484:c/stm32f1xx_hal_pcd.c ****     if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 485:c/stm32f1xx_hal_pcd.c ****     {
 486:c/stm32f1xx_hal_pcd.c ****       USB_ActivateSetup(hpcd->Instance);
 487:c/stm32f1xx_hal_pcd.c ****       hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 488:c/stm32f1xx_hal_pcd.c ****       
 489:c/stm32f1xx_hal_pcd.c ****       hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 490:c/stm32f1xx_hal_pcd.c ****       hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;
 491:c/stm32f1xx_hal_pcd.c ****       hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_FS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 492:c/stm32f1xx_hal_pcd.c ****       
 493:c/stm32f1xx_hal_pcd.c ****       HAL_PCD_ResetCallback(hpcd);
 494:c/stm32f1xx_hal_pcd.c ****       
 495:c/stm32f1xx_hal_pcd.c ****       __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 496:c/stm32f1xx_hal_pcd.c ****     }
 497:c/stm32f1xx_hal_pcd.c **** 
 498:c/stm32f1xx_hal_pcd.c ****     /* Handle RxQLevel Interrupt */
 499:c/stm32f1xx_hal_pcd.c ****     if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 500:c/stm32f1xx_hal_pcd.c ****     {
 501:c/stm32f1xx_hal_pcd.c ****       USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 502:c/stm32f1xx_hal_pcd.c ****       temp = USBx->GRXSTSP;
 503:c/stm32f1xx_hal_pcd.c ****       ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 504:c/stm32f1xx_hal_pcd.c ****       
 505:c/stm32f1xx_hal_pcd.c ****       if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 506:c/stm32f1xx_hal_pcd.c ****       {
 507:c/stm32f1xx_hal_pcd.c ****         if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 508:c/stm32f1xx_hal_pcd.c ****         {
 509:c/stm32f1xx_hal_pcd.c ****           USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 510:c/stm32f1xx_hal_pcd.c ****           ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 511:c/stm32f1xx_hal_pcd.c ****           ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 512:c/stm32f1xx_hal_pcd.c ****         }
 513:c/stm32f1xx_hal_pcd.c ****       }
 514:c/stm32f1xx_hal_pcd.c ****       else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 515:c/stm32f1xx_hal_pcd.c ****       {
 516:c/stm32f1xx_hal_pcd.c ****         USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 517:c/stm32f1xx_hal_pcd.c ****         ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 518:c/stm32f1xx_hal_pcd.c ****       }
 519:c/stm32f1xx_hal_pcd.c ****       USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 520:c/stm32f1xx_hal_pcd.c ****     }
 521:c/stm32f1xx_hal_pcd.c ****     
 522:c/stm32f1xx_hal_pcd.c ****     /* Handle SOF Interrupt */
 523:c/stm32f1xx_hal_pcd.c ****     if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 524:c/stm32f1xx_hal_pcd.c ****     {
 525:c/stm32f1xx_hal_pcd.c ****       HAL_PCD_SOFCallback(hpcd);
 526:c/stm32f1xx_hal_pcd.c ****       __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 527:c/stm32f1xx_hal_pcd.c ****     }
 528:c/stm32f1xx_hal_pcd.c ****     
 529:c/stm32f1xx_hal_pcd.c ****     /* Handle Incomplete ISO IN Interrupt */
 530:c/stm32f1xx_hal_pcd.c ****     if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 531:c/stm32f1xx_hal_pcd.c ****     {
 532:c/stm32f1xx_hal_pcd.c ****       HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 533:c/stm32f1xx_hal_pcd.c ****       __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 534:c/stm32f1xx_hal_pcd.c ****     }
 535:c/stm32f1xx_hal_pcd.c ****     
 536:c/stm32f1xx_hal_pcd.c ****     /* Handle Incomplete ISO OUT Interrupt */
 537:c/stm32f1xx_hal_pcd.c ****     if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 538:c/stm32f1xx_hal_pcd.c ****     {
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 20


 539:c/stm32f1xx_hal_pcd.c ****       HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 540:c/stm32f1xx_hal_pcd.c ****       __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 541:c/stm32f1xx_hal_pcd.c ****     }
 542:c/stm32f1xx_hal_pcd.c ****     
 543:c/stm32f1xx_hal_pcd.c ****     /* Handle Connection event Interrupt */
 544:c/stm32f1xx_hal_pcd.c ****     if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 545:c/stm32f1xx_hal_pcd.c ****     {
 546:c/stm32f1xx_hal_pcd.c ****       HAL_PCD_ConnectCallback(hpcd);
 547:c/stm32f1xx_hal_pcd.c ****       __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 548:c/stm32f1xx_hal_pcd.c ****     }
 549:c/stm32f1xx_hal_pcd.c ****     
 550:c/stm32f1xx_hal_pcd.c ****     /* Handle Disconnection event Interrupt */
 551:c/stm32f1xx_hal_pcd.c ****     if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 552:c/stm32f1xx_hal_pcd.c ****     {
 553:c/stm32f1xx_hal_pcd.c ****       temp = hpcd->Instance->GOTGINT;
 554:c/stm32f1xx_hal_pcd.c ****       
 555:c/stm32f1xx_hal_pcd.c ****       if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 556:c/stm32f1xx_hal_pcd.c ****       {
 557:c/stm32f1xx_hal_pcd.c ****         HAL_PCD_DisconnectCallback(hpcd);
 558:c/stm32f1xx_hal_pcd.c ****       }
 559:c/stm32f1xx_hal_pcd.c ****       hpcd->Instance->GOTGINT |= temp;
 560:c/stm32f1xx_hal_pcd.c ****     }
 561:c/stm32f1xx_hal_pcd.c ****   }
 562:c/stm32f1xx_hal_pcd.c **** }
 563:c/stm32f1xx_hal_pcd.c **** #endif /* USB_OTG_FS */
 564:c/stm32f1xx_hal_pcd.c **** 
 565:c/stm32f1xx_hal_pcd.c **** #if defined (USB)
 566:c/stm32f1xx_hal_pcd.c **** /**
 567:c/stm32f1xx_hal_pcd.c ****   * @brief  This function handles PCD interrupt request.
 568:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
 569:c/stm32f1xx_hal_pcd.c ****   * @retval HAL status
 570:c/stm32f1xx_hal_pcd.c ****   */
 571:c/stm32f1xx_hal_pcd.c **** void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
 572:c/stm32f1xx_hal_pcd.c **** { 
 573:c/stm32f1xx_hal_pcd.c ****   if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 574:c/stm32f1xx_hal_pcd.c ****   {
 575:c/stm32f1xx_hal_pcd.c ****     /* servicing of the endpoint correct transfer interrupt */
 576:c/stm32f1xx_hal_pcd.c ****     /* clear of the CTR flag into the sub */
 577:c/stm32f1xx_hal_pcd.c ****     PCD_EP_ISR_Handler(hpcd);
 578:c/stm32f1xx_hal_pcd.c ****   }
 579:c/stm32f1xx_hal_pcd.c **** 
 580:c/stm32f1xx_hal_pcd.c ****   if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 581:c/stm32f1xx_hal_pcd.c ****   {
 582:c/stm32f1xx_hal_pcd.c ****     __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 583:c/stm32f1xx_hal_pcd.c ****     HAL_PCD_ResetCallback(hpcd);
 584:c/stm32f1xx_hal_pcd.c ****     HAL_PCD_SetAddress(hpcd, 0U);
 585:c/stm32f1xx_hal_pcd.c ****   }
 586:c/stm32f1xx_hal_pcd.c **** 
 587:c/stm32f1xx_hal_pcd.c ****   if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 588:c/stm32f1xx_hal_pcd.c ****   {
 589:c/stm32f1xx_hal_pcd.c ****     __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 590:c/stm32f1xx_hal_pcd.c ****   }
 591:c/stm32f1xx_hal_pcd.c ****   if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 592:c/stm32f1xx_hal_pcd.c ****   {
 593:c/stm32f1xx_hal_pcd.c ****     __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 594:c/stm32f1xx_hal_pcd.c ****   }
 595:c/stm32f1xx_hal_pcd.c **** 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 21


 596:c/stm32f1xx_hal_pcd.c ****   if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 597:c/stm32f1xx_hal_pcd.c ****   {
 598:c/stm32f1xx_hal_pcd.c ****     hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 599:c/stm32f1xx_hal_pcd.c ****     hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 600:c/stm32f1xx_hal_pcd.c ****     
 601:c/stm32f1xx_hal_pcd.c ****     HAL_PCD_ResumeCallback(hpcd);
 602:c/stm32f1xx_hal_pcd.c **** 
 603:c/stm32f1xx_hal_pcd.c ****     __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 604:c/stm32f1xx_hal_pcd.c ****   }
 605:c/stm32f1xx_hal_pcd.c **** 
 606:c/stm32f1xx_hal_pcd.c ****   if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 607:c/stm32f1xx_hal_pcd.c ****   { 
 608:c/stm32f1xx_hal_pcd.c ****     /* Force low-power mode in the macrocell */
 609:c/stm32f1xx_hal_pcd.c ****     hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 610:c/stm32f1xx_hal_pcd.c ****     
 611:c/stm32f1xx_hal_pcd.c ****     /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
 612:c/stm32f1xx_hal_pcd.c ****     __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 613:c/stm32f1xx_hal_pcd.c **** 
 614:c/stm32f1xx_hal_pcd.c ****     hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 615:c/stm32f1xx_hal_pcd.c ****     if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 616:c/stm32f1xx_hal_pcd.c ****     {
 617:c/stm32f1xx_hal_pcd.c ****       HAL_PCD_SuspendCallback(hpcd);
 618:c/stm32f1xx_hal_pcd.c ****     }
 619:c/stm32f1xx_hal_pcd.c ****   }
 620:c/stm32f1xx_hal_pcd.c **** 
 621:c/stm32f1xx_hal_pcd.c ****   if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 622:c/stm32f1xx_hal_pcd.c ****   {
 623:c/stm32f1xx_hal_pcd.c ****     __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 624:c/stm32f1xx_hal_pcd.c ****     HAL_PCD_SOFCallback(hpcd);
 625:c/stm32f1xx_hal_pcd.c ****   }
 626:c/stm32f1xx_hal_pcd.c **** 
 627:c/stm32f1xx_hal_pcd.c ****   if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 628:c/stm32f1xx_hal_pcd.c ****   {
 629:c/stm32f1xx_hal_pcd.c ****     /* clear ESOF flag in ISTR */
 630:c/stm32f1xx_hal_pcd.c ****     __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 631:c/stm32f1xx_hal_pcd.c ****   }
 632:c/stm32f1xx_hal_pcd.c **** }
 633:c/stm32f1xx_hal_pcd.c **** #endif /* USB */
 634:c/stm32f1xx_hal_pcd.c **** 
 635:c/stm32f1xx_hal_pcd.c **** /**
 636:c/stm32f1xx_hal_pcd.c ****   * @brief  Data out stage callbacks
 637:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
 638:c/stm32f1xx_hal_pcd.c ****   * @param  epnum: endpoint number
 639:c/stm32f1xx_hal_pcd.c ****   * @retval None
 640:c/stm32f1xx_hal_pcd.c ****   */
 641:c/stm32f1xx_hal_pcd.c ****  __weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
 642:c/stm32f1xx_hal_pcd.c **** {
 643:c/stm32f1xx_hal_pcd.c ****   /* Prevent unused argument(s) compilation warning */
 644:c/stm32f1xx_hal_pcd.c ****   UNUSED(hpcd);
 645:c/stm32f1xx_hal_pcd.c ****   UNUSED(epnum);
 646:c/stm32f1xx_hal_pcd.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 647:c/stm32f1xx_hal_pcd.c ****             the HAL_PCD_DataOutStageCallback could be implemented in the user file
 648:c/stm32f1xx_hal_pcd.c ****    */
 649:c/stm32f1xx_hal_pcd.c **** }
 650:c/stm32f1xx_hal_pcd.c **** 
 651:c/stm32f1xx_hal_pcd.c **** /**
 652:c/stm32f1xx_hal_pcd.c ****   * @brief  Data IN stage callbacks
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 22


 653:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
 654:c/stm32f1xx_hal_pcd.c ****   * @param  epnum: endpoint number
 655:c/stm32f1xx_hal_pcd.c ****   * @retval None
 656:c/stm32f1xx_hal_pcd.c ****   */
 657:c/stm32f1xx_hal_pcd.c ****  __weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
 658:c/stm32f1xx_hal_pcd.c **** {
 659:c/stm32f1xx_hal_pcd.c ****   /* Prevent unused argument(s) compilation warning */
 660:c/stm32f1xx_hal_pcd.c ****   UNUSED(hpcd);
 661:c/stm32f1xx_hal_pcd.c ****   UNUSED(epnum);
 662:c/stm32f1xx_hal_pcd.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 663:c/stm32f1xx_hal_pcd.c ****             the HAL_PCD_DataInStageCallback could be implemented in the user file
 664:c/stm32f1xx_hal_pcd.c ****    */
 665:c/stm32f1xx_hal_pcd.c **** }
 666:c/stm32f1xx_hal_pcd.c **** /**
 667:c/stm32f1xx_hal_pcd.c ****   * @brief  Setup stage callback
 668:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
 669:c/stm32f1xx_hal_pcd.c ****   * @retval None
 670:c/stm32f1xx_hal_pcd.c ****   */
 671:c/stm32f1xx_hal_pcd.c ****  __weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
 672:c/stm32f1xx_hal_pcd.c **** {
 673:c/stm32f1xx_hal_pcd.c ****   /* Prevent unused argument(s) compilation warning */
 674:c/stm32f1xx_hal_pcd.c ****   UNUSED(hpcd);
 675:c/stm32f1xx_hal_pcd.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 676:c/stm32f1xx_hal_pcd.c ****             the HAL_PCD_SetupStageCallback could be implemented in the user file
 677:c/stm32f1xx_hal_pcd.c ****    */
 678:c/stm32f1xx_hal_pcd.c **** }
 679:c/stm32f1xx_hal_pcd.c **** 
 680:c/stm32f1xx_hal_pcd.c **** /**
 681:c/stm32f1xx_hal_pcd.c ****   * @brief  USB Start Of Frame callbacks
 682:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
 683:c/stm32f1xx_hal_pcd.c ****   * @retval None
 684:c/stm32f1xx_hal_pcd.c ****   */
 685:c/stm32f1xx_hal_pcd.c ****  __weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
 686:c/stm32f1xx_hal_pcd.c **** {
 687:c/stm32f1xx_hal_pcd.c ****   /* Prevent unused argument(s) compilation warning */
 688:c/stm32f1xx_hal_pcd.c ****   UNUSED(hpcd);
 689:c/stm32f1xx_hal_pcd.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 690:c/stm32f1xx_hal_pcd.c ****             the HAL_PCD_SOFCallback could be implemented in the user file
 691:c/stm32f1xx_hal_pcd.c ****    */
 692:c/stm32f1xx_hal_pcd.c **** }
 693:c/stm32f1xx_hal_pcd.c **** 
 694:c/stm32f1xx_hal_pcd.c **** /**
 695:c/stm32f1xx_hal_pcd.c ****   * @brief  USB Reset callbacks
 696:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
 697:c/stm32f1xx_hal_pcd.c ****   * @retval None
 698:c/stm32f1xx_hal_pcd.c ****   */
 699:c/stm32f1xx_hal_pcd.c ****  __weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
 700:c/stm32f1xx_hal_pcd.c **** {
 701:c/stm32f1xx_hal_pcd.c ****   /* Prevent unused argument(s) compilation warning */
 702:c/stm32f1xx_hal_pcd.c ****   UNUSED(hpcd);
 703:c/stm32f1xx_hal_pcd.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 704:c/stm32f1xx_hal_pcd.c ****             the HAL_PCD_ResetCallback could be implemented in the user file
 705:c/stm32f1xx_hal_pcd.c ****    */
 706:c/stm32f1xx_hal_pcd.c **** }
 707:c/stm32f1xx_hal_pcd.c **** 
 708:c/stm32f1xx_hal_pcd.c **** /**
 709:c/stm32f1xx_hal_pcd.c ****   * @brief  Suspend event callbacks
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 23


 710:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
 711:c/stm32f1xx_hal_pcd.c ****   * @retval None
 712:c/stm32f1xx_hal_pcd.c ****   */
 713:c/stm32f1xx_hal_pcd.c ****  __weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
 714:c/stm32f1xx_hal_pcd.c **** {
 715:c/stm32f1xx_hal_pcd.c ****   /* Prevent unused argument(s) compilation warning */
 716:c/stm32f1xx_hal_pcd.c ****   UNUSED(hpcd);
 717:c/stm32f1xx_hal_pcd.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 718:c/stm32f1xx_hal_pcd.c ****             the HAL_PCD_SuspendCallback could be implemented in the user file
 719:c/stm32f1xx_hal_pcd.c ****    */
 720:c/stm32f1xx_hal_pcd.c **** }
 721:c/stm32f1xx_hal_pcd.c **** 
 722:c/stm32f1xx_hal_pcd.c **** /**
 723:c/stm32f1xx_hal_pcd.c ****   * @brief  Resume event callbacks
 724:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
 725:c/stm32f1xx_hal_pcd.c ****   * @retval None
 726:c/stm32f1xx_hal_pcd.c ****   */
 727:c/stm32f1xx_hal_pcd.c ****  __weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
 728:c/stm32f1xx_hal_pcd.c **** {
 729:c/stm32f1xx_hal_pcd.c ****   /* Prevent unused argument(s) compilation warning */
 730:c/stm32f1xx_hal_pcd.c ****   UNUSED(hpcd);
 731:c/stm32f1xx_hal_pcd.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 732:c/stm32f1xx_hal_pcd.c ****             the HAL_PCD_ResumeCallback could be implemented in the user file
 733:c/stm32f1xx_hal_pcd.c ****    */
 734:c/stm32f1xx_hal_pcd.c **** }
 735:c/stm32f1xx_hal_pcd.c **** 
 736:c/stm32f1xx_hal_pcd.c **** /**
 737:c/stm32f1xx_hal_pcd.c ****   * @brief  Incomplete ISO OUT callbacks
 738:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
 739:c/stm32f1xx_hal_pcd.c ****   * @param  epnum: endpoint number
 740:c/stm32f1xx_hal_pcd.c ****   * @retval None
 741:c/stm32f1xx_hal_pcd.c ****   */
 742:c/stm32f1xx_hal_pcd.c ****  __weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
 743:c/stm32f1xx_hal_pcd.c **** {
 744:c/stm32f1xx_hal_pcd.c ****   /* Prevent unused argument(s) compilation warning */
 745:c/stm32f1xx_hal_pcd.c ****   UNUSED(hpcd);
 746:c/stm32f1xx_hal_pcd.c ****   UNUSED(epnum);
 747:c/stm32f1xx_hal_pcd.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 748:c/stm32f1xx_hal_pcd.c ****             the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
 749:c/stm32f1xx_hal_pcd.c ****    */
 750:c/stm32f1xx_hal_pcd.c **** }
 751:c/stm32f1xx_hal_pcd.c **** 
 752:c/stm32f1xx_hal_pcd.c **** /**
 753:c/stm32f1xx_hal_pcd.c ****   * @brief  Incomplete ISO IN  callbacks
 754:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
 755:c/stm32f1xx_hal_pcd.c ****   * @param  epnum: endpoint number
 756:c/stm32f1xx_hal_pcd.c ****   * @retval None
 757:c/stm32f1xx_hal_pcd.c ****   */
 758:c/stm32f1xx_hal_pcd.c ****  __weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
 759:c/stm32f1xx_hal_pcd.c **** {
 543              		.loc 1 759 0
 544              		.cfi_startproc
 545              		@ args = 0, pretend = 0, frame = 0
 546              		@ frame_needed = 0, uses_anonymous_args = 0
 547              		@ link register save eliminated.
 548              	.LVL34:
 549 0000 7047     		bx	lr
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 24


 550              		.cfi_endproc
 551              	.LFE79:
 553              		.section	.text.HAL_PCD_ConnectCallback,"ax",%progbits
 554              		.align	1
 555              		.weak	HAL_PCD_ConnectCallback
 556              		.syntax unified
 557              		.thumb
 558              		.thumb_func
 559              		.fpu softvfp
 561              	HAL_PCD_ConnectCallback:
 562              	.LFB106:
 563              		.cfi_startproc
 564              		@ args = 0, pretend = 0, frame = 0
 565              		@ frame_needed = 0, uses_anonymous_args = 0
 566              		@ link register save eliminated.
 567 0000 7047     		bx	lr
 568              		.cfi_endproc
 569              	.LFE106:
 571              		.section	.text.HAL_PCD_DisconnectCallback,"ax",%progbits
 572              		.align	1
 573              		.weak	HAL_PCD_DisconnectCallback
 574              		.syntax unified
 575              		.thumb
 576              		.thumb_func
 577              		.fpu softvfp
 579              	HAL_PCD_DisconnectCallback:
 580              	.LFB81:
 760:c/stm32f1xx_hal_pcd.c ****   /* Prevent unused argument(s) compilation warning */
 761:c/stm32f1xx_hal_pcd.c ****   UNUSED(hpcd);
 762:c/stm32f1xx_hal_pcd.c ****   UNUSED(epnum);
 763:c/stm32f1xx_hal_pcd.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 764:c/stm32f1xx_hal_pcd.c ****             the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
 765:c/stm32f1xx_hal_pcd.c ****    */
 766:c/stm32f1xx_hal_pcd.c **** }
 767:c/stm32f1xx_hal_pcd.c **** 
 768:c/stm32f1xx_hal_pcd.c **** /**
 769:c/stm32f1xx_hal_pcd.c ****   * @brief  Connection event callbacks
 770:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
 771:c/stm32f1xx_hal_pcd.c ****   * @retval None
 772:c/stm32f1xx_hal_pcd.c ****   */
 773:c/stm32f1xx_hal_pcd.c ****  __weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
 774:c/stm32f1xx_hal_pcd.c **** {
 775:c/stm32f1xx_hal_pcd.c ****   /* Prevent unused argument(s) compilation warning */
 776:c/stm32f1xx_hal_pcd.c ****   UNUSED(hpcd);
 777:c/stm32f1xx_hal_pcd.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 778:c/stm32f1xx_hal_pcd.c ****             the HAL_PCD_ConnectCallback could be implemented in the user file
 779:c/stm32f1xx_hal_pcd.c ****    */
 780:c/stm32f1xx_hal_pcd.c **** }
 781:c/stm32f1xx_hal_pcd.c **** 
 782:c/stm32f1xx_hal_pcd.c **** /**
 783:c/stm32f1xx_hal_pcd.c ****   * @brief  Disconnection event callbacks
 784:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
 785:c/stm32f1xx_hal_pcd.c ****   * @retval None
 786:c/stm32f1xx_hal_pcd.c ****   */
 787:c/stm32f1xx_hal_pcd.c ****  __weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
 788:c/stm32f1xx_hal_pcd.c **** {
 581              		.loc 1 788 0
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 25


 582              		.cfi_startproc
 583              		@ args = 0, pretend = 0, frame = 0
 584              		@ frame_needed = 0, uses_anonymous_args = 0
 585              		@ link register save eliminated.
 586              	.LVL35:
 587 0000 7047     		bx	lr
 588              		.cfi_endproc
 589              	.LFE81:
 591              		.section	.text.HAL_PCD_DevConnect,"ax",%progbits
 592              		.align	1
 593              		.global	HAL_PCD_DevConnect
 594              		.syntax unified
 595              		.thumb
 596              		.thumb_func
 597              		.fpu softvfp
 599              	HAL_PCD_DevConnect:
 600              	.LFB82:
 789:c/stm32f1xx_hal_pcd.c ****   /* Prevent unused argument(s) compilation warning */
 790:c/stm32f1xx_hal_pcd.c ****   UNUSED(hpcd);
 791:c/stm32f1xx_hal_pcd.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 792:c/stm32f1xx_hal_pcd.c ****             the HAL_PCD_DisconnectCallback could be implemented in the user file
 793:c/stm32f1xx_hal_pcd.c ****    */
 794:c/stm32f1xx_hal_pcd.c **** }
 795:c/stm32f1xx_hal_pcd.c **** 
 796:c/stm32f1xx_hal_pcd.c **** /**
 797:c/stm32f1xx_hal_pcd.c ****   * @}
 798:c/stm32f1xx_hal_pcd.c ****   */
 799:c/stm32f1xx_hal_pcd.c **** 
 800:c/stm32f1xx_hal_pcd.c **** /** @defgroup PCD_Exported_Functions_Group3 Peripheral Control functions
 801:c/stm32f1xx_hal_pcd.c ****  *  @brief   management functions
 802:c/stm32f1xx_hal_pcd.c ****  *
 803:c/stm32f1xx_hal_pcd.c **** @verbatim
 804:c/stm32f1xx_hal_pcd.c ****  ===============================================================================
 805:c/stm32f1xx_hal_pcd.c ****                       ##### Peripheral Control functions #####
 806:c/stm32f1xx_hal_pcd.c ****  ===============================================================================  
 807:c/stm32f1xx_hal_pcd.c ****     [..]
 808:c/stm32f1xx_hal_pcd.c ****     This subsection provides a set of functions allowing to control the PCD data 
 809:c/stm32f1xx_hal_pcd.c ****     transfers.
 810:c/stm32f1xx_hal_pcd.c **** 
 811:c/stm32f1xx_hal_pcd.c **** @endverbatim
 812:c/stm32f1xx_hal_pcd.c ****   * @{
 813:c/stm32f1xx_hal_pcd.c ****   */
 814:c/stm32f1xx_hal_pcd.c **** 
 815:c/stm32f1xx_hal_pcd.c **** /**
 816:c/stm32f1xx_hal_pcd.c ****   * @brief  Connect the USB device
 817:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
 818:c/stm32f1xx_hal_pcd.c ****   * @retval HAL status
 819:c/stm32f1xx_hal_pcd.c ****   */
 820:c/stm32f1xx_hal_pcd.c **** HAL_StatusTypeDef HAL_PCD_DevConnect(PCD_HandleTypeDef *hpcd)
 821:c/stm32f1xx_hal_pcd.c **** {
 601              		.loc 1 821 0
 602              		.cfi_startproc
 603              		@ args = 0, pretend = 0, frame = 0
 604              		@ frame_needed = 0, uses_anonymous_args = 0
 605              	.LVL36:
 822:c/stm32f1xx_hal_pcd.c ****   __HAL_LOCK(hpcd);
 606              		.loc 1 822 0
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 26


 607 0000 90F82834 		ldrb	r3, [r0, #1064]	@ zero_extendqisi2
 821:c/stm32f1xx_hal_pcd.c ****   __HAL_LOCK(hpcd);
 608              		.loc 1 821 0
 609 0004 10B5     		push	{r4, lr}
 610              		.cfi_def_cfa_offset 8
 611              		.cfi_offset 4, -8
 612              		.cfi_offset 14, -4
 613              		.loc 1 822 0
 614 0006 012B     		cmp	r3, #1
 821:c/stm32f1xx_hal_pcd.c ****   __HAL_LOCK(hpcd);
 615              		.loc 1 821 0
 616 0008 0446     		mov	r4, r0
 617              		.loc 1 822 0
 618 000a 0BD0     		beq	.L33
 619              		.loc 1 822 0 is_stmt 0 discriminator 2
 620 000c 0121     		movs	r1, #1
 621 000e 80F82814 		strb	r1, [r0, #1064]
 823:c/stm32f1xx_hal_pcd.c ****   HAL_PCDEx_SetConnectionState (hpcd, 1);
 622              		.loc 1 823 0 is_stmt 1 discriminator 2
 623 0012 FFF7FEFF 		bl	HAL_PCDEx_SetConnectionState
 624              	.LVL37:
 824:c/stm32f1xx_hal_pcd.c ****   USB_DevConnect(hpcd->Instance);
 625              		.loc 1 824 0 discriminator 2
 626 0016 2068     		ldr	r0, [r4]
 627 0018 FFF7FEFF 		bl	USB_DevConnect
 628              	.LVL38:
 825:c/stm32f1xx_hal_pcd.c ****   __HAL_UNLOCK(hpcd);
 629              		.loc 1 825 0 discriminator 2
 630 001c 0020     		movs	r0, #0
 631 001e 84F82804 		strb	r0, [r4, #1064]
 826:c/stm32f1xx_hal_pcd.c ****   return HAL_OK;
 632              		.loc 1 826 0 discriminator 2
 633 0022 10BD     		pop	{r4, pc}
 634              	.LVL39:
 635              	.L33:
 822:c/stm32f1xx_hal_pcd.c ****   HAL_PCDEx_SetConnectionState (hpcd, 1);
 636              		.loc 1 822 0
 637 0024 0220     		movs	r0, #2
 638              	.LVL40:
 827:c/stm32f1xx_hal_pcd.c **** }
 639              		.loc 1 827 0
 640 0026 10BD     		pop	{r4, pc}
 641              		.cfi_endproc
 642              	.LFE82:
 644              		.section	.text.HAL_PCD_DevDisconnect,"ax",%progbits
 645              		.align	1
 646              		.global	HAL_PCD_DevDisconnect
 647              		.syntax unified
 648              		.thumb
 649              		.thumb_func
 650              		.fpu softvfp
 652              	HAL_PCD_DevDisconnect:
 653              	.LFB83:
 828:c/stm32f1xx_hal_pcd.c **** 
 829:c/stm32f1xx_hal_pcd.c **** /**
 830:c/stm32f1xx_hal_pcd.c ****   * @brief  Disconnect the USB device
 831:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 27


 832:c/stm32f1xx_hal_pcd.c ****   * @retval HAL status
 833:c/stm32f1xx_hal_pcd.c ****   */
 834:c/stm32f1xx_hal_pcd.c **** HAL_StatusTypeDef HAL_PCD_DevDisconnect(PCD_HandleTypeDef *hpcd)
 835:c/stm32f1xx_hal_pcd.c **** {
 654              		.loc 1 835 0
 655              		.cfi_startproc
 656              		@ args = 0, pretend = 0, frame = 0
 657              		@ frame_needed = 0, uses_anonymous_args = 0
 658              	.LVL41:
 836:c/stm32f1xx_hal_pcd.c ****   __HAL_LOCK(hpcd);
 659              		.loc 1 836 0
 660 0000 90F82834 		ldrb	r3, [r0, #1064]	@ zero_extendqisi2
 835:c/stm32f1xx_hal_pcd.c ****   __HAL_LOCK(hpcd);
 661              		.loc 1 835 0
 662 0004 10B5     		push	{r4, lr}
 663              		.cfi_def_cfa_offset 8
 664              		.cfi_offset 4, -8
 665              		.cfi_offset 14, -4
 666              		.loc 1 836 0
 667 0006 012B     		cmp	r3, #1
 835:c/stm32f1xx_hal_pcd.c ****   __HAL_LOCK(hpcd);
 668              		.loc 1 835 0
 669 0008 0446     		mov	r4, r0
 670              		.loc 1 836 0
 671 000a 0CD0     		beq	.L36
 672              		.loc 1 836 0 is_stmt 0 discriminator 2
 673 000c 0123     		movs	r3, #1
 837:c/stm32f1xx_hal_pcd.c ****   HAL_PCDEx_SetConnectionState (hpcd, 0U);
 674              		.loc 1 837 0 is_stmt 1 discriminator 2
 675 000e 0021     		movs	r1, #0
 836:c/stm32f1xx_hal_pcd.c ****   __HAL_LOCK(hpcd);
 676              		.loc 1 836 0 discriminator 2
 677 0010 80F82834 		strb	r3, [r0, #1064]
 678              		.loc 1 837 0 discriminator 2
 679 0014 FFF7FEFF 		bl	HAL_PCDEx_SetConnectionState
 680              	.LVL42:
 838:c/stm32f1xx_hal_pcd.c ****   USB_DevDisconnect(hpcd->Instance);
 681              		.loc 1 838 0 discriminator 2
 682 0018 2068     		ldr	r0, [r4]
 683 001a FFF7FEFF 		bl	USB_DevDisconnect
 684              	.LVL43:
 839:c/stm32f1xx_hal_pcd.c ****   __HAL_UNLOCK(hpcd);
 685              		.loc 1 839 0 discriminator 2
 686 001e 0020     		movs	r0, #0
 687 0020 84F82804 		strb	r0, [r4, #1064]
 840:c/stm32f1xx_hal_pcd.c ****   return HAL_OK;
 688              		.loc 1 840 0 discriminator 2
 689 0024 10BD     		pop	{r4, pc}
 690              	.LVL44:
 691              	.L36:
 836:c/stm32f1xx_hal_pcd.c ****   HAL_PCDEx_SetConnectionState (hpcd, 0U);
 692              		.loc 1 836 0
 693 0026 0220     		movs	r0, #2
 694              	.LVL45:
 841:c/stm32f1xx_hal_pcd.c **** }
 695              		.loc 1 841 0
 696 0028 10BD     		pop	{r4, pc}
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 28


 697              		.cfi_endproc
 698              	.LFE83:
 700              		.section	.text.HAL_PCD_SetAddress,"ax",%progbits
 701              		.align	1
 702              		.global	HAL_PCD_SetAddress
 703              		.syntax unified
 704              		.thumb
 705              		.thumb_func
 706              		.fpu softvfp
 708              	HAL_PCD_SetAddress:
 709              	.LFB84:
 842:c/stm32f1xx_hal_pcd.c **** 
 843:c/stm32f1xx_hal_pcd.c **** /**
 844:c/stm32f1xx_hal_pcd.c ****   * @brief  Set the USB Device address
 845:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
 846:c/stm32f1xx_hal_pcd.c ****   * @param  address: new device address
 847:c/stm32f1xx_hal_pcd.c ****   * @retval HAL status
 848:c/stm32f1xx_hal_pcd.c ****   */
 849:c/stm32f1xx_hal_pcd.c **** HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
 850:c/stm32f1xx_hal_pcd.c **** {
 710              		.loc 1 850 0
 711              		.cfi_startproc
 712              		@ args = 0, pretend = 0, frame = 0
 713              		@ frame_needed = 0, uses_anonymous_args = 0
 714              	.LVL46:
 851:c/stm32f1xx_hal_pcd.c ****   __HAL_LOCK(hpcd);
 715              		.loc 1 851 0
 716 0000 90F82824 		ldrb	r2, [r0, #1064]	@ zero_extendqisi2
 850:c/stm32f1xx_hal_pcd.c ****   __HAL_LOCK(hpcd);
 717              		.loc 1 850 0
 718 0004 10B5     		push	{r4, lr}
 719              		.cfi_def_cfa_offset 8
 720              		.cfi_offset 4, -8
 721              		.cfi_offset 14, -4
 722              		.loc 1 851 0
 723 0006 012A     		cmp	r2, #1
 850:c/stm32f1xx_hal_pcd.c ****   __HAL_LOCK(hpcd);
 724              		.loc 1 850 0
 725 0008 0446     		mov	r4, r0
 726              		.loc 1 851 0
 727 000a 0BD0     		beq	.L39
 728              	.LVL47:
 729              	.LBB8:
 730              	.LBB9:
 731 000c 0122     		movs	r2, #1
 732 000e 80F82824 		strb	r2, [r0, #1064]
 852:c/stm32f1xx_hal_pcd.c ****   hpcd->USB_Address = address;
 733              		.loc 1 852 0
 734 0012 84F82410 		strb	r1, [r4, #36]
 853:c/stm32f1xx_hal_pcd.c ****   USB_SetDevAddress(hpcd->Instance, address);
 735              		.loc 1 853 0
 736 0016 0068     		ldr	r0, [r0]
 737              	.LVL48:
 738 0018 FFF7FEFF 		bl	USB_SetDevAddress
 739              	.LVL49:
 854:c/stm32f1xx_hal_pcd.c ****   __HAL_UNLOCK(hpcd);
 740              		.loc 1 854 0
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 29


 741 001c 0020     		movs	r0, #0
 742 001e 84F82804 		strb	r0, [r4, #1064]
 743              	.LVL50:
 744 0022 10BD     		pop	{r4, pc}
 745              	.LVL51:
 746              	.L39:
 747              	.LBE9:
 748              	.LBE8:
 851:c/stm32f1xx_hal_pcd.c ****   hpcd->USB_Address = address;
 749              		.loc 1 851 0
 750 0024 0220     		movs	r0, #2
 751              	.LVL52:
 855:c/stm32f1xx_hal_pcd.c ****   return HAL_OK;
 856:c/stm32f1xx_hal_pcd.c **** }
 752              		.loc 1 856 0
 753 0026 10BD     		pop	{r4, pc}
 754              		.cfi_endproc
 755              	.LFE84:
 757              		.section	.text.HAL_PCD_EP_Open,"ax",%progbits
 758              		.align	1
 759              		.global	HAL_PCD_EP_Open
 760              		.syntax unified
 761              		.thumb
 762              		.thumb_func
 763              		.fpu softvfp
 765              	HAL_PCD_EP_Open:
 766              	.LFB85:
 857:c/stm32f1xx_hal_pcd.c **** /**
 858:c/stm32f1xx_hal_pcd.c ****   * @brief  Open and configure an endpoint
 859:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
 860:c/stm32f1xx_hal_pcd.c ****   * @param  ep_addr: endpoint address
 861:c/stm32f1xx_hal_pcd.c ****   * @param  ep_mps: endpoint max packet size
 862:c/stm32f1xx_hal_pcd.c ****   * @param  ep_type: endpoint type   
 863:c/stm32f1xx_hal_pcd.c ****   * @retval HAL status
 864:c/stm32f1xx_hal_pcd.c ****   */
 865:c/stm32f1xx_hal_pcd.c **** HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_
 866:c/stm32f1xx_hal_pcd.c **** {
 767              		.loc 1 866 0
 768              		.cfi_startproc
 769              		@ args = 0, pretend = 0, frame = 0
 770              		@ frame_needed = 0, uses_anonymous_args = 0
 771              	.LVL53:
 772 0000 38B5     		push	{r3, r4, r5, lr}
 773              		.cfi_def_cfa_offset 16
 774              		.cfi_offset 3, -16
 775              		.cfi_offset 4, -12
 776              		.cfi_offset 5, -8
 777              		.cfi_offset 14, -4
 778              		.loc 1 866 0
 779 0002 0446     		mov	r4, r0
 867:c/stm32f1xx_hal_pcd.c ****   HAL_StatusTypeDef  ret = HAL_OK;
 868:c/stm32f1xx_hal_pcd.c ****   PCD_EPTypeDef *ep = NULL;
 869:c/stm32f1xx_hal_pcd.c ****   
 870:c/stm32f1xx_hal_pcd.c ****   if ((ep_addr & 0x80U) == 0x80U)
 780              		.loc 1 870 0
 781 0004 48B2     		sxtb	r0, r1
 782              	.LVL54:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 30


 783 0006 0028     		cmp	r0, #0
 784 0008 01F07F05 		and	r5, r1, #127
 871:c/stm32f1xx_hal_pcd.c ****   {
 872:c/stm32f1xx_hal_pcd.c ****     ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 785              		.loc 1 872 0
 786 000c B5BF     		itete	lt
 787 000e 04EB4511 		addlt	r1, r4, r5, lsl #5
 788              	.LVL55:
 873:c/stm32f1xx_hal_pcd.c ****   }
 874:c/stm32f1xx_hal_pcd.c ****   else
 875:c/stm32f1xx_hal_pcd.c ****   {
 876:c/stm32f1xx_hal_pcd.c ****     ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 789              		.loc 1 876 0
 790 0012 04EB4111 		addge	r1, r4, r1, lsl #5
 872:c/stm32f1xx_hal_pcd.c ****   }
 791              		.loc 1 872 0
 792 0016 2831     		addlt	r1, r1, #40
 793              	.LVL56:
 794              		.loc 1 876 0
 795 0018 01F50A71 		addge	r1, r1, #552
 796              	.LVL57:
 877:c/stm32f1xx_hal_pcd.c ****   }
 878:c/stm32f1xx_hal_pcd.c ****   ep->num   = ep_addr & 0x7FU;
 879:c/stm32f1xx_hal_pcd.c ****   
 880:c/stm32f1xx_hal_pcd.c ****   ep->is_in = (0x80U & ep_addr) != 0U;
 797              		.loc 1 880 0
 798 001c C00F     		lsrs	r0, r0, #31
 799              	.LVL58:
 878:c/stm32f1xx_hal_pcd.c ****   
 800              		.loc 1 878 0
 801 001e 0D70     		strb	r5, [r1]
 802              		.loc 1 880 0
 803 0020 4870     		strb	r0, [r1, #1]
 881:c/stm32f1xx_hal_pcd.c ****   ep->maxpacket = ep_mps;
 882:c/stm32f1xx_hal_pcd.c ****   ep->type = ep_type;
 804              		.loc 1 882 0
 805 0022 CB70     		strb	r3, [r1, #3]
 883:c/stm32f1xx_hal_pcd.c ****     
 884:c/stm32f1xx_hal_pcd.c ****   __HAL_LOCK(hpcd);
 806              		.loc 1 884 0
 807 0024 94F82834 		ldrb	r3, [r4, #1064]	@ zero_extendqisi2
 808              	.LVL59:
 881:c/stm32f1xx_hal_pcd.c ****   ep->maxpacket = ep_mps;
 809              		.loc 1 881 0
 810 0028 0A61     		str	r2, [r1, #16]
 811              		.loc 1 884 0
 812 002a 012B     		cmp	r3, #1
 813 002c 09D0     		beq	.L44
 814              		.loc 1 884 0 is_stmt 0 discriminator 2
 815 002e 0123     		movs	r3, #1
 885:c/stm32f1xx_hal_pcd.c ****   USB_ActivateEndpoint(hpcd->Instance , ep);
 816              		.loc 1 885 0 is_stmt 1 discriminator 2
 817 0030 2068     		ldr	r0, [r4]
 884:c/stm32f1xx_hal_pcd.c ****   USB_ActivateEndpoint(hpcd->Instance , ep);
 818              		.loc 1 884 0 discriminator 2
 819 0032 84F82834 		strb	r3, [r4, #1064]
 820              	.LVL60:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 31


 821              		.loc 1 885 0 discriminator 2
 822 0036 FFF7FEFF 		bl	USB_ActivateEndpoint
 823              	.LVL61:
 886:c/stm32f1xx_hal_pcd.c ****   __HAL_UNLOCK(hpcd);
 824              		.loc 1 886 0 discriminator 2
 825 003a 0020     		movs	r0, #0
 826 003c 84F82804 		strb	r0, [r4, #1064]
 887:c/stm32f1xx_hal_pcd.c ****   return ret;
 827              		.loc 1 887 0 discriminator 2
 828 0040 38BD     		pop	{r3, r4, r5, pc}
 829              	.LVL62:
 830              	.L44:
 884:c/stm32f1xx_hal_pcd.c ****   USB_ActivateEndpoint(hpcd->Instance , ep);
 831              		.loc 1 884 0
 832 0042 0220     		movs	r0, #2
 888:c/stm32f1xx_hal_pcd.c **** }
 833              		.loc 1 888 0
 834 0044 38BD     		pop	{r3, r4, r5, pc}
 835              		.cfi_endproc
 836              	.LFE85:
 838              		.section	.text.HAL_PCD_EP_Close,"ax",%progbits
 839              		.align	1
 840              		.global	HAL_PCD_EP_Close
 841              		.syntax unified
 842              		.thumb
 843              		.thumb_func
 844              		.fpu softvfp
 846              	HAL_PCD_EP_Close:
 847              	.LFB86:
 889:c/stm32f1xx_hal_pcd.c **** 
 890:c/stm32f1xx_hal_pcd.c **** /**
 891:c/stm32f1xx_hal_pcd.c ****   * @brief  Deactivate an endpoint
 892:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
 893:c/stm32f1xx_hal_pcd.c ****   * @param  ep_addr: endpoint address
 894:c/stm32f1xx_hal_pcd.c ****   * @retval HAL status
 895:c/stm32f1xx_hal_pcd.c ****   */
 896:c/stm32f1xx_hal_pcd.c **** HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
 897:c/stm32f1xx_hal_pcd.c **** {  
 848              		.loc 1 897 0
 849              		.cfi_startproc
 850              		@ args = 0, pretend = 0, frame = 0
 851              		@ frame_needed = 0, uses_anonymous_args = 0
 852              	.LVL63:
 898:c/stm32f1xx_hal_pcd.c ****   PCD_EPTypeDef *ep = NULL;
 899:c/stm32f1xx_hal_pcd.c ****   
 900:c/stm32f1xx_hal_pcd.c ****   if ((ep_addr & 0x80U) == 0x80U)
 853              		.loc 1 900 0
 854 0000 4BB2     		sxtb	r3, r1
 855 0002 002B     		cmp	r3, #0
 856 0004 01F07F02 		and	r2, r1, #127
 901:c/stm32f1xx_hal_pcd.c ****   {
 902:c/stm32f1xx_hal_pcd.c ****     ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 857              		.loc 1 902 0
 858 0008 B5BF     		itete	lt
 859 000a 00EB4211 		addlt	r1, r0, r2, lsl #5
 860              	.LVL64:
 903:c/stm32f1xx_hal_pcd.c ****   }
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 32


 904:c/stm32f1xx_hal_pcd.c ****   else
 905:c/stm32f1xx_hal_pcd.c ****   {
 906:c/stm32f1xx_hal_pcd.c ****     ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 861              		.loc 1 906 0
 862 000e 00EB4111 		addge	r1, r0, r1, lsl #5
 902:c/stm32f1xx_hal_pcd.c ****   }
 863              		.loc 1 902 0
 864 0012 2831     		addlt	r1, r1, #40
 865              	.LVL65:
 866              		.loc 1 906 0
 867 0014 01F50A71 		addge	r1, r1, #552
 868              	.LVL66:
 907:c/stm32f1xx_hal_pcd.c ****   }
 908:c/stm32f1xx_hal_pcd.c ****   ep->num   = ep_addr & 0x7FU;
 909:c/stm32f1xx_hal_pcd.c ****   
 910:c/stm32f1xx_hal_pcd.c ****   ep->is_in = (0x80U & ep_addr) != 0U;
 869              		.loc 1 910 0
 870 0018 DB0F     		lsrs	r3, r3, #31
 871              	.LVL67:
 897:c/stm32f1xx_hal_pcd.c ****   PCD_EPTypeDef *ep = NULL;
 872              		.loc 1 897 0
 873 001a 10B5     		push	{r4, lr}
 874              		.cfi_def_cfa_offset 8
 875              		.cfi_offset 4, -8
 876              		.cfi_offset 14, -4
 908:c/stm32f1xx_hal_pcd.c ****   
 877              		.loc 1 908 0
 878 001c 0A70     		strb	r2, [r1]
 879              		.loc 1 910 0
 880 001e 4B70     		strb	r3, [r1, #1]
 911:c/stm32f1xx_hal_pcd.c ****   
 912:c/stm32f1xx_hal_pcd.c ****   __HAL_LOCK(hpcd);
 881              		.loc 1 912 0
 882 0020 90F82834 		ldrb	r3, [r0, #1064]	@ zero_extendqisi2
 897:c/stm32f1xx_hal_pcd.c ****   PCD_EPTypeDef *ep = NULL;
 883              		.loc 1 897 0
 884 0024 0446     		mov	r4, r0
 885              		.loc 1 912 0
 886 0026 012B     		cmp	r3, #1
 887 0028 09D0     		beq	.L49
 888              		.loc 1 912 0 is_stmt 0 discriminator 2
 889 002a 0123     		movs	r3, #1
 890 002c 80F82834 		strb	r3, [r0, #1064]
 913:c/stm32f1xx_hal_pcd.c ****   USB_DeactivateEndpoint(hpcd->Instance , ep);
 891              		.loc 1 913 0 is_stmt 1 discriminator 2
 892 0030 0068     		ldr	r0, [r0]
 893              	.LVL68:
 894 0032 FFF7FEFF 		bl	USB_DeactivateEndpoint
 895              	.LVL69:
 914:c/stm32f1xx_hal_pcd.c ****   __HAL_UNLOCK(hpcd);
 896              		.loc 1 914 0 discriminator 2
 897 0036 0020     		movs	r0, #0
 898 0038 84F82804 		strb	r0, [r4, #1064]
 915:c/stm32f1xx_hal_pcd.c ****   return HAL_OK;
 899              		.loc 1 915 0 discriminator 2
 900 003c 10BD     		pop	{r4, pc}
 901              	.LVL70:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 33


 902              	.L49:
 912:c/stm32f1xx_hal_pcd.c ****   USB_DeactivateEndpoint(hpcd->Instance , ep);
 903              		.loc 1 912 0
 904 003e 0220     		movs	r0, #2
 905              	.LVL71:
 916:c/stm32f1xx_hal_pcd.c **** }
 906              		.loc 1 916 0
 907 0040 10BD     		pop	{r4, pc}
 908              		.cfi_endproc
 909              	.LFE86:
 911              		.section	.text.HAL_PCD_EP_Receive,"ax",%progbits
 912              		.align	1
 913              		.global	HAL_PCD_EP_Receive
 914              		.syntax unified
 915              		.thumb
 916              		.thumb_func
 917              		.fpu softvfp
 919              	HAL_PCD_EP_Receive:
 920              	.LFB87:
 917:c/stm32f1xx_hal_pcd.c **** 
 918:c/stm32f1xx_hal_pcd.c **** 
 919:c/stm32f1xx_hal_pcd.c **** /**
 920:c/stm32f1xx_hal_pcd.c ****   * @brief  Receive an amount of data
 921:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
 922:c/stm32f1xx_hal_pcd.c ****   * @param  ep_addr: endpoint address
 923:c/stm32f1xx_hal_pcd.c ****   * @param  pBuf: pointer to the reception buffer
 924:c/stm32f1xx_hal_pcd.c ****   * @param  len: amount of data to be received
 925:c/stm32f1xx_hal_pcd.c ****   * @retval HAL status
 926:c/stm32f1xx_hal_pcd.c ****   */
 927:c/stm32f1xx_hal_pcd.c **** HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint3
 928:c/stm32f1xx_hal_pcd.c **** {
 921              		.loc 1 928 0
 922              		.cfi_startproc
 923              		@ args = 0, pretend = 0, frame = 0
 924              		@ frame_needed = 0, uses_anonymous_args = 0
 925              	.LVL72:
 926 0000 70B5     		push	{r4, r5, r6, lr}
 927              		.cfi_def_cfa_offset 16
 928              		.cfi_offset 4, -16
 929              		.cfi_offset 5, -12
 930              		.cfi_offset 6, -8
 931              		.cfi_offset 14, -4
 929:c/stm32f1xx_hal_pcd.c ****   PCD_EPTypeDef *ep = NULL;
 930:c/stm32f1xx_hal_pcd.c ****   
 931:c/stm32f1xx_hal_pcd.c ****   ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 932:c/stm32f1xx_hal_pcd.c ****   
 933:c/stm32f1xx_hal_pcd.c ****   /*setup and start the Xfer */
 934:c/stm32f1xx_hal_pcd.c ****   ep->xfer_buff = pBuf;  
 935:c/stm32f1xx_hal_pcd.c ****   ep->xfer_len = len;
 936:c/stm32f1xx_hal_pcd.c ****   ep->xfer_count = 0U;
 932              		.loc 1 936 0
 933 0002 0026     		movs	r6, #0
 934 0004 01F07F01 		and	r1, r1, #127
 935              	.LVL73:
 936 0008 4D01     		lsls	r5, r1, #5
 937              	.LVL74:
 934:c/stm32f1xx_hal_pcd.c ****   ep->xfer_len = len;
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 34


 938              		.loc 1 934 0
 939 000a 4419     		adds	r4, r0, r5
 937:c/stm32f1xx_hal_pcd.c ****   ep->is_in = 0U;
 938:c/stm32f1xx_hal_pcd.c ****   ep->num = ep_addr & 0x7FU;
 940              		.loc 1 938 0
 941 000c 84F82812 		strb	r1, [r4, #552]
 931:c/stm32f1xx_hal_pcd.c ****   
 942              		.loc 1 931 0
 943 0010 05F50A71 		add	r1, r5, #552
 939:c/stm32f1xx_hal_pcd.c **** 
 940:c/stm32f1xx_hal_pcd.c ****   if ((ep_addr & 0x7FU) == 0U)
 941:c/stm32f1xx_hal_pcd.c ****   {
 942:c/stm32f1xx_hal_pcd.c ****     USB_EP0StartXfer(hpcd->Instance , ep);
 943:c/stm32f1xx_hal_pcd.c ****   }
 944:c/stm32f1xx_hal_pcd.c ****   else
 945:c/stm32f1xx_hal_pcd.c ****   {
 946:c/stm32f1xx_hal_pcd.c ****     USB_EPStartXfer(hpcd->Instance , ep);
 944              		.loc 1 946 0
 945 0014 0144     		add	r1, r1, r0
 934:c/stm32f1xx_hal_pcd.c ****   ep->xfer_len = len;
 946              		.loc 1 934 0
 947 0016 C4F83C22 		str	r2, [r4, #572]
 935:c/stm32f1xx_hal_pcd.c ****   ep->xfer_count = 0U;
 948              		.loc 1 935 0
 949 001a C4F84032 		str	r3, [r4, #576]
 936:c/stm32f1xx_hal_pcd.c ****   ep->is_in = 0U;
 950              		.loc 1 936 0
 951 001e C4F84462 		str	r6, [r4, #580]
 937:c/stm32f1xx_hal_pcd.c ****   ep->num = ep_addr & 0x7FU;
 952              		.loc 1 937 0
 953 0022 84F82962 		strb	r6, [r4, #553]
 954              		.loc 1 946 0
 955 0026 0068     		ldr	r0, [r0]
 956              	.LVL75:
 957 0028 FFF7FEFF 		bl	USB_EPStartXfer
 958              	.LVL76:
 947:c/stm32f1xx_hal_pcd.c ****   }
 948:c/stm32f1xx_hal_pcd.c **** 
 949:c/stm32f1xx_hal_pcd.c ****   return HAL_OK;
 950:c/stm32f1xx_hal_pcd.c **** }
 959              		.loc 1 950 0
 960 002c 3046     		mov	r0, r6
 961 002e 70BD     		pop	{r4, r5, r6, pc}
 962              		.cfi_endproc
 963              	.LFE87:
 965              		.section	.text.HAL_PCD_EP_GetRxCount,"ax",%progbits
 966              		.align	1
 967              		.global	HAL_PCD_EP_GetRxCount
 968              		.syntax unified
 969              		.thumb
 970              		.thumb_func
 971              		.fpu softvfp
 973              	HAL_PCD_EP_GetRxCount:
 974              	.LFB88:
 951:c/stm32f1xx_hal_pcd.c **** 
 952:c/stm32f1xx_hal_pcd.c **** /**
 953:c/stm32f1xx_hal_pcd.c ****   * @brief  Get Received Data Size
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 35


 954:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
 955:c/stm32f1xx_hal_pcd.c ****   * @param  ep_addr: endpoint address
 956:c/stm32f1xx_hal_pcd.c ****   * @retval Data Size
 957:c/stm32f1xx_hal_pcd.c ****   */
 958:c/stm32f1xx_hal_pcd.c **** uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
 959:c/stm32f1xx_hal_pcd.c **** {
 975              		.loc 1 959 0
 976              		.cfi_startproc
 977              		@ args = 0, pretend = 0, frame = 0
 978              		@ frame_needed = 0, uses_anonymous_args = 0
 979              		@ link register save eliminated.
 980              	.LVL77:
 960:c/stm32f1xx_hal_pcd.c ****   return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 981              		.loc 1 960 0
 982 0000 01F00F01 		and	r1, r1, #15
 983              	.LVL78:
 984 0004 00EB4111 		add	r1, r0, r1, lsl #5
 961:c/stm32f1xx_hal_pcd.c **** }
 985              		.loc 1 961 0
 986 0008 B1F84402 		ldrh	r0, [r1, #580]
 987              	.LVL79:
 988 000c 7047     		bx	lr
 989              		.cfi_endproc
 990              	.LFE88:
 992              		.section	.text.HAL_PCD_EP_Transmit,"ax",%progbits
 993              		.align	1
 994              		.global	HAL_PCD_EP_Transmit
 995              		.syntax unified
 996              		.thumb
 997              		.thumb_func
 998              		.fpu softvfp
 1000              	HAL_PCD_EP_Transmit:
 1001              	.LFB89:
 962:c/stm32f1xx_hal_pcd.c **** /**
 963:c/stm32f1xx_hal_pcd.c ****   * @brief  Send an amount of data
 964:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
 965:c/stm32f1xx_hal_pcd.c ****   * @param  ep_addr: endpoint address
 966:c/stm32f1xx_hal_pcd.c ****   * @param  pBuf: pointer to the transmission buffer
 967:c/stm32f1xx_hal_pcd.c ****   * @param  len: amount of data to be sent
 968:c/stm32f1xx_hal_pcd.c ****   * @retval HAL status
 969:c/stm32f1xx_hal_pcd.c ****   */
 970:c/stm32f1xx_hal_pcd.c **** HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint
 971:c/stm32f1xx_hal_pcd.c **** {
 1002              		.loc 1 971 0
 1003              		.cfi_startproc
 1004              		@ args = 0, pretend = 0, frame = 0
 1005              		@ frame_needed = 0, uses_anonymous_args = 0
 1006              	.LVL80:
 1007 0000 01F07F01 		and	r1, r1, #127
 1008              	.LVL81:
 1009 0004 70B5     		push	{r4, r5, r6, lr}
 1010              		.cfi_def_cfa_offset 16
 1011              		.cfi_offset 4, -16
 1012              		.cfi_offset 5, -12
 1013              		.cfi_offset 6, -8
 1014              		.cfi_offset 14, -4
 1015 0006 4D01     		lsls	r5, r1, #5
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 36


 1016              	.LVL82:
 972:c/stm32f1xx_hal_pcd.c ****   PCD_EPTypeDef *ep = NULL;
 973:c/stm32f1xx_hal_pcd.c ****   
 974:c/stm32f1xx_hal_pcd.c ****   ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 975:c/stm32f1xx_hal_pcd.c ****   
 976:c/stm32f1xx_hal_pcd.c ****   /*setup and start the Xfer */
 977:c/stm32f1xx_hal_pcd.c ****   ep->xfer_buff = pBuf;  
 1017              		.loc 1 977 0
 1018 0008 4419     		adds	r4, r0, r5
 978:c/stm32f1xx_hal_pcd.c ****   ep->xfer_len = len;
 1019              		.loc 1 978 0
 1020 000a 2364     		str	r3, [r4, #64]
 979:c/stm32f1xx_hal_pcd.c ****   ep->xfer_count = 0U;
 1021              		.loc 1 979 0
 1022 000c 0026     		movs	r6, #0
 980:c/stm32f1xx_hal_pcd.c ****   ep->is_in = 1U;
 1023              		.loc 1 980 0
 1024 000e 0123     		movs	r3, #1
 1025              	.LVL83:
 981:c/stm32f1xx_hal_pcd.c ****   ep->num = ep_addr & 0x7FU;
 1026              		.loc 1 981 0
 1027 0010 84F82810 		strb	r1, [r4, #40]
 974:c/stm32f1xx_hal_pcd.c ****   
 1028              		.loc 1 974 0
 1029 0014 05F12801 		add	r1, r5, #40
 982:c/stm32f1xx_hal_pcd.c **** 
 983:c/stm32f1xx_hal_pcd.c ****   if ((ep_addr & 0x7FU) == 0U)
 984:c/stm32f1xx_hal_pcd.c ****   {
 985:c/stm32f1xx_hal_pcd.c ****     USB_EP0StartXfer(hpcd->Instance , ep);
 986:c/stm32f1xx_hal_pcd.c ****   }
 987:c/stm32f1xx_hal_pcd.c ****   else
 988:c/stm32f1xx_hal_pcd.c ****   {
 989:c/stm32f1xx_hal_pcd.c ****     USB_EPStartXfer(hpcd->Instance , ep);
 1030              		.loc 1 989 0
 1031 0018 0144     		add	r1, r1, r0
 977:c/stm32f1xx_hal_pcd.c ****   ep->xfer_len = len;
 1032              		.loc 1 977 0
 1033 001a E263     		str	r2, [r4, #60]
 979:c/stm32f1xx_hal_pcd.c ****   ep->is_in = 1U;
 1034              		.loc 1 979 0
 1035 001c 6664     		str	r6, [r4, #68]
 980:c/stm32f1xx_hal_pcd.c ****   ep->num = ep_addr & 0x7FU;
 1036              		.loc 1 980 0
 1037 001e 84F82930 		strb	r3, [r4, #41]
 1038              		.loc 1 989 0
 1039 0022 0068     		ldr	r0, [r0]
 1040              	.LVL84:
 1041 0024 FFF7FEFF 		bl	USB_EPStartXfer
 1042              	.LVL85:
 990:c/stm32f1xx_hal_pcd.c ****   }
 991:c/stm32f1xx_hal_pcd.c **** 
 992:c/stm32f1xx_hal_pcd.c ****   return HAL_OK;
 993:c/stm32f1xx_hal_pcd.c **** }
 1043              		.loc 1 993 0
 1044 0028 3046     		mov	r0, r6
 1045 002a 70BD     		pop	{r4, r5, r6, pc}
 1046              		.cfi_endproc
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 37


 1047              	.LFE89:
 1049              		.section	.text.HAL_PCD_IRQHandler,"ax",%progbits
 1050              		.align	1
 1051              		.global	HAL_PCD_IRQHandler
 1052              		.syntax unified
 1053              		.thumb
 1054              		.thumb_func
 1055              		.fpu softvfp
 1057              	HAL_PCD_IRQHandler:
 1058              	.LFB70:
 572:c/stm32f1xx_hal_pcd.c ****   if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 1059              		.loc 1 572 0
 1060              		.cfi_startproc
 1061              		@ args = 0, pretend = 0, frame = 8
 1062              		@ frame_needed = 0, uses_anonymous_args = 0
 1063              	.LVL86:
 1064 0000 2DE9F347 		push	{r0, r1, r4, r5, r6, r7, r8, r9, r10, lr}
 1065              		.cfi_def_cfa_offset 40
 1066              		.cfi_offset 4, -32
 1067              		.cfi_offset 5, -28
 1068              		.cfi_offset 6, -24
 1069              		.cfi_offset 7, -20
 1070              		.cfi_offset 8, -16
 1071              		.cfi_offset 9, -12
 1072              		.cfi_offset 10, -8
 1073              		.cfi_offset 14, -4
 572:c/stm32f1xx_hal_pcd.c ****   if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 1074              		.loc 1 572 0
 1075 0004 0446     		mov	r4, r0
 573:c/stm32f1xx_hal_pcd.c ****   {
 1076              		.loc 1 573 0
 1077 0006 0068     		ldr	r0, [r0]
 1078              	.LVL87:
 1079 0008 FFF7FEFF 		bl	USB_ReadInterrupts
 1080              	.LVL88:
 1081 000c 0004     		lsls	r0, r0, #16
 1082 000e 00F19880 		bmi	.L54
 1083              	.L84:
 580:c/stm32f1xx_hal_pcd.c ****   {
 1084              		.loc 1 580 0
 1085 0012 2068     		ldr	r0, [r4]
 1086 0014 FFF7FEFF 		bl	USB_ReadInterrupts
 1087              	.LVL89:
 1088 0018 4105     		lsls	r1, r0, #21
 1089 001a 0FD5     		bpl	.L56
 582:c/stm32f1xx_hal_pcd.c ****     HAL_PCD_ResetCallback(hpcd);
 1090              		.loc 1 582 0
 1091 001c 2268     		ldr	r2, [r4]
 583:c/stm32f1xx_hal_pcd.c ****     HAL_PCD_SetAddress(hpcd, 0U);
 1092              		.loc 1 583 0
 1093 001e 2046     		mov	r0, r4
 582:c/stm32f1xx_hal_pcd.c ****     HAL_PCD_ResetCallback(hpcd);
 1094              		.loc 1 582 0
 1095 0020 B2F84430 		ldrh	r3, [r2, #68]
 1096 0024 23F48063 		bic	r3, r3, #1024
 1097 0028 1B04     		lsls	r3, r3, #16
 1098 002a 1B0C     		lsrs	r3, r3, #16
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 38


 1099 002c A2F84430 		strh	r3, [r2, #68]	@ movhi
 583:c/stm32f1xx_hal_pcd.c ****     HAL_PCD_SetAddress(hpcd, 0U);
 1100              		.loc 1 583 0
 1101 0030 FFF7FEFF 		bl	HAL_PCD_ResetCallback
 1102              	.LVL90:
 584:c/stm32f1xx_hal_pcd.c ****   }
 1103              		.loc 1 584 0
 1104 0034 0021     		movs	r1, #0
 1105 0036 2046     		mov	r0, r4
 1106 0038 FFF7FEFF 		bl	HAL_PCD_SetAddress
 1107              	.LVL91:
 1108              	.L56:
 587:c/stm32f1xx_hal_pcd.c ****   {
 1109              		.loc 1 587 0
 1110 003c 2068     		ldr	r0, [r4]
 1111 003e FFF7FEFF 		bl	USB_ReadInterrupts
 1112              	.LVL92:
 1113 0042 4704     		lsls	r7, r0, #17
 1114 0044 08D5     		bpl	.L85
 589:c/stm32f1xx_hal_pcd.c ****   }
 1115              		.loc 1 589 0
 1116 0046 2268     		ldr	r2, [r4]
 1117 0048 B2F84430 		ldrh	r3, [r2, #68]
 1118 004c 23F48043 		bic	r3, r3, #16384
 1119 0050 1B04     		lsls	r3, r3, #16
 1120 0052 1B0C     		lsrs	r3, r3, #16
 1121 0054 A2F84430 		strh	r3, [r2, #68]	@ movhi
 1122              	.L85:
 591:c/stm32f1xx_hal_pcd.c ****   {
 1123              		.loc 1 591 0
 1124 0058 2068     		ldr	r0, [r4]
 1125 005a FFF7FEFF 		bl	USB_ReadInterrupts
 1126              	.LVL93:
 1127 005e 8604     		lsls	r6, r0, #18
 1128 0060 08D5     		bpl	.L86
 593:c/stm32f1xx_hal_pcd.c ****   }
 1129              		.loc 1 593 0
 1130 0062 2268     		ldr	r2, [r4]
 1131 0064 B2F84430 		ldrh	r3, [r2, #68]
 1132 0068 23F40053 		bic	r3, r3, #8192
 1133 006c 1B04     		lsls	r3, r3, #16
 1134 006e 1B0C     		lsrs	r3, r3, #16
 1135 0070 A2F84430 		strh	r3, [r2, #68]	@ movhi
 1136              	.L86:
 596:c/stm32f1xx_hal_pcd.c ****   {
 1137              		.loc 1 596 0
 1138 0074 2068     		ldr	r0, [r4]
 1139 0076 FFF7FEFF 		bl	USB_ReadInterrupts
 1140              	.LVL94:
 1141 007a C504     		lsls	r5, r0, #19
 1142 007c 1CD5     		bpl	.L87
 598:c/stm32f1xx_hal_pcd.c ****     hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 1143              		.loc 1 598 0
 1144 007e 2268     		ldr	r2, [r4]
 601:c/stm32f1xx_hal_pcd.c **** 
 1145              		.loc 1 601 0
 1146 0080 2046     		mov	r0, r4
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 39


 598:c/stm32f1xx_hal_pcd.c ****     hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 1147              		.loc 1 598 0
 1148 0082 B2F84030 		ldrh	r3, [r2, #64]
 1149 0086 23F00403 		bic	r3, r3, #4
 1150 008a 1B04     		lsls	r3, r3, #16
 1151 008c 1B0C     		lsrs	r3, r3, #16
 1152 008e A2F84030 		strh	r3, [r2, #64]	@ movhi
 599:c/stm32f1xx_hal_pcd.c ****     
 1153              		.loc 1 599 0
 1154 0092 B2F84030 		ldrh	r3, [r2, #64]
 1155 0096 23F00803 		bic	r3, r3, #8
 1156 009a 1B04     		lsls	r3, r3, #16
 1157 009c 1B0C     		lsrs	r3, r3, #16
 1158 009e A2F84030 		strh	r3, [r2, #64]	@ movhi
 601:c/stm32f1xx_hal_pcd.c **** 
 1159              		.loc 1 601 0
 1160 00a2 FFF7FEFF 		bl	HAL_PCD_ResumeCallback
 1161              	.LVL95:
 603:c/stm32f1xx_hal_pcd.c ****   }
 1162              		.loc 1 603 0
 1163 00a6 2268     		ldr	r2, [r4]
 1164 00a8 B2F84430 		ldrh	r3, [r2, #68]
 1165 00ac 23F48053 		bic	r3, r3, #4096
 1166 00b0 1B04     		lsls	r3, r3, #16
 1167 00b2 1B0C     		lsrs	r3, r3, #16
 1168 00b4 A2F84430 		strh	r3, [r2, #68]	@ movhi
 1169              	.L87:
 606:c/stm32f1xx_hal_pcd.c ****   { 
 1170              		.loc 1 606 0
 1171 00b8 2068     		ldr	r0, [r4]
 1172 00ba FFF7FEFF 		bl	USB_ReadInterrupts
 1173              	.LVL96:
 1174 00be 0005     		lsls	r0, r0, #20
 1175 00c0 1DD5     		bpl	.L89
 609:c/stm32f1xx_hal_pcd.c ****     
 1176              		.loc 1 609 0
 1177 00c2 2068     		ldr	r0, [r4]
 1178 00c4 B0F84030 		ldrh	r3, [r0, #64]
 1179 00c8 9BB2     		uxth	r3, r3
 1180 00ca 43F00803 		orr	r3, r3, #8
 1181 00ce A0F84030 		strh	r3, [r0, #64]	@ movhi
 612:c/stm32f1xx_hal_pcd.c **** 
 1182              		.loc 1 612 0
 1183 00d2 B0F84430 		ldrh	r3, [r0, #68]
 1184 00d6 23F40063 		bic	r3, r3, #2048
 1185 00da 1B04     		lsls	r3, r3, #16
 1186 00dc 1B0C     		lsrs	r3, r3, #16
 1187 00de A0F84430 		strh	r3, [r0, #68]	@ movhi
 614:c/stm32f1xx_hal_pcd.c ****     if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 1188              		.loc 1 614 0
 1189 00e2 B0F84030 		ldrh	r3, [r0, #64]
 1190 00e6 9BB2     		uxth	r3, r3
 1191 00e8 43F00403 		orr	r3, r3, #4
 1192 00ec A0F84030 		strh	r3, [r0, #64]	@ movhi
 615:c/stm32f1xx_hal_pcd.c ****     {
 1193              		.loc 1 615 0
 1194 00f0 FFF7FEFF 		bl	USB_ReadInterrupts
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 40


 1195              	.LVL97:
 1196 00f4 C104     		lsls	r1, r0, #19
 1197 00f6 02D4     		bmi	.L89
 617:c/stm32f1xx_hal_pcd.c ****     }
 1198              		.loc 1 617 0
 1199 00f8 2046     		mov	r0, r4
 1200 00fa FFF7FEFF 		bl	HAL_PCD_SuspendCallback
 1201              	.LVL98:
 1202              	.L89:
 621:c/stm32f1xx_hal_pcd.c ****   {
 1203              		.loc 1 621 0
 1204 00fe 2068     		ldr	r0, [r4]
 1205 0100 FFF7FEFF 		bl	USB_ReadInterrupts
 1206              	.LVL99:
 1207 0104 8205     		lsls	r2, r0, #22
 1208 0106 0BD5     		bpl	.L91
 623:c/stm32f1xx_hal_pcd.c ****     HAL_PCD_SOFCallback(hpcd);
 1209              		.loc 1 623 0
 1210 0108 2268     		ldr	r2, [r4]
 624:c/stm32f1xx_hal_pcd.c ****   }
 1211              		.loc 1 624 0
 1212 010a 2046     		mov	r0, r4
 623:c/stm32f1xx_hal_pcd.c ****     HAL_PCD_SOFCallback(hpcd);
 1213              		.loc 1 623 0
 1214 010c B2F84430 		ldrh	r3, [r2, #68]
 1215 0110 23F40073 		bic	r3, r3, #512
 1216 0114 1B04     		lsls	r3, r3, #16
 1217 0116 1B0C     		lsrs	r3, r3, #16
 1218 0118 A2F84430 		strh	r3, [r2, #68]	@ movhi
 624:c/stm32f1xx_hal_pcd.c ****   }
 1219              		.loc 1 624 0
 1220 011c FFF7FEFF 		bl	HAL_PCD_SOFCallback
 1221              	.LVL100:
 1222              	.L91:
 627:c/stm32f1xx_hal_pcd.c ****   {
 1223              		.loc 1 627 0
 1224 0120 2068     		ldr	r0, [r4]
 1225 0122 FFF7FEFF 		bl	USB_ReadInterrupts
 1226              	.LVL101:
 1227 0126 C305     		lsls	r3, r0, #23
 1228 0128 08D5     		bpl	.L53
 630:c/stm32f1xx_hal_pcd.c ****   }
 1229              		.loc 1 630 0
 1230 012a 2268     		ldr	r2, [r4]
 1231 012c B2F84430 		ldrh	r3, [r2, #68]
 1232 0130 23F48073 		bic	r3, r3, #256
 1233 0134 1B04     		lsls	r3, r3, #16
 1234 0136 1B0C     		lsrs	r3, r3, #16
 1235 0138 A2F84430 		strh	r3, [r2, #68]	@ movhi
 1236              	.L53:
 632:c/stm32f1xx_hal_pcd.c **** #endif /* USB */
 1237              		.loc 1 632 0
 1238 013c 02B0     		add	sp, sp, #8
 1239              		.cfi_remember_state
 1240              		.cfi_def_cfa_offset 32
 1241              		@ sp needed
 1242 013e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 41


 1243              	.LVL102:
 1244              	.L54:
 1245              		.cfi_restore_state
 1246              	.LBB15:
 1247              	.LBB16:
 994:c/stm32f1xx_hal_pcd.c **** 
 995:c/stm32f1xx_hal_pcd.c **** /**
 996:c/stm32f1xx_hal_pcd.c ****   * @brief  Set a STALL condition over an endpoint
 997:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
 998:c/stm32f1xx_hal_pcd.c ****   * @param  ep_addr: endpoint address
 999:c/stm32f1xx_hal_pcd.c ****   * @retval HAL status
1000:c/stm32f1xx_hal_pcd.c ****   */
1001:c/stm32f1xx_hal_pcd.c **** HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
1002:c/stm32f1xx_hal_pcd.c **** {
1003:c/stm32f1xx_hal_pcd.c ****   PCD_EPTypeDef *ep = NULL;
1004:c/stm32f1xx_hal_pcd.c ****   
1005:c/stm32f1xx_hal_pcd.c ****   if ((0x80U & ep_addr) == 0x80U)
1006:c/stm32f1xx_hal_pcd.c ****   {
1007:c/stm32f1xx_hal_pcd.c ****     ep = &hpcd->IN_ep[ep_addr & 0x7FU];
1008:c/stm32f1xx_hal_pcd.c ****   }
1009:c/stm32f1xx_hal_pcd.c ****   else
1010:c/stm32f1xx_hal_pcd.c ****   {
1011:c/stm32f1xx_hal_pcd.c ****     ep = &hpcd->OUT_ep[ep_addr];
1012:c/stm32f1xx_hal_pcd.c ****   }
1013:c/stm32f1xx_hal_pcd.c ****   
1014:c/stm32f1xx_hal_pcd.c ****   ep->is_stall = 1U;
1015:c/stm32f1xx_hal_pcd.c ****   ep->num   = ep_addr & 0x7FU;
1016:c/stm32f1xx_hal_pcd.c ****   ep->is_in = ((ep_addr & 0x80U) == 0x80U);
1017:c/stm32f1xx_hal_pcd.c ****   
1018:c/stm32f1xx_hal_pcd.c ****   __HAL_LOCK(hpcd);
1019:c/stm32f1xx_hal_pcd.c ****   USB_EPSetStall(hpcd->Instance , ep);
1020:c/stm32f1xx_hal_pcd.c ****   if((ep_addr & 0x7FU) == 0U)
1021:c/stm32f1xx_hal_pcd.c ****   {
1022:c/stm32f1xx_hal_pcd.c ****     USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
1023:c/stm32f1xx_hal_pcd.c ****   }
1024:c/stm32f1xx_hal_pcd.c ****   __HAL_UNLOCK(hpcd); 
1025:c/stm32f1xx_hal_pcd.c ****   
1026:c/stm32f1xx_hal_pcd.c ****   return HAL_OK;
1027:c/stm32f1xx_hal_pcd.c **** }
1028:c/stm32f1xx_hal_pcd.c **** 
1029:c/stm32f1xx_hal_pcd.c **** /**
1030:c/stm32f1xx_hal_pcd.c ****   * @brief  Clear a STALL condition over in an endpoint
1031:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
1032:c/stm32f1xx_hal_pcd.c ****   * @param  ep_addr: endpoint address
1033:c/stm32f1xx_hal_pcd.c ****   * @retval HAL status
1034:c/stm32f1xx_hal_pcd.c ****   */
1035:c/stm32f1xx_hal_pcd.c **** HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
1036:c/stm32f1xx_hal_pcd.c **** {
1037:c/stm32f1xx_hal_pcd.c ****   PCD_EPTypeDef *ep = NULL;
1038:c/stm32f1xx_hal_pcd.c ****   
1039:c/stm32f1xx_hal_pcd.c ****   if ((0x80U & ep_addr) == 0x80U)
1040:c/stm32f1xx_hal_pcd.c ****   {
1041:c/stm32f1xx_hal_pcd.c ****     ep = &hpcd->IN_ep[ep_addr & 0x7FU];
1042:c/stm32f1xx_hal_pcd.c ****   }
1043:c/stm32f1xx_hal_pcd.c ****   else
1044:c/stm32f1xx_hal_pcd.c ****   {
1045:c/stm32f1xx_hal_pcd.c ****     ep = &hpcd->OUT_ep[ep_addr];
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 42


1046:c/stm32f1xx_hal_pcd.c ****   }
1047:c/stm32f1xx_hal_pcd.c ****   
1048:c/stm32f1xx_hal_pcd.c ****   ep->is_stall = 0U;
1049:c/stm32f1xx_hal_pcd.c ****   ep->num   = ep_addr & 0x7FU;
1050:c/stm32f1xx_hal_pcd.c ****   ep->is_in = ((ep_addr & 0x80U) == 0x80U);
1051:c/stm32f1xx_hal_pcd.c ****   
1052:c/stm32f1xx_hal_pcd.c ****   __HAL_LOCK(hpcd); 
1053:c/stm32f1xx_hal_pcd.c ****   USB_EPClearStall(hpcd->Instance , ep);
1054:c/stm32f1xx_hal_pcd.c ****   __HAL_UNLOCK(hpcd); 
1055:c/stm32f1xx_hal_pcd.c ****   
1056:c/stm32f1xx_hal_pcd.c ****   return HAL_OK;
1057:c/stm32f1xx_hal_pcd.c **** }
1058:c/stm32f1xx_hal_pcd.c **** 
1059:c/stm32f1xx_hal_pcd.c **** /**
1060:c/stm32f1xx_hal_pcd.c ****   * @brief  Flush an endpoint
1061:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
1062:c/stm32f1xx_hal_pcd.c ****   * @param  ep_addr: endpoint address
1063:c/stm32f1xx_hal_pcd.c ****   * @retval HAL status
1064:c/stm32f1xx_hal_pcd.c ****   */
1065:c/stm32f1xx_hal_pcd.c **** HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
1066:c/stm32f1xx_hal_pcd.c **** {
1067:c/stm32f1xx_hal_pcd.c ****   __HAL_LOCK(hpcd);
1068:c/stm32f1xx_hal_pcd.c ****   
1069:c/stm32f1xx_hal_pcd.c ****   if ((ep_addr & 0x80U) == 0x80U)
1070:c/stm32f1xx_hal_pcd.c ****   {
1071:c/stm32f1xx_hal_pcd.c ****     USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7FU);
1072:c/stm32f1xx_hal_pcd.c ****   }
1073:c/stm32f1xx_hal_pcd.c ****   else
1074:c/stm32f1xx_hal_pcd.c ****   {
1075:c/stm32f1xx_hal_pcd.c ****     USB_FlushRxFifo(hpcd->Instance);
1076:c/stm32f1xx_hal_pcd.c ****   }
1077:c/stm32f1xx_hal_pcd.c ****   
1078:c/stm32f1xx_hal_pcd.c ****   __HAL_UNLOCK(hpcd); 
1079:c/stm32f1xx_hal_pcd.c ****   
1080:c/stm32f1xx_hal_pcd.c ****   return HAL_OK;
1081:c/stm32f1xx_hal_pcd.c **** }
1082:c/stm32f1xx_hal_pcd.c **** 
1083:c/stm32f1xx_hal_pcd.c **** /**
1084:c/stm32f1xx_hal_pcd.c ****   * @brief  HAL_PCD_ActivateRemoteWakeup : active remote wakeup signalling
1085:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
1086:c/stm32f1xx_hal_pcd.c ****   * @retval HAL status
1087:c/stm32f1xx_hal_pcd.c ****   */
1088:c/stm32f1xx_hal_pcd.c **** HAL_StatusTypeDef HAL_PCD_ActivateRemoteWakeup(PCD_HandleTypeDef *hpcd)
1089:c/stm32f1xx_hal_pcd.c **** {
1090:c/stm32f1xx_hal_pcd.c ****   return(USB_ActivateRemoteWakeup(hpcd->Instance));
1091:c/stm32f1xx_hal_pcd.c **** }
1092:c/stm32f1xx_hal_pcd.c **** 
1093:c/stm32f1xx_hal_pcd.c **** /**
1094:c/stm32f1xx_hal_pcd.c ****   * @brief  HAL_PCD_DeActivateRemoteWakeup : de-active remote wakeup signalling
1095:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
1096:c/stm32f1xx_hal_pcd.c ****   * @retval HAL status
1097:c/stm32f1xx_hal_pcd.c ****   */
1098:c/stm32f1xx_hal_pcd.c **** HAL_StatusTypeDef HAL_PCD_DeActivateRemoteWakeup(PCD_HandleTypeDef *hpcd)
1099:c/stm32f1xx_hal_pcd.c **** {
1100:c/stm32f1xx_hal_pcd.c ****   return(USB_DeActivateRemoteWakeup(hpcd->Instance));
1101:c/stm32f1xx_hal_pcd.c **** }
1102:c/stm32f1xx_hal_pcd.c **** /**
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 43


1103:c/stm32f1xx_hal_pcd.c ****   * @}
1104:c/stm32f1xx_hal_pcd.c ****   */
1105:c/stm32f1xx_hal_pcd.c ****   
1106:c/stm32f1xx_hal_pcd.c **** /** @defgroup PCD_Exported_Functions_Group4 Peripheral State functions 
1107:c/stm32f1xx_hal_pcd.c ****  *  @brief   Peripheral State functions
1108:c/stm32f1xx_hal_pcd.c ****  *
1109:c/stm32f1xx_hal_pcd.c **** @verbatim
1110:c/stm32f1xx_hal_pcd.c ****  ===============================================================================
1111:c/stm32f1xx_hal_pcd.c ****                       ##### Peripheral State functions #####
1112:c/stm32f1xx_hal_pcd.c ****  ===============================================================================
1113:c/stm32f1xx_hal_pcd.c ****     [..]
1114:c/stm32f1xx_hal_pcd.c ****     This subsection permits to get in run-time the status of the peripheral 
1115:c/stm32f1xx_hal_pcd.c ****     and the data flow.
1116:c/stm32f1xx_hal_pcd.c **** 
1117:c/stm32f1xx_hal_pcd.c **** @endverbatim
1118:c/stm32f1xx_hal_pcd.c ****   * @{
1119:c/stm32f1xx_hal_pcd.c ****   */
1120:c/stm32f1xx_hal_pcd.c **** 
1121:c/stm32f1xx_hal_pcd.c **** /**
1122:c/stm32f1xx_hal_pcd.c ****   * @brief  Return the PCD state
1123:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
1124:c/stm32f1xx_hal_pcd.c ****   * @retval HAL state
1125:c/stm32f1xx_hal_pcd.c ****   */
1126:c/stm32f1xx_hal_pcd.c **** PCD_StateTypeDef HAL_PCD_GetState(PCD_HandleTypeDef *hpcd)
1127:c/stm32f1xx_hal_pcd.c **** {
1128:c/stm32f1xx_hal_pcd.c ****   return hpcd->State;
1129:c/stm32f1xx_hal_pcd.c **** }
1130:c/stm32f1xx_hal_pcd.c **** 
1131:c/stm32f1xx_hal_pcd.c **** /**
1132:c/stm32f1xx_hal_pcd.c ****   * @}
1133:c/stm32f1xx_hal_pcd.c ****   */
1134:c/stm32f1xx_hal_pcd.c **** 
1135:c/stm32f1xx_hal_pcd.c **** /**
1136:c/stm32f1xx_hal_pcd.c ****   * @}
1137:c/stm32f1xx_hal_pcd.c ****   */
1138:c/stm32f1xx_hal_pcd.c **** 
1139:c/stm32f1xx_hal_pcd.c **** /** @addtogroup PCD_Private_Functions
1140:c/stm32f1xx_hal_pcd.c ****   * @{
1141:c/stm32f1xx_hal_pcd.c ****   */
1142:c/stm32f1xx_hal_pcd.c **** #if defined (USB_OTG_FS)
1143:c/stm32f1xx_hal_pcd.c **** /**
1144:c/stm32f1xx_hal_pcd.c ****   * @brief  DCD_WriteEmptyTxFifo
1145:c/stm32f1xx_hal_pcd.c ****   *         check FIFO for the next packet to be loaded
1146:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
1147:c/stm32f1xx_hal_pcd.c ****   * @param  epnum : endpoint number
1148:c/stm32f1xx_hal_pcd.c ****   *          This parameter can be a value from 0 to 15  
1149:c/stm32f1xx_hal_pcd.c ****   * @retval HAL status
1150:c/stm32f1xx_hal_pcd.c ****   */
1151:c/stm32f1xx_hal_pcd.c **** static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
1152:c/stm32f1xx_hal_pcd.c **** {
1153:c/stm32f1xx_hal_pcd.c ****   USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
1154:c/stm32f1xx_hal_pcd.c ****   USB_OTG_EPTypeDef *ep = NULL;
1155:c/stm32f1xx_hal_pcd.c ****   int32_t len = 0;
1156:c/stm32f1xx_hal_pcd.c ****   uint32_t len32b = 0U;
1157:c/stm32f1xx_hal_pcd.c ****   uint32_t fifoemptymsk = 0U;
1158:c/stm32f1xx_hal_pcd.c ****   
1159:c/stm32f1xx_hal_pcd.c ****   ep = &hpcd->IN_ep[epnum];
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 44


1160:c/stm32f1xx_hal_pcd.c ****   len = ep->xfer_len - ep->xfer_count;
1161:c/stm32f1xx_hal_pcd.c ****   
1162:c/stm32f1xx_hal_pcd.c ****   if (len > ep->maxpacket)
1163:c/stm32f1xx_hal_pcd.c ****   {
1164:c/stm32f1xx_hal_pcd.c ****     len = ep->maxpacket;
1165:c/stm32f1xx_hal_pcd.c ****   }
1166:c/stm32f1xx_hal_pcd.c ****   
1167:c/stm32f1xx_hal_pcd.c ****   len32b = (len + 3U) / 4U;
1168:c/stm32f1xx_hal_pcd.c ****   
1169:c/stm32f1xx_hal_pcd.c ****   while ((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
1170:c/stm32f1xx_hal_pcd.c ****          ep->xfer_count < ep->xfer_len &&
1171:c/stm32f1xx_hal_pcd.c ****          ep->xfer_len != 0U)
1172:c/stm32f1xx_hal_pcd.c ****   {
1173:c/stm32f1xx_hal_pcd.c ****     /* Write the FIFO */
1174:c/stm32f1xx_hal_pcd.c ****     len = ep->xfer_len - ep->xfer_count;
1175:c/stm32f1xx_hal_pcd.c ****     
1176:c/stm32f1xx_hal_pcd.c ****     if ((uint32_t)len > ep->maxpacket)
1177:c/stm32f1xx_hal_pcd.c ****     {
1178:c/stm32f1xx_hal_pcd.c ****       len = ep->maxpacket;
1179:c/stm32f1xx_hal_pcd.c ****     }
1180:c/stm32f1xx_hal_pcd.c ****     len32b = (len + 3U) / 4U;
1181:c/stm32f1xx_hal_pcd.c ****     
1182:c/stm32f1xx_hal_pcd.c ****     USB_WritePacket(USBx, ep->xfer_buff, epnum, len);
1183:c/stm32f1xx_hal_pcd.c ****     
1184:c/stm32f1xx_hal_pcd.c ****     ep->xfer_buff  += len;
1185:c/stm32f1xx_hal_pcd.c ****     ep->xfer_count += len;
1186:c/stm32f1xx_hal_pcd.c ****   }
1187:c/stm32f1xx_hal_pcd.c ****   
1188:c/stm32f1xx_hal_pcd.c ****   if(len <= 0)
1189:c/stm32f1xx_hal_pcd.c ****   {
1190:c/stm32f1xx_hal_pcd.c ****     fifoemptymsk = 0x01U << epnum;
1191:c/stm32f1xx_hal_pcd.c ****     USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
1192:c/stm32f1xx_hal_pcd.c ****     
1193:c/stm32f1xx_hal_pcd.c ****   }
1194:c/stm32f1xx_hal_pcd.c ****   
1195:c/stm32f1xx_hal_pcd.c ****   return HAL_OK;
1196:c/stm32f1xx_hal_pcd.c **** }
1197:c/stm32f1xx_hal_pcd.c **** #endif /* USB_OTG_FS */
1198:c/stm32f1xx_hal_pcd.c **** 
1199:c/stm32f1xx_hal_pcd.c **** #if defined (USB)
1200:c/stm32f1xx_hal_pcd.c **** /**
1201:c/stm32f1xx_hal_pcd.c ****   * @brief  This function handles PCD Endpoint interrupt request.
1202:c/stm32f1xx_hal_pcd.c ****   * @param  hpcd: PCD handle
1203:c/stm32f1xx_hal_pcd.c ****   * @retval HAL status
1204:c/stm32f1xx_hal_pcd.c ****   */
1205:c/stm32f1xx_hal_pcd.c **** static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
1206:c/stm32f1xx_hal_pcd.c **** {
1207:c/stm32f1xx_hal_pcd.c ****   PCD_EPTypeDef *ep = NULL;
1208:c/stm32f1xx_hal_pcd.c ****   uint16_t count = 0;
1209:c/stm32f1xx_hal_pcd.c ****   uint8_t epindex = 0;
1210:c/stm32f1xx_hal_pcd.c ****   __IO uint16_t wIstr = 0;  
 1248              		.loc 1 1210 0
 1249 0142 0023     		movs	r3, #0
1211:c/stm32f1xx_hal_pcd.c ****   __IO uint16_t wEPVal = 0;
1212:c/stm32f1xx_hal_pcd.c ****   
1213:c/stm32f1xx_hal_pcd.c ****   /* stay in loop while pending interrupts */
1214:c/stm32f1xx_hal_pcd.c ****   while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 45


1215:c/stm32f1xx_hal_pcd.c ****   {
1216:c/stm32f1xx_hal_pcd.c ****     /* extract highest priority endpoint number */
1217:c/stm32f1xx_hal_pcd.c ****     epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
1218:c/stm32f1xx_hal_pcd.c ****     
1219:c/stm32f1xx_hal_pcd.c ****     if (epindex == 0)
1220:c/stm32f1xx_hal_pcd.c ****     {
1221:c/stm32f1xx_hal_pcd.c ****       /* Decode and service control endpoint interrupt */
1222:c/stm32f1xx_hal_pcd.c ****       
1223:c/stm32f1xx_hal_pcd.c ****       /* DIR bit = origin of the interrupt */   
1224:c/stm32f1xx_hal_pcd.c ****       if ((wIstr & USB_ISTR_DIR) == 0)
1225:c/stm32f1xx_hal_pcd.c ****       {
1226:c/stm32f1xx_hal_pcd.c ****         /* DIR = 0 */
1227:c/stm32f1xx_hal_pcd.c ****         
1228:c/stm32f1xx_hal_pcd.c ****         /* DIR = 0      => IN  int */
1229:c/stm32f1xx_hal_pcd.c ****         /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
1230:c/stm32f1xx_hal_pcd.c ****         PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
1231:c/stm32f1xx_hal_pcd.c ****         ep = &hpcd->IN_ep[0];
1232:c/stm32f1xx_hal_pcd.c ****         
1233:c/stm32f1xx_hal_pcd.c ****         ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
1234:c/stm32f1xx_hal_pcd.c ****         ep->xfer_buff += ep->xfer_count;
1235:c/stm32f1xx_hal_pcd.c ****  
1236:c/stm32f1xx_hal_pcd.c ****         /* TX COMPLETE */
1237:c/stm32f1xx_hal_pcd.c ****         HAL_PCD_DataInStageCallback(hpcd, 0U);
1238:c/stm32f1xx_hal_pcd.c ****         
1239:c/stm32f1xx_hal_pcd.c ****         
1240:c/stm32f1xx_hal_pcd.c ****         if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
1241:c/stm32f1xx_hal_pcd.c ****         {
1242:c/stm32f1xx_hal_pcd.c ****           hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
1243:c/stm32f1xx_hal_pcd.c ****           hpcd->USB_Address = 0U;
1244:c/stm32f1xx_hal_pcd.c ****         }
1245:c/stm32f1xx_hal_pcd.c ****         
1246:c/stm32f1xx_hal_pcd.c ****       }
1247:c/stm32f1xx_hal_pcd.c ****       else
1248:c/stm32f1xx_hal_pcd.c ****       {
1249:c/stm32f1xx_hal_pcd.c ****         /* DIR = 1 */
1250:c/stm32f1xx_hal_pcd.c ****         
1251:c/stm32f1xx_hal_pcd.c ****         /* DIR = 1 & CTR_RX       => SETUP or OUT int */
1252:c/stm32f1xx_hal_pcd.c ****         /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
1253:c/stm32f1xx_hal_pcd.c ****         ep = &hpcd->OUT_ep[0U];
1254:c/stm32f1xx_hal_pcd.c ****         wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
1255:c/stm32f1xx_hal_pcd.c ****         
1256:c/stm32f1xx_hal_pcd.c ****         if ((wEPVal & USB_EP_SETUP) != 0U)
1257:c/stm32f1xx_hal_pcd.c ****         {
1258:c/stm32f1xx_hal_pcd.c ****           /* Get SETUP Packet*/
1259:c/stm32f1xx_hal_pcd.c ****           ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
1260:c/stm32f1xx_hal_pcd.c ****           USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);      
1261:c/stm32f1xx_hal_pcd.c ****           /* SETUP bit kept frozen while CTR_RX = 1*/ 
1262:c/stm32f1xx_hal_pcd.c ****           PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
1263:c/stm32f1xx_hal_pcd.c ****           
1264:c/stm32f1xx_hal_pcd.c ****           /* Process SETUP Packet*/
1265:c/stm32f1xx_hal_pcd.c ****           HAL_PCD_SetupStageCallback(hpcd);
1266:c/stm32f1xx_hal_pcd.c ****         }
1267:c/stm32f1xx_hal_pcd.c ****         
1268:c/stm32f1xx_hal_pcd.c ****         else if ((wEPVal & USB_EP_CTR_RX) != 0U)
1269:c/stm32f1xx_hal_pcd.c ****         {
1270:c/stm32f1xx_hal_pcd.c ****           PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
1271:c/stm32f1xx_hal_pcd.c ****           /* Get Control Data OUT Packet*/
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 46


1272:c/stm32f1xx_hal_pcd.c ****           ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
1273:c/stm32f1xx_hal_pcd.c ****           
1274:c/stm32f1xx_hal_pcd.c ****           if (ep->xfer_count != 0U)
1275:c/stm32f1xx_hal_pcd.c ****           {
1276:c/stm32f1xx_hal_pcd.c ****             USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
1277:c/stm32f1xx_hal_pcd.c ****             ep->xfer_buff+=ep->xfer_count;
1278:c/stm32f1xx_hal_pcd.c ****           }
1279:c/stm32f1xx_hal_pcd.c ****           
1280:c/stm32f1xx_hal_pcd.c ****           /* Process Control Data OUT Packet*/
1281:c/stm32f1xx_hal_pcd.c ****            HAL_PCD_DataOutStageCallback(hpcd, 0U);
1282:c/stm32f1xx_hal_pcd.c ****           
1283:c/stm32f1xx_hal_pcd.c ****           PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
1284:c/stm32f1xx_hal_pcd.c ****           PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
1285:c/stm32f1xx_hal_pcd.c ****         }
1286:c/stm32f1xx_hal_pcd.c ****       }
1287:c/stm32f1xx_hal_pcd.c ****     }
1288:c/stm32f1xx_hal_pcd.c ****     else
1289:c/stm32f1xx_hal_pcd.c ****     {
1290:c/stm32f1xx_hal_pcd.c ****       /* Decode and service non control endpoints interrupt  */
1291:c/stm32f1xx_hal_pcd.c **** 	  
1292:c/stm32f1xx_hal_pcd.c ****       /* process related endpoint register */
1293:c/stm32f1xx_hal_pcd.c ****       wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
1294:c/stm32f1xx_hal_pcd.c ****       if ((wEPVal & USB_EP_CTR_RX) != 0U)
1295:c/stm32f1xx_hal_pcd.c ****       {  
1296:c/stm32f1xx_hal_pcd.c ****         /* clear int flag */
1297:c/stm32f1xx_hal_pcd.c ****         PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
1298:c/stm32f1xx_hal_pcd.c ****         ep = &hpcd->OUT_ep[epindex];
1299:c/stm32f1xx_hal_pcd.c ****         
1300:c/stm32f1xx_hal_pcd.c ****         /* OUT double Buffering*/
1301:c/stm32f1xx_hal_pcd.c ****         if (ep->doublebuffer == 0U)
1302:c/stm32f1xx_hal_pcd.c ****         {
1303:c/stm32f1xx_hal_pcd.c ****           count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
1304:c/stm32f1xx_hal_pcd.c ****           if (count != 0U)
1305:c/stm32f1xx_hal_pcd.c ****           {
1306:c/stm32f1xx_hal_pcd.c ****             USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
1307:c/stm32f1xx_hal_pcd.c ****           }
1308:c/stm32f1xx_hal_pcd.c ****         }
1309:c/stm32f1xx_hal_pcd.c ****         else
1310:c/stm32f1xx_hal_pcd.c ****         {
1311:c/stm32f1xx_hal_pcd.c ****           if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
1312:c/stm32f1xx_hal_pcd.c ****           {
1313:c/stm32f1xx_hal_pcd.c ****             /*read from endpoint BUF0Addr buffer*/
1314:c/stm32f1xx_hal_pcd.c ****             count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
1315:c/stm32f1xx_hal_pcd.c ****             if (count != 0U)
1316:c/stm32f1xx_hal_pcd.c ****             {
1317:c/stm32f1xx_hal_pcd.c ****               USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
1318:c/stm32f1xx_hal_pcd.c ****             }
1319:c/stm32f1xx_hal_pcd.c ****           }
1320:c/stm32f1xx_hal_pcd.c ****           else
1321:c/stm32f1xx_hal_pcd.c ****           {
1322:c/stm32f1xx_hal_pcd.c ****             /*read from endpoint BUF1Addr buffer*/
1323:c/stm32f1xx_hal_pcd.c ****             count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
1324:c/stm32f1xx_hal_pcd.c ****             if (count != 0U)
1325:c/stm32f1xx_hal_pcd.c ****             {
1326:c/stm32f1xx_hal_pcd.c ****               USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
1327:c/stm32f1xx_hal_pcd.c ****             }
1328:c/stm32f1xx_hal_pcd.c ****           }
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 47


1329:c/stm32f1xx_hal_pcd.c ****           PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
1330:c/stm32f1xx_hal_pcd.c ****         }
1331:c/stm32f1xx_hal_pcd.c ****         /*multi-packet on the NON control OUT endpoint*/
1332:c/stm32f1xx_hal_pcd.c ****         ep->xfer_count+=count;
1333:c/stm32f1xx_hal_pcd.c ****         ep->xfer_buff+=count;
1334:c/stm32f1xx_hal_pcd.c ****        
1335:c/stm32f1xx_hal_pcd.c ****         if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
1336:c/stm32f1xx_hal_pcd.c ****         {
1337:c/stm32f1xx_hal_pcd.c ****           /* RX COMPLETE */
1338:c/stm32f1xx_hal_pcd.c ****           HAL_PCD_DataOutStageCallback(hpcd, ep->num);
1339:c/stm32f1xx_hal_pcd.c ****         }
1340:c/stm32f1xx_hal_pcd.c ****         else
1341:c/stm32f1xx_hal_pcd.c ****         {
1342:c/stm32f1xx_hal_pcd.c ****           HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
1343:c/stm32f1xx_hal_pcd.c ****         }
1344:c/stm32f1xx_hal_pcd.c ****         
1345:c/stm32f1xx_hal_pcd.c ****       } /* if((wEPVal & EP_CTR_RX) */
1346:c/stm32f1xx_hal_pcd.c ****       
1347:c/stm32f1xx_hal_pcd.c ****       if ((wEPVal & USB_EP_CTR_TX) != 0U)
1348:c/stm32f1xx_hal_pcd.c ****       {
1349:c/stm32f1xx_hal_pcd.c ****         ep = &hpcd->IN_ep[epindex];
1350:c/stm32f1xx_hal_pcd.c ****         
1351:c/stm32f1xx_hal_pcd.c ****         /* clear int flag */
1352:c/stm32f1xx_hal_pcd.c ****         PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 1250              		.loc 1 1352 0
 1251 0144 C84F     		ldr	r7, .L138
 1252              	.LBB17:
1284:c/stm32f1xx_hal_pcd.c ****         }
 1253              		.loc 1 1284 0
 1254 0146 DFF82483 		ldr	r8, .L138+4
 1255              	.LBE17:
 1256              	.LBB18:
 1257              	.LBB19:
1283:c/stm32f1xx_hal_pcd.c ****           PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 1258              		.loc 1 1283 0
 1259 014a DFF82493 		ldr	r9, .L138+8
 1260              	.LBE19:
 1261              	.LBE18:
1210:c/stm32f1xx_hal_pcd.c ****   __IO uint16_t wEPVal = 0;
 1262              		.loc 1 1210 0
 1263 014e ADF80430 		strh	r3, [sp, #4]	@ movhi
1211:c/stm32f1xx_hal_pcd.c ****   
 1264              		.loc 1 1211 0
 1265 0152 ADF80630 		strh	r3, [sp, #6]	@ movhi
 1266              	.LVL103:
 1267              	.L57:
1214:c/stm32f1xx_hal_pcd.c ****   {
 1268              		.loc 1 1214 0
 1269 0156 2068     		ldr	r0, [r4]
 1270 0158 B0F84430 		ldrh	r3, [r0, #68]
 1271 015c 9BB2     		uxth	r3, r3
 1272 015e ADF80430 		strh	r3, [sp, #4]	@ movhi
 1273 0162 1B04     		lsls	r3, r3, #16
 1274 0164 7FF555AF 		bpl	.L84
1217:c/stm32f1xx_hal_pcd.c ****     
 1275              		.loc 1 1217 0
 1276 0168 BDF80450 		ldrh	r5, [sp, #4]
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 48


 1277              	.LVL104:
1219:c/stm32f1xx_hal_pcd.c ****     {
 1278              		.loc 1 1219 0
 1279 016c 15F00F05 		ands	r5, r5, #15
 1280              	.LVL105:
 1281 0170 40F0AB80 		bne	.L58
1224:c/stm32f1xx_hal_pcd.c ****       {
 1282              		.loc 1 1224 0
 1283 0174 BDF80410 		ldrh	r1, [sp, #4]
1230:c/stm32f1xx_hal_pcd.c ****         ep = &hpcd->IN_ep[0];
 1284              		.loc 1 1230 0
 1285 0178 0388     		ldrh	r3, [r0]
1224:c/stm32f1xx_hal_pcd.c ****       {
 1286              		.loc 1 1224 0
 1287 017a 11F01001 		ands	r1, r1, #16
1230:c/stm32f1xx_hal_pcd.c ****         ep = &hpcd->IN_ep[0];
 1288              		.loc 1 1230 0
 1289 017e 9BB2     		uxth	r3, r3
1224:c/stm32f1xx_hal_pcd.c ****       {
 1290              		.loc 1 1224 0
 1291 0180 26D1     		bne	.L59
1230:c/stm32f1xx_hal_pcd.c ****         ep = &hpcd->IN_ep[0];
 1292              		.loc 1 1230 0
 1293 0182 3B40     		ands	r3, r3, r7
 1294 0184 0380     		strh	r3, [r0]	@ movhi
 1295              	.LVL106:
1233:c/stm32f1xx_hal_pcd.c ****         ep->xfer_buff += ep->xfer_count;
 1296              		.loc 1 1233 0
 1297 0186 B0F85030 		ldrh	r3, [r0, #80]
 1298 018a 94F82820 		ldrb	r2, [r4, #40]	@ zero_extendqisi2
 1299 018e 9BB2     		uxth	r3, r3
 1300 0190 03EBC203 		add	r3, r3, r2, lsl #3
 1301 0194 00EB4300 		add	r0, r0, r3, lsl #1
 1302 0198 D0F80434 		ldr	r3, [r0, #1028]
1234:c/stm32f1xx_hal_pcd.c ****  
 1303              		.loc 1 1234 0
 1304 019c E26B     		ldr	r2, [r4, #60]
1233:c/stm32f1xx_hal_pcd.c ****         ep->xfer_buff += ep->xfer_count;
 1305              		.loc 1 1233 0
 1306 019e C3F30903 		ubfx	r3, r3, #0, #10
 1307 01a2 6364     		str	r3, [r4, #68]
1234:c/stm32f1xx_hal_pcd.c ****  
 1308              		.loc 1 1234 0
 1309 01a4 1344     		add	r3, r3, r2
 1310 01a6 E363     		str	r3, [r4, #60]
1237:c/stm32f1xx_hal_pcd.c ****         
 1311              		.loc 1 1237 0
 1312 01a8 2046     		mov	r0, r4
 1313 01aa FFF7FEFF 		bl	HAL_PCD_DataInStageCallback
 1314              	.LVL107:
1240:c/stm32f1xx_hal_pcd.c ****         {
 1315              		.loc 1 1240 0
 1316 01ae 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
 1317 01b2 002B     		cmp	r3, #0
 1318 01b4 CFD0     		beq	.L57
 1319 01b6 226C     		ldr	r2, [r4, #64]
 1320 01b8 002A     		cmp	r2, #0
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 49


 1321 01ba CCD1     		bne	.L57
1242:c/stm32f1xx_hal_pcd.c ****           hpcd->USB_Address = 0U;
 1322              		.loc 1 1242 0
 1323 01bc 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
 1324 01c0 2168     		ldr	r1, [r4]
 1325 01c2 43F08003 		orr	r3, r3, #128
 1326 01c6 A1F84C30 		strh	r3, [r1, #76]	@ movhi
1243:c/stm32f1xx_hal_pcd.c ****         }
 1327              		.loc 1 1243 0
 1328 01ca 84F82420 		strb	r2, [r4, #36]
 1329 01ce C2E7     		b	.L57
 1330              	.LVL108:
 1331              	.L59:
1254:c/stm32f1xx_hal_pcd.c ****         
 1332              		.loc 1 1254 0
 1333 01d0 ADF80630 		strh	r3, [sp, #6]	@ movhi
1256:c/stm32f1xx_hal_pcd.c ****         {
 1334              		.loc 1 1256 0
 1335 01d4 BDF80630 		ldrh	r3, [sp, #6]
 1336 01d8 1A05     		lsls	r2, r3, #20
 1337 01da 1FD5     		bpl	.L63
1259:c/stm32f1xx_hal_pcd.c ****           USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);      
 1338              		.loc 1 1259 0
 1339 01dc B0F85030 		ldrh	r3, [r0, #80]
 1340 01e0 94F82822 		ldrb	r2, [r4, #552]	@ zero_extendqisi2
 1341 01e4 9BB2     		uxth	r3, r3
 1342 01e6 03EBC203 		add	r3, r3, r2, lsl #3
 1343 01ea 00EB4303 		add	r3, r0, r3, lsl #1
 1344 01ee D3F80C34 		ldr	r3, [r3, #1036]
1260:c/stm32f1xx_hal_pcd.c ****           /* SETUP bit kept frozen while CTR_RX = 1*/ 
 1345              		.loc 1 1260 0
 1346 01f2 B4F82C22 		ldrh	r2, [r4, #556]
1259:c/stm32f1xx_hal_pcd.c ****           USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);      
 1347              		.loc 1 1259 0
 1348 01f6 C3F30903 		ubfx	r3, r3, #0, #10
 1349 01fa C4F84432 		str	r3, [r4, #580]
1260:c/stm32f1xx_hal_pcd.c ****           /* SETUP bit kept frozen while CTR_RX = 1*/ 
 1350              		.loc 1 1260 0
 1351 01fe 04F22C41 		addw	r1, r4, #1068
 1352 0202 FFF7FEFF 		bl	USB_ReadPMA
 1353              	.LVL109:
1262:c/stm32f1xx_hal_pcd.c ****           
 1354              		.loc 1 1262 0
 1355 0206 2268     		ldr	r2, [r4]
1265:c/stm32f1xx_hal_pcd.c ****         }
 1356              		.loc 1 1265 0
 1357 0208 2046     		mov	r0, r4
1262:c/stm32f1xx_hal_pcd.c ****           
 1358              		.loc 1 1262 0
 1359 020a 1388     		ldrh	r3, [r2]
 1360 020c 23F07003 		bic	r3, r3, #112
 1361 0210 1B05     		lsls	r3, r3, #20
 1362 0212 1B0D     		lsrs	r3, r3, #20
 1363 0214 1380     		strh	r3, [r2]	@ movhi
1265:c/stm32f1xx_hal_pcd.c ****         }
 1364              		.loc 1 1265 0
 1365 0216 FFF7FEFF 		bl	HAL_PCD_SetupStageCallback
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 50


 1366              	.LVL110:
 1367 021a 9CE7     		b	.L57
 1368              	.L63:
1268:c/stm32f1xx_hal_pcd.c ****         {
 1369              		.loc 1 1268 0
 1370 021c BDF80630 		ldrh	r3, [sp, #6]
 1371 0220 1B04     		lsls	r3, r3, #16
 1372 0222 98D5     		bpl	.L57
1270:c/stm32f1xx_hal_pcd.c ****           /* Get Control Data OUT Packet*/
 1373              		.loc 1 1270 0
 1374 0224 0388     		ldrh	r3, [r0]
 1375 0226 23F07003 		bic	r3, r3, #112
 1376 022a 1B05     		lsls	r3, r3, #20
 1377 022c 1B0D     		lsrs	r3, r3, #20
 1378 022e 0380     		strh	r3, [r0]	@ movhi
1272:c/stm32f1xx_hal_pcd.c ****           
 1379              		.loc 1 1272 0
 1380 0230 B0F85030 		ldrh	r3, [r0, #80]
 1381 0234 94F82822 		ldrb	r2, [r4, #552]	@ zero_extendqisi2
 1382 0238 9BB2     		uxth	r3, r3
 1383 023a 03EBC203 		add	r3, r3, r2, lsl #3
 1384 023e 00EB4303 		add	r3, r0, r3, lsl #1
 1385 0242 D3F80C34 		ldr	r3, [r3, #1036]
 1386 0246 C3F30903 		ubfx	r3, r3, #0, #10
 1387 024a C4F84432 		str	r3, [r4, #580]
1274:c/stm32f1xx_hal_pcd.c ****           {
 1388              		.loc 1 1274 0
 1389 024e 63B1     		cbz	r3, .L64
1276:c/stm32f1xx_hal_pcd.c ****             ep->xfer_buff+=ep->xfer_count;
 1390              		.loc 1 1276 0
 1391 0250 B4F82C22 		ldrh	r2, [r4, #556]
 1392 0254 D4F83C12 		ldr	r1, [r4, #572]
 1393 0258 FFF7FEFF 		bl	USB_ReadPMA
 1394              	.LVL111:
1277:c/stm32f1xx_hal_pcd.c ****           }
 1395              		.loc 1 1277 0
 1396 025c D4F83C32 		ldr	r3, [r4, #572]
 1397 0260 D4F84422 		ldr	r2, [r4, #580]
 1398 0264 1344     		add	r3, r3, r2
 1399 0266 C4F83C32 		str	r3, [r4, #572]
 1400              	.L64:
1281:c/stm32f1xx_hal_pcd.c ****           
 1401              		.loc 1 1281 0
 1402 026a 0021     		movs	r1, #0
 1403 026c 2046     		mov	r0, r4
 1404 026e FFF7FEFF 		bl	HAL_PCD_DataOutStageCallback
 1405              	.LVL112:
 1406              	.LBB24:
1283:c/stm32f1xx_hal_pcd.c ****           PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 1407              		.loc 1 1283 0
 1408 0272 2268     		ldr	r2, [r4]
 1409              	.LBB20:
 1410 0274 D4F83852 		ldr	r5, [r4, #568]
 1411              	.LBE20:
 1412 0278 B2F85010 		ldrh	r1, [r2, #80]
 1413              	.LBB21:
 1414 027c 3E2D     		cmp	r5, #62
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 51


 1415              	.LBE21:
 1416 027e 89B2     		uxth	r1, r1
 1417 0280 01F10601 		add	r1, r1, #6
 1418 0284 02F58060 		add	r0, r2, #1024
 1419              	.LVL113:
 1420              	.LBB22:
 1421 0288 17D9     		bls	.L65
 1422 028a C5F34F13 		ubfx	r3, r5, #5, #16
 1423              	.LVL114:
 1424 028e EE06     		lsls	r6, r5, #27
 1425 0290 04BF     		itt	eq
 1426 0292 03F1FF33 		addeq	r3, r3, #-1
 1427              	.LVL115:
 1428 0296 9BB2     		uxtheq	r3, r3
 1429              	.LVL116:
 1430 0298 49EA8323 		orr	r3, r9, r3, lsl #10
 1431              	.LVL117:
 1432              	.L135:
 1433 029c 9BB2     		uxth	r3, r3
 1434 029e 40F81130 		str	r3, [r0, r1, lsl #1]
 1435              	.LBE22:
 1436              	.LBE24:
 1437              	.LBB25:
1284:c/stm32f1xx_hal_pcd.c ****         }
 1438              		.loc 1 1284 0
 1439 02a2 1388     		ldrh	r3, [r2]
 1440 02a4 9BB2     		uxth	r3, r3
 1441 02a6 03EA0803 		and	r3, r3, r8
 1442              	.LVL118:
 1443 02aa 83F44053 		eor	r3, r3, #12288
 1444              	.LVL119:
 1445 02ae 43F40043 		orr	r3, r3, #32768
 1446              	.LVL120:
 1447 02b2 43F08003 		orr	r3, r3, #128
 1448 02b6 1380     		strh	r3, [r2]	@ movhi
 1449 02b8 4DE7     		b	.L57
 1450              	.L65:
 1451              	.LBE25:
 1452              	.LBB26:
 1453              	.LBB23:
1283:c/stm32f1xx_hal_pcd.c ****           PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 1454              		.loc 1 1283 0
 1455 02ba C5F34F03 		ubfx	r3, r5, #1, #16
 1456              	.LVL121:
 1457 02be ED07     		lsls	r5, r5, #31
 1458 02c0 44BF     		itt	mi
 1459 02c2 0133     		addmi	r3, r3, #1
 1460              	.LVL122:
 1461 02c4 9BB2     		uxthmi	r3, r3
 1462              	.LVL123:
 1463 02c6 9B02     		lsls	r3, r3, #10
 1464              	.LVL124:
 1465 02c8 E8E7     		b	.L135
 1466              	.LVL125:
 1467              	.L58:
 1468              	.LBE23:
 1469              	.LBE26:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 52


1293:c/stm32f1xx_hal_pcd.c ****       if ((wEPVal & USB_EP_CTR_RX) != 0U)
 1470              		.loc 1 1293 0
 1471 02ca 30F82530 		ldrh	r3, [r0, r5, lsl #2]
 1472 02ce 9BB2     		uxth	r3, r3
 1473 02d0 ADF80630 		strh	r3, [sp, #6]	@ movhi
1294:c/stm32f1xx_hal_pcd.c ****       {  
 1474              		.loc 1 1294 0
 1475 02d4 BDF80630 		ldrh	r3, [sp, #6]
 1476 02d8 1904     		lsls	r1, r3, #16
 1477 02da 3FD5     		bpl	.L69
1297:c/stm32f1xx_hal_pcd.c ****         ep = &hpcd->OUT_ep[epindex];
 1478              		.loc 1 1297 0
 1479 02dc 30F82530 		ldrh	r3, [r0, r5, lsl #2]
1301:c/stm32f1xx_hal_pcd.c ****         {
 1480              		.loc 1 1301 0
 1481 02e0 4FEA451A 		lsl	r10, r5, #5
1297:c/stm32f1xx_hal_pcd.c ****         ep = &hpcd->OUT_ep[epindex];
 1482              		.loc 1 1297 0
 1483 02e4 23F07003 		bic	r3, r3, #112
 1484 02e8 1B05     		lsls	r3, r3, #20
 1485 02ea 1B0D     		lsrs	r3, r3, #20
 1486 02ec 20F82530 		strh	r3, [r0, r5, lsl #2]	@ movhi
 1487              	.LVL126:
1301:c/stm32f1xx_hal_pcd.c ****         {
 1488              		.loc 1 1301 0
 1489 02f0 04EB0A01 		add	r1, r4, r10
 1490 02f4 91F83232 		ldrb	r3, [r1, #562]	@ zero_extendqisi2
 1491 02f8 002B     		cmp	r3, #0
 1492 02fa 74D1     		bne	.L70
1303:c/stm32f1xx_hal_pcd.c ****           if (count != 0U)
 1493              		.loc 1 1303 0
 1494 02fc B0F85030 		ldrh	r3, [r0, #80]
 1495 0300 91F82822 		ldrb	r2, [r1, #552]	@ zero_extendqisi2
 1496 0304 9BB2     		uxth	r3, r3
 1497 0306 0633     		adds	r3, r3, #6
 1498 0308 03EBC203 		add	r3, r3, r2, lsl #3
 1499 030c 00EB4303 		add	r3, r0, r3, lsl #1
 1500 0310 D3F80064 		ldr	r6, [r3, #1024]
 1501 0314 C6F30906 		ubfx	r6, r6, #0, #10
 1502              	.LVL127:
1304:c/stm32f1xx_hal_pcd.c ****           {
 1503              		.loc 1 1304 0
 1504 0318 36B1     		cbz	r6, .L71
1306:c/stm32f1xx_hal_pcd.c ****           }
 1505              		.loc 1 1306 0
 1506 031a B1F82C22 		ldrh	r2, [r1, #556]
 1507 031e 3346     		mov	r3, r6
 1508 0320 D1F83C12 		ldr	r1, [r1, #572]
 1509 0324 FFF7FEFF 		bl	USB_ReadPMA
 1510              	.LVL128:
 1511              	.L71:
 1512 0328 04EB0A01 		add	r1, r4, r10
1332:c/stm32f1xx_hal_pcd.c ****         ep->xfer_buff+=count;
 1513              		.loc 1 1332 0
 1514 032c D1F84432 		ldr	r3, [r1, #580]
1333:c/stm32f1xx_hal_pcd.c ****        
 1515              		.loc 1 1333 0
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 53


 1516 0330 D1F83C22 		ldr	r2, [r1, #572]
1332:c/stm32f1xx_hal_pcd.c ****         ep->xfer_buff+=count;
 1517              		.loc 1 1332 0
 1518 0334 3344     		add	r3, r3, r6
 1519 0336 C1F84432 		str	r3, [r1, #580]
1335:c/stm32f1xx_hal_pcd.c ****         {
 1520              		.loc 1 1335 0
 1521 033a D1F84032 		ldr	r3, [r1, #576]
1333:c/stm32f1xx_hal_pcd.c ****        
 1522              		.loc 1 1333 0
 1523 033e 3244     		add	r2, r2, r6
 1524 0340 C1F83C22 		str	r2, [r1, #572]
1335:c/stm32f1xx_hal_pcd.c ****         {
 1525              		.loc 1 1335 0
 1526 0344 23B1     		cbz	r3, .L74
 1527 0346 D1F83802 		ldr	r0, [r1, #568]
 1528 034a 8642     		cmp	r6, r0
 1529 034c 80F08680 		bcs	.L75
 1530              	.L74:
1338:c/stm32f1xx_hal_pcd.c ****         }
 1531              		.loc 1 1338 0
 1532 0350 A244     		add	r10, r10, r4
 1533 0352 9AF82812 		ldrb	r1, [r10, #552]	@ zero_extendqisi2
 1534 0356 2046     		mov	r0, r4
 1535 0358 FFF7FEFF 		bl	HAL_PCD_DataOutStageCallback
 1536              	.LVL129:
 1537              	.L69:
1347:c/stm32f1xx_hal_pcd.c ****       {
 1538              		.loc 1 1347 0
 1539 035c BDF80630 		ldrh	r3, [sp, #6]
 1540 0360 1A06     		lsls	r2, r3, #24
 1541 0362 7FF5F8AE 		bpl	.L57
 1542              	.LVL130:
 1543              		.loc 1 1352 0
 1544 0366 2068     		ldr	r0, [r4]
1353:c/stm32f1xx_hal_pcd.c ****         
1354:c/stm32f1xx_hal_pcd.c ****         /* IN double Buffering*/
1355:c/stm32f1xx_hal_pcd.c ****         if (ep->doublebuffer == 0U)
 1545              		.loc 1 1355 0
 1546 0368 6E01     		lsls	r6, r5, #5
1352:c/stm32f1xx_hal_pcd.c ****         
 1547              		.loc 1 1352 0
 1548 036a 30F82530 		ldrh	r3, [r0, r5, lsl #2]
 1549              		.loc 1 1355 0
 1550 036e A119     		adds	r1, r4, r6
1352:c/stm32f1xx_hal_pcd.c ****         
 1551              		.loc 1 1352 0
 1552 0370 9BB2     		uxth	r3, r3
 1553 0372 3B40     		ands	r3, r3, r7
 1554 0374 20F82530 		strh	r3, [r0, r5, lsl #2]	@ movhi
 1555              		.loc 1 1355 0
 1556 0378 91F83230 		ldrb	r3, [r1, #50]	@ zero_extendqisi2
 1557 037c 0235     		adds	r5, r5, #2
 1558              	.LVL131:
 1559 037e 002B     		cmp	r3, #0
 1560 0380 78D1     		bne	.L76
1356:c/stm32f1xx_hal_pcd.c ****         {
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 54


1357:c/stm32f1xx_hal_pcd.c ****           ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 1561              		.loc 1 1357 0
 1562 0382 B0F85030 		ldrh	r3, [r0, #80]
 1563 0386 91F82820 		ldrb	r2, [r1, #40]	@ zero_extendqisi2
 1564 038a 9BB2     		uxth	r3, r3
 1565 038c 0233     		adds	r3, r3, #2
 1566 038e 03EBC203 		add	r3, r3, r2, lsl #3
 1567 0392 00EB4303 		add	r3, r0, r3, lsl #1
 1568 0396 D3F80034 		ldr	r3, [r3, #1024]
 1569 039a 04EB4515 		add	r5, r4, r5, lsl #5
 1570              	.LVL132:
 1571 039e C3F30903 		ubfx	r3, r3, #0, #10
 1572 03a2 6B60     		str	r3, [r5, #4]
1358:c/stm32f1xx_hal_pcd.c ****           if (ep->xfer_count != 0U)
 1573              		.loc 1 1358 0
 1574 03a4 1BB1     		cbz	r3, .L77
1359:c/stm32f1xx_hal_pcd.c ****           {
1360:c/stm32f1xx_hal_pcd.c ****             USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 1575              		.loc 1 1360 0
 1576 03a6 8A8D     		ldrh	r2, [r1, #44]
 1577 03a8 C96B     		ldr	r1, [r1, #60]
 1578 03aa FFF7FEFF 		bl	USB_WritePMA
 1579              	.LVL133:
 1580              	.L77:
1361:c/stm32f1xx_hal_pcd.c ****           }
1362:c/stm32f1xx_hal_pcd.c ****         }
1363:c/stm32f1xx_hal_pcd.c ****         else
1364:c/stm32f1xx_hal_pcd.c ****         {
1365:c/stm32f1xx_hal_pcd.c ****           if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
1366:c/stm32f1xx_hal_pcd.c ****           {
1367:c/stm32f1xx_hal_pcd.c ****             /*read from endpoint BUF0Addr buffer*/
1368:c/stm32f1xx_hal_pcd.c ****             ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
1369:c/stm32f1xx_hal_pcd.c ****             if (ep->xfer_count != 0U)
1370:c/stm32f1xx_hal_pcd.c ****             {
1371:c/stm32f1xx_hal_pcd.c ****               USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
1372:c/stm32f1xx_hal_pcd.c ****             }
1373:c/stm32f1xx_hal_pcd.c ****           }
1374:c/stm32f1xx_hal_pcd.c ****           else
1375:c/stm32f1xx_hal_pcd.c ****           {
1376:c/stm32f1xx_hal_pcd.c ****             /*read from endpoint BUF1Addr buffer*/
1377:c/stm32f1xx_hal_pcd.c ****             ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
1378:c/stm32f1xx_hal_pcd.c ****             if (ep->xfer_count != 0U)
1379:c/stm32f1xx_hal_pcd.c ****             {
1380:c/stm32f1xx_hal_pcd.c ****               USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
1381:c/stm32f1xx_hal_pcd.c ****             }
1382:c/stm32f1xx_hal_pcd.c ****           }
1383:c/stm32f1xx_hal_pcd.c ****           PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
1384:c/stm32f1xx_hal_pcd.c ****         }
1385:c/stm32f1xx_hal_pcd.c ****         /*multi-packet on the NON control IN endpoint*/
1386:c/stm32f1xx_hal_pcd.c ****         ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 1581              		.loc 1 1386 0
 1582 03ae 2268     		ldr	r2, [r4]
 1583 03b0 2644     		add	r6, r6, r4
 1584 03b2 B2F85030 		ldrh	r3, [r2, #80]
 1585 03b6 96F82810 		ldrb	r1, [r6, #40]	@ zero_extendqisi2
 1586 03ba 9BB2     		uxth	r3, r3
 1587 03bc 0233     		adds	r3, r3, #2
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 55


 1588 03be 03EBC103 		add	r3, r3, r1, lsl #3
 1589 03c2 02EB4303 		add	r3, r2, r3, lsl #1
 1590 03c6 D3F80024 		ldr	r2, [r3, #1024]
1387:c/stm32f1xx_hal_pcd.c ****         ep->xfer_buff+=ep->xfer_count;
 1591              		.loc 1 1387 0
 1592 03ca F36B     		ldr	r3, [r6, #60]
1386:c/stm32f1xx_hal_pcd.c ****         ep->xfer_buff+=ep->xfer_count;
 1593              		.loc 1 1386 0
 1594 03cc C2F30902 		ubfx	r2, r2, #0, #10
 1595 03d0 7264     		str	r2, [r6, #68]
 1596              		.loc 1 1387 0
 1597 03d2 1A44     		add	r2, r2, r3
1388:c/stm32f1xx_hal_pcd.c ****        
1389:c/stm32f1xx_hal_pcd.c ****         /* Zero Length Packet? */
1390:c/stm32f1xx_hal_pcd.c ****         if (ep->xfer_len == 0U)
 1598              		.loc 1 1390 0
 1599 03d4 336C     		ldr	r3, [r6, #64]
1387:c/stm32f1xx_hal_pcd.c ****        
 1600              		.loc 1 1387 0
 1601 03d6 F263     		str	r2, [r6, #60]
1391:c/stm32f1xx_hal_pcd.c ****         {
1392:c/stm32f1xx_hal_pcd.c ****           /* TX COMPLETE */
1393:c/stm32f1xx_hal_pcd.c ****           HAL_PCD_DataInStageCallback(hpcd, ep->num);
 1602              		.loc 1 1393 0
 1603 03d8 2046     		mov	r0, r4
1390:c/stm32f1xx_hal_pcd.c ****         {
 1604              		.loc 1 1390 0
 1605 03da 002B     		cmp	r3, #0
 1606 03dc 40F08580 		bne	.L82
 1607              	.LVL134:
 1608              		.loc 1 1393 0
 1609 03e0 FFF7FEFF 		bl	HAL_PCD_DataInStageCallback
 1610              	.LVL135:
 1611 03e4 B7E6     		b	.L57
 1612              	.LVL136:
 1613              	.L70:
1311:c/stm32f1xx_hal_pcd.c ****           {
 1614              		.loc 1 1311 0
 1615 03e6 91F82832 		ldrb	r3, [r1, #552]	@ zero_extendqisi2
 1616 03ea 30F82320 		ldrh	r2, [r0, r3, lsl #2]
 1617 03ee DB00     		lsls	r3, r3, #3
 1618 03f0 12F4804F 		tst	r2, #16384
1314:c/stm32f1xx_hal_pcd.c ****             if (count != 0U)
 1619              		.loc 1 1314 0
 1620 03f4 B0F85020 		ldrh	r2, [r0, #80]
 1621 03f8 92B2     		uxth	r2, r2
1311:c/stm32f1xx_hal_pcd.c ****           {
 1622              		.loc 1 1311 0
 1623 03fa 21D0     		beq	.L72
1314:c/stm32f1xx_hal_pcd.c ****             if (count != 0U)
 1624              		.loc 1 1314 0
 1625 03fc 0232     		adds	r2, r2, #2
 1626 03fe 1344     		add	r3, r3, r2
 1627 0400 00EB4303 		add	r3, r0, r3, lsl #1
 1628 0404 D3F80064 		ldr	r6, [r3, #1024]
 1629 0408 C6F30906 		ubfx	r6, r6, #0, #10
 1630              	.LVL137:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 56


1315:c/stm32f1xx_hal_pcd.c ****             {
 1631              		.loc 1 1315 0
 1632 040c 36B1     		cbz	r6, .L73
1317:c/stm32f1xx_hal_pcd.c ****             }
 1633              		.loc 1 1317 0
 1634 040e 3346     		mov	r3, r6
 1635 0410 B1F82E22 		ldrh	r2, [r1, #558]
 1636              	.L136:
1326:c/stm32f1xx_hal_pcd.c ****             }
 1637              		.loc 1 1326 0
 1638 0414 D1F83C12 		ldr	r1, [r1, #572]
 1639 0418 FFF7FEFF 		bl	USB_ReadPMA
 1640              	.LVL138:
 1641              	.L73:
1329:c/stm32f1xx_hal_pcd.c ****         }
 1642              		.loc 1 1329 0
 1643 041c 04EB0A03 		add	r3, r4, r10
 1644 0420 93F82812 		ldrb	r1, [r3, #552]	@ zero_extendqisi2
 1645 0424 2268     		ldr	r2, [r4]
 1646 0426 32F82130 		ldrh	r3, [r2, r1, lsl #2]
 1647 042a 23F0F003 		bic	r3, r3, #240
 1648 042e 1B05     		lsls	r3, r3, #20
 1649 0430 1B0D     		lsrs	r3, r3, #20
 1650 0432 43F40043 		orr	r3, r3, #32768
 1651 0436 43F0C003 		orr	r3, r3, #192
 1652 043a 22F82130 		strh	r3, [r2, r1, lsl #2]	@ movhi
 1653 043e 73E7     		b	.L71
 1654              	.LVL139:
 1655              	.L72:
1323:c/stm32f1xx_hal_pcd.c ****             if (count != 0U)
 1656              		.loc 1 1323 0
 1657 0440 0632     		adds	r2, r2, #6
 1658 0442 1344     		add	r3, r3, r2
 1659 0444 00EB4303 		add	r3, r0, r3, lsl #1
 1660 0448 D3F80064 		ldr	r6, [r3, #1024]
 1661 044c C6F30906 		ubfx	r6, r6, #0, #10
 1662              	.LVL140:
1324:c/stm32f1xx_hal_pcd.c ****             {
 1663              		.loc 1 1324 0
 1664 0450 002E     		cmp	r6, #0
 1665 0452 E3D0     		beq	.L73
1326:c/stm32f1xx_hal_pcd.c ****             }
 1666              		.loc 1 1326 0
 1667 0454 3346     		mov	r3, r6
 1668 0456 B1F83022 		ldrh	r2, [r1, #560]
 1669 045a DBE7     		b	.L136
 1670              	.L75:
1342:c/stm32f1xx_hal_pcd.c ****         }
 1671              		.loc 1 1342 0
 1672 045c 91F82812 		ldrb	r1, [r1, #552]	@ zero_extendqisi2
 1673 0460 2046     		mov	r0, r4
 1674 0462 FFF7FEFF 		bl	HAL_PCD_EP_Receive
 1675              	.LVL141:
 1676 0466 79E7     		b	.L69
 1677              	.L139:
 1678              		.align	2
 1679              	.L138:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 57


 1680 0468 0F8FFFFF 		.word	-28913
 1681 046c 8FBFFFFF 		.word	-16497
 1682 0470 0080FFFF 		.word	-32768
 1683              	.LVL142:
 1684              	.L76:
1365:c/stm32f1xx_hal_pcd.c ****           {
 1685              		.loc 1 1365 0
 1686 0474 91F82830 		ldrb	r3, [r1, #40]	@ zero_extendqisi2
 1687 0478 30F82320 		ldrh	r2, [r0, r3, lsl #2]
 1688 047c DB00     		lsls	r3, r3, #3
 1689 047e 12F0400F 		tst	r2, #64
1368:c/stm32f1xx_hal_pcd.c ****             if (ep->xfer_count != 0U)
 1690              		.loc 1 1368 0
 1691 0482 B0F85020 		ldrh	r2, [r0, #80]
 1692 0486 92B2     		uxth	r2, r2
1365:c/stm32f1xx_hal_pcd.c ****           {
 1693              		.loc 1 1365 0
 1694 0488 20D0     		beq	.L78
1368:c/stm32f1xx_hal_pcd.c ****             if (ep->xfer_count != 0U)
 1695              		.loc 1 1368 0
 1696 048a 0232     		adds	r2, r2, #2
 1697 048c 1344     		add	r3, r3, r2
 1698 048e 00EB4303 		add	r3, r0, r3, lsl #1
 1699 0492 D3F80034 		ldr	r3, [r3, #1024]
 1700 0496 04EB4515 		add	r5, r4, r5, lsl #5
 1701              	.LVL143:
 1702 049a C3F30903 		ubfx	r3, r3, #0, #10
 1703 049e 6B60     		str	r3, [r5, #4]
1369:c/stm32f1xx_hal_pcd.c ****             {
 1704              		.loc 1 1369 0
 1705 04a0 1BB1     		cbz	r3, .L80
1371:c/stm32f1xx_hal_pcd.c ****             }
 1706              		.loc 1 1371 0
 1707 04a2 CA8D     		ldrh	r2, [r1, #46]
 1708              	.L137:
1380:c/stm32f1xx_hal_pcd.c ****             }
 1709              		.loc 1 1380 0
 1710 04a4 C96B     		ldr	r1, [r1, #60]
 1711 04a6 FFF7FEFF 		bl	USB_WritePMA
 1712              	.LVL144:
 1713              	.L80:
1383:c/stm32f1xx_hal_pcd.c ****         }
 1714              		.loc 1 1383 0
 1715 04aa A319     		adds	r3, r4, r6
 1716 04ac 93F82810 		ldrb	r1, [r3, #40]	@ zero_extendqisi2
 1717 04b0 2268     		ldr	r2, [r4]
 1718 04b2 32F82130 		ldrh	r3, [r2, r1, lsl #2]
 1719 04b6 23F0F003 		bic	r3, r3, #240
 1720 04ba 1B05     		lsls	r3, r3, #20
 1721 04bc 1B0D     		lsrs	r3, r3, #20
 1722 04be 43F44043 		orr	r3, r3, #49152
 1723 04c2 43F08003 		orr	r3, r3, #128
 1724 04c6 22F82130 		strh	r3, [r2, r1, lsl #2]	@ movhi
 1725 04ca 70E7     		b	.L77
 1726              	.LVL145:
 1727              	.L78:
1377:c/stm32f1xx_hal_pcd.c ****             if (ep->xfer_count != 0U)
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 58


 1728              		.loc 1 1377 0
 1729 04cc 0632     		adds	r2, r2, #6
 1730 04ce 1344     		add	r3, r3, r2
 1731 04d0 00EB4303 		add	r3, r0, r3, lsl #1
 1732 04d4 D3F80034 		ldr	r3, [r3, #1024]
 1733 04d8 04EB4515 		add	r5, r4, r5, lsl #5
 1734              	.LVL146:
 1735 04dc C3F30903 		ubfx	r3, r3, #0, #10
 1736 04e0 6B60     		str	r3, [r5, #4]
1378:c/stm32f1xx_hal_pcd.c ****             {
 1737              		.loc 1 1378 0
 1738 04e2 002B     		cmp	r3, #0
 1739 04e4 E1D0     		beq	.L80
1380:c/stm32f1xx_hal_pcd.c ****             }
 1740              		.loc 1 1380 0
 1741 04e6 0A8E     		ldrh	r2, [r1, #48]
 1742 04e8 DCE7     		b	.L137
 1743              	.LVL147:
 1744              	.L82:
1394:c/stm32f1xx_hal_pcd.c ****         }
1395:c/stm32f1xx_hal_pcd.c ****         else
1396:c/stm32f1xx_hal_pcd.c ****         {
1397:c/stm32f1xx_hal_pcd.c ****           HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 1745              		.loc 1 1397 0
 1746 04ea FFF7FEFF 		bl	HAL_PCD_EP_Transmit
 1747              	.LVL148:
 1748 04ee 32E6     		b	.L57
 1749              	.LBE16:
 1750              	.LBE15:
 1751              		.cfi_endproc
 1752              	.LFE70:
 1754              		.section	.text.HAL_PCD_EP_SetStall,"ax",%progbits
 1755              		.align	1
 1756              		.global	HAL_PCD_EP_SetStall
 1757              		.syntax unified
 1758              		.thumb
 1759              		.thumb_func
 1760              		.fpu softvfp
 1762              	HAL_PCD_EP_SetStall:
 1763              	.LFB90:
1002:c/stm32f1xx_hal_pcd.c ****   PCD_EPTypeDef *ep = NULL;
 1764              		.loc 1 1002 0
 1765              		.cfi_startproc
 1766              		@ args = 0, pretend = 0, frame = 0
 1767              		@ frame_needed = 0, uses_anonymous_args = 0
 1768              	.LVL149:
1014:c/stm32f1xx_hal_pcd.c ****   ep->num   = ep_addr & 0x7FU;
 1769              		.loc 1 1014 0
 1770 0000 0122     		movs	r2, #1
1002:c/stm32f1xx_hal_pcd.c ****   PCD_EPTypeDef *ep = NULL;
 1771              		.loc 1 1002 0
 1772 0002 38B5     		push	{r3, r4, r5, lr}
 1773              		.cfi_def_cfa_offset 16
 1774              		.cfi_offset 3, -16
 1775              		.cfi_offset 4, -12
 1776              		.cfi_offset 5, -8
 1777              		.cfi_offset 14, -4
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 59


1005:c/stm32f1xx_hal_pcd.c ****   {
 1778              		.loc 1 1005 0
 1779 0004 4BB2     		sxtb	r3, r1
 1780 0006 002B     		cmp	r3, #0
 1781 0008 01F07F05 		and	r5, r1, #127
1007:c/stm32f1xx_hal_pcd.c ****   }
 1782              		.loc 1 1007 0
 1783 000c B5BF     		itete	lt
 1784 000e 00EB4511 		addlt	r1, r0, r5, lsl #5
 1785              	.LVL150:
1011:c/stm32f1xx_hal_pcd.c ****   }
 1786              		.loc 1 1011 0
 1787 0012 00EB4111 		addge	r1, r0, r1, lsl #5
1007:c/stm32f1xx_hal_pcd.c ****   }
 1788              		.loc 1 1007 0
 1789 0016 2831     		addlt	r1, r1, #40
 1790              	.LVL151:
1011:c/stm32f1xx_hal_pcd.c ****   }
 1791              		.loc 1 1011 0
 1792 0018 01F50A71 		addge	r1, r1, #552
 1793              	.LVL152:
1016:c/stm32f1xx_hal_pcd.c ****   
 1794              		.loc 1 1016 0
 1795 001c DB0F     		lsrs	r3, r3, #31
 1796              	.LVL153:
1015:c/stm32f1xx_hal_pcd.c ****   ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 1797              		.loc 1 1015 0
 1798 001e EDB2     		uxtb	r5, r5
1014:c/stm32f1xx_hal_pcd.c ****   ep->num   = ep_addr & 0x7FU;
 1799              		.loc 1 1014 0
 1800 0020 8A70     		strb	r2, [r1, #2]
1015:c/stm32f1xx_hal_pcd.c ****   ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 1801              		.loc 1 1015 0
 1802 0022 0D70     		strb	r5, [r1]
1016:c/stm32f1xx_hal_pcd.c ****   
 1803              		.loc 1 1016 0
 1804 0024 4B70     		strb	r3, [r1, #1]
1018:c/stm32f1xx_hal_pcd.c ****   USB_EPSetStall(hpcd->Instance , ep);
 1805              		.loc 1 1018 0
 1806 0026 90F82834 		ldrb	r3, [r0, #1064]	@ zero_extendqisi2
1002:c/stm32f1xx_hal_pcd.c ****   PCD_EPTypeDef *ep = NULL;
 1807              		.loc 1 1002 0
 1808 002a 0446     		mov	r4, r0
1018:c/stm32f1xx_hal_pcd.c ****   USB_EPSetStall(hpcd->Instance , ep);
 1809              		.loc 1 1018 0
 1810 002c 9342     		cmp	r3, r2
 1811 002e 0ED0     		beq	.L145
1018:c/stm32f1xx_hal_pcd.c ****   USB_EPSetStall(hpcd->Instance , ep);
 1812              		.loc 1 1018 0 is_stmt 0 discriminator 2
 1813 0030 80F82824 		strb	r2, [r0, #1064]
1019:c/stm32f1xx_hal_pcd.c ****   if((ep_addr & 0x7FU) == 0U)
 1814              		.loc 1 1019 0 is_stmt 1 discriminator 2
 1815 0034 0068     		ldr	r0, [r0]
 1816              	.LVL154:
 1817 0036 FFF7FEFF 		bl	USB_EPSetStall
 1818              	.LVL155:
1020:c/stm32f1xx_hal_pcd.c ****   {
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 60


 1819              		.loc 1 1020 0 discriminator 2
 1820 003a 25B9     		cbnz	r5, .L144
1022:c/stm32f1xx_hal_pcd.c ****   }
 1821              		.loc 1 1022 0
 1822 003c 04F22C41 		addw	r1, r4, #1068
 1823 0040 2068     		ldr	r0, [r4]
 1824 0042 FFF7FEFF 		bl	USB_EP0_OutStart
 1825              	.LVL156:
 1826              	.L144:
1024:c/stm32f1xx_hal_pcd.c ****   
 1827              		.loc 1 1024 0
 1828 0046 0020     		movs	r0, #0
 1829 0048 84F82804 		strb	r0, [r4, #1064]
1026:c/stm32f1xx_hal_pcd.c **** }
 1830              		.loc 1 1026 0
 1831 004c 38BD     		pop	{r3, r4, r5, pc}
 1832              	.LVL157:
 1833              	.L145:
1018:c/stm32f1xx_hal_pcd.c ****   USB_EPSetStall(hpcd->Instance , ep);
 1834              		.loc 1 1018 0
 1835 004e 0220     		movs	r0, #2
 1836              	.LVL158:
1027:c/stm32f1xx_hal_pcd.c **** 
 1837              		.loc 1 1027 0
 1838 0050 38BD     		pop	{r3, r4, r5, pc}
 1839              		.cfi_endproc
 1840              	.LFE90:
 1842              		.section	.text.HAL_PCD_EP_ClrStall,"ax",%progbits
 1843              		.align	1
 1844              		.global	HAL_PCD_EP_ClrStall
 1845              		.syntax unified
 1846              		.thumb
 1847              		.thumb_func
 1848              		.fpu softvfp
 1850              	HAL_PCD_EP_ClrStall:
 1851              	.LFB91:
1036:c/stm32f1xx_hal_pcd.c ****   PCD_EPTypeDef *ep = NULL;
 1852              		.loc 1 1036 0
 1853              		.cfi_startproc
 1854              		@ args = 0, pretend = 0, frame = 0
 1855              		@ frame_needed = 0, uses_anonymous_args = 0
 1856              	.LVL159:
 1857 0000 38B5     		push	{r3, r4, r5, lr}
 1858              		.cfi_def_cfa_offset 16
 1859              		.cfi_offset 3, -16
 1860              		.cfi_offset 4, -12
 1861              		.cfi_offset 5, -8
 1862              		.cfi_offset 14, -4
1048:c/stm32f1xx_hal_pcd.c ****   ep->num   = ep_addr & 0x7FU;
 1863              		.loc 1 1048 0
 1864 0002 0024     		movs	r4, #0
1039:c/stm32f1xx_hal_pcd.c ****   {
 1865              		.loc 1 1039 0
 1866 0004 4BB2     		sxtb	r3, r1
 1867 0006 002B     		cmp	r3, #0
 1868 0008 01F07F02 		and	r2, r1, #127
1041:c/stm32f1xx_hal_pcd.c ****   }
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 61


 1869              		.loc 1 1041 0
 1870 000c B5BF     		itete	lt
 1871 000e 00EB4211 		addlt	r1, r0, r2, lsl #5
 1872              	.LVL160:
1045:c/stm32f1xx_hal_pcd.c ****   }
 1873              		.loc 1 1045 0
 1874 0012 00EB4111 		addge	r1, r0, r1, lsl #5
1041:c/stm32f1xx_hal_pcd.c ****   }
 1875              		.loc 1 1041 0
 1876 0016 2831     		addlt	r1, r1, #40
 1877              	.LVL161:
1045:c/stm32f1xx_hal_pcd.c ****   }
 1878              		.loc 1 1045 0
 1879 0018 01F50A71 		addge	r1, r1, #552
 1880              	.LVL162:
1050:c/stm32f1xx_hal_pcd.c ****   
 1881              		.loc 1 1050 0
 1882 001c DB0F     		lsrs	r3, r3, #31
 1883              	.LVL163:
1048:c/stm32f1xx_hal_pcd.c ****   ep->num   = ep_addr & 0x7FU;
 1884              		.loc 1 1048 0
 1885 001e 8C70     		strb	r4, [r1, #2]
1049:c/stm32f1xx_hal_pcd.c ****   ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 1886              		.loc 1 1049 0
 1887 0020 0A70     		strb	r2, [r1]
1050:c/stm32f1xx_hal_pcd.c ****   
 1888              		.loc 1 1050 0
 1889 0022 4B70     		strb	r3, [r1, #1]
1052:c/stm32f1xx_hal_pcd.c ****   USB_EPClearStall(hpcd->Instance , ep);
 1890              		.loc 1 1052 0
 1891 0024 90F82834 		ldrb	r3, [r0, #1064]	@ zero_extendqisi2
1036:c/stm32f1xx_hal_pcd.c ****   PCD_EPTypeDef *ep = NULL;
 1892              		.loc 1 1036 0
 1893 0028 0546     		mov	r5, r0
1052:c/stm32f1xx_hal_pcd.c ****   USB_EPClearStall(hpcd->Instance , ep);
 1894              		.loc 1 1052 0
 1895 002a 012B     		cmp	r3, #1
 1896 002c 09D0     		beq	.L150
1052:c/stm32f1xx_hal_pcd.c ****   USB_EPClearStall(hpcd->Instance , ep);
 1897              		.loc 1 1052 0 is_stmt 0 discriminator 2
 1898 002e 0123     		movs	r3, #1
 1899 0030 80F82834 		strb	r3, [r0, #1064]
1053:c/stm32f1xx_hal_pcd.c ****   __HAL_UNLOCK(hpcd); 
 1900              		.loc 1 1053 0 is_stmt 1 discriminator 2
 1901 0034 0068     		ldr	r0, [r0]
 1902              	.LVL164:
 1903 0036 FFF7FEFF 		bl	USB_EPClearStall
 1904              	.LVL165:
1054:c/stm32f1xx_hal_pcd.c ****   
 1905              		.loc 1 1054 0 discriminator 2
 1906 003a 85F82844 		strb	r4, [r5, #1064]
1056:c/stm32f1xx_hal_pcd.c **** }
 1907              		.loc 1 1056 0 discriminator 2
 1908 003e 2046     		mov	r0, r4
 1909 0040 38BD     		pop	{r3, r4, r5, pc}
 1910              	.LVL166:
 1911              	.L150:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 62


1052:c/stm32f1xx_hal_pcd.c ****   USB_EPClearStall(hpcd->Instance , ep);
 1912              		.loc 1 1052 0
 1913 0042 0220     		movs	r0, #2
 1914              	.LVL167:
1057:c/stm32f1xx_hal_pcd.c **** 
 1915              		.loc 1 1057 0
 1916 0044 38BD     		pop	{r3, r4, r5, pc}
 1917              		.cfi_endproc
 1918              	.LFE91:
 1920              		.section	.text.HAL_PCD_EP_Flush,"ax",%progbits
 1921              		.align	1
 1922              		.global	HAL_PCD_EP_Flush
 1923              		.syntax unified
 1924              		.thumb
 1925              		.thumb_func
 1926              		.fpu softvfp
 1928              	HAL_PCD_EP_Flush:
 1929              	.LFB92:
1066:c/stm32f1xx_hal_pcd.c ****   __HAL_LOCK(hpcd);
 1930              		.loc 1 1066 0
 1931              		.cfi_startproc
 1932              		@ args = 0, pretend = 0, frame = 0
 1933              		@ frame_needed = 0, uses_anonymous_args = 0
 1934              	.LVL168:
1067:c/stm32f1xx_hal_pcd.c ****   
 1935              		.loc 1 1067 0
 1936 0000 90F82834 		ldrb	r3, [r0, #1064]	@ zero_extendqisi2
1066:c/stm32f1xx_hal_pcd.c ****   __HAL_LOCK(hpcd);
 1937              		.loc 1 1066 0
 1938 0004 10B5     		push	{r4, lr}
 1939              		.cfi_def_cfa_offset 8
 1940              		.cfi_offset 4, -8
 1941              		.cfi_offset 14, -4
1067:c/stm32f1xx_hal_pcd.c ****   
 1942              		.loc 1 1067 0
 1943 0006 012B     		cmp	r3, #1
1066:c/stm32f1xx_hal_pcd.c ****   __HAL_LOCK(hpcd);
 1944              		.loc 1 1066 0
 1945 0008 0446     		mov	r4, r0
1067:c/stm32f1xx_hal_pcd.c ****   
 1946              		.loc 1 1067 0
 1947 000a 11D0     		beq	.L155
1067:c/stm32f1xx_hal_pcd.c ****   
 1948              		.loc 1 1067 0 is_stmt 0 discriminator 2
 1949 000c 0123     		movs	r3, #1
 1950 000e 80F82834 		strb	r3, [r0, #1064]
1069:c/stm32f1xx_hal_pcd.c ****   {
 1951              		.loc 1 1069 0 is_stmt 1 discriminator 2
 1952 0012 0B06     		lsls	r3, r1, #24
 1953 0014 08D5     		bpl	.L153
1071:c/stm32f1xx_hal_pcd.c ****   }
 1954              		.loc 1 1071 0
 1955 0016 01F07F01 		and	r1, r1, #127
 1956              	.LVL169:
 1957 001a 0068     		ldr	r0, [r0]
 1958              	.LVL170:
 1959 001c FFF7FEFF 		bl	USB_FlushTxFifo
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 63


 1960              	.LVL171:
 1961              	.L154:
1078:c/stm32f1xx_hal_pcd.c ****   
 1962              		.loc 1 1078 0
 1963 0020 0020     		movs	r0, #0
 1964 0022 84F82804 		strb	r0, [r4, #1064]
1080:c/stm32f1xx_hal_pcd.c **** }
 1965              		.loc 1 1080 0
 1966 0026 10BD     		pop	{r4, pc}
 1967              	.LVL172:
 1968              	.L153:
1075:c/stm32f1xx_hal_pcd.c ****   }
 1969              		.loc 1 1075 0
 1970 0028 0068     		ldr	r0, [r0]
 1971              	.LVL173:
 1972 002a FFF7FEFF 		bl	USB_FlushRxFifo
 1973              	.LVL174:
 1974 002e F7E7     		b	.L154
 1975              	.LVL175:
 1976              	.L155:
1067:c/stm32f1xx_hal_pcd.c ****   
 1977              		.loc 1 1067 0
 1978 0030 0220     		movs	r0, #2
 1979              	.LVL176:
1081:c/stm32f1xx_hal_pcd.c **** 
 1980              		.loc 1 1081 0
 1981 0032 10BD     		pop	{r4, pc}
 1982              		.cfi_endproc
 1983              	.LFE92:
 1985              		.section	.text.HAL_PCD_ActivateRemoteWakeup,"ax",%progbits
 1986              		.align	1
 1987              		.global	HAL_PCD_ActivateRemoteWakeup
 1988              		.syntax unified
 1989              		.thumb
 1990              		.thumb_func
 1991              		.fpu softvfp
 1993              	HAL_PCD_ActivateRemoteWakeup:
 1994              	.LFB93:
1089:c/stm32f1xx_hal_pcd.c ****   return(USB_ActivateRemoteWakeup(hpcd->Instance));
 1995              		.loc 1 1089 0
 1996              		.cfi_startproc
 1997              		@ args = 0, pretend = 0, frame = 0
 1998              		@ frame_needed = 0, uses_anonymous_args = 0
 1999              		@ link register save eliminated.
 2000              	.LVL177:
1090:c/stm32f1xx_hal_pcd.c **** }
 2001              		.loc 1 1090 0
 2002 0000 0068     		ldr	r0, [r0]
 2003              	.LVL178:
 2004 0002 FFF7FEBF 		b	USB_ActivateRemoteWakeup
 2005              	.LVL179:
 2006              		.cfi_endproc
 2007              	.LFE93:
 2009              		.section	.text.HAL_PCD_DeActivateRemoteWakeup,"ax",%progbits
 2010              		.align	1
 2011              		.global	HAL_PCD_DeActivateRemoteWakeup
 2012              		.syntax unified
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 64


 2013              		.thumb
 2014              		.thumb_func
 2015              		.fpu softvfp
 2017              	HAL_PCD_DeActivateRemoteWakeup:
 2018              	.LFB94:
1099:c/stm32f1xx_hal_pcd.c ****   return(USB_DeActivateRemoteWakeup(hpcd->Instance));
 2019              		.loc 1 1099 0
 2020              		.cfi_startproc
 2021              		@ args = 0, pretend = 0, frame = 0
 2022              		@ frame_needed = 0, uses_anonymous_args = 0
 2023              		@ link register save eliminated.
 2024              	.LVL180:
1100:c/stm32f1xx_hal_pcd.c **** }
 2025              		.loc 1 1100 0
 2026 0000 0068     		ldr	r0, [r0]
 2027              	.LVL181:
 2028 0002 FFF7FEBF 		b	USB_DeActivateRemoteWakeup
 2029              	.LVL182:
 2030              		.cfi_endproc
 2031              	.LFE94:
 2033              		.section	.text.HAL_PCD_GetState,"ax",%progbits
 2034              		.align	1
 2035              		.global	HAL_PCD_GetState
 2036              		.syntax unified
 2037              		.thumb
 2038              		.thumb_func
 2039              		.fpu softvfp
 2041              	HAL_PCD_GetState:
 2042              	.LFB95:
1127:c/stm32f1xx_hal_pcd.c ****   return hpcd->State;
 2043              		.loc 1 1127 0
 2044              		.cfi_startproc
 2045              		@ args = 0, pretend = 0, frame = 0
 2046              		@ frame_needed = 0, uses_anonymous_args = 0
 2047              		@ link register save eliminated.
 2048              	.LVL183:
1128:c/stm32f1xx_hal_pcd.c **** }
 2049              		.loc 1 1128 0
 2050 0000 90F82904 		ldrb	r0, [r0, #1065]	@ zero_extendqisi2
 2051              	.LVL184:
1129:c/stm32f1xx_hal_pcd.c **** 
 2052              		.loc 1 1129 0
 2053 0004 7047     		bx	lr
 2054              		.cfi_endproc
 2055              	.LFE95:
 2057              		.text
 2058              	.Letext0:
 2059              		.file 2 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/machine/_
 2060              		.file 3 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_stdi
 2061              		.file 4 "c/core_cm3.h"
 2062              		.file 5 "c/system_stm32f1xx.h"
 2063              		.file 6 "c/stm32f103xb.h"
 2064              		.file 7 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/lock.
 2065              		.file 8 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_type
 2066              		.file 9 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/lib/gcc/arm-none-eabi/6.3.1/inc
 2067              		.file 10 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/reen
 2068              		.file 11 "c/stm32f1xx_hal_def.h"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 65


 2069              		.file 12 "c/stm32f1xx_ll_usb.h"
 2070              		.file 13 "c/stm32f1xx_hal_pcd.h"
 2071              		.file 14 "c/stm32f1xx_hal_pcd_ex.h"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 66


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_pcd.c
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:16     .text.HAL_PCD_MspInit:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:23     .text.HAL_PCD_MspInit:0000000000000000 HAL_PCD_MspInit
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:34     .text.HAL_PCD_Init:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:41     .text.HAL_PCD_Init:0000000000000000 HAL_PCD_Init
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:205    .text.HAL_PCD_MspDeInit:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:212    .text.HAL_PCD_MspDeInit:0000000000000000 HAL_PCD_MspDeInit
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:223    .text.HAL_PCD_Start:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:230    .text.HAL_PCD_Start:0000000000000000 HAL_PCD_Start
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:280    .text.HAL_PCD_Stop:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:287    .text.HAL_PCD_Stop:0000000000000000 HAL_PCD_Stop
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:343    .text.HAL_PCD_DeInit:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:350    .text.HAL_PCD_DeInit:0000000000000000 HAL_PCD_DeInit
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:390    .text.HAL_PCD_DataOutStageCallback:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:397    .text.HAL_PCD_DataOutStageCallback:0000000000000000 HAL_PCD_DataOutStageCallback
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:408    .text.HAL_PCD_DataInStageCallback:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:415    .text.HAL_PCD_DataInStageCallback:0000000000000000 HAL_PCD_DataInStageCallback
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:426    .text.HAL_PCD_SetupStageCallback:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:433    .text.HAL_PCD_SetupStageCallback:0000000000000000 HAL_PCD_SetupStageCallback
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:444    .text.HAL_PCD_SOFCallback:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:451    .text.HAL_PCD_SOFCallback:0000000000000000 HAL_PCD_SOFCallback
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:462    .text.HAL_PCD_ResetCallback:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:469    .text.HAL_PCD_ResetCallback:0000000000000000 HAL_PCD_ResetCallback
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:480    .text.HAL_PCD_SuspendCallback:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:487    .text.HAL_PCD_SuspendCallback:0000000000000000 HAL_PCD_SuspendCallback
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:498    .text.HAL_PCD_ResumeCallback:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:505    .text.HAL_PCD_ResumeCallback:0000000000000000 HAL_PCD_ResumeCallback
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:516    .text.HAL_PCD_ISOOUTIncompleteCallback:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:523    .text.HAL_PCD_ISOOUTIncompleteCallback:0000000000000000 HAL_PCD_ISOOUTIncompleteCallback
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:534    .text.HAL_PCD_ISOINIncompleteCallback:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:541    .text.HAL_PCD_ISOINIncompleteCallback:0000000000000000 HAL_PCD_ISOINIncompleteCallback
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:554    .text.HAL_PCD_ConnectCallback:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:561    .text.HAL_PCD_ConnectCallback:0000000000000000 HAL_PCD_ConnectCallback
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:572    .text.HAL_PCD_DisconnectCallback:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:579    .text.HAL_PCD_DisconnectCallback:0000000000000000 HAL_PCD_DisconnectCallback
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:592    .text.HAL_PCD_DevConnect:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:599    .text.HAL_PCD_DevConnect:0000000000000000 HAL_PCD_DevConnect
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:645    .text.HAL_PCD_DevDisconnect:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:652    .text.HAL_PCD_DevDisconnect:0000000000000000 HAL_PCD_DevDisconnect
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:701    .text.HAL_PCD_SetAddress:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:708    .text.HAL_PCD_SetAddress:0000000000000000 HAL_PCD_SetAddress
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:758    .text.HAL_PCD_EP_Open:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:765    .text.HAL_PCD_EP_Open:0000000000000000 HAL_PCD_EP_Open
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:839    .text.HAL_PCD_EP_Close:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:846    .text.HAL_PCD_EP_Close:0000000000000000 HAL_PCD_EP_Close
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:912    .text.HAL_PCD_EP_Receive:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:919    .text.HAL_PCD_EP_Receive:0000000000000000 HAL_PCD_EP_Receive
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:966    .text.HAL_PCD_EP_GetRxCount:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:973    .text.HAL_PCD_EP_GetRxCount:0000000000000000 HAL_PCD_EP_GetRxCount
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:993    .text.HAL_PCD_EP_Transmit:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:1000   .text.HAL_PCD_EP_Transmit:0000000000000000 HAL_PCD_EP_Transmit
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:1050   .text.HAL_PCD_IRQHandler:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:1057   .text.HAL_PCD_IRQHandler:0000000000000000 HAL_PCD_IRQHandler
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:1680   .text.HAL_PCD_IRQHandler:0000000000000468 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:1686   .text.HAL_PCD_IRQHandler:0000000000000474 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:1755   .text.HAL_PCD_EP_SetStall:0000000000000000 $t
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s 			page 67


/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:1762   .text.HAL_PCD_EP_SetStall:0000000000000000 HAL_PCD_EP_SetStall
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:1843   .text.HAL_PCD_EP_ClrStall:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:1850   .text.HAL_PCD_EP_ClrStall:0000000000000000 HAL_PCD_EP_ClrStall
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:1921   .text.HAL_PCD_EP_Flush:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:1928   .text.HAL_PCD_EP_Flush:0000000000000000 HAL_PCD_EP_Flush
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:1986   .text.HAL_PCD_ActivateRemoteWakeup:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:1993   .text.HAL_PCD_ActivateRemoteWakeup:0000000000000000 HAL_PCD_ActivateRemoteWakeup
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:2010   .text.HAL_PCD_DeActivateRemoteWakeup:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:2017   .text.HAL_PCD_DeActivateRemoteWakeup:0000000000000000 HAL_PCD_DeActivateRemoteWakeup
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:2034   .text.HAL_PCD_GetState:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxNWWxB.s:2041   .text.HAL_PCD_GetState:0000000000000000 HAL_PCD_GetState
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
USB_DisableGlobalInt
USB_CoreInit
USB_SetCurrentMode
USB_DevInit
USB_DevDisconnect
HAL_PCDEx_SetConnectionState
USB_DevConnect
USB_EnableGlobalInt
USB_StopDevice
USB_SetDevAddress
USB_ActivateEndpoint
USB_DeactivateEndpoint
USB_EPStartXfer
USB_ReadInterrupts
USB_ReadPMA
USB_WritePMA
USB_EPSetStall
USB_EP0_OutStart
USB_EPClearStall
USB_FlushTxFifo
USB_FlushRxFifo
USB_ActivateRemoteWakeup
USB_DeActivateRemoteWakeup
exit code: 0
OPT_LEVEL = Some("s")
HOST = Some("x86_64-apple-darwin")
CFLAGS_arm-none-eabi = None
CFLAGS_arm_none_eabi = None
TARGET_CFLAGS = None
CFLAGS = None
DEBUG = Some("true")
running: "arm-none-eabi-gcc" "-Os" "-ffunction-sections" "-fdata-sections" "-g" "-DSTM32F103xB" "-DUSE_HAL_DRIVER" "-mcpu=cortex-m3" "-mthumb" "-Wall" "-fdata-sections" "-ffunction-sections" "-Wa,-a,-ad" "-g" "-Wall" "-Wextra" "-o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/stm32f1xx_hal_pcd_ex.o" "-c" "c/stm32f1xx_hal_pcd_ex.c"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccDGVjES.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_hal_pcd_ex.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_PCDEx_PMAConfig,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_PCDEx_PMAConfig
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_PCDEx_PMAConfig:
  24              	.LFB64:
  25              		.file 1 "c/stm32f1xx_hal_pcd_ex.c"
   1:c/stm32f1xx_hal_pcd_ex.c **** /**
   2:c/stm32f1xx_hal_pcd_ex.c ****   ******************************************************************************
   3:c/stm32f1xx_hal_pcd_ex.c ****   * @file    stm32f1xx_hal_pcd_ex.c
   4:c/stm32f1xx_hal_pcd_ex.c ****   * @author  MCD Application Team
   5:c/stm32f1xx_hal_pcd_ex.c ****   * @version V1.1.1
   6:c/stm32f1xx_hal_pcd_ex.c ****   * @date    12-May-2017
   7:c/stm32f1xx_hal_pcd_ex.c ****   * @brief   Extended PCD HAL module driver.
   8:c/stm32f1xx_hal_pcd_ex.c ****   *          This file provides firmware functions to manage the following 
   9:c/stm32f1xx_hal_pcd_ex.c ****   *          functionalities of the USB Peripheral Controller:
  10:c/stm32f1xx_hal_pcd_ex.c ****   *           + Extended features functions: Update FIFO configuration, 
  11:c/stm32f1xx_hal_pcd_ex.c ****   *           PMA configuration for EPs  
  12:c/stm32f1xx_hal_pcd_ex.c ****   *
  13:c/stm32f1xx_hal_pcd_ex.c ****   ******************************************************************************
  14:c/stm32f1xx_hal_pcd_ex.c ****   * @attention
  15:c/stm32f1xx_hal_pcd_ex.c ****   *
  16:c/stm32f1xx_hal_pcd_ex.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  17:c/stm32f1xx_hal_pcd_ex.c ****   *
  18:c/stm32f1xx_hal_pcd_ex.c ****   * Redistribution and use in source and binary forms, with or without modification,
  19:c/stm32f1xx_hal_pcd_ex.c ****   * are permitted provided that the following conditions are met:
  20:c/stm32f1xx_hal_pcd_ex.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  21:c/stm32f1xx_hal_pcd_ex.c ****   *      this list of conditions and the following disclaimer.
  22:c/stm32f1xx_hal_pcd_ex.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  23:c/stm32f1xx_hal_pcd_ex.c ****   *      this list of conditions and the following disclaimer in the documentation
  24:c/stm32f1xx_hal_pcd_ex.c ****   *      and/or other materials provided with the distribution.
  25:c/stm32f1xx_hal_pcd_ex.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  26:c/stm32f1xx_hal_pcd_ex.c ****   *      may be used to endorse or promote products derived from this software
  27:c/stm32f1xx_hal_pcd_ex.c ****   *      without specific prior written permission.
  28:c/stm32f1xx_hal_pcd_ex.c ****   *
  29:c/stm32f1xx_hal_pcd_ex.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  30:c/stm32f1xx_hal_pcd_ex.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  31:c/stm32f1xx_hal_pcd_ex.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  32:c/stm32f1xx_hal_pcd_ex.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  33:c/stm32f1xx_hal_pcd_ex.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccDGVjES.s 			page 2


  34:c/stm32f1xx_hal_pcd_ex.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  35:c/stm32f1xx_hal_pcd_ex.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  36:c/stm32f1xx_hal_pcd_ex.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  37:c/stm32f1xx_hal_pcd_ex.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  38:c/stm32f1xx_hal_pcd_ex.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  39:c/stm32f1xx_hal_pcd_ex.c ****   *
  40:c/stm32f1xx_hal_pcd_ex.c ****   ******************************************************************************
  41:c/stm32f1xx_hal_pcd_ex.c ****   */
  42:c/stm32f1xx_hal_pcd_ex.c **** 
  43:c/stm32f1xx_hal_pcd_ex.c **** /* Includes ------------------------------------------------------------------*/
  44:c/stm32f1xx_hal_pcd_ex.c **** #include "stm32f1xx_hal.h"
  45:c/stm32f1xx_hal_pcd_ex.c **** 
  46:c/stm32f1xx_hal_pcd_ex.c **** /** @addtogroup STM32F1xx_HAL_Driver
  47:c/stm32f1xx_hal_pcd_ex.c ****   * @{
  48:c/stm32f1xx_hal_pcd_ex.c ****   */
  49:c/stm32f1xx_hal_pcd_ex.c **** 
  50:c/stm32f1xx_hal_pcd_ex.c **** #ifdef HAL_PCD_MODULE_ENABLED
  51:c/stm32f1xx_hal_pcd_ex.c **** 
  52:c/stm32f1xx_hal_pcd_ex.c **** #if defined(STM32F102x6) || defined(STM32F102xB) || \
  53:c/stm32f1xx_hal_pcd_ex.c ****     defined(STM32F103x6) || defined(STM32F103xB) || \
  54:c/stm32f1xx_hal_pcd_ex.c ****     defined(STM32F103xE) || defined(STM32F103xG) || \
  55:c/stm32f1xx_hal_pcd_ex.c ****     defined(STM32F105xC) || defined(STM32F107xC)
  56:c/stm32f1xx_hal_pcd_ex.c **** 
  57:c/stm32f1xx_hal_pcd_ex.c **** 
  58:c/stm32f1xx_hal_pcd_ex.c **** /** @defgroup PCDEx PCDEx
  59:c/stm32f1xx_hal_pcd_ex.c ****   * @brief PCD Extended HAL module driver
  60:c/stm32f1xx_hal_pcd_ex.c ****   * @{
  61:c/stm32f1xx_hal_pcd_ex.c ****   */
  62:c/stm32f1xx_hal_pcd_ex.c **** 
  63:c/stm32f1xx_hal_pcd_ex.c **** 
  64:c/stm32f1xx_hal_pcd_ex.c **** /* Private types -------------------------------------------------------------*/
  65:c/stm32f1xx_hal_pcd_ex.c **** /* Private variables ---------------------------------------------------------*/
  66:c/stm32f1xx_hal_pcd_ex.c **** /* Private constants ---------------------------------------------------------*/
  67:c/stm32f1xx_hal_pcd_ex.c **** /* Private macros ------------------------------------------------------------*/
  68:c/stm32f1xx_hal_pcd_ex.c **** /* Private functions ---------------------------------------------------------*/
  69:c/stm32f1xx_hal_pcd_ex.c **** /* Exported functions --------------------------------------------------------*/
  70:c/stm32f1xx_hal_pcd_ex.c **** /** @defgroup PCDEx_Exported_Functions PCDEx Exported Functions
  71:c/stm32f1xx_hal_pcd_ex.c ****   * @{
  72:c/stm32f1xx_hal_pcd_ex.c ****   */
  73:c/stm32f1xx_hal_pcd_ex.c **** 
  74:c/stm32f1xx_hal_pcd_ex.c **** /** @defgroup PCDEx_Exported_Functions_Group1 Peripheral Control functions
  75:c/stm32f1xx_hal_pcd_ex.c ****   * @brief    PCDEx control functions 
  76:c/stm32f1xx_hal_pcd_ex.c ****   *
  77:c/stm32f1xx_hal_pcd_ex.c **** @verbatim
  78:c/stm32f1xx_hal_pcd_ex.c ****  ===============================================================================
  79:c/stm32f1xx_hal_pcd_ex.c ****               ##### Extended Peripheral Control functions #####
  80:c/stm32f1xx_hal_pcd_ex.c ****  ===============================================================================
  81:c/stm32f1xx_hal_pcd_ex.c ****     [..]  This section provides functions allowing to:
  82:c/stm32f1xx_hal_pcd_ex.c ****       (+) Update FIFO (USB_OTG_FS)
  83:c/stm32f1xx_hal_pcd_ex.c ****       (+) Update PMA configuration (USB)
  84:c/stm32f1xx_hal_pcd_ex.c **** 
  85:c/stm32f1xx_hal_pcd_ex.c **** @endverbatim
  86:c/stm32f1xx_hal_pcd_ex.c ****   * @{
  87:c/stm32f1xx_hal_pcd_ex.c ****   */
  88:c/stm32f1xx_hal_pcd_ex.c **** 
  89:c/stm32f1xx_hal_pcd_ex.c **** #if defined (USB_OTG_FS)
  90:c/stm32f1xx_hal_pcd_ex.c **** /**
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccDGVjES.s 			page 3


  91:c/stm32f1xx_hal_pcd_ex.c ****   * @brief  Set Tx FIFO
  92:c/stm32f1xx_hal_pcd_ex.c ****   * @param  hpcd: PCD handle
  93:c/stm32f1xx_hal_pcd_ex.c ****   * @param  fifo: The number of Tx fifo
  94:c/stm32f1xx_hal_pcd_ex.c ****   * @param  size: Fifo size
  95:c/stm32f1xx_hal_pcd_ex.c ****   * @retval HAL status
  96:c/stm32f1xx_hal_pcd_ex.c ****   */
  97:c/stm32f1xx_hal_pcd_ex.c **** HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
  98:c/stm32f1xx_hal_pcd_ex.c **** {
  99:c/stm32f1xx_hal_pcd_ex.c ****   uint8_t index = 0;
 100:c/stm32f1xx_hal_pcd_ex.c ****   uint32_t Tx_Offset = 0U;
 101:c/stm32f1xx_hal_pcd_ex.c ****   
 102:c/stm32f1xx_hal_pcd_ex.c ****   /*  TXn min size = 16 words. (n  : Transmit FIFO index)
 103:c/stm32f1xx_hal_pcd_ex.c ****       When a TxFIFO is not used, the Configuration should be as follows: 
 104:c/stm32f1xx_hal_pcd_ex.c ****           case 1 :  n > m    and Txn is not used    (n,m  : Transmit FIFO indexes)
 105:c/stm32f1xx_hal_pcd_ex.c ****          --> Txm can use the space allocated for Txn.
 106:c/stm32f1xx_hal_pcd_ex.c ****          case2  :  n < m    and Txn is not used    (n,m  : Transmit FIFO indexes)
 107:c/stm32f1xx_hal_pcd_ex.c ****          --> Txn should be configured with the minimum space of 16 words
 108:c/stm32f1xx_hal_pcd_ex.c ****      The FIFO is used optimally when used TxFIFOs are allocated in the top 
 109:c/stm32f1xx_hal_pcd_ex.c ****          of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
 110:c/stm32f1xx_hal_pcd_ex.c ****      When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
 111:c/stm32f1xx_hal_pcd_ex.c ****   
 112:c/stm32f1xx_hal_pcd_ex.c ****   Tx_Offset = hpcd->Instance->GRXFSIZ;
 113:c/stm32f1xx_hal_pcd_ex.c ****   
 114:c/stm32f1xx_hal_pcd_ex.c ****   if(fifo == 0U)
 115:c/stm32f1xx_hal_pcd_ex.c ****   {
 116:c/stm32f1xx_hal_pcd_ex.c ****     hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (size << 16U) | Tx_Offset;
 117:c/stm32f1xx_hal_pcd_ex.c ****   }
 118:c/stm32f1xx_hal_pcd_ex.c ****   else
 119:c/stm32f1xx_hal_pcd_ex.c ****   {
 120:c/stm32f1xx_hal_pcd_ex.c ****     Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 121:c/stm32f1xx_hal_pcd_ex.c ****     for(index = 0; index < (fifo - 1); index++)
 122:c/stm32f1xx_hal_pcd_ex.c ****     {
 123:c/stm32f1xx_hal_pcd_ex.c ****       Tx_Offset += (hpcd->Instance->DIEPTXF[index] >> 16U);
 124:c/stm32f1xx_hal_pcd_ex.c ****     }
 125:c/stm32f1xx_hal_pcd_ex.c ****     
 126:c/stm32f1xx_hal_pcd_ex.c ****     /* Multiply Tx_Size by 2 to get higher performance */
 127:c/stm32f1xx_hal_pcd_ex.c ****     hpcd->Instance->DIEPTXF[fifo - 1U] = (size << 16U) | Tx_Offset;
 128:c/stm32f1xx_hal_pcd_ex.c ****     
 129:c/stm32f1xx_hal_pcd_ex.c ****   }
 130:c/stm32f1xx_hal_pcd_ex.c ****   
 131:c/stm32f1xx_hal_pcd_ex.c ****   return HAL_OK;
 132:c/stm32f1xx_hal_pcd_ex.c **** }
 133:c/stm32f1xx_hal_pcd_ex.c **** 
 134:c/stm32f1xx_hal_pcd_ex.c **** /**
 135:c/stm32f1xx_hal_pcd_ex.c ****   * @brief  Set Rx FIFO
 136:c/stm32f1xx_hal_pcd_ex.c ****   * @param  hpcd: PCD handle
 137:c/stm32f1xx_hal_pcd_ex.c ****   * @param  size: Size of Rx fifo
 138:c/stm32f1xx_hal_pcd_ex.c ****   * @retval HAL status
 139:c/stm32f1xx_hal_pcd_ex.c ****   */
 140:c/stm32f1xx_hal_pcd_ex.c **** HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
 141:c/stm32f1xx_hal_pcd_ex.c **** {
 142:c/stm32f1xx_hal_pcd_ex.c ****   hpcd->Instance->GRXFSIZ = size;
 143:c/stm32f1xx_hal_pcd_ex.c ****   return HAL_OK;
 144:c/stm32f1xx_hal_pcd_ex.c **** }
 145:c/stm32f1xx_hal_pcd_ex.c **** #endif /* USB_OTG_FS */
 146:c/stm32f1xx_hal_pcd_ex.c **** 
 147:c/stm32f1xx_hal_pcd_ex.c **** #if defined (USB)
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccDGVjES.s 			page 4


 148:c/stm32f1xx_hal_pcd_ex.c **** /**
 149:c/stm32f1xx_hal_pcd_ex.c ****   * @brief  Configure PMA for EP
 150:c/stm32f1xx_hal_pcd_ex.c ****   * @param  hpcd : Device instance
 151:c/stm32f1xx_hal_pcd_ex.c ****   * @param  ep_addr: endpoint address
 152:c/stm32f1xx_hal_pcd_ex.c ****   * @param  ep_kind: endpoint Kind
 153:c/stm32f1xx_hal_pcd_ex.c ****   *                  USB_SNG_BUF: Single Buffer used
 154:c/stm32f1xx_hal_pcd_ex.c ****   *                  USB_DBL_BUF: Double Buffer used
 155:c/stm32f1xx_hal_pcd_ex.c ****   * @param  pmaadress: EP address in The PMA: In case of single buffer endpoint
 156:c/stm32f1xx_hal_pcd_ex.c ****   *                   this parameter is 16-bit value providing the address
 157:c/stm32f1xx_hal_pcd_ex.c ****   *                   in PMA allocated to endpoint.
 158:c/stm32f1xx_hal_pcd_ex.c ****   *                   In case of double buffer endpoint this parameter
 159:c/stm32f1xx_hal_pcd_ex.c ****   *                   is a 32-bit value providing the endpoint buffer 0 address
 160:c/stm32f1xx_hal_pcd_ex.c ****   *                   in the LSB part of 32-bit value and endpoint buffer 1 address
 161:c/stm32f1xx_hal_pcd_ex.c ****   *                   in the MSB part of 32-bit value.
 162:c/stm32f1xx_hal_pcd_ex.c ****   * @retval HAL status
 163:c/stm32f1xx_hal_pcd_ex.c ****   */
 164:c/stm32f1xx_hal_pcd_ex.c **** 
 165:c/stm32f1xx_hal_pcd_ex.c **** HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
 166:c/stm32f1xx_hal_pcd_ex.c ****                                        uint16_t ep_addr,
 167:c/stm32f1xx_hal_pcd_ex.c ****                                        uint16_t ep_kind,
 168:c/stm32f1xx_hal_pcd_ex.c ****                                        uint32_t pmaadress)
 169:c/stm32f1xx_hal_pcd_ex.c **** 
 170:c/stm32f1xx_hal_pcd_ex.c **** {
  26              		.loc 1 170 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
 171:c/stm32f1xx_hal_pcd_ex.c ****   PCD_EPTypeDef *ep = NULL;
 172:c/stm32f1xx_hal_pcd_ex.c ****   
 173:c/stm32f1xx_hal_pcd_ex.c ****   /* initialize ep structure*/
 174:c/stm32f1xx_hal_pcd_ex.c ****   if ((ep_addr & 0x80U) == 0x80U)
  32              		.loc 1 174 0
  33 0000 11F0800F 		tst	r1, #128
 175:c/stm32f1xx_hal_pcd_ex.c ****   {
 176:c/stm32f1xx_hal_pcd_ex.c ****     ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  34              		.loc 1 176 0
  35 0004 1BBF     		ittet	ne
  36 0006 01F07F01 		andne	r1, r1, #127
  37              	.LVL1:
  38 000a 00EB4110 		addne	r0, r0, r1, lsl #5
  39              	.LVL2:
 177:c/stm32f1xx_hal_pcd_ex.c ****   }
 178:c/stm32f1xx_hal_pcd_ex.c ****   else
 179:c/stm32f1xx_hal_pcd_ex.c ****   {
 180:c/stm32f1xx_hal_pcd_ex.c ****     ep = &hpcd->OUT_ep[ep_addr];
  40              		.loc 1 180 0
  41 000e 00EB4110 		addeq	r0, r0, r1, lsl #5
 176:c/stm32f1xx_hal_pcd_ex.c ****   }
  42              		.loc 1 176 0
  43 0012 2830     		addne	r0, r0, #40
  44              	.LVL3:
  45              		.loc 1 180 0
  46 0014 08BF     		it	eq
  47 0016 00F50A70 		addeq	r0, r0, #552
  48              	.LVL4:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccDGVjES.s 			page 5


 181:c/stm32f1xx_hal_pcd_ex.c ****   }
 182:c/stm32f1xx_hal_pcd_ex.c ****   
 183:c/stm32f1xx_hal_pcd_ex.c ****   /* Here we check if the endpoint is single or double Buffer*/
 184:c/stm32f1xx_hal_pcd_ex.c ****   if (ep_kind == PCD_SNG_BUF)
  49              		.loc 1 184 0
  50 001a 1AB9     		cbnz	r2, .L4
 185:c/stm32f1xx_hal_pcd_ex.c ****   {
 186:c/stm32f1xx_hal_pcd_ex.c ****     /*Single Buffer*/
 187:c/stm32f1xx_hal_pcd_ex.c ****     ep->doublebuffer = 0U;
  51              		.loc 1 187 0
  52 001c 8272     		strb	r2, [r0, #10]
 188:c/stm32f1xx_hal_pcd_ex.c ****     /*Configure te PMA*/
 189:c/stm32f1xx_hal_pcd_ex.c ****     ep->pmaadress = (uint16_t)pmaadress;
  53              		.loc 1 189 0
  54 001e 8380     		strh	r3, [r0, #4]	@ movhi
  55              	.LVL5:
  56              	.L5:
 190:c/stm32f1xx_hal_pcd_ex.c ****   }
 191:c/stm32f1xx_hal_pcd_ex.c ****   else /*USB_DBL_BUF*/
 192:c/stm32f1xx_hal_pcd_ex.c ****   {
 193:c/stm32f1xx_hal_pcd_ex.c ****     /*Double Buffer Endpoint*/
 194:c/stm32f1xx_hal_pcd_ex.c ****     ep->doublebuffer = 1U;
 195:c/stm32f1xx_hal_pcd_ex.c ****     /*Configure the PMA*/
 196:c/stm32f1xx_hal_pcd_ex.c ****     ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 197:c/stm32f1xx_hal_pcd_ex.c ****     ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 198:c/stm32f1xx_hal_pcd_ex.c ****   }
 199:c/stm32f1xx_hal_pcd_ex.c ****   
 200:c/stm32f1xx_hal_pcd_ex.c ****   return HAL_OK; 
 201:c/stm32f1xx_hal_pcd_ex.c **** }
  57              		.loc 1 201 0
  58 0020 0020     		movs	r0, #0
  59              	.LVL6:
  60 0022 7047     		bx	lr
  61              	.LVL7:
  62              	.L4:
 194:c/stm32f1xx_hal_pcd_ex.c ****     /*Configure the PMA*/
  63              		.loc 1 194 0
  64 0024 0122     		movs	r2, #1
  65              	.LVL8:
 196:c/stm32f1xx_hal_pcd_ex.c ****     ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
  66              		.loc 1 196 0
  67 0026 C380     		strh	r3, [r0, #6]	@ movhi
 197:c/stm32f1xx_hal_pcd_ex.c ****   }
  68              		.loc 1 197 0
  69 0028 1B0C     		lsrs	r3, r3, #16
  70              	.LVL9:
 194:c/stm32f1xx_hal_pcd_ex.c ****     /*Configure the PMA*/
  71              		.loc 1 194 0
  72 002a 8272     		strb	r2, [r0, #10]
 197:c/stm32f1xx_hal_pcd_ex.c ****   }
  73              		.loc 1 197 0
  74 002c 0381     		strh	r3, [r0, #8]	@ movhi
  75 002e F7E7     		b	.L5
  76              		.cfi_endproc
  77              	.LFE64:
  79              		.section	.text.HAL_PCDEx_SetConnectionState,"ax",%progbits
  80              		.align	1
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccDGVjES.s 			page 6


  81              		.weak	HAL_PCDEx_SetConnectionState
  82              		.syntax unified
  83              		.thumb
  84              		.thumb_func
  85              		.fpu softvfp
  87              	HAL_PCDEx_SetConnectionState:
  88              	.LFB65:
 202:c/stm32f1xx_hal_pcd_ex.c **** #endif /* USB */
 203:c/stm32f1xx_hal_pcd_ex.c **** /**
 204:c/stm32f1xx_hal_pcd_ex.c ****   * @}
 205:c/stm32f1xx_hal_pcd_ex.c ****   */
 206:c/stm32f1xx_hal_pcd_ex.c **** 
 207:c/stm32f1xx_hal_pcd_ex.c **** /** @defgroup PCDEx_Exported_Functions_Group2 Peripheral State functions
 208:c/stm32f1xx_hal_pcd_ex.c ****   * @brief    Manage device connection state  
 209:c/stm32f1xx_hal_pcd_ex.c ****   * @{
 210:c/stm32f1xx_hal_pcd_ex.c ****   */
 211:c/stm32f1xx_hal_pcd_ex.c **** /**
 212:c/stm32f1xx_hal_pcd_ex.c ****   * @brief  Software Device Connection,  
 213:c/stm32f1xx_hal_pcd_ex.c ****   *         this function is not required by USB OTG FS peripheral, it is used 
 214:c/stm32f1xx_hal_pcd_ex.c ****   *         only by USB Device FS peripheral.
 215:c/stm32f1xx_hal_pcd_ex.c ****   * @param  hpcd: PCD handle
 216:c/stm32f1xx_hal_pcd_ex.c ****   * @param  state: connection state (0 : disconnected / 1: connected)
 217:c/stm32f1xx_hal_pcd_ex.c ****   * @retval None
 218:c/stm32f1xx_hal_pcd_ex.c ****   */
 219:c/stm32f1xx_hal_pcd_ex.c **** __weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
 220:c/stm32f1xx_hal_pcd_ex.c **** {
  89              		.loc 1 220 0
  90              		.cfi_startproc
  91              		@ args = 0, pretend = 0, frame = 0
  92              		@ frame_needed = 0, uses_anonymous_args = 0
  93              		@ link register save eliminated.
  94              	.LVL10:
  95 0000 7047     		bx	lr
  96              		.cfi_endproc
  97              	.LFE65:
  99              		.text
 100              	.Letext0:
 101              		.file 2 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/machine/_
 102              		.file 3 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_stdi
 103              		.file 4 "c/core_cm3.h"
 104              		.file 5 "c/system_stm32f1xx.h"
 105              		.file 6 "c/stm32f103xb.h"
 106              		.file 7 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/lock.
 107              		.file 8 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_type
 108              		.file 9 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/lib/gcc/arm-none-eabi/6.3.1/inc
 109              		.file 10 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/reen
 110              		.file 11 "c/stm32f1xx_hal_def.h"
 111              		.file 12 "c/stm32f1xx_ll_usb.h"
 112              		.file 13 "c/stm32f1xx_hal_pcd.h"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccDGVjES.s 			page 7


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_pcd_ex.c
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccDGVjES.s:16     .text.HAL_PCDEx_PMAConfig:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccDGVjES.s:23     .text.HAL_PCDEx_PMAConfig:0000000000000000 HAL_PCDEx_PMAConfig
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccDGVjES.s:80     .text.HAL_PCDEx_SetConnectionState:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccDGVjES.s:87     .text.HAL_PCDEx_SetConnectionState:0000000000000000 HAL_PCDEx_SetConnectionState
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
exit code: 0
OPT_LEVEL = Some("s")
HOST = Some("x86_64-apple-darwin")
CFLAGS_arm-none-eabi = None
CFLAGS_arm_none_eabi = None
TARGET_CFLAGS = None
CFLAGS = None
DEBUG = Some("true")
running: "arm-none-eabi-gcc" "-Os" "-ffunction-sections" "-fdata-sections" "-g" "-DSTM32F103xB" "-DUSE_HAL_DRIVER" "-mcpu=cortex-m3" "-mthumb" "-Wall" "-fdata-sections" "-ffunction-sections" "-Wa,-a,-ad" "-g" "-Wall" "-Wextra" "-o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/stm32f1xx_hal_rcc.o" "-c" "c/stm32f1xx_hal_rcc.c"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_hal_rcc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_RCC_DeInit,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_RCC_DeInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_RCC_DeInit:
  24              	.LFB64:
  25              		.file 1 "c/stm32f1xx_hal_rcc.c"
   1:c/stm32f1xx_hal_rcc.c **** /**
   2:c/stm32f1xx_hal_rcc.c ****   ******************************************************************************
   3:c/stm32f1xx_hal_rcc.c ****   * @file    stm32f1xx_hal_rcc.c
   4:c/stm32f1xx_hal_rcc.c ****   * @author  MCD Application Team
   5:c/stm32f1xx_hal_rcc.c ****   * @version V1.1.1
   6:c/stm32f1xx_hal_rcc.c ****   * @date    12-May-2017
   7:c/stm32f1xx_hal_rcc.c ****   * @brief   RCC HAL module driver.
   8:c/stm32f1xx_hal_rcc.c ****   *          This file provides firmware functions to manage the following 
   9:c/stm32f1xx_hal_rcc.c ****   *          functionalities of the Reset and Clock Control (RCC) peripheral:
  10:c/stm32f1xx_hal_rcc.c ****   *           + Initialization and de-initialization functions
  11:c/stm32f1xx_hal_rcc.c ****   *           + Peripheral Control functions
  12:c/stm32f1xx_hal_rcc.c ****   *       
  13:c/stm32f1xx_hal_rcc.c ****   @verbatim                
  14:c/stm32f1xx_hal_rcc.c ****   ==============================================================================
  15:c/stm32f1xx_hal_rcc.c ****                       ##### RCC specific features #####
  16:c/stm32f1xx_hal_rcc.c ****   ==============================================================================
  17:c/stm32f1xx_hal_rcc.c ****     [..]  
  18:c/stm32f1xx_hal_rcc.c ****       After reset the device is running from Internal High Speed oscillator
  19:c/stm32f1xx_hal_rcc.c ****       (HSI 8MHz) with Flash 0 wait state, Flash prefetch buffer is enabled, 
  20:c/stm32f1xx_hal_rcc.c ****       and all peripherals are off except internal SRAM, Flash and JTAG.
  21:c/stm32f1xx_hal_rcc.c ****       (+) There is no prescaler on High speed (AHB) and Low speed (APB) buses;
  22:c/stm32f1xx_hal_rcc.c ****           all peripherals mapped on these buses are running at HSI speed.
  23:c/stm32f1xx_hal_rcc.c ****       (+) The clock for all peripherals is switched off, except the SRAM and FLASH.
  24:c/stm32f1xx_hal_rcc.c ****       (+) All GPIOs are in input floating state, except the JTAG pins which
  25:c/stm32f1xx_hal_rcc.c ****           are assigned to be used for debug purpose.
  26:c/stm32f1xx_hal_rcc.c ****     [..] Once the device started from reset, the user application has to:
  27:c/stm32f1xx_hal_rcc.c ****       (+) Configure the clock source to be used to drive the System clock
  28:c/stm32f1xx_hal_rcc.c ****           (if the application needs higher frequency/performance)
  29:c/stm32f1xx_hal_rcc.c ****       (+) Configure the System clock frequency and Flash settings  
  30:c/stm32f1xx_hal_rcc.c ****       (+) Configure the AHB and APB buses prescalers
  31:c/stm32f1xx_hal_rcc.c ****       (+) Enable the clock for the peripheral(s) to be used
  32:c/stm32f1xx_hal_rcc.c ****       (+) Configure the clock source(s) for peripherals whose clocks are not
  33:c/stm32f1xx_hal_rcc.c ****           derived from the System clock (I2S, RTC, ADC, USB OTG FS) 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 2


  34:c/stm32f1xx_hal_rcc.c **** 
  35:c/stm32f1xx_hal_rcc.c ****                       ##### RCC Limitations #####
  36:c/stm32f1xx_hal_rcc.c ****   ==============================================================================
  37:c/stm32f1xx_hal_rcc.c ****     [..]  
  38:c/stm32f1xx_hal_rcc.c ****       A delay between an RCC peripheral clock enable and the effective peripheral 
  39:c/stm32f1xx_hal_rcc.c ****       enabling should be taken into account in order to manage the peripheral read/write 
  40:c/stm32f1xx_hal_rcc.c ****       from/to registers.
  41:c/stm32f1xx_hal_rcc.c ****       (+) This delay depends on the peripheral mapping.
  42:c/stm32f1xx_hal_rcc.c ****         (++) AHB & APB peripherals, 1 dummy read is necessary
  43:c/stm32f1xx_hal_rcc.c **** 
  44:c/stm32f1xx_hal_rcc.c ****     [..]  
  45:c/stm32f1xx_hal_rcc.c ****       Workarounds:
  46:c/stm32f1xx_hal_rcc.c ****       (#) For AHB & APB peripherals, a dummy read to the peripheral register has been
  47:c/stm32f1xx_hal_rcc.c ****           inserted in each __HAL_RCC_PPP_CLK_ENABLE() macro.
  48:c/stm32f1xx_hal_rcc.c **** 
  49:c/stm32f1xx_hal_rcc.c ****   @endverbatim
  50:c/stm32f1xx_hal_rcc.c ****   ******************************************************************************
  51:c/stm32f1xx_hal_rcc.c ****   * @attention
  52:c/stm32f1xx_hal_rcc.c ****   *
  53:c/stm32f1xx_hal_rcc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  54:c/stm32f1xx_hal_rcc.c ****   *
  55:c/stm32f1xx_hal_rcc.c ****   * Redistribution and use in source and binary forms, with or without modification,
  56:c/stm32f1xx_hal_rcc.c ****   * are permitted provided that the following conditions are met:
  57:c/stm32f1xx_hal_rcc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  58:c/stm32f1xx_hal_rcc.c ****   *      this list of conditions and the following disclaimer.
  59:c/stm32f1xx_hal_rcc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  60:c/stm32f1xx_hal_rcc.c ****   *      this list of conditions and the following disclaimer in the documentation
  61:c/stm32f1xx_hal_rcc.c ****   *      and/or other materials provided with the distribution.
  62:c/stm32f1xx_hal_rcc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  63:c/stm32f1xx_hal_rcc.c ****   *      may be used to endorse or promote products derived from this software
  64:c/stm32f1xx_hal_rcc.c ****   *      without specific prior written permission.
  65:c/stm32f1xx_hal_rcc.c ****   *
  66:c/stm32f1xx_hal_rcc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  67:c/stm32f1xx_hal_rcc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  68:c/stm32f1xx_hal_rcc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  69:c/stm32f1xx_hal_rcc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  70:c/stm32f1xx_hal_rcc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  71:c/stm32f1xx_hal_rcc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  72:c/stm32f1xx_hal_rcc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  73:c/stm32f1xx_hal_rcc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  74:c/stm32f1xx_hal_rcc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  75:c/stm32f1xx_hal_rcc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  76:c/stm32f1xx_hal_rcc.c ****   *
  77:c/stm32f1xx_hal_rcc.c ****   ******************************************************************************  
  78:c/stm32f1xx_hal_rcc.c **** */
  79:c/stm32f1xx_hal_rcc.c ****   
  80:c/stm32f1xx_hal_rcc.c **** /* Includes ------------------------------------------------------------------*/
  81:c/stm32f1xx_hal_rcc.c **** #include "stm32f1xx_hal.h"
  82:c/stm32f1xx_hal_rcc.c **** 
  83:c/stm32f1xx_hal_rcc.c **** /** @addtogroup STM32F1xx_HAL_Driver
  84:c/stm32f1xx_hal_rcc.c ****   * @{
  85:c/stm32f1xx_hal_rcc.c ****   */
  86:c/stm32f1xx_hal_rcc.c **** 
  87:c/stm32f1xx_hal_rcc.c **** /** @defgroup RCC RCC
  88:c/stm32f1xx_hal_rcc.c **** * @brief RCC HAL module driver
  89:c/stm32f1xx_hal_rcc.c ****   * @{
  90:c/stm32f1xx_hal_rcc.c ****   */
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 3


  91:c/stm32f1xx_hal_rcc.c **** 
  92:c/stm32f1xx_hal_rcc.c **** #ifdef HAL_RCC_MODULE_ENABLED
  93:c/stm32f1xx_hal_rcc.c **** 
  94:c/stm32f1xx_hal_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  95:c/stm32f1xx_hal_rcc.c **** /* Private define ------------------------------------------------------------*/
  96:c/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Private_Constants RCC Private Constants
  97:c/stm32f1xx_hal_rcc.c ****  * @{
  98:c/stm32f1xx_hal_rcc.c ****  */
  99:c/stm32f1xx_hal_rcc.c **** /**
 100:c/stm32f1xx_hal_rcc.c ****   * @}
 101:c/stm32f1xx_hal_rcc.c ****   */
 102:c/stm32f1xx_hal_rcc.c **** /* Private macro -------------------------------------------------------------*/
 103:c/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Private_Macros RCC Private Macros
 104:c/stm32f1xx_hal_rcc.c ****   * @{
 105:c/stm32f1xx_hal_rcc.c ****   */
 106:c/stm32f1xx_hal_rcc.c **** 
 107:c/stm32f1xx_hal_rcc.c **** #define MCO1_CLK_ENABLE()     __HAL_RCC_GPIOA_CLK_ENABLE()
 108:c/stm32f1xx_hal_rcc.c **** #define MCO1_GPIO_PORT        GPIOA
 109:c/stm32f1xx_hal_rcc.c **** #define MCO1_PIN              GPIO_PIN_8
 110:c/stm32f1xx_hal_rcc.c **** 
 111:c/stm32f1xx_hal_rcc.c **** /**
 112:c/stm32f1xx_hal_rcc.c ****   * @}
 113:c/stm32f1xx_hal_rcc.c ****   */
 114:c/stm32f1xx_hal_rcc.c **** 
 115:c/stm32f1xx_hal_rcc.c **** /* Private variables ---------------------------------------------------------*/
 116:c/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Private_Variables RCC Private Variables
 117:c/stm32f1xx_hal_rcc.c ****   * @{
 118:c/stm32f1xx_hal_rcc.c ****   */
 119:c/stm32f1xx_hal_rcc.c **** /**
 120:c/stm32f1xx_hal_rcc.c ****   * @}
 121:c/stm32f1xx_hal_rcc.c ****   */
 122:c/stm32f1xx_hal_rcc.c **** 
 123:c/stm32f1xx_hal_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 124:c/stm32f1xx_hal_rcc.c **** static void RCC_Delay(uint32_t mdelay);
 125:c/stm32f1xx_hal_rcc.c **** 
 126:c/stm32f1xx_hal_rcc.c **** /* Exported functions --------------------------------------------------------*/
 127:c/stm32f1xx_hal_rcc.c **** 
 128:c/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions RCC Exported Functions
 129:c/stm32f1xx_hal_rcc.c ****   * @{
 130:c/stm32f1xx_hal_rcc.c ****   */
 131:c/stm32f1xx_hal_rcc.c **** 
 132:c/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions_Group1 Initialization and de-initialization functions 
 133:c/stm32f1xx_hal_rcc.c ****   *  @brief    Initialization and Configuration functions 
 134:c/stm32f1xx_hal_rcc.c ****   *
 135:c/stm32f1xx_hal_rcc.c ****   @verbatim    
 136:c/stm32f1xx_hal_rcc.c ****   ===============================================================================
 137:c/stm32f1xx_hal_rcc.c ****            ##### Initialization and de-initialization functions #####
 138:c/stm32f1xx_hal_rcc.c ****   ===============================================================================
 139:c/stm32f1xx_hal_rcc.c ****     [..]
 140:c/stm32f1xx_hal_rcc.c ****       This section provides functions allowing to configure the internal/external oscillators
 141:c/stm32f1xx_hal_rcc.c ****       (HSE, HSI, LSE, LSI, PLL, CSS and MCO) and the System buses clocks (SYSCLK, AHB, APB1
 142:c/stm32f1xx_hal_rcc.c ****       and APB2).
 143:c/stm32f1xx_hal_rcc.c **** 
 144:c/stm32f1xx_hal_rcc.c ****     [..] Internal/external clock and PLL configuration
 145:c/stm32f1xx_hal_rcc.c ****       (#) HSI (high-speed internal), 8 MHz factory-trimmed RC used directly or through
 146:c/stm32f1xx_hal_rcc.c ****           the PLL as System clock source.
 147:c/stm32f1xx_hal_rcc.c ****       (#) LSI (low-speed internal), ~40 KHz low consumption RC used as IWDG and/or RTC
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 4


 148:c/stm32f1xx_hal_rcc.c ****           clock source.
 149:c/stm32f1xx_hal_rcc.c **** 
 150:c/stm32f1xx_hal_rcc.c ****       (#) HSE (high-speed external), 4 to 24 MHz (STM32F100xx) or 4 to 16 MHz (STM32F101x/STM32F102
 151:c/stm32f1xx_hal_rcc.c ****           through the PLL as System clock source. Can be used also as RTC clock source.
 152:c/stm32f1xx_hal_rcc.c **** 
 153:c/stm32f1xx_hal_rcc.c ****       (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
 154:c/stm32f1xx_hal_rcc.c **** 
 155:c/stm32f1xx_hal_rcc.c ****       (#) PLL (clocked by HSI or HSE), featuring different output clocks:
 156:c/stm32f1xx_hal_rcc.c ****         (++) The first output is used to generate the high speed system clock (up to 72 MHz for STM
 157:c/stm32f1xx_hal_rcc.c ****         (++) The second output is used to generate the clock for the USB OTG FS (48 MHz)
 158:c/stm32f1xx_hal_rcc.c **** 
 159:c/stm32f1xx_hal_rcc.c ****       (#) CSS (Clock security system), once enable using the macro __HAL_RCC_CSS_ENABLE()
 160:c/stm32f1xx_hal_rcc.c ****           and if a HSE clock failure occurs(HSE used directly or through PLL as System 
 161:c/stm32f1xx_hal_rcc.c ****           clock source), the System clocks automatically switched to HSI and an interrupt
 162:c/stm32f1xx_hal_rcc.c ****           is generated if enabled. The interrupt is linked to the Cortex-M3 NMI 
 163:c/stm32f1xx_hal_rcc.c ****           (Non-Maskable Interrupt) exception vector.   
 164:c/stm32f1xx_hal_rcc.c **** 
 165:c/stm32f1xx_hal_rcc.c ****       (#) MCO1 (microcontroller clock output), used to output SYSCLK, HSI,  
 166:c/stm32f1xx_hal_rcc.c ****           HSE or PLL clock (divided by 2) on PA8 pin + PLL2CLK, PLL3CLK/2, PLL3CLK and XTI for STM3
 167:c/stm32f1xx_hal_rcc.c **** 
 168:c/stm32f1xx_hal_rcc.c ****     [..] System, AHB and APB buses clocks configuration
 169:c/stm32f1xx_hal_rcc.c ****       (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 170:c/stm32f1xx_hal_rcc.c ****           HSE and PLL.
 171:c/stm32f1xx_hal_rcc.c ****           The AHB clock (HCLK) is derived from System clock through configurable
 172:c/stm32f1xx_hal_rcc.c ****           prescaler and used to clock the CPU, memory and peripherals mapped
 173:c/stm32f1xx_hal_rcc.c ****           on AHB bus (DMA, GPIO...). APB1 (PCLK1) and APB2 (PCLK2) clocks are derived
 174:c/stm32f1xx_hal_rcc.c ****           from AHB clock through configurable prescalers and used to clock
 175:c/stm32f1xx_hal_rcc.c ****           the peripherals mapped on these buses. You can use
 176:c/stm32f1xx_hal_rcc.c ****           "@ref HAL_RCC_GetSysClockFreq()" function to retrieve the frequencies of these clocks.
 177:c/stm32f1xx_hal_rcc.c **** 
 178:c/stm32f1xx_hal_rcc.c ****       -@- All the peripheral clocks are derived from the System clock (SYSCLK) except:
 179:c/stm32f1xx_hal_rcc.c ****           (+@) RTC: RTC clock can be derived either from the LSI, LSE or HSE clock
 180:c/stm32f1xx_hal_rcc.c ****               divided by 128. 
 181:c/stm32f1xx_hal_rcc.c ****           (+@) USB OTG FS and RTC: USB OTG FS require a frequency equal to 48 MHz
 182:c/stm32f1xx_hal_rcc.c ****               to work correctly. This clock is derived of the main PLL through PLL Multiplier.
 183:c/stm32f1xx_hal_rcc.c ****           (+@) I2S interface on STM32F105x/STM32F107x can be derived from PLL3CLK
 184:c/stm32f1xx_hal_rcc.c ****           (+@) IWDG clock which is always the LSI clock.
 185:c/stm32f1xx_hal_rcc.c **** 
 186:c/stm32f1xx_hal_rcc.c ****       (#) For STM32F10xxx, the maximum frequency of the SYSCLK and HCLK/PCLK2 is 72 MHz, PCLK1 36 M
 187:c/stm32f1xx_hal_rcc.c ****           For STM32F100xx, the maximum frequency of the SYSCLK and HCLK/PCLK1/PCLK2 is 24 MHz.  
 188:c/stm32f1xx_hal_rcc.c ****           Depending on the SYSCLK frequency, the flash latency should be adapted accordingly.
 189:c/stm32f1xx_hal_rcc.c ****   @endverbatim
 190:c/stm32f1xx_hal_rcc.c ****   * @{
 191:c/stm32f1xx_hal_rcc.c ****   */
 192:c/stm32f1xx_hal_rcc.c ****   
 193:c/stm32f1xx_hal_rcc.c **** /*
 194:c/stm32f1xx_hal_rcc.c ****   Additional consideration on the SYSCLK based on Latency settings:
 195:c/stm32f1xx_hal_rcc.c ****         +-----------------------------------------------+
 196:c/stm32f1xx_hal_rcc.c ****         | Latency       | SYSCLK clock frequency (MHz)  |
 197:c/stm32f1xx_hal_rcc.c ****         |---------------|-------------------------------|
 198:c/stm32f1xx_hal_rcc.c ****         |0WS(1CPU cycle)|       0 < SYSCLK <= 24        |
 199:c/stm32f1xx_hal_rcc.c ****         |---------------|-------------------------------|
 200:c/stm32f1xx_hal_rcc.c ****         |1WS(2CPU cycle)|      24 < SYSCLK <= 48        |
 201:c/stm32f1xx_hal_rcc.c ****         |---------------|-------------------------------|
 202:c/stm32f1xx_hal_rcc.c ****         |2WS(3CPU cycle)|      48 < SYSCLK <= 72        |
 203:c/stm32f1xx_hal_rcc.c ****         +-----------------------------------------------+
 204:c/stm32f1xx_hal_rcc.c ****   */
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 5


 205:c/stm32f1xx_hal_rcc.c **** 
 206:c/stm32f1xx_hal_rcc.c **** /**
 207:c/stm32f1xx_hal_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 208:c/stm32f1xx_hal_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 209:c/stm32f1xx_hal_rcc.c ****   *            - HSI ON and used as system clock source
 210:c/stm32f1xx_hal_rcc.c ****   *            - HSE and PLL OFF
 211:c/stm32f1xx_hal_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 212:c/stm32f1xx_hal_rcc.c ****   *            - CSS and MCO1 OFF
 213:c/stm32f1xx_hal_rcc.c ****   *            - All interrupts disabled
 214:c/stm32f1xx_hal_rcc.c ****   * @note   This function does not modify the configuration of the
 215:c/stm32f1xx_hal_rcc.c ****   *            - Peripheral clocks
 216:c/stm32f1xx_hal_rcc.c ****   *            - LSI, LSE and RTC clocks
 217:c/stm32f1xx_hal_rcc.c ****   * @retval None
 218:c/stm32f1xx_hal_rcc.c ****   */
 219:c/stm32f1xx_hal_rcc.c **** void HAL_RCC_DeInit(void)
 220:c/stm32f1xx_hal_rcc.c **** {
  26              		.loc 1 220 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
 221:c/stm32f1xx_hal_rcc.c ****   /* Switch SYSCLK to HSI */
 222:c/stm32f1xx_hal_rcc.c ****   CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW);
 223:c/stm32f1xx_hal_rcc.c **** 
 224:c/stm32f1xx_hal_rcc.c ****   /* Reset HSEON, CSSON, & PLLON bits */
 225:c/stm32f1xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLLON);
 226:c/stm32f1xx_hal_rcc.c ****   
 227:c/stm32f1xx_hal_rcc.c ****   /* Reset HSEBYP bit */
 228:c/stm32f1xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 229:c/stm32f1xx_hal_rcc.c ****   
 230:c/stm32f1xx_hal_rcc.c ****   /* Reset CFGR register */
 231:c/stm32f1xx_hal_rcc.c ****   CLEAR_REG(RCC->CFGR);
  31              		.loc 1 231 0
  32 0000 0021     		movs	r1, #0
 222:c/stm32f1xx_hal_rcc.c **** 
  33              		.loc 1 222 0
  34 0002 0D4B     		ldr	r3, .L2
  35 0004 5A68     		ldr	r2, [r3, #4]
  36 0006 22F00302 		bic	r2, r2, #3
  37 000a 5A60     		str	r2, [r3, #4]
 225:c/stm32f1xx_hal_rcc.c ****   
  38              		.loc 1 225 0
  39 000c 1A68     		ldr	r2, [r3]
  40 000e 22F08472 		bic	r2, r2, #17301504
  41 0012 22F48032 		bic	r2, r2, #65536
  42 0016 1A60     		str	r2, [r3]
 228:c/stm32f1xx_hal_rcc.c ****   
  43              		.loc 1 228 0
  44 0018 1A68     		ldr	r2, [r3]
  45 001a 22F48022 		bic	r2, r2, #262144
  46 001e 1A60     		str	r2, [r3]
  47              		.loc 1 231 0
  48 0020 5960     		str	r1, [r3, #4]
 232:c/stm32f1xx_hal_rcc.c ****   
 233:c/stm32f1xx_hal_rcc.c ****   /* Set HSITRIM bits to the reset value */
 234:c/stm32f1xx_hal_rcc.c ****   MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
  49              		.loc 1 234 0
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 6


  50 0022 1A68     		ldr	r2, [r3]
  51 0024 22F0F802 		bic	r2, r2, #248
  52 0028 42F08002 		orr	r2, r2, #128
  53 002c 1A60     		str	r2, [r3]
 235:c/stm32f1xx_hal_rcc.c ****   
 236:c/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_SUPPORT)
 237:c/stm32f1xx_hal_rcc.c ****   /* Reset CFGR2 register */
 238:c/stm32f1xx_hal_rcc.c ****   CLEAR_REG(RCC->CFGR2);
 239:c/stm32f1xx_hal_rcc.c **** 
 240:c/stm32f1xx_hal_rcc.c **** #endif /* RCC_CFGR2_SUPPORT */
 241:c/stm32f1xx_hal_rcc.c ****   /* Disable all interrupts */
 242:c/stm32f1xx_hal_rcc.c ****   CLEAR_REG(RCC->CIR);
  54              		.loc 1 242 0
  55 002e 9960     		str	r1, [r3, #8]
 243:c/stm32f1xx_hal_rcc.c **** 
 244:c/stm32f1xx_hal_rcc.c ****   /* Update the SystemCoreClock global variable */
 245:c/stm32f1xx_hal_rcc.c ****   SystemCoreClock = HSI_VALUE;
  56              		.loc 1 245 0
  57 0030 024A     		ldr	r2, .L2+4
  58 0032 034B     		ldr	r3, .L2+8
  59 0034 1A60     		str	r2, [r3]
  60 0036 7047     		bx	lr
  61              	.L3:
  62              		.align	2
  63              	.L2:
  64 0038 00100240 		.word	1073876992
  65 003c 00127A00 		.word	8000000
  66 0040 00000000 		.word	SystemCoreClock
  67              		.cfi_endproc
  68              	.LFE64:
  70              		.section	.text.HAL_RCC_OscConfig,"ax",%progbits
  71              		.align	1
  72              		.global	HAL_RCC_OscConfig
  73              		.syntax unified
  74              		.thumb
  75              		.thumb_func
  76              		.fpu softvfp
  78              	HAL_RCC_OscConfig:
  79              	.LFB65:
 246:c/stm32f1xx_hal_rcc.c **** }
 247:c/stm32f1xx_hal_rcc.c **** 
 248:c/stm32f1xx_hal_rcc.c **** /**
 249:c/stm32f1xx_hal_rcc.c ****   * @brief  Initializes the RCC Oscillators according to the specified parameters in the
 250:c/stm32f1xx_hal_rcc.c ****   *         RCC_OscInitTypeDef.
 251:c/stm32f1xx_hal_rcc.c ****   * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
 252:c/stm32f1xx_hal_rcc.c ****   *         contains the configuration information for the RCC Oscillators.
 253:c/stm32f1xx_hal_rcc.c ****   * @note   The PLL is not disabled when used as system clock.
 254:c/stm32f1xx_hal_rcc.c ****   * @note   The PLL is not disabled when USB OTG FS clock is enabled (specific to devices with USB 
 255:c/stm32f1xx_hal_rcc.c ****   * @note   Transitions LSE Bypass to LSE On and LSE On to LSE Bypass are not
 256:c/stm32f1xx_hal_rcc.c ****   *         supported by this macro. User should request a transition to LSE Off
 257:c/stm32f1xx_hal_rcc.c ****   *         first and then LSE On or LSE Bypass.
 258:c/stm32f1xx_hal_rcc.c ****   * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 259:c/stm32f1xx_hal_rcc.c ****   *         supported by this macro. User should request a transition to HSE Off
 260:c/stm32f1xx_hal_rcc.c ****   *         first and then HSE On or HSE Bypass.
 261:c/stm32f1xx_hal_rcc.c ****   * @retval HAL status
 262:c/stm32f1xx_hal_rcc.c ****   */
 263:c/stm32f1xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 7


 264:c/stm32f1xx_hal_rcc.c **** {
  80              		.loc 1 264 0
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 8
  83              		@ frame_needed = 0, uses_anonymous_args = 0
  84              	.LVL0:
 265:c/stm32f1xx_hal_rcc.c ****    uint32_t tickstart = 0U;
 266:c/stm32f1xx_hal_rcc.c ****   
 267:c/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
 268:c/stm32f1xx_hal_rcc.c ****   assert_param(RCC_OscInitStruct != NULL);
 269:c/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 270:c/stm32f1xx_hal_rcc.c ****   
 271:c/stm32f1xx_hal_rcc.c ****   /*------------------------------- HSE Configuration ------------------------*/ 
 272:c/stm32f1xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  85              		.loc 1 272 0
  86 0000 0368     		ldr	r3, [r0]
 264:c/stm32f1xx_hal_rcc.c ****    uint32_t tickstart = 0U;
  87              		.loc 1 264 0
  88 0002 2DE9F341 		push	{r0, r1, r4, r5, r6, r7, r8, lr}
  89              		.cfi_def_cfa_offset 32
  90              		.cfi_offset 4, -24
  91              		.cfi_offset 5, -20
  92              		.cfi_offset 6, -16
  93              		.cfi_offset 7, -12
  94              		.cfi_offset 8, -8
  95              		.cfi_offset 14, -4
  96              		.loc 1 272 0
  97 0006 DB07     		lsls	r3, r3, #31
 264:c/stm32f1xx_hal_rcc.c ****    uint32_t tickstart = 0U;
  98              		.loc 1 264 0
  99 0008 0546     		mov	r5, r0
 100              		.loc 1 272 0
 101 000a 10D4     		bmi	.L5
 102              	.LVL1:
 103              	.L10:
 273:c/stm32f1xx_hal_rcc.c ****   {
 274:c/stm32f1xx_hal_rcc.c ****     /* Check the parameters */
 275:c/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 276:c/stm32f1xx_hal_rcc.c ****         
 277:c/stm32f1xx_hal_rcc.c ****     /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowe
 278:c/stm32f1xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 279:c/stm32f1xx_hal_rcc.c ****        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_
 280:c/stm32f1xx_hal_rcc.c ****     {
 281:c/stm32f1xx_hal_rcc.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_
 282:c/stm32f1xx_hal_rcc.c ****       {
 283:c/stm32f1xx_hal_rcc.c ****         return HAL_ERROR;
 284:c/stm32f1xx_hal_rcc.c ****       }
 285:c/stm32f1xx_hal_rcc.c ****     }
 286:c/stm32f1xx_hal_rcc.c ****     else
 287:c/stm32f1xx_hal_rcc.c ****     {
 288:c/stm32f1xx_hal_rcc.c ****       /* Set the new HSE configuration ---------------------------------------*/
 289:c/stm32f1xx_hal_rcc.c ****       __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 290:c/stm32f1xx_hal_rcc.c ****       
 291:c/stm32f1xx_hal_rcc.c **** 
 292:c/stm32f1xx_hal_rcc.c ****        /* Check the HSE State */
 293:c/stm32f1xx_hal_rcc.c ****       if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 294:c/stm32f1xx_hal_rcc.c ****       {
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 8


 295:c/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 296:c/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 297:c/stm32f1xx_hal_rcc.c ****         
 298:c/stm32f1xx_hal_rcc.c ****         /* Wait till HSE is ready */
 299:c/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 300:c/stm32f1xx_hal_rcc.c ****         {
 301:c/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 302:c/stm32f1xx_hal_rcc.c ****           {
 303:c/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 304:c/stm32f1xx_hal_rcc.c ****           }
 305:c/stm32f1xx_hal_rcc.c ****         }
 306:c/stm32f1xx_hal_rcc.c ****       }
 307:c/stm32f1xx_hal_rcc.c ****       else
 308:c/stm32f1xx_hal_rcc.c ****       {
 309:c/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 310:c/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 311:c/stm32f1xx_hal_rcc.c ****         
 312:c/stm32f1xx_hal_rcc.c ****         /* Wait till HSE is disabled */
 313:c/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 314:c/stm32f1xx_hal_rcc.c ****         {
 315:c/stm32f1xx_hal_rcc.c ****            if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 316:c/stm32f1xx_hal_rcc.c ****           {
 317:c/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 318:c/stm32f1xx_hal_rcc.c ****           }
 319:c/stm32f1xx_hal_rcc.c ****         }
 320:c/stm32f1xx_hal_rcc.c ****       }
 321:c/stm32f1xx_hal_rcc.c ****     }
 322:c/stm32f1xx_hal_rcc.c ****   }
 323:c/stm32f1xx_hal_rcc.c ****   /*----------------------------- HSI Configuration --------------------------*/ 
 324:c/stm32f1xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 104              		.loc 1 324 0
 105 000c 2B68     		ldr	r3, [r5]
 106 000e 9F07     		lsls	r7, r3, #30
 107 0010 5ED4     		bmi	.L6
 108              	.L21:
 325:c/stm32f1xx_hal_rcc.c ****   {
 326:c/stm32f1xx_hal_rcc.c ****     /* Check the parameters */
 327:c/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 328:c/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 329:c/stm32f1xx_hal_rcc.c ****     
 330:c/stm32f1xx_hal_rcc.c ****     /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock *
 331:c/stm32f1xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 332:c/stm32f1xx_hal_rcc.c ****        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_
 333:c/stm32f1xx_hal_rcc.c ****     {
 334:c/stm32f1xx_hal_rcc.c ****       /* When HSI is used as system clock it will not disabled */
 335:c/stm32f1xx_hal_rcc.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_
 336:c/stm32f1xx_hal_rcc.c ****       {
 337:c/stm32f1xx_hal_rcc.c ****         return HAL_ERROR;
 338:c/stm32f1xx_hal_rcc.c ****       }
 339:c/stm32f1xx_hal_rcc.c ****       /* Otherwise, just the calibration is allowed */
 340:c/stm32f1xx_hal_rcc.c ****       else
 341:c/stm32f1xx_hal_rcc.c ****       {
 342:c/stm32f1xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 343:c/stm32f1xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 344:c/stm32f1xx_hal_rcc.c ****       }
 345:c/stm32f1xx_hal_rcc.c ****     }
 346:c/stm32f1xx_hal_rcc.c ****     else
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 9


 347:c/stm32f1xx_hal_rcc.c ****     {
 348:c/stm32f1xx_hal_rcc.c ****       /* Check the HSI State */
 349:c/stm32f1xx_hal_rcc.c ****       if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 350:c/stm32f1xx_hal_rcc.c ****       {
 351:c/stm32f1xx_hal_rcc.c ****        /* Enable the Internal High Speed oscillator (HSI). */
 352:c/stm32f1xx_hal_rcc.c ****         __HAL_RCC_HSI_ENABLE();
 353:c/stm32f1xx_hal_rcc.c ****         
 354:c/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 355:c/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 356:c/stm32f1xx_hal_rcc.c ****         
 357:c/stm32f1xx_hal_rcc.c ****         /* Wait till HSI is ready */
 358:c/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 359:c/stm32f1xx_hal_rcc.c ****         {
 360:c/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 361:c/stm32f1xx_hal_rcc.c ****           {
 362:c/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 363:c/stm32f1xx_hal_rcc.c ****           }
 364:c/stm32f1xx_hal_rcc.c ****         }
 365:c/stm32f1xx_hal_rcc.c ****                 
 366:c/stm32f1xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 367:c/stm32f1xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 368:c/stm32f1xx_hal_rcc.c ****       }
 369:c/stm32f1xx_hal_rcc.c ****       else
 370:c/stm32f1xx_hal_rcc.c ****       {
 371:c/stm32f1xx_hal_rcc.c ****         /* Disable the Internal High Speed oscillator (HSI). */
 372:c/stm32f1xx_hal_rcc.c ****         __HAL_RCC_HSI_DISABLE();
 373:c/stm32f1xx_hal_rcc.c ****         
 374:c/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 375:c/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 376:c/stm32f1xx_hal_rcc.c ****         
 377:c/stm32f1xx_hal_rcc.c ****         /* Wait till HSI is disabled */
 378:c/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 379:c/stm32f1xx_hal_rcc.c ****         {
 380:c/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 381:c/stm32f1xx_hal_rcc.c ****           {
 382:c/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 383:c/stm32f1xx_hal_rcc.c ****           }
 384:c/stm32f1xx_hal_rcc.c ****         }
 385:c/stm32f1xx_hal_rcc.c ****       }
 386:c/stm32f1xx_hal_rcc.c ****     }
 387:c/stm32f1xx_hal_rcc.c ****   }
 388:c/stm32f1xx_hal_rcc.c ****   /*------------------------------ LSI Configuration -------------------------*/ 
 389:c/stm32f1xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 109              		.loc 1 389 0
 110 0012 2B68     		ldr	r3, [r5]
 111 0014 1907     		lsls	r1, r3, #28
 112 0016 00F19580 		bmi	.L31
 113              	.L38:
 390:c/stm32f1xx_hal_rcc.c ****   {
 391:c/stm32f1xx_hal_rcc.c ****     /* Check the parameters */
 392:c/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 393:c/stm32f1xx_hal_rcc.c ****     
 394:c/stm32f1xx_hal_rcc.c ****     /* Check the LSI State */
 395:c/stm32f1xx_hal_rcc.c ****     if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 396:c/stm32f1xx_hal_rcc.c ****     {
 397:c/stm32f1xx_hal_rcc.c ****       /* Enable the Internal Low Speed oscillator (LSI). */
 398:c/stm32f1xx_hal_rcc.c ****       __HAL_RCC_LSI_ENABLE();
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 10


 399:c/stm32f1xx_hal_rcc.c ****       
 400:c/stm32f1xx_hal_rcc.c ****       /* Get Start Tick */
 401:c/stm32f1xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 402:c/stm32f1xx_hal_rcc.c ****       
 403:c/stm32f1xx_hal_rcc.c ****       /* Wait till LSI is ready */  
 404:c/stm32f1xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 405:c/stm32f1xx_hal_rcc.c ****       {
 406:c/stm32f1xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 407:c/stm32f1xx_hal_rcc.c ****         {
 408:c/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 409:c/stm32f1xx_hal_rcc.c ****         }
 410:c/stm32f1xx_hal_rcc.c ****       }
 411:c/stm32f1xx_hal_rcc.c ****       /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
 412:c/stm32f1xx_hal_rcc.c ****           should be added.*/
 413:c/stm32f1xx_hal_rcc.c ****       RCC_Delay(1);
 414:c/stm32f1xx_hal_rcc.c ****     }
 415:c/stm32f1xx_hal_rcc.c ****     else
 416:c/stm32f1xx_hal_rcc.c ****     {
 417:c/stm32f1xx_hal_rcc.c ****       /* Disable the Internal Low Speed oscillator (LSI). */
 418:c/stm32f1xx_hal_rcc.c ****       __HAL_RCC_LSI_DISABLE();
 419:c/stm32f1xx_hal_rcc.c ****       
 420:c/stm32f1xx_hal_rcc.c ****       /* Get Start Tick */
 421:c/stm32f1xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 422:c/stm32f1xx_hal_rcc.c ****       
 423:c/stm32f1xx_hal_rcc.c ****       /* Wait till LSI is disabled */  
 424:c/stm32f1xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 425:c/stm32f1xx_hal_rcc.c ****       {
 426:c/stm32f1xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 427:c/stm32f1xx_hal_rcc.c ****         {
 428:c/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 429:c/stm32f1xx_hal_rcc.c ****         }
 430:c/stm32f1xx_hal_rcc.c ****       }
 431:c/stm32f1xx_hal_rcc.c ****     }
 432:c/stm32f1xx_hal_rcc.c ****   }
 433:c/stm32f1xx_hal_rcc.c ****   /*------------------------------ LSE Configuration -------------------------*/ 
 434:c/stm32f1xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 114              		.loc 1 434 0
 115 001a 2B68     		ldr	r3, [r5]
 116 001c 5A07     		lsls	r2, r3, #29
 117 001e 00F1BF80 		bmi	.L32
 118              	.L41:
 435:c/stm32f1xx_hal_rcc.c ****   {
 436:c/stm32f1xx_hal_rcc.c ****     FlagStatus       pwrclkchanged = RESET;
 437:c/stm32f1xx_hal_rcc.c ****     
 438:c/stm32f1xx_hal_rcc.c ****     /* Check the parameters */
 439:c/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 440:c/stm32f1xx_hal_rcc.c **** 
 441:c/stm32f1xx_hal_rcc.c ****     /* Update LSE configuration in Backup Domain control register    */
 442:c/stm32f1xx_hal_rcc.c ****     /* Requires to enable write access to Backup Domain of necessary */
 443:c/stm32f1xx_hal_rcc.c ****     if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 444:c/stm32f1xx_hal_rcc.c ****     {
 445:c/stm32f1xx_hal_rcc.c ****       __HAL_RCC_PWR_CLK_ENABLE();
 446:c/stm32f1xx_hal_rcc.c ****       pwrclkchanged = SET;
 447:c/stm32f1xx_hal_rcc.c ****     }
 448:c/stm32f1xx_hal_rcc.c ****     
 449:c/stm32f1xx_hal_rcc.c ****     if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 450:c/stm32f1xx_hal_rcc.c ****     {
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 11


 451:c/stm32f1xx_hal_rcc.c ****       /* Enable write access to Backup domain */
 452:c/stm32f1xx_hal_rcc.c ****       SET_BIT(PWR->CR, PWR_CR_DBP);
 453:c/stm32f1xx_hal_rcc.c ****       
 454:c/stm32f1xx_hal_rcc.c ****       /* Wait for Backup domain Write protection disable */
 455:c/stm32f1xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 456:c/stm32f1xx_hal_rcc.c **** 
 457:c/stm32f1xx_hal_rcc.c ****       while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 458:c/stm32f1xx_hal_rcc.c ****       {
 459:c/stm32f1xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 460:c/stm32f1xx_hal_rcc.c ****         {
 461:c/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 462:c/stm32f1xx_hal_rcc.c ****         }
 463:c/stm32f1xx_hal_rcc.c ****       }
 464:c/stm32f1xx_hal_rcc.c ****     }
 465:c/stm32f1xx_hal_rcc.c **** 
 466:c/stm32f1xx_hal_rcc.c ****     /* Set the new LSE configuration -----------------------------------------*/
 467:c/stm32f1xx_hal_rcc.c ****     __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 468:c/stm32f1xx_hal_rcc.c ****     /* Check the LSE State */
 469:c/stm32f1xx_hal_rcc.c ****     if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 470:c/stm32f1xx_hal_rcc.c ****     {
 471:c/stm32f1xx_hal_rcc.c ****       /* Get Start Tick */
 472:c/stm32f1xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 473:c/stm32f1xx_hal_rcc.c ****       
 474:c/stm32f1xx_hal_rcc.c ****       /* Wait till LSE is ready */  
 475:c/stm32f1xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 476:c/stm32f1xx_hal_rcc.c ****       {
 477:c/stm32f1xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 478:c/stm32f1xx_hal_rcc.c ****         {
 479:c/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 480:c/stm32f1xx_hal_rcc.c ****         }
 481:c/stm32f1xx_hal_rcc.c ****       }
 482:c/stm32f1xx_hal_rcc.c ****     }
 483:c/stm32f1xx_hal_rcc.c ****     else
 484:c/stm32f1xx_hal_rcc.c ****     {
 485:c/stm32f1xx_hal_rcc.c ****       /* Get Start Tick */
 486:c/stm32f1xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 487:c/stm32f1xx_hal_rcc.c ****       
 488:c/stm32f1xx_hal_rcc.c ****       /* Wait till LSE is disabled */  
 489:c/stm32f1xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 490:c/stm32f1xx_hal_rcc.c ****       {
 491:c/stm32f1xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 492:c/stm32f1xx_hal_rcc.c ****         {
 493:c/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 494:c/stm32f1xx_hal_rcc.c ****         }
 495:c/stm32f1xx_hal_rcc.c ****       }
 496:c/stm32f1xx_hal_rcc.c ****     }
 497:c/stm32f1xx_hal_rcc.c **** 
 498:c/stm32f1xx_hal_rcc.c ****     /* Require to disable power clock if necessary */
 499:c/stm32f1xx_hal_rcc.c ****     if(pwrclkchanged == SET)
 500:c/stm32f1xx_hal_rcc.c ****     {
 501:c/stm32f1xx_hal_rcc.c ****       __HAL_RCC_PWR_CLK_DISABLE();
 502:c/stm32f1xx_hal_rcc.c ****     }
 503:c/stm32f1xx_hal_rcc.c ****   }
 504:c/stm32f1xx_hal_rcc.c **** 
 505:c/stm32f1xx_hal_rcc.c **** #if defined(RCC_CR_PLL2ON)
 506:c/stm32f1xx_hal_rcc.c ****   /*-------------------------------- PLL2 Configuration -----------------------*/
 507:c/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 12


 508:c/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
 509:c/stm32f1xx_hal_rcc.c ****   if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 510:c/stm32f1xx_hal_rcc.c ****   {
 511:c/stm32f1xx_hal_rcc.c ****     /* This bit can not be cleared if the PLL2 clock is used indirectly as system 
 512:c/stm32f1xx_hal_rcc.c ****       clock (i.e. it is used as PLL clock entry that is used as system clock). */
 513:c/stm32f1xx_hal_rcc.c ****     if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 514:c/stm32f1xx_hal_rcc.c ****         (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 515:c/stm32f1xx_hal_rcc.c ****         ((READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 516:c/stm32f1xx_hal_rcc.c ****     {
 517:c/stm32f1xx_hal_rcc.c ****       return HAL_ERROR;
 518:c/stm32f1xx_hal_rcc.c ****     }
 519:c/stm32f1xx_hal_rcc.c ****     else
 520:c/stm32f1xx_hal_rcc.c ****     {
 521:c/stm32f1xx_hal_rcc.c ****       if((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 522:c/stm32f1xx_hal_rcc.c ****       {
 523:c/stm32f1xx_hal_rcc.c ****         /* Check the parameters */
 524:c/stm32f1xx_hal_rcc.c ****         assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
 525:c/stm32f1xx_hal_rcc.c ****         assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));
 526:c/stm32f1xx_hal_rcc.c **** 
 527:c/stm32f1xx_hal_rcc.c ****         /* Prediv2 can be written only when the PLLI2S is disabled. */
 528:c/stm32f1xx_hal_rcc.c ****         /* Return an error only if new value is different from the programmed value */
 529:c/stm32f1xx_hal_rcc.c ****         if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 530:c/stm32f1xx_hal_rcc.c ****           (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 531:c/stm32f1xx_hal_rcc.c ****         {
 532:c/stm32f1xx_hal_rcc.c ****           return HAL_ERROR;
 533:c/stm32f1xx_hal_rcc.c ****         }
 534:c/stm32f1xx_hal_rcc.c ****         
 535:c/stm32f1xx_hal_rcc.c ****         /* Disable the main PLL2. */
 536:c/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL2_DISABLE();
 537:c/stm32f1xx_hal_rcc.c ****         
 538:c/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 539:c/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 540:c/stm32f1xx_hal_rcc.c ****         
 541:c/stm32f1xx_hal_rcc.c ****         /* Wait till PLL2 is disabled */
 542:c/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 543:c/stm32f1xx_hal_rcc.c ****         {
 544:c/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 545:c/stm32f1xx_hal_rcc.c ****           {
 546:c/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 547:c/stm32f1xx_hal_rcc.c ****           }
 548:c/stm32f1xx_hal_rcc.c ****         }
 549:c/stm32f1xx_hal_rcc.c ****         
 550:c/stm32f1xx_hal_rcc.c ****         /* Configure the HSE prediv2 factor --------------------------------*/
 551:c/stm32f1xx_hal_rcc.c ****         __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 552:c/stm32f1xx_hal_rcc.c **** 
 553:c/stm32f1xx_hal_rcc.c ****         /* Configure the main PLL2 multiplication factors. */
 554:c/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 555:c/stm32f1xx_hal_rcc.c ****         
 556:c/stm32f1xx_hal_rcc.c ****         /* Enable the main PLL2. */
 557:c/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL2_ENABLE();
 558:c/stm32f1xx_hal_rcc.c ****         
 559:c/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 560:c/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 561:c/stm32f1xx_hal_rcc.c ****         
 562:c/stm32f1xx_hal_rcc.c ****         /* Wait till PLL2 is ready */
 563:c/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 564:c/stm32f1xx_hal_rcc.c ****         {
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 13


 565:c/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 566:c/stm32f1xx_hal_rcc.c ****           {
 567:c/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 568:c/stm32f1xx_hal_rcc.c ****           }
 569:c/stm32f1xx_hal_rcc.c ****         }
 570:c/stm32f1xx_hal_rcc.c ****       }
 571:c/stm32f1xx_hal_rcc.c ****       else
 572:c/stm32f1xx_hal_rcc.c ****       {
 573:c/stm32f1xx_hal_rcc.c ****        /* Set PREDIV1 source to HSE */
 574:c/stm32f1xx_hal_rcc.c ****         CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 575:c/stm32f1xx_hal_rcc.c **** 
 576:c/stm32f1xx_hal_rcc.c ****         /* Disable the main PLL2. */
 577:c/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL2_DISABLE();
 578:c/stm32f1xx_hal_rcc.c ****  
 579:c/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 580:c/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 581:c/stm32f1xx_hal_rcc.c ****         
 582:c/stm32f1xx_hal_rcc.c ****         /* Wait till PLL2 is disabled */  
 583:c/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 584:c/stm32f1xx_hal_rcc.c ****         {
 585:c/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 586:c/stm32f1xx_hal_rcc.c ****           {
 587:c/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 588:c/stm32f1xx_hal_rcc.c ****           }
 589:c/stm32f1xx_hal_rcc.c ****         }
 590:c/stm32f1xx_hal_rcc.c ****       }
 591:c/stm32f1xx_hal_rcc.c ****     }
 592:c/stm32f1xx_hal_rcc.c ****   }
 593:c/stm32f1xx_hal_rcc.c **** 
 594:c/stm32f1xx_hal_rcc.c **** #endif /* RCC_CR_PLL2ON */
 595:c/stm32f1xx_hal_rcc.c ****   /*-------------------------------- PLL Configuration -----------------------*/
 596:c/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
 597:c/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 598:c/stm32f1xx_hal_rcc.c ****   if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 119              		.loc 1 598 0
 120 0022 EA69     		ldr	r2, [r5, #28]
 121 0024 002A     		cmp	r2, #0
 122 0026 40F02D81 		bne	.L57
 123              	.LVL2:
 124              	.L64:
 599:c/stm32f1xx_hal_rcc.c ****   {
 600:c/stm32f1xx_hal_rcc.c ****     /* Check if the PLL is used as system clock or not */
 601:c/stm32f1xx_hal_rcc.c ****     if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 602:c/stm32f1xx_hal_rcc.c ****     { 
 603:c/stm32f1xx_hal_rcc.c ****       if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 604:c/stm32f1xx_hal_rcc.c ****       {
 605:c/stm32f1xx_hal_rcc.c ****         /* Check the parameters */
 606:c/stm32f1xx_hal_rcc.c ****         assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 607:c/stm32f1xx_hal_rcc.c ****         assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 608:c/stm32f1xx_hal_rcc.c ****   
 609:c/stm32f1xx_hal_rcc.c ****         /* Disable the main PLL. */
 610:c/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 611:c/stm32f1xx_hal_rcc.c ****         
 612:c/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 613:c/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 614:c/stm32f1xx_hal_rcc.c ****         
 615:c/stm32f1xx_hal_rcc.c ****         /* Wait till PLL is disabled */
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 14


 616:c/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 617:c/stm32f1xx_hal_rcc.c ****         {
 618:c/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 619:c/stm32f1xx_hal_rcc.c ****           {
 620:c/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 621:c/stm32f1xx_hal_rcc.c ****           }
 622:c/stm32f1xx_hal_rcc.c ****         }
 623:c/stm32f1xx_hal_rcc.c **** 
 624:c/stm32f1xx_hal_rcc.c ****         /* Configure the HSE prediv factor --------------------------------*/
 625:c/stm32f1xx_hal_rcc.c ****         /* It can be written only when the PLL is disabled. Not used in PLL source is different tha
 626:c/stm32f1xx_hal_rcc.c ****         if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 627:c/stm32f1xx_hal_rcc.c ****         {
 628:c/stm32f1xx_hal_rcc.c ****           /* Check the parameter */
 629:c/stm32f1xx_hal_rcc.c ****           assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 630:c/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
 631:c/stm32f1xx_hal_rcc.c ****           assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));
 632:c/stm32f1xx_hal_rcc.c ****           
 633:c/stm32f1xx_hal_rcc.c ****           /* Set PREDIV1 source */
 634:c/stm32f1xx_hal_rcc.c ****           SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 635:c/stm32f1xx_hal_rcc.c **** #endif /* RCC_CFGR2_PREDIV1SRC */
 636:c/stm32f1xx_hal_rcc.c **** 
 637:c/stm32f1xx_hal_rcc.c ****           /* Set PREDIV1 Value */
 638:c/stm32f1xx_hal_rcc.c ****           __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 639:c/stm32f1xx_hal_rcc.c ****         }
 640:c/stm32f1xx_hal_rcc.c **** 
 641:c/stm32f1xx_hal_rcc.c ****         /* Configure the main PLL clock source and multiplication factors. */
 642:c/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 643:c/stm32f1xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLMUL);
 644:c/stm32f1xx_hal_rcc.c ****         /* Enable the main PLL. */
 645:c/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL_ENABLE();
 646:c/stm32f1xx_hal_rcc.c ****         
 647:c/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 648:c/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 649:c/stm32f1xx_hal_rcc.c ****         
 650:c/stm32f1xx_hal_rcc.c ****         /* Wait till PLL is ready */
 651:c/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 652:c/stm32f1xx_hal_rcc.c ****         {
 653:c/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 654:c/stm32f1xx_hal_rcc.c ****           {
 655:c/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 656:c/stm32f1xx_hal_rcc.c ****           }
 657:c/stm32f1xx_hal_rcc.c ****         }
 658:c/stm32f1xx_hal_rcc.c ****       }
 659:c/stm32f1xx_hal_rcc.c ****       else
 660:c/stm32f1xx_hal_rcc.c ****       {
 661:c/stm32f1xx_hal_rcc.c ****         /* Disable the main PLL. */
 662:c/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 663:c/stm32f1xx_hal_rcc.c ****  
 664:c/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 665:c/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 666:c/stm32f1xx_hal_rcc.c ****         
 667:c/stm32f1xx_hal_rcc.c ****         /* Wait till PLL is disabled */  
 668:c/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 669:c/stm32f1xx_hal_rcc.c ****         {
 670:c/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 671:c/stm32f1xx_hal_rcc.c ****           {
 672:c/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 15


 673:c/stm32f1xx_hal_rcc.c ****           }
 674:c/stm32f1xx_hal_rcc.c ****         }
 675:c/stm32f1xx_hal_rcc.c ****       }
 676:c/stm32f1xx_hal_rcc.c ****     }
 677:c/stm32f1xx_hal_rcc.c ****     else
 678:c/stm32f1xx_hal_rcc.c ****     {
 679:c/stm32f1xx_hal_rcc.c ****       return HAL_ERROR;
 680:c/stm32f1xx_hal_rcc.c ****     }
 681:c/stm32f1xx_hal_rcc.c ****   }
 682:c/stm32f1xx_hal_rcc.c ****   
 683:c/stm32f1xx_hal_rcc.c ****   return HAL_OK;
 125              		.loc 1 683 0
 126 002a 0020     		movs	r0, #0
 127 002c 14E0     		b	.L89
 128              	.LVL3:
 129              	.L5:
 278:c/stm32f1xx_hal_rcc.c ****        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_
 130              		.loc 1 278 0
 131 002e 904C     		ldr	r4, .L96
 132 0030 6368     		ldr	r3, [r4, #4]
 133 0032 03F00C03 		and	r3, r3, #12
 134 0036 042B     		cmp	r3, #4
 135 0038 07D0     		beq	.L8
 279:c/stm32f1xx_hal_rcc.c ****     {
 136              		.loc 1 279 0
 137 003a 6368     		ldr	r3, [r4, #4]
 138 003c 03F00C03 		and	r3, r3, #12
 139 0040 082B     		cmp	r3, #8
 140 0042 0CD1     		bne	.L9
 279:c/stm32f1xx_hal_rcc.c ****     {
 141              		.loc 1 279 0 is_stmt 0 discriminator 1
 142 0044 6368     		ldr	r3, [r4, #4]
 143 0046 DE03     		lsls	r6, r3, #15
 144 0048 09D5     		bpl	.L9
 145              	.L8:
 281:c/stm32f1xx_hal_rcc.c ****       {
 146              		.loc 1 281 0 is_stmt 1
 147 004a 2368     		ldr	r3, [r4]
 148 004c 9C03     		lsls	r4, r3, #14
 149 004e DDD5     		bpl	.L10
 281:c/stm32f1xx_hal_rcc.c ****       {
 150              		.loc 1 281 0 is_stmt 0 discriminator 1
 151 0050 6B68     		ldr	r3, [r5, #4]
 152 0052 002B     		cmp	r3, #0
 153 0054 DAD1     		bne	.L10
 154              	.LVL4:
 155              	.L25:
 283:c/stm32f1xx_hal_rcc.c ****       }
 156              		.loc 1 283 0 is_stmt 1
 157 0056 0120     		movs	r0, #1
 158              	.LVL5:
 159              	.L89:
 684:c/stm32f1xx_hal_rcc.c **** }
 160              		.loc 1 684 0
 161 0058 02B0     		add	sp, sp, #8
 162              		.cfi_remember_state
 163              		.cfi_def_cfa_offset 24
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 16


 164              		@ sp needed
 165 005a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 166              	.LVL6:
 167              	.L9:
 168              		.cfi_restore_state
 289:c/stm32f1xx_hal_rcc.c ****       
 169              		.loc 1 289 0
 170 005e 6B68     		ldr	r3, [r5, #4]
 171 0060 B3F5803F 		cmp	r3, #65536
 172 0064 10D1     		bne	.L12
 173              	.L94:
 289:c/stm32f1xx_hal_rcc.c ****       
 174              		.loc 1 289 0 is_stmt 0 discriminator 5
 175 0066 2368     		ldr	r3, [r4]
 176 0068 43F48033 		orr	r3, r3, #65536
 177              	.L92:
 289:c/stm32f1xx_hal_rcc.c ****       
 178              		.loc 1 289 0 discriminator 6
 179 006c 2360     		str	r3, [r4]
 296:c/stm32f1xx_hal_rcc.c ****         
 180              		.loc 1 296 0 is_stmt 1 discriminator 6
 181 006e FFF7FEFF 		bl	HAL_GetTick
 182              	.LVL7:
 183 0072 0646     		mov	r6, r0
 184              	.LVL8:
 185              	.L17:
 299:c/stm32f1xx_hal_rcc.c ****         {
 186              		.loc 1 299 0
 187 0074 2368     		ldr	r3, [r4]
 188 0076 9803     		lsls	r0, r3, #14
 189 0078 C8D4     		bmi	.L10
 301:c/stm32f1xx_hal_rcc.c ****           {
 190              		.loc 1 301 0
 191 007a FFF7FEFF 		bl	HAL_GetTick
 192              	.LVL9:
 193 007e 801B     		subs	r0, r0, r6
 194 0080 6428     		cmp	r0, #100
 195 0082 F7D9     		bls	.L17
 196              	.LVL10:
 197              	.L19:
 303:c/stm32f1xx_hal_rcc.c ****           }
 198              		.loc 1 303 0
 199 0084 0320     		movs	r0, #3
 200 0086 E7E7     		b	.L89
 201              	.LVL11:
 202              	.L12:
 289:c/stm32f1xx_hal_rcc.c ****       
 203              		.loc 1 289 0 discriminator 2
 204 0088 9BB9     		cbnz	r3, .L14
 289:c/stm32f1xx_hal_rcc.c ****       
 205              		.loc 1 289 0 is_stmt 0 discriminator 3
 206 008a 2368     		ldr	r3, [r4]
 207 008c 23F48033 		bic	r3, r3, #65536
 208 0090 2360     		str	r3, [r4]
 209 0092 2368     		ldr	r3, [r4]
 210 0094 23F48023 		bic	r3, r3, #262144
 211 0098 2360     		str	r3, [r4]
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 17


 310:c/stm32f1xx_hal_rcc.c ****         
 212              		.loc 1 310 0 is_stmt 1 discriminator 3
 213 009a FFF7FEFF 		bl	HAL_GetTick
 214              	.LVL12:
 215 009e 0646     		mov	r6, r0
 216              	.LVL13:
 217              	.L15:
 313:c/stm32f1xx_hal_rcc.c ****         {
 218              		.loc 1 313 0
 219 00a0 2368     		ldr	r3, [r4]
 220 00a2 9903     		lsls	r1, r3, #14
 221 00a4 B2D5     		bpl	.L10
 315:c/stm32f1xx_hal_rcc.c ****           {
 222              		.loc 1 315 0
 223 00a6 FFF7FEFF 		bl	HAL_GetTick
 224              	.LVL14:
 225 00aa 801B     		subs	r0, r0, r6
 226 00ac 6428     		cmp	r0, #100
 227 00ae F7D9     		bls	.L15
 228 00b0 E8E7     		b	.L19
 229              	.LVL15:
 230              	.L14:
 289:c/stm32f1xx_hal_rcc.c ****       
 231              		.loc 1 289 0 discriminator 4
 232 00b2 B3F5A02F 		cmp	r3, #327680
 233 00b6 2368     		ldr	r3, [r4]
 234 00b8 03D1     		bne	.L16
 289:c/stm32f1xx_hal_rcc.c ****       
 235              		.loc 1 289 0 is_stmt 0 discriminator 5
 236 00ba 43F48023 		orr	r3, r3, #262144
 237 00be 2360     		str	r3, [r4]
 238 00c0 D1E7     		b	.L94
 239              	.L16:
 289:c/stm32f1xx_hal_rcc.c ****       
 240              		.loc 1 289 0 discriminator 6
 241 00c2 23F48033 		bic	r3, r3, #65536
 242 00c6 2360     		str	r3, [r4]
 243 00c8 2368     		ldr	r3, [r4]
 244 00ca 23F48023 		bic	r3, r3, #262144
 245 00ce CDE7     		b	.L92
 246              	.LVL16:
 247              	.L6:
 331:c/stm32f1xx_hal_rcc.c ****        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_
 248              		.loc 1 331 0 is_stmt 1
 249 00d0 674C     		ldr	r4, .L96
 250 00d2 6368     		ldr	r3, [r4, #4]
 251 00d4 13F00C0F 		tst	r3, #12
 252 00d8 07D0     		beq	.L22
 332:c/stm32f1xx_hal_rcc.c ****     {
 253              		.loc 1 332 0
 254 00da 6368     		ldr	r3, [r4, #4]
 255 00dc 03F00C03 		and	r3, r3, #12
 256 00e0 082B     		cmp	r3, #8
 257 00e2 10D1     		bne	.L23
 332:c/stm32f1xx_hal_rcc.c ****     {
 258              		.loc 1 332 0 is_stmt 0 discriminator 1
 259 00e4 6368     		ldr	r3, [r4, #4]
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 18


 260 00e6 DA03     		lsls	r2, r3, #15
 261 00e8 0DD4     		bmi	.L23
 262              	.L22:
 335:c/stm32f1xx_hal_rcc.c ****       {
 263              		.loc 1 335 0 is_stmt 1
 264 00ea 2368     		ldr	r3, [r4]
 265 00ec 9B07     		lsls	r3, r3, #30
 266 00ee 02D5     		bpl	.L91
 335:c/stm32f1xx_hal_rcc.c ****       {
 267              		.loc 1 335 0 is_stmt 0 discriminator 1
 268 00f0 2B69     		ldr	r3, [r5, #16]
 269 00f2 012B     		cmp	r3, #1
 270 00f4 AFD1     		bne	.L25
 271              	.L91:
 367:c/stm32f1xx_hal_rcc.c ****       }
 272              		.loc 1 367 0 is_stmt 1
 273 00f6 2368     		ldr	r3, [r4]
 274 00f8 6A69     		ldr	r2, [r5, #20]
 275 00fa 23F0F803 		bic	r3, r3, #248
 276 00fe 43EAC203 		orr	r3, r3, r2, lsl #3
 277 0102 2360     		str	r3, [r4]
 278 0104 85E7     		b	.L21
 279              	.L23:
 349:c/stm32f1xx_hal_rcc.c ****       {
 280              		.loc 1 349 0
 281 0106 2A69     		ldr	r2, [r5, #16]
 282 0108 5A4B     		ldr	r3, .L96+4
 283 010a 6AB1     		cbz	r2, .L26
 352:c/stm32f1xx_hal_rcc.c ****         
 284              		.loc 1 352 0
 285 010c 0122     		movs	r2, #1
 286 010e 1A60     		str	r2, [r3]
 355:c/stm32f1xx_hal_rcc.c ****         
 287              		.loc 1 355 0
 288 0110 FFF7FEFF 		bl	HAL_GetTick
 289              	.LVL17:
 290 0114 0646     		mov	r6, r0
 291              	.LVL18:
 292              	.L27:
 358:c/stm32f1xx_hal_rcc.c ****         {
 293              		.loc 1 358 0
 294 0116 2368     		ldr	r3, [r4]
 295 0118 9F07     		lsls	r7, r3, #30
 296 011a ECD4     		bmi	.L91
 360:c/stm32f1xx_hal_rcc.c ****           {
 297              		.loc 1 360 0
 298 011c FFF7FEFF 		bl	HAL_GetTick
 299              	.LVL19:
 300 0120 801B     		subs	r0, r0, r6
 301 0122 0228     		cmp	r0, #2
 302 0124 F7D9     		bls	.L27
 303 0126 ADE7     		b	.L19
 304              	.LVL20:
 305              	.L26:
 372:c/stm32f1xx_hal_rcc.c ****         
 306              		.loc 1 372 0
 307 0128 1A60     		str	r2, [r3]
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 19


 375:c/stm32f1xx_hal_rcc.c ****         
 308              		.loc 1 375 0
 309 012a FFF7FEFF 		bl	HAL_GetTick
 310              	.LVL21:
 311 012e 0646     		mov	r6, r0
 312              	.LVL22:
 313              	.L29:
 378:c/stm32f1xx_hal_rcc.c ****         {
 314              		.loc 1 378 0
 315 0130 2368     		ldr	r3, [r4]
 316 0132 9807     		lsls	r0, r3, #30
 317 0134 7FF56DAF 		bpl	.L21
 380:c/stm32f1xx_hal_rcc.c ****           {
 318              		.loc 1 380 0
 319 0138 FFF7FEFF 		bl	HAL_GetTick
 320              	.LVL23:
 321 013c 801B     		subs	r0, r0, r6
 322 013e 0228     		cmp	r0, #2
 323 0140 F6D9     		bls	.L29
 324 0142 9FE7     		b	.L19
 325              	.LVL24:
 326              	.L31:
 395:c/stm32f1xx_hal_rcc.c ****     {
 327              		.loc 1 395 0
 328 0144 AA69     		ldr	r2, [r5, #24]
 329 0146 4A4C     		ldr	r4, .L96
 330 0148 4B4B     		ldr	r3, .L96+8
 331 014a DAB1     		cbz	r2, .L34
 398:c/stm32f1xx_hal_rcc.c ****       
 332              		.loc 1 398 0
 333 014c 0122     		movs	r2, #1
 334 014e 1A60     		str	r2, [r3]
 401:c/stm32f1xx_hal_rcc.c ****       
 335              		.loc 1 401 0
 336 0150 FFF7FEFF 		bl	HAL_GetTick
 337              	.LVL25:
 338 0154 0646     		mov	r6, r0
 339              	.LVL26:
 340              	.L35:
 404:c/stm32f1xx_hal_rcc.c ****       {
 341              		.loc 1 404 0
 342 0156 636A     		ldr	r3, [r4, #36]
 343 0158 9B07     		lsls	r3, r3, #30
 344 015a 0DD5     		bpl	.L36
 345              	.LVL27:
 346              	.LBB16:
 347              	.LBB17:
 685:c/stm32f1xx_hal_rcc.c **** 
 686:c/stm32f1xx_hal_rcc.c **** /**
 687:c/stm32f1xx_hal_rcc.c ****   * @brief  Initializes the CPU, AHB and APB buses clocks according to the specified 
 688:c/stm32f1xx_hal_rcc.c ****   *         parameters in the RCC_ClkInitStruct.
 689:c/stm32f1xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct pointer to an RCC_OscInitTypeDef structure that
 690:c/stm32f1xx_hal_rcc.c ****   *         contains the configuration information for the RCC peripheral.
 691:c/stm32f1xx_hal_rcc.c ****   * @param  FLatency FLASH Latency                   
 692:c/stm32f1xx_hal_rcc.c ****   *          The value of this parameter depend on device used within the same series
 693:c/stm32f1xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
 694:c/stm32f1xx_hal_rcc.c ****   *         and updated by @ref HAL_RCC_GetHCLKFreq() function called within this function
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 20


 695:c/stm32f1xx_hal_rcc.c ****   *
 696:c/stm32f1xx_hal_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 697:c/stm32f1xx_hal_rcc.c ****   *         start-up from Reset, wake-up from STOP and STANDBY mode, or in case
 698:c/stm32f1xx_hal_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 699:c/stm32f1xx_hal_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 700:c/stm32f1xx_hal_rcc.c ****   *           
 701:c/stm32f1xx_hal_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 702:c/stm32f1xx_hal_rcc.c ****   *         clock source is ready (clock stable after start-up delay or PLL locked). 
 703:c/stm32f1xx_hal_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 704:c/stm32f1xx_hal_rcc.c ****   *         occur when the clock source will be ready. 
 705:c/stm32f1xx_hal_rcc.c ****   *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
 706:c/stm32f1xx_hal_rcc.c ****   *         currently used as system clock source.
 707:c/stm32f1xx_hal_rcc.c ****   * @retval HAL status
 708:c/stm32f1xx_hal_rcc.c ****   */
 709:c/stm32f1xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
 710:c/stm32f1xx_hal_rcc.c **** {
 711:c/stm32f1xx_hal_rcc.c ****   uint32_t tickstart = 0U;
 712:c/stm32f1xx_hal_rcc.c ****   
 713:c/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
 714:c/stm32f1xx_hal_rcc.c ****   assert_param(RCC_ClkInitStruct != NULL);
 715:c/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 716:c/stm32f1xx_hal_rcc.c ****   assert_param(IS_FLASH_LATENCY(FLatency));
 717:c/stm32f1xx_hal_rcc.c **** 
 718:c/stm32f1xx_hal_rcc.c ****   /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
 719:c/stm32f1xx_hal_rcc.c ****   must be correctly programmed according to the frequency of the CPU clock 
 720:c/stm32f1xx_hal_rcc.c ****     (HCLK) of the device. */
 721:c/stm32f1xx_hal_rcc.c **** 
 722:c/stm32f1xx_hal_rcc.c **** #if defined(FLASH_ACR_LATENCY)
 723:c/stm32f1xx_hal_rcc.c ****   /* Increasing the number of wait states because of higher CPU frequency */
 724:c/stm32f1xx_hal_rcc.c ****   if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 725:c/stm32f1xx_hal_rcc.c ****   {    
 726:c/stm32f1xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 727:c/stm32f1xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 728:c/stm32f1xx_hal_rcc.c ****     
 729:c/stm32f1xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 730:c/stm32f1xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 731:c/stm32f1xx_hal_rcc.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 732:c/stm32f1xx_hal_rcc.c ****     {
 733:c/stm32f1xx_hal_rcc.c ****       return HAL_ERROR;
 734:c/stm32f1xx_hal_rcc.c ****     }
 735:c/stm32f1xx_hal_rcc.c ****   }
 736:c/stm32f1xx_hal_rcc.c **** 
 737:c/stm32f1xx_hal_rcc.c **** #endif /* FLASH_ACR_LATENCY */
 738:c/stm32f1xx_hal_rcc.c ****   /*-------------------------- HCLK Configuration --------------------------*/
 739:c/stm32f1xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 740:c/stm32f1xx_hal_rcc.c ****   {
 741:c/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 742:c/stm32f1xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 743:c/stm32f1xx_hal_rcc.c ****   }
 744:c/stm32f1xx_hal_rcc.c **** 
 745:c/stm32f1xx_hal_rcc.c ****   /*------------------------- SYSCLK Configuration ---------------------------*/ 
 746:c/stm32f1xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 747:c/stm32f1xx_hal_rcc.c ****   {    
 748:c/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 749:c/stm32f1xx_hal_rcc.c ****     
 750:c/stm32f1xx_hal_rcc.c ****     /* HSE is selected as System Clock Source */
 751:c/stm32f1xx_hal_rcc.c ****     if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 21


 752:c/stm32f1xx_hal_rcc.c ****     {
 753:c/stm32f1xx_hal_rcc.c ****       /* Check the HSE ready flag */  
 754:c/stm32f1xx_hal_rcc.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 755:c/stm32f1xx_hal_rcc.c ****       {
 756:c/stm32f1xx_hal_rcc.c ****         return HAL_ERROR;
 757:c/stm32f1xx_hal_rcc.c ****       }
 758:c/stm32f1xx_hal_rcc.c ****     }
 759:c/stm32f1xx_hal_rcc.c ****     /* PLL is selected as System Clock Source */
 760:c/stm32f1xx_hal_rcc.c ****     else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 761:c/stm32f1xx_hal_rcc.c ****     {
 762:c/stm32f1xx_hal_rcc.c ****       /* Check the PLL ready flag */  
 763:c/stm32f1xx_hal_rcc.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 764:c/stm32f1xx_hal_rcc.c ****       {
 765:c/stm32f1xx_hal_rcc.c ****         return HAL_ERROR;
 766:c/stm32f1xx_hal_rcc.c ****       }
 767:c/stm32f1xx_hal_rcc.c ****     }
 768:c/stm32f1xx_hal_rcc.c ****     /* HSI is selected as System Clock Source */
 769:c/stm32f1xx_hal_rcc.c ****     else
 770:c/stm32f1xx_hal_rcc.c ****     {
 771:c/stm32f1xx_hal_rcc.c ****       /* Check the HSI ready flag */  
 772:c/stm32f1xx_hal_rcc.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 773:c/stm32f1xx_hal_rcc.c ****       {
 774:c/stm32f1xx_hal_rcc.c ****         return HAL_ERROR;
 775:c/stm32f1xx_hal_rcc.c ****       }
 776:c/stm32f1xx_hal_rcc.c ****     }
 777:c/stm32f1xx_hal_rcc.c ****     __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 778:c/stm32f1xx_hal_rcc.c **** 
 779:c/stm32f1xx_hal_rcc.c ****     /* Get Start Tick */
 780:c/stm32f1xx_hal_rcc.c ****     tickstart = HAL_GetTick();
 781:c/stm32f1xx_hal_rcc.c ****     
 782:c/stm32f1xx_hal_rcc.c ****     if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 783:c/stm32f1xx_hal_rcc.c ****     {
 784:c/stm32f1xx_hal_rcc.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 785:c/stm32f1xx_hal_rcc.c ****       {
 786:c/stm32f1xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 787:c/stm32f1xx_hal_rcc.c ****         {
 788:c/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 789:c/stm32f1xx_hal_rcc.c ****         }
 790:c/stm32f1xx_hal_rcc.c ****       }
 791:c/stm32f1xx_hal_rcc.c ****     }
 792:c/stm32f1xx_hal_rcc.c ****     else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 793:c/stm32f1xx_hal_rcc.c ****     {
 794:c/stm32f1xx_hal_rcc.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 795:c/stm32f1xx_hal_rcc.c ****       {
 796:c/stm32f1xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 797:c/stm32f1xx_hal_rcc.c ****         {
 798:c/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 799:c/stm32f1xx_hal_rcc.c ****         }
 800:c/stm32f1xx_hal_rcc.c ****       }
 801:c/stm32f1xx_hal_rcc.c ****     }
 802:c/stm32f1xx_hal_rcc.c ****     else
 803:c/stm32f1xx_hal_rcc.c ****     {
 804:c/stm32f1xx_hal_rcc.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 805:c/stm32f1xx_hal_rcc.c ****       {
 806:c/stm32f1xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 807:c/stm32f1xx_hal_rcc.c ****         {
 808:c/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 22


 809:c/stm32f1xx_hal_rcc.c ****         }
 810:c/stm32f1xx_hal_rcc.c ****       }
 811:c/stm32f1xx_hal_rcc.c ****     }      
 812:c/stm32f1xx_hal_rcc.c ****   }    
 813:c/stm32f1xx_hal_rcc.c **** #if defined(FLASH_ACR_LATENCY)
 814:c/stm32f1xx_hal_rcc.c ****   /* Decreasing the number of wait states because of lower CPU frequency */
 815:c/stm32f1xx_hal_rcc.c ****   if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 816:c/stm32f1xx_hal_rcc.c ****   {    
 817:c/stm32f1xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 818:c/stm32f1xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 819:c/stm32f1xx_hal_rcc.c ****     
 820:c/stm32f1xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 821:c/stm32f1xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 822:c/stm32f1xx_hal_rcc.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 823:c/stm32f1xx_hal_rcc.c ****     {
 824:c/stm32f1xx_hal_rcc.c ****       return HAL_ERROR;
 825:c/stm32f1xx_hal_rcc.c ****     }
 826:c/stm32f1xx_hal_rcc.c ****   }    
 827:c/stm32f1xx_hal_rcc.c **** #endif /* FLASH_ACR_LATENCY */
 828:c/stm32f1xx_hal_rcc.c **** 
 829:c/stm32f1xx_hal_rcc.c ****   /*-------------------------- PCLK1 Configuration ---------------------------*/ 
 830:c/stm32f1xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 831:c/stm32f1xx_hal_rcc.c ****   {
 832:c/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 833:c/stm32f1xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 834:c/stm32f1xx_hal_rcc.c ****   }
 835:c/stm32f1xx_hal_rcc.c ****   
 836:c/stm32f1xx_hal_rcc.c ****   /*-------------------------- PCLK2 Configuration ---------------------------*/ 
 837:c/stm32f1xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 838:c/stm32f1xx_hal_rcc.c ****   {
 839:c/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 840:c/stm32f1xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 841:c/stm32f1xx_hal_rcc.c ****   }
 842:c/stm32f1xx_hal_rcc.c ****  
 843:c/stm32f1xx_hal_rcc.c ****   /* Update the SystemCoreClock global variable */
 844:c/stm32f1xx_hal_rcc.c ****   SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CF
 845:c/stm32f1xx_hal_rcc.c **** 
 846:c/stm32f1xx_hal_rcc.c ****   /* Configure the source of time base considering new system clocks settings*/
 847:c/stm32f1xx_hal_rcc.c ****   HAL_InitTick (TICK_INT_PRIORITY);
 848:c/stm32f1xx_hal_rcc.c ****   
 849:c/stm32f1xx_hal_rcc.c ****   return HAL_OK;
 850:c/stm32f1xx_hal_rcc.c **** }
 851:c/stm32f1xx_hal_rcc.c **** 
 852:c/stm32f1xx_hal_rcc.c **** /**
 853:c/stm32f1xx_hal_rcc.c ****   * @}
 854:c/stm32f1xx_hal_rcc.c ****   */
 855:c/stm32f1xx_hal_rcc.c **** 
 856:c/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions_Group2 Peripheral Control functions
 857:c/stm32f1xx_hal_rcc.c ****   *  @brief   RCC clocks control functions
 858:c/stm32f1xx_hal_rcc.c ****   *
 859:c/stm32f1xx_hal_rcc.c ****   @verbatim   
 860:c/stm32f1xx_hal_rcc.c ****   ===============================================================================
 861:c/stm32f1xx_hal_rcc.c ****                   ##### Peripheral Control functions #####
 862:c/stm32f1xx_hal_rcc.c ****   ===============================================================================  
 863:c/stm32f1xx_hal_rcc.c ****     [..]
 864:c/stm32f1xx_hal_rcc.c ****     This subsection provides a set of functions allowing to control the RCC Clocks 
 865:c/stm32f1xx_hal_rcc.c ****     frequencies.
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 23


 866:c/stm32f1xx_hal_rcc.c **** 
 867:c/stm32f1xx_hal_rcc.c ****   @endverbatim
 868:c/stm32f1xx_hal_rcc.c ****   * @{
 869:c/stm32f1xx_hal_rcc.c ****   */
 870:c/stm32f1xx_hal_rcc.c **** 
 871:c/stm32f1xx_hal_rcc.c **** /**
 872:c/stm32f1xx_hal_rcc.c ****   * @brief  Selects the clock source to output on MCO pin.
 873:c/stm32f1xx_hal_rcc.c ****   * @note   MCO pin should be configured in alternate function mode.
 874:c/stm32f1xx_hal_rcc.c ****   * @param  RCC_MCOx specifies the output direction for the clock source.
 875:c/stm32f1xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 876:c/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1 Clock source to output on MCO1 pin(PA8).
 877:c/stm32f1xx_hal_rcc.c ****   * @param  RCC_MCOSource specifies the clock source to output.
 878:c/stm32f1xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 879:c/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_NOCLOCK     No clock selected as MCO clock
 880:c/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_SYSCLK      System clock selected as MCO clock
 881:c/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_HSI         HSI selected as MCO clock
 882:c/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_HSE         HSE selected as MCO clock
 883:c/stm32f1xx_hal_rcc.c ****   @if STM32F105xC
 884:c/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLLCLK       PLL clock divided by 2 selected as MCO source
 885:c/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL2CLK      PLL2 clock selected as MCO source
 886:c/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL3CLK_DIV2 PLL3 clock divided by 2 selected as MCO source
 887:c/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_EXT_HSE      XT1 external 3-25 MHz oscillator clock selecte
 888:c/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL3CLK      PLL3 clock selected as MCO source
 889:c/stm32f1xx_hal_rcc.c ****   @endif
 890:c/stm32f1xx_hal_rcc.c ****   @if STM32F107xC
 891:c/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLLCLK       PLL clock divided by 2 selected as MCO source
 892:c/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL2CLK      PLL2 clock selected as MCO source
 893:c/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL3CLK_DIV2 PLL3 clock divided by 2 selected as MCO source
 894:c/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_EXT_HSE XT1  external 3-25 MHz oscillator clock selected as
 895:c/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL3CLK      PLL3 clock selected as MCO source
 896:c/stm32f1xx_hal_rcc.c ****   @endif
 897:c/stm32f1xx_hal_rcc.c ****   * @param  RCC_MCODiv specifies the MCO DIV.
 898:c/stm32f1xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 899:c/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
 900:c/stm32f1xx_hal_rcc.c ****   * @retval None
 901:c/stm32f1xx_hal_rcc.c ****   */
 902:c/stm32f1xx_hal_rcc.c **** void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
 903:c/stm32f1xx_hal_rcc.c **** {
 904:c/stm32f1xx_hal_rcc.c ****   GPIO_InitTypeDef gpio = {0U};
 905:c/stm32f1xx_hal_rcc.c **** 
 906:c/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
 907:c/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_MCO(RCC_MCOx));
 908:c/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_MCODIV(RCC_MCODiv));
 909:c/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
 910:c/stm32f1xx_hal_rcc.c **** 
 911:c/stm32f1xx_hal_rcc.c ****   /* Prevent unused argument(s) compilation warning */
 912:c/stm32f1xx_hal_rcc.c ****   UNUSED(RCC_MCOx);
 913:c/stm32f1xx_hal_rcc.c ****   UNUSED(RCC_MCODiv);
 914:c/stm32f1xx_hal_rcc.c **** 
 915:c/stm32f1xx_hal_rcc.c ****   /* Configure the MCO1 pin in alternate function mode */
 916:c/stm32f1xx_hal_rcc.c ****   gpio.Mode      = GPIO_MODE_AF_PP;
 917:c/stm32f1xx_hal_rcc.c ****   gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 918:c/stm32f1xx_hal_rcc.c ****   gpio.Pull      = GPIO_NOPULL;
 919:c/stm32f1xx_hal_rcc.c ****   gpio.Pin       = MCO1_PIN;
 920:c/stm32f1xx_hal_rcc.c **** 
 921:c/stm32f1xx_hal_rcc.c ****   /* MCO1 Clock Enable */
 922:c/stm32f1xx_hal_rcc.c ****   MCO1_CLK_ENABLE();
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 24


 923:c/stm32f1xx_hal_rcc.c **** 
 924:c/stm32f1xx_hal_rcc.c ****   HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 925:c/stm32f1xx_hal_rcc.c **** 
 926:c/stm32f1xx_hal_rcc.c ****   /* Configure the MCO clock source */
 927:c/stm32f1xx_hal_rcc.c ****   __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 928:c/stm32f1xx_hal_rcc.c **** }
 929:c/stm32f1xx_hal_rcc.c **** 
 930:c/stm32f1xx_hal_rcc.c **** /**
 931:c/stm32f1xx_hal_rcc.c ****   * @brief  Enables the Clock Security System.
 932:c/stm32f1xx_hal_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 933:c/stm32f1xx_hal_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 934:c/stm32f1xx_hal_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 935:c/stm32f1xx_hal_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 936:c/stm32f1xx_hal_rcc.c ****   *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.  
 937:c/stm32f1xx_hal_rcc.c ****   * @retval None
 938:c/stm32f1xx_hal_rcc.c ****   */
 939:c/stm32f1xx_hal_rcc.c **** void HAL_RCC_EnableCSS(void)
 940:c/stm32f1xx_hal_rcc.c **** {
 941:c/stm32f1xx_hal_rcc.c ****   *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 942:c/stm32f1xx_hal_rcc.c **** }
 943:c/stm32f1xx_hal_rcc.c **** 
 944:c/stm32f1xx_hal_rcc.c **** /**
 945:c/stm32f1xx_hal_rcc.c ****   * @brief  Disables the Clock Security System.
 946:c/stm32f1xx_hal_rcc.c ****   * @retval None
 947:c/stm32f1xx_hal_rcc.c ****   */
 948:c/stm32f1xx_hal_rcc.c **** void HAL_RCC_DisableCSS(void)
 949:c/stm32f1xx_hal_rcc.c **** {
 950:c/stm32f1xx_hal_rcc.c ****   *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 951:c/stm32f1xx_hal_rcc.c **** }
 952:c/stm32f1xx_hal_rcc.c **** 
 953:c/stm32f1xx_hal_rcc.c **** /**
 954:c/stm32f1xx_hal_rcc.c ****   * @brief  Returns the SYSCLK frequency     
 955:c/stm32f1xx_hal_rcc.c ****   * @note   The system frequency computed by this function is not the real 
 956:c/stm32f1xx_hal_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
 957:c/stm32f1xx_hal_rcc.c ****   *         constant and the selected clock source:
 958:c/stm32f1xx_hal_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
 959:c/stm32f1xx_hal_rcc.c ****   * @note     If SYSCLK source is HSE, function returns a value based on HSE_VALUE
 960:c/stm32f1xx_hal_rcc.c ****   *           divided by PREDIV factor(**)
 961:c/stm32f1xx_hal_rcc.c ****   * @note     If SYSCLK source is PLL, function returns a value based on HSE_VALUE
 962:c/stm32f1xx_hal_rcc.c ****   *           divided by PREDIV factor(**) or HSI_VALUE(*) multiplied by the PLL factor.
 963:c/stm32f1xx_hal_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f1xx_hal_conf.h file (default value
 964:c/stm32f1xx_hal_rcc.c ****   *               8 MHz) but the real value may vary depending on the variations
 965:c/stm32f1xx_hal_rcc.c ****   *               in voltage and temperature.
 966:c/stm32f1xx_hal_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f1xx_hal_conf.h file (default value
 967:c/stm32f1xx_hal_rcc.c ****   *                8 MHz), user has to ensure that HSE_VALUE is same as the real
 968:c/stm32f1xx_hal_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
 969:c/stm32f1xx_hal_rcc.c ****   *                have wrong result.
 970:c/stm32f1xx_hal_rcc.c ****   *                  
 971:c/stm32f1xx_hal_rcc.c ****   * @note   The result of this function could be not correct when using fractional
 972:c/stm32f1xx_hal_rcc.c ****   *         value for HSE crystal.
 973:c/stm32f1xx_hal_rcc.c ****   *           
 974:c/stm32f1xx_hal_rcc.c ****   * @note   This function can be used by the user application to compute the 
 975:c/stm32f1xx_hal_rcc.c ****   *         baud-rate for the communication peripherals or configure other parameters.
 976:c/stm32f1xx_hal_rcc.c ****   *           
 977:c/stm32f1xx_hal_rcc.c ****   * @note   Each time SYSCLK changes, this function must be called to update the
 978:c/stm32f1xx_hal_rcc.c ****   *         right SYSCLK value. Otherwise, any configuration based on this function will be incorre
 979:c/stm32f1xx_hal_rcc.c ****   *         
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 25


 980:c/stm32f1xx_hal_rcc.c ****   * @retval SYSCLK frequency
 981:c/stm32f1xx_hal_rcc.c ****   */
 982:c/stm32f1xx_hal_rcc.c **** uint32_t HAL_RCC_GetSysClockFreq(void)
 983:c/stm32f1xx_hal_rcc.c **** {
 984:c/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
 985:c/stm32f1xx_hal_rcc.c ****   const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 986:c/stm32f1xx_hal_rcc.c ****   const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 987:c/stm32f1xx_hal_rcc.c **** #else
 988:c/stm32f1xx_hal_rcc.c ****   const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 989:c/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1)
 990:c/stm32f1xx_hal_rcc.c ****   const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 991:c/stm32f1xx_hal_rcc.c **** #else
 992:c/stm32f1xx_hal_rcc.c ****   const uint8_t aPredivFactorTable[2] = {1, 2};
 993:c/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1*/
 994:c/stm32f1xx_hal_rcc.c **** 
 995:c/stm32f1xx_hal_rcc.c **** #endif
 996:c/stm32f1xx_hal_rcc.c ****   uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 997:c/stm32f1xx_hal_rcc.c ****   uint32_t sysclockfreq = 0U;
 998:c/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
 999:c/stm32f1xx_hal_rcc.c ****   uint32_t prediv2 = 0U, pll2mul = 0U;
1000:c/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1SRC*/
1001:c/stm32f1xx_hal_rcc.c ****   
1002:c/stm32f1xx_hal_rcc.c ****   tmpreg = RCC->CFGR;
1003:c/stm32f1xx_hal_rcc.c ****   
1004:c/stm32f1xx_hal_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
1005:c/stm32f1xx_hal_rcc.c ****   switch (tmpreg & RCC_CFGR_SWS)
1006:c/stm32f1xx_hal_rcc.c ****   {
1007:c/stm32f1xx_hal_rcc.c ****     case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
1008:c/stm32f1xx_hal_rcc.c ****     {
1009:c/stm32f1xx_hal_rcc.c ****       sysclockfreq = HSE_VALUE;
1010:c/stm32f1xx_hal_rcc.c ****       break;
1011:c/stm32f1xx_hal_rcc.c ****     }
1012:c/stm32f1xx_hal_rcc.c ****     case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
1013:c/stm32f1xx_hal_rcc.c ****     {
1014:c/stm32f1xx_hal_rcc.c ****       pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
1015:c/stm32f1xx_hal_rcc.c ****       if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
1016:c/stm32f1xx_hal_rcc.c ****       {
1017:c/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1)
1018:c/stm32f1xx_hal_rcc.c ****         prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1
1019:c/stm32f1xx_hal_rcc.c **** #else
1020:c/stm32f1xx_hal_rcc.c ****         prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_
1021:c/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1*/
1022:c/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
1023:c/stm32f1xx_hal_rcc.c **** 
1024:c/stm32f1xx_hal_rcc.c ****         if(HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
1025:c/stm32f1xx_hal_rcc.c ****         {
1026:c/stm32f1xx_hal_rcc.c ****           /* PLL2 selected as Prediv1 source */
1027:c/stm32f1xx_hal_rcc.c ****           /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
1028:c/stm32f1xx_hal_rcc.c ****           prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
1029:c/stm32f1xx_hal_rcc.c ****           pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
1030:c/stm32f1xx_hal_rcc.c ****           pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv) * pllmul);
1031:c/stm32f1xx_hal_rcc.c ****         }
1032:c/stm32f1xx_hal_rcc.c ****         else
1033:c/stm32f1xx_hal_rcc.c ****         {
1034:c/stm32f1xx_hal_rcc.c ****           /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
1035:c/stm32f1xx_hal_rcc.c ****           pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
1036:c/stm32f1xx_hal_rcc.c ****         }
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 26


1037:c/stm32f1xx_hal_rcc.c ****         
1038:c/stm32f1xx_hal_rcc.c ****         /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using floa
1039:c/stm32f1xx_hal_rcc.c ****         /* In this case need to divide pllclk by 2 */
1040:c/stm32f1xx_hal_rcc.c ****         if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
1041:c/stm32f1xx_hal_rcc.c ****         {
1042:c/stm32f1xx_hal_rcc.c ****             pllclk = pllclk / 2;
1043:c/stm32f1xx_hal_rcc.c ****         }
1044:c/stm32f1xx_hal_rcc.c **** #else
1045:c/stm32f1xx_hal_rcc.c ****         /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
1046:c/stm32f1xx_hal_rcc.c ****         pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
1047:c/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1SRC*/
1048:c/stm32f1xx_hal_rcc.c ****       }
1049:c/stm32f1xx_hal_rcc.c ****       else
1050:c/stm32f1xx_hal_rcc.c ****       {
1051:c/stm32f1xx_hal_rcc.c ****         /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
1052:c/stm32f1xx_hal_rcc.c ****         pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
1053:c/stm32f1xx_hal_rcc.c ****       }
1054:c/stm32f1xx_hal_rcc.c ****       sysclockfreq = pllclk;
1055:c/stm32f1xx_hal_rcc.c ****       break;
1056:c/stm32f1xx_hal_rcc.c ****     }
1057:c/stm32f1xx_hal_rcc.c ****     case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
1058:c/stm32f1xx_hal_rcc.c ****     default: /* HSI used as system clock */
1059:c/stm32f1xx_hal_rcc.c ****     {
1060:c/stm32f1xx_hal_rcc.c ****       sysclockfreq = HSI_VALUE;
1061:c/stm32f1xx_hal_rcc.c ****       break;
1062:c/stm32f1xx_hal_rcc.c ****     }
1063:c/stm32f1xx_hal_rcc.c ****   }
1064:c/stm32f1xx_hal_rcc.c ****   return sysclockfreq;
1065:c/stm32f1xx_hal_rcc.c **** }
1066:c/stm32f1xx_hal_rcc.c **** 
1067:c/stm32f1xx_hal_rcc.c **** /**
1068:c/stm32f1xx_hal_rcc.c ****   * @brief  Returns the HCLK frequency     
1069:c/stm32f1xx_hal_rcc.c ****   * @note   Each time HCLK changes, this function must be called to update the
1070:c/stm32f1xx_hal_rcc.c ****   *         right HCLK value. Otherwise, any configuration based on this function will be incorrect
1071:c/stm32f1xx_hal_rcc.c ****   * 
1072:c/stm32f1xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
1073:c/stm32f1xx_hal_rcc.c ****   *         and updated within this function
1074:c/stm32f1xx_hal_rcc.c ****   * @retval HCLK frequency
1075:c/stm32f1xx_hal_rcc.c ****   */
1076:c/stm32f1xx_hal_rcc.c **** uint32_t HAL_RCC_GetHCLKFreq(void)
1077:c/stm32f1xx_hal_rcc.c **** {
1078:c/stm32f1xx_hal_rcc.c ****   return SystemCoreClock;
1079:c/stm32f1xx_hal_rcc.c **** }
1080:c/stm32f1xx_hal_rcc.c **** 
1081:c/stm32f1xx_hal_rcc.c **** /**
1082:c/stm32f1xx_hal_rcc.c ****   * @brief  Returns the PCLK1 frequency     
1083:c/stm32f1xx_hal_rcc.c ****   * @note   Each time PCLK1 changes, this function must be called to update the
1084:c/stm32f1xx_hal_rcc.c ****   *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrec
1085:c/stm32f1xx_hal_rcc.c ****   * @retval PCLK1 frequency
1086:c/stm32f1xx_hal_rcc.c ****   */
1087:c/stm32f1xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK1Freq(void)
1088:c/stm32f1xx_hal_rcc.c **** {
1089:c/stm32f1xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
1090:c/stm32f1xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos
1091:c/stm32f1xx_hal_rcc.c **** }    
1092:c/stm32f1xx_hal_rcc.c **** 
1093:c/stm32f1xx_hal_rcc.c **** /**
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 27


1094:c/stm32f1xx_hal_rcc.c ****   * @brief  Returns the PCLK2 frequency     
1095:c/stm32f1xx_hal_rcc.c ****   * @note   Each time PCLK2 changes, this function must be called to update the
1096:c/stm32f1xx_hal_rcc.c ****   *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrec
1097:c/stm32f1xx_hal_rcc.c ****   * @retval PCLK2 frequency
1098:c/stm32f1xx_hal_rcc.c ****   */
1099:c/stm32f1xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK2Freq(void)
1100:c/stm32f1xx_hal_rcc.c **** {
1101:c/stm32f1xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
1102:c/stm32f1xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]
1103:c/stm32f1xx_hal_rcc.c **** } 
1104:c/stm32f1xx_hal_rcc.c **** 
1105:c/stm32f1xx_hal_rcc.c **** /**
1106:c/stm32f1xx_hal_rcc.c ****   * @brief  Configures the RCC_OscInitStruct according to the internal 
1107:c/stm32f1xx_hal_rcc.c ****   * RCC configuration registers.
1108:c/stm32f1xx_hal_rcc.c ****   * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that 
1109:c/stm32f1xx_hal_rcc.c ****   * will be configured.
1110:c/stm32f1xx_hal_rcc.c ****   * @retval None
1111:c/stm32f1xx_hal_rcc.c ****   */
1112:c/stm32f1xx_hal_rcc.c **** void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
1113:c/stm32f1xx_hal_rcc.c **** {
1114:c/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
1115:c/stm32f1xx_hal_rcc.c ****   assert_param(RCC_OscInitStruct != NULL);
1116:c/stm32f1xx_hal_rcc.c **** 
1117:c/stm32f1xx_hal_rcc.c ****   /* Set all possible values for the Oscillator type parameter ---------------*/
1118:c/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
1119:c/stm32f1xx_hal_rcc.c ****                   | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
1120:c/stm32f1xx_hal_rcc.c **** 
1121:c/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
1122:c/stm32f1xx_hal_rcc.c ****   /* Get the Prediv1 source --------------------------------------------------*/
1123:c/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->Prediv1Source = READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC);
1124:c/stm32f1xx_hal_rcc.c **** #endif /* RCC_CFGR2_PREDIV1SRC */
1125:c/stm32f1xx_hal_rcc.c **** 
1126:c/stm32f1xx_hal_rcc.c ****   /* Get the HSE configuration -----------------------------------------------*/
1127:c/stm32f1xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
1128:c/stm32f1xx_hal_rcc.c ****   {
1129:c/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
1130:c/stm32f1xx_hal_rcc.c ****   }
1131:c/stm32f1xx_hal_rcc.c ****   else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
1132:c/stm32f1xx_hal_rcc.c ****   {
1133:c/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_ON;
1134:c/stm32f1xx_hal_rcc.c ****   }
1135:c/stm32f1xx_hal_rcc.c ****   else
1136:c/stm32f1xx_hal_rcc.c ****   {
1137:c/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
1138:c/stm32f1xx_hal_rcc.c ****   }
1139:c/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->HSEPredivValue = __HAL_RCC_HSE_GET_PREDIV();
1140:c/stm32f1xx_hal_rcc.c **** 
1141:c/stm32f1xx_hal_rcc.c ****   /* Get the HSI configuration -----------------------------------------------*/
1142:c/stm32f1xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
1143:c/stm32f1xx_hal_rcc.c ****   {
1144:c/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_ON;
1145:c/stm32f1xx_hal_rcc.c ****   }
1146:c/stm32f1xx_hal_rcc.c ****   else
1147:c/stm32f1xx_hal_rcc.c ****   {
1148:c/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
1149:c/stm32f1xx_hal_rcc.c ****   }
1150:c/stm32f1xx_hal_rcc.c ****   
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 28


1151:c/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_
1152:c/stm32f1xx_hal_rcc.c ****   
1153:c/stm32f1xx_hal_rcc.c ****   /* Get the LSE configuration -----------------------------------------------*/
1154:c/stm32f1xx_hal_rcc.c ****   if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
1155:c/stm32f1xx_hal_rcc.c ****   {
1156:c/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
1157:c/stm32f1xx_hal_rcc.c ****   }
1158:c/stm32f1xx_hal_rcc.c ****   else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
1159:c/stm32f1xx_hal_rcc.c ****   {
1160:c/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_ON;
1161:c/stm32f1xx_hal_rcc.c ****   }
1162:c/stm32f1xx_hal_rcc.c ****   else
1163:c/stm32f1xx_hal_rcc.c ****   {
1164:c/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
1165:c/stm32f1xx_hal_rcc.c ****   }
1166:c/stm32f1xx_hal_rcc.c ****   
1167:c/stm32f1xx_hal_rcc.c ****   /* Get the LSI configuration -----------------------------------------------*/
1168:c/stm32f1xx_hal_rcc.c ****   if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
1169:c/stm32f1xx_hal_rcc.c ****   {
1170:c/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_ON;
1171:c/stm32f1xx_hal_rcc.c ****   }
1172:c/stm32f1xx_hal_rcc.c ****   else
1173:c/stm32f1xx_hal_rcc.c ****   {
1174:c/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
1175:c/stm32f1xx_hal_rcc.c ****   }
1176:c/stm32f1xx_hal_rcc.c ****   
1177:c/stm32f1xx_hal_rcc.c **** 
1178:c/stm32f1xx_hal_rcc.c ****   /* Get the PLL configuration -----------------------------------------------*/
1179:c/stm32f1xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
1180:c/stm32f1xx_hal_rcc.c ****   {
1181:c/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
1182:c/stm32f1xx_hal_rcc.c ****   }
1183:c/stm32f1xx_hal_rcc.c ****   else
1184:c/stm32f1xx_hal_rcc.c ****   {
1185:c/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
1186:c/stm32f1xx_hal_rcc.c ****   }
1187:c/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
1188:c/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMULL);
1189:c/stm32f1xx_hal_rcc.c **** #if defined(RCC_CR_PLL2ON)
1190:c/stm32f1xx_hal_rcc.c ****   /* Get the PLL2 configuration -----------------------------------------------*/
1191:c/stm32f1xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_PLL2ON) == RCC_CR_PLL2ON)
1192:c/stm32f1xx_hal_rcc.c ****   {
1193:c/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->PLL2.PLL2State = RCC_PLL2_ON;
1194:c/stm32f1xx_hal_rcc.c ****   }
1195:c/stm32f1xx_hal_rcc.c ****   else
1196:c/stm32f1xx_hal_rcc.c ****   {
1197:c/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->PLL2.PLL2State = RCC_PLL2_OFF;
1198:c/stm32f1xx_hal_rcc.c ****   }
1199:c/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->PLL2.HSEPrediv2Value = __HAL_RCC_HSE_GET_PREDIV2();
1200:c/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->PLL2.PLL2MUL = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PLL2MUL);
1201:c/stm32f1xx_hal_rcc.c **** #endif /* RCC_CR_PLL2ON */
1202:c/stm32f1xx_hal_rcc.c **** }
1203:c/stm32f1xx_hal_rcc.c **** 
1204:c/stm32f1xx_hal_rcc.c **** /**
1205:c/stm32f1xx_hal_rcc.c ****   * @brief  Get the RCC_ClkInitStruct according to the internal 
1206:c/stm32f1xx_hal_rcc.c ****   * RCC configuration registers.
1207:c/stm32f1xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct pointer to an RCC_ClkInitTypeDef structure that 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 29


1208:c/stm32f1xx_hal_rcc.c ****   * contains the current clock configuration.
1209:c/stm32f1xx_hal_rcc.c ****   * @param  pFLatency Pointer on the Flash Latency.
1210:c/stm32f1xx_hal_rcc.c ****   * @retval None
1211:c/stm32f1xx_hal_rcc.c ****   */
1212:c/stm32f1xx_hal_rcc.c **** void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
1213:c/stm32f1xx_hal_rcc.c **** {
1214:c/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
1215:c/stm32f1xx_hal_rcc.c ****   assert_param(RCC_ClkInitStruct != NULL);
1216:c/stm32f1xx_hal_rcc.c ****   assert_param(pFLatency != NULL);
1217:c/stm32f1xx_hal_rcc.c **** 
1218:c/stm32f1xx_hal_rcc.c ****   /* Set all possible values for the Clock type parameter --------------------*/
1219:c/stm32f1xx_hal_rcc.c ****   RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | 
1220:c/stm32f1xx_hal_rcc.c ****   
1221:c/stm32f1xx_hal_rcc.c ****   /* Get the SYSCLK configuration --------------------------------------------*/ 
1222:c/stm32f1xx_hal_rcc.c ****   RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
1223:c/stm32f1xx_hal_rcc.c ****   
1224:c/stm32f1xx_hal_rcc.c ****   /* Get the HCLK configuration ----------------------------------------------*/ 
1225:c/stm32f1xx_hal_rcc.c ****   RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
1226:c/stm32f1xx_hal_rcc.c ****   
1227:c/stm32f1xx_hal_rcc.c ****   /* Get the APB1 configuration ----------------------------------------------*/ 
1228:c/stm32f1xx_hal_rcc.c ****   RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
1229:c/stm32f1xx_hal_rcc.c ****   
1230:c/stm32f1xx_hal_rcc.c ****   /* Get the APB2 configuration ----------------------------------------------*/ 
1231:c/stm32f1xx_hal_rcc.c ****   RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
1232:c/stm32f1xx_hal_rcc.c ****   
1233:c/stm32f1xx_hal_rcc.c **** #if   defined(FLASH_ACR_LATENCY)
1234:c/stm32f1xx_hal_rcc.c ****   /* Get the Flash Wait State (Latency) configuration ------------------------*/   
1235:c/stm32f1xx_hal_rcc.c ****   *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
1236:c/stm32f1xx_hal_rcc.c **** #else
1237:c/stm32f1xx_hal_rcc.c ****   /* For VALUE lines devices, only LATENCY_0 can be set*/
1238:c/stm32f1xx_hal_rcc.c ****   *pFLatency = (uint32_t)FLASH_LATENCY_0; 
1239:c/stm32f1xx_hal_rcc.c **** #endif
1240:c/stm32f1xx_hal_rcc.c **** }
1241:c/stm32f1xx_hal_rcc.c **** 
1242:c/stm32f1xx_hal_rcc.c **** /**
1243:c/stm32f1xx_hal_rcc.c ****   * @brief This function handles the RCC CSS interrupt request.
1244:c/stm32f1xx_hal_rcc.c ****   * @note This API should be called under the NMI_Handler().
1245:c/stm32f1xx_hal_rcc.c ****   * @retval None
1246:c/stm32f1xx_hal_rcc.c ****   */
1247:c/stm32f1xx_hal_rcc.c **** void HAL_RCC_NMI_IRQHandler(void)
1248:c/stm32f1xx_hal_rcc.c **** {
1249:c/stm32f1xx_hal_rcc.c ****   /* Check RCC CSSF flag  */
1250:c/stm32f1xx_hal_rcc.c ****   if(__HAL_RCC_GET_IT(RCC_IT_CSS))
1251:c/stm32f1xx_hal_rcc.c ****   {
1252:c/stm32f1xx_hal_rcc.c ****     /* RCC Clock Security System interrupt user callback */
1253:c/stm32f1xx_hal_rcc.c ****     HAL_RCC_CSSCallback();
1254:c/stm32f1xx_hal_rcc.c ****     
1255:c/stm32f1xx_hal_rcc.c ****     /* Clear RCC CSS pending bit */
1256:c/stm32f1xx_hal_rcc.c ****     __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
1257:c/stm32f1xx_hal_rcc.c ****   }
1258:c/stm32f1xx_hal_rcc.c **** }
1259:c/stm32f1xx_hal_rcc.c **** 
1260:c/stm32f1xx_hal_rcc.c **** /**
1261:c/stm32f1xx_hal_rcc.c ****   * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
1262:c/stm32f1xx_hal_rcc.c ****   * @param  mdelay: specifies the delay time length, in milliseconds.
1263:c/stm32f1xx_hal_rcc.c ****   * @retval None
1264:c/stm32f1xx_hal_rcc.c ****   */
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 30


1265:c/stm32f1xx_hal_rcc.c **** static void RCC_Delay(uint32_t mdelay)
1266:c/stm32f1xx_hal_rcc.c **** {
1267:c/stm32f1xx_hal_rcc.c ****   __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 348              		.loc 1 1267 0
 349 015c 4FF4FA52 		mov	r2, #8000
 350 0160 464B     		ldr	r3, .L96+12
 351 0162 1B68     		ldr	r3, [r3]
 352 0164 B3FBF2F3 		udiv	r3, r3, r2
 353 0168 0193     		str	r3, [sp, #4]
 354              	.L37:
 355              	.LBB18:
 356              	.LBB19:
 357              		.file 2 "c/cmsis_gcc.h"
   1:c/cmsis_gcc.h **** /**************************************************************************//**
   2:c/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:c/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:c/cmsis_gcc.h ****  * @version  V4.30
   5:c/cmsis_gcc.h ****  * @date     20. October 2015
   6:c/cmsis_gcc.h ****  ******************************************************************************/
   7:c/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:c/cmsis_gcc.h **** 
   9:c/cmsis_gcc.h ****    All rights reserved.
  10:c/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:c/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:c/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:c/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:c/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:c/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:c/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:c/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:c/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:c/cmsis_gcc.h ****      specific prior written permission.
  20:c/cmsis_gcc.h ****    *
  21:c/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:c/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:c/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:c/cmsis_gcc.h **** 
  34:c/cmsis_gcc.h **** 
  35:c/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:c/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:c/cmsis_gcc.h **** 
  38:c/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:c/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:c/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:c/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:c/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:c/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:c/cmsis_gcc.h **** #endif
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 31


  45:c/cmsis_gcc.h **** 
  46:c/cmsis_gcc.h **** 
  47:c/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:c/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:c/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:c/cmsis_gcc.h ****   @{
  51:c/cmsis_gcc.h ****  */
  52:c/cmsis_gcc.h **** 
  53:c/cmsis_gcc.h **** /**
  54:c/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:c/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:c/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:c/cmsis_gcc.h ****  */
  58:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:c/cmsis_gcc.h **** {
  60:c/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:c/cmsis_gcc.h **** }
  62:c/cmsis_gcc.h **** 
  63:c/cmsis_gcc.h **** 
  64:c/cmsis_gcc.h **** /**
  65:c/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:c/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:c/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:c/cmsis_gcc.h ****  */
  69:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:c/cmsis_gcc.h **** {
  71:c/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:c/cmsis_gcc.h **** }
  73:c/cmsis_gcc.h **** 
  74:c/cmsis_gcc.h **** 
  75:c/cmsis_gcc.h **** /**
  76:c/cmsis_gcc.h ****   \brief   Get Control Register
  77:c/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:c/cmsis_gcc.h ****   \return               Control Register value
  79:c/cmsis_gcc.h ****  */
  80:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:c/cmsis_gcc.h **** {
  82:c/cmsis_gcc.h ****   uint32_t result;
  83:c/cmsis_gcc.h **** 
  84:c/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:c/cmsis_gcc.h ****   return(result);
  86:c/cmsis_gcc.h **** }
  87:c/cmsis_gcc.h **** 
  88:c/cmsis_gcc.h **** 
  89:c/cmsis_gcc.h **** /**
  90:c/cmsis_gcc.h ****   \brief   Set Control Register
  91:c/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:c/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:c/cmsis_gcc.h ****  */
  94:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:c/cmsis_gcc.h **** {
  96:c/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:c/cmsis_gcc.h **** }
  98:c/cmsis_gcc.h **** 
  99:c/cmsis_gcc.h **** 
 100:c/cmsis_gcc.h **** /**
 101:c/cmsis_gcc.h ****   \brief   Get IPSR Register
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 32


 102:c/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:c/cmsis_gcc.h ****   \return               IPSR Register value
 104:c/cmsis_gcc.h ****  */
 105:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:c/cmsis_gcc.h **** {
 107:c/cmsis_gcc.h ****   uint32_t result;
 108:c/cmsis_gcc.h **** 
 109:c/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:c/cmsis_gcc.h ****   return(result);
 111:c/cmsis_gcc.h **** }
 112:c/cmsis_gcc.h **** 
 113:c/cmsis_gcc.h **** 
 114:c/cmsis_gcc.h **** /**
 115:c/cmsis_gcc.h ****   \brief   Get APSR Register
 116:c/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:c/cmsis_gcc.h ****   \return               APSR Register value
 118:c/cmsis_gcc.h ****  */
 119:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:c/cmsis_gcc.h **** {
 121:c/cmsis_gcc.h ****   uint32_t result;
 122:c/cmsis_gcc.h **** 
 123:c/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:c/cmsis_gcc.h ****   return(result);
 125:c/cmsis_gcc.h **** }
 126:c/cmsis_gcc.h **** 
 127:c/cmsis_gcc.h **** 
 128:c/cmsis_gcc.h **** /**
 129:c/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:c/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:c/cmsis_gcc.h **** 
 132:c/cmsis_gcc.h ****     \return               xPSR Register value
 133:c/cmsis_gcc.h ****  */
 134:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:c/cmsis_gcc.h **** {
 136:c/cmsis_gcc.h ****   uint32_t result;
 137:c/cmsis_gcc.h **** 
 138:c/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:c/cmsis_gcc.h ****   return(result);
 140:c/cmsis_gcc.h **** }
 141:c/cmsis_gcc.h **** 
 142:c/cmsis_gcc.h **** 
 143:c/cmsis_gcc.h **** /**
 144:c/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:c/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:c/cmsis_gcc.h ****   \return               PSP Register value
 147:c/cmsis_gcc.h ****  */
 148:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:c/cmsis_gcc.h **** {
 150:c/cmsis_gcc.h ****   register uint32_t result;
 151:c/cmsis_gcc.h **** 
 152:c/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:c/cmsis_gcc.h ****   return(result);
 154:c/cmsis_gcc.h **** }
 155:c/cmsis_gcc.h **** 
 156:c/cmsis_gcc.h **** 
 157:c/cmsis_gcc.h **** /**
 158:c/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 33


 159:c/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:c/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:c/cmsis_gcc.h ****  */
 162:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:c/cmsis_gcc.h **** {
 164:c/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:c/cmsis_gcc.h **** }
 166:c/cmsis_gcc.h **** 
 167:c/cmsis_gcc.h **** 
 168:c/cmsis_gcc.h **** /**
 169:c/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:c/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:c/cmsis_gcc.h ****   \return               MSP Register value
 172:c/cmsis_gcc.h ****  */
 173:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:c/cmsis_gcc.h **** {
 175:c/cmsis_gcc.h ****   register uint32_t result;
 176:c/cmsis_gcc.h **** 
 177:c/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:c/cmsis_gcc.h ****   return(result);
 179:c/cmsis_gcc.h **** }
 180:c/cmsis_gcc.h **** 
 181:c/cmsis_gcc.h **** 
 182:c/cmsis_gcc.h **** /**
 183:c/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:c/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:c/cmsis_gcc.h **** 
 186:c/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:c/cmsis_gcc.h ****  */
 188:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:c/cmsis_gcc.h **** {
 190:c/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:c/cmsis_gcc.h **** }
 192:c/cmsis_gcc.h **** 
 193:c/cmsis_gcc.h **** 
 194:c/cmsis_gcc.h **** /**
 195:c/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:c/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:c/cmsis_gcc.h ****   \return               Priority Mask value
 198:c/cmsis_gcc.h ****  */
 199:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:c/cmsis_gcc.h **** {
 201:c/cmsis_gcc.h ****   uint32_t result;
 202:c/cmsis_gcc.h **** 
 203:c/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:c/cmsis_gcc.h ****   return(result);
 205:c/cmsis_gcc.h **** }
 206:c/cmsis_gcc.h **** 
 207:c/cmsis_gcc.h **** 
 208:c/cmsis_gcc.h **** /**
 209:c/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:c/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:c/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:c/cmsis_gcc.h ****  */
 213:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:c/cmsis_gcc.h **** {
 215:c/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 34


 216:c/cmsis_gcc.h **** }
 217:c/cmsis_gcc.h **** 
 218:c/cmsis_gcc.h **** 
 219:c/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:c/cmsis_gcc.h **** 
 221:c/cmsis_gcc.h **** /**
 222:c/cmsis_gcc.h ****   \brief   Enable FIQ
 223:c/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:c/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:c/cmsis_gcc.h ****  */
 226:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:c/cmsis_gcc.h **** {
 228:c/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:c/cmsis_gcc.h **** }
 230:c/cmsis_gcc.h **** 
 231:c/cmsis_gcc.h **** 
 232:c/cmsis_gcc.h **** /**
 233:c/cmsis_gcc.h ****   \brief   Disable FIQ
 234:c/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:c/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:c/cmsis_gcc.h ****  */
 237:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:c/cmsis_gcc.h **** {
 239:c/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:c/cmsis_gcc.h **** }
 241:c/cmsis_gcc.h **** 
 242:c/cmsis_gcc.h **** 
 243:c/cmsis_gcc.h **** /**
 244:c/cmsis_gcc.h ****   \brief   Get Base Priority
 245:c/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:c/cmsis_gcc.h ****   \return               Base Priority register value
 247:c/cmsis_gcc.h ****  */
 248:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:c/cmsis_gcc.h **** {
 250:c/cmsis_gcc.h ****   uint32_t result;
 251:c/cmsis_gcc.h **** 
 252:c/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:c/cmsis_gcc.h ****   return(result);
 254:c/cmsis_gcc.h **** }
 255:c/cmsis_gcc.h **** 
 256:c/cmsis_gcc.h **** 
 257:c/cmsis_gcc.h **** /**
 258:c/cmsis_gcc.h ****   \brief   Set Base Priority
 259:c/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:c/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:c/cmsis_gcc.h ****  */
 262:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:c/cmsis_gcc.h **** {
 264:c/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:c/cmsis_gcc.h **** }
 266:c/cmsis_gcc.h **** 
 267:c/cmsis_gcc.h **** 
 268:c/cmsis_gcc.h **** /**
 269:c/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:c/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:c/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:c/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 35


 273:c/cmsis_gcc.h ****  */
 274:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:c/cmsis_gcc.h **** {
 276:c/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:c/cmsis_gcc.h **** }
 278:c/cmsis_gcc.h **** 
 279:c/cmsis_gcc.h **** 
 280:c/cmsis_gcc.h **** /**
 281:c/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:c/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:c/cmsis_gcc.h ****   \return               Fault Mask register value
 284:c/cmsis_gcc.h ****  */
 285:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:c/cmsis_gcc.h **** {
 287:c/cmsis_gcc.h ****   uint32_t result;
 288:c/cmsis_gcc.h **** 
 289:c/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:c/cmsis_gcc.h ****   return(result);
 291:c/cmsis_gcc.h **** }
 292:c/cmsis_gcc.h **** 
 293:c/cmsis_gcc.h **** 
 294:c/cmsis_gcc.h **** /**
 295:c/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:c/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:c/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:c/cmsis_gcc.h ****  */
 299:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:c/cmsis_gcc.h **** {
 301:c/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:c/cmsis_gcc.h **** }
 303:c/cmsis_gcc.h **** 
 304:c/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:c/cmsis_gcc.h **** 
 306:c/cmsis_gcc.h **** 
 307:c/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:c/cmsis_gcc.h **** 
 309:c/cmsis_gcc.h **** /**
 310:c/cmsis_gcc.h ****   \brief   Get FPSCR
 311:c/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:c/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:c/cmsis_gcc.h ****  */
 314:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:c/cmsis_gcc.h **** {
 316:c/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:c/cmsis_gcc.h ****   uint32_t result;
 318:c/cmsis_gcc.h **** 
 319:c/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:c/cmsis_gcc.h ****   __ASM volatile ("");
 321:c/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:c/cmsis_gcc.h ****   __ASM volatile ("");
 323:c/cmsis_gcc.h ****   return(result);
 324:c/cmsis_gcc.h **** #else
 325:c/cmsis_gcc.h ****    return(0);
 326:c/cmsis_gcc.h **** #endif
 327:c/cmsis_gcc.h **** }
 328:c/cmsis_gcc.h **** 
 329:c/cmsis_gcc.h **** 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 36


 330:c/cmsis_gcc.h **** /**
 331:c/cmsis_gcc.h ****   \brief   Set FPSCR
 332:c/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:c/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:c/cmsis_gcc.h ****  */
 335:c/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:c/cmsis_gcc.h **** {
 337:c/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:c/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:c/cmsis_gcc.h ****   __ASM volatile ("");
 340:c/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:c/cmsis_gcc.h ****   __ASM volatile ("");
 342:c/cmsis_gcc.h **** #endif
 343:c/cmsis_gcc.h **** }
 344:c/cmsis_gcc.h **** 
 345:c/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:c/cmsis_gcc.h **** 
 347:c/cmsis_gcc.h **** 
 348:c/cmsis_gcc.h **** 
 349:c/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:c/cmsis_gcc.h **** 
 351:c/cmsis_gcc.h **** 
 352:c/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:c/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:c/cmsis_gcc.h ****   Access to dedicated instructions
 355:c/cmsis_gcc.h ****   @{
 356:c/cmsis_gcc.h **** */
 357:c/cmsis_gcc.h **** 
 358:c/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:c/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:c/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:c/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:c/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:c/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:c/cmsis_gcc.h **** #else
 365:c/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:c/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:c/cmsis_gcc.h **** #endif
 368:c/cmsis_gcc.h **** 
 369:c/cmsis_gcc.h **** /**
 370:c/cmsis_gcc.h ****   \brief   No Operation
 371:c/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:c/cmsis_gcc.h ****  */
 373:c/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:c/cmsis_gcc.h **** {
 375:c/cmsis_gcc.h ****   __ASM volatile ("nop");
 358              		.loc 2 375 0
 359              		.syntax unified
 360              	@ 375 "c/cmsis_gcc.h" 1
 361 016a 00BF     		nop
 362              	@ 0 "" 2
 363              		.thumb
 364              		.syntax unified
 365              	.LBE19:
 366              	.LBE18:
1268:c/stm32f1xx_hal_rcc.c ****   do 
1269:c/stm32f1xx_hal_rcc.c ****   {
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 37


1270:c/stm32f1xx_hal_rcc.c ****     __NOP();
1271:c/stm32f1xx_hal_rcc.c ****   } 
1272:c/stm32f1xx_hal_rcc.c ****   while (Delay --);
 367              		.loc 1 1272 0
 368 016c 019B     		ldr	r3, [sp, #4]
 369 016e 5A1E     		subs	r2, r3, #1
 370 0170 0192     		str	r2, [sp, #4]
 371 0172 002B     		cmp	r3, #0
 372 0174 F9D1     		bne	.L37
 373 0176 50E7     		b	.L38
 374              	.LVL28:
 375              	.L36:
 376              	.LBE17:
 377              	.LBE16:
 406:c/stm32f1xx_hal_rcc.c ****         {
 378              		.loc 1 406 0
 379 0178 FFF7FEFF 		bl	HAL_GetTick
 380              	.LVL29:
 381 017c 801B     		subs	r0, r0, r6
 382 017e 0228     		cmp	r0, #2
 383 0180 E9D9     		bls	.L35
 384 0182 7FE7     		b	.L19
 385              	.LVL30:
 386              	.L34:
 418:c/stm32f1xx_hal_rcc.c ****       
 387              		.loc 1 418 0
 388 0184 1A60     		str	r2, [r3]
 421:c/stm32f1xx_hal_rcc.c ****       
 389              		.loc 1 421 0
 390 0186 FFF7FEFF 		bl	HAL_GetTick
 391              	.LVL31:
 392 018a 0646     		mov	r6, r0
 393              	.LVL32:
 394              	.L39:
 424:c/stm32f1xx_hal_rcc.c ****       {
 395              		.loc 1 424 0
 396 018c 636A     		ldr	r3, [r4, #36]
 397 018e 9F07     		lsls	r7, r3, #30
 398 0190 7FF543AF 		bpl	.L38
 426:c/stm32f1xx_hal_rcc.c ****         {
 399              		.loc 1 426 0
 400 0194 FFF7FEFF 		bl	HAL_GetTick
 401              	.LVL33:
 402 0198 801B     		subs	r0, r0, r6
 403 019a 0228     		cmp	r0, #2
 404 019c F6D9     		bls	.L39
 405 019e 71E7     		b	.L19
 406              	.LVL34:
 407              	.L32:
 408              	.LBB20:
 443:c/stm32f1xx_hal_rcc.c ****     {
 409              		.loc 1 443 0
 410 01a0 334C     		ldr	r4, .L96
 411 01a2 E369     		ldr	r3, [r4, #28]
 412 01a4 D800     		lsls	r0, r3, #3
 413 01a6 24D4     		bmi	.L68
 446:c/stm32f1xx_hal_rcc.c ****     }
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 38


 414              		.loc 1 446 0
 415 01a8 0127     		movs	r7, #1
 416              	.LBB21:
 445:c/stm32f1xx_hal_rcc.c ****       pwrclkchanged = SET;
 417              		.loc 1 445 0
 418 01aa E369     		ldr	r3, [r4, #28]
 419 01ac 43F08053 		orr	r3, r3, #268435456
 420 01b0 E361     		str	r3, [r4, #28]
 421 01b2 E369     		ldr	r3, [r4, #28]
 422 01b4 03F08053 		and	r3, r3, #268435456
 423 01b8 0093     		str	r3, [sp]
 424 01ba 009B     		ldr	r3, [sp]
 425              	.LVL35:
 426              	.L42:
 427              	.LBE21:
 449:c/stm32f1xx_hal_rcc.c ****     {
 428              		.loc 1 449 0
 429 01bc 304E     		ldr	r6, .L96+16
 430 01be 3368     		ldr	r3, [r6]
 431 01c0 D905     		lsls	r1, r3, #23
 432 01c2 18D5     		bpl	.L43
 433              	.L48:
 467:c/stm32f1xx_hal_rcc.c ****     /* Check the LSE State */
 434              		.loc 1 467 0
 435 01c4 EB68     		ldr	r3, [r5, #12]
 436 01c6 012B     		cmp	r3, #1
 437 01c8 26D1     		bne	.L90
 438              	.L95:
 467:c/stm32f1xx_hal_rcc.c ****     /* Check the LSE State */
 439              		.loc 1 467 0 is_stmt 0 discriminator 5
 440 01ca 236A     		ldr	r3, [r4, #32]
 441 01cc 43F00103 		orr	r3, r3, #1
 442              	.L93:
 467:c/stm32f1xx_hal_rcc.c ****     /* Check the LSE State */
 443              		.loc 1 467 0 discriminator 6
 444 01d0 2362     		str	r3, [r4, #32]
 472:c/stm32f1xx_hal_rcc.c ****       
 445              		.loc 1 472 0 is_stmt 1 discriminator 6
 446 01d2 FFF7FEFF 		bl	HAL_GetTick
 447              	.LVL36:
 477:c/stm32f1xx_hal_rcc.c ****         {
 448              		.loc 1 477 0 discriminator 6
 449 01d6 41F28836 		movw	r6, #5000
 472:c/stm32f1xx_hal_rcc.c ****       
 450              		.loc 1 472 0 discriminator 6
 451 01da 8046     		mov	r8, r0
 452              	.LVL37:
 453              	.L67:
 475:c/stm32f1xx_hal_rcc.c ****       {
 454              		.loc 1 475 0
 455 01dc 236A     		ldr	r3, [r4, #32]
 456 01de 9B07     		lsls	r3, r3, #30
 457 01e0 3FD5     		bpl	.L53
 458              	.LVL38:
 459              	.L56:
 499:c/stm32f1xx_hal_rcc.c ****     {
 460              		.loc 1 499 0
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 39


 461 01e2 002F     		cmp	r7, #0
 462 01e4 3FF41DAF 		beq	.L41
 501:c/stm32f1xx_hal_rcc.c ****     }
 463              		.loc 1 501 0
 464 01e8 E369     		ldr	r3, [r4, #28]
 465 01ea 23F08053 		bic	r3, r3, #268435456
 466 01ee E361     		str	r3, [r4, #28]
 467 01f0 17E7     		b	.L41
 468              	.LVL39:
 469              	.L68:
 436:c/stm32f1xx_hal_rcc.c ****     
 470              		.loc 1 436 0
 471 01f2 0027     		movs	r7, #0
 472 01f4 E2E7     		b	.L42
 473              	.LVL40:
 474              	.L43:
 452:c/stm32f1xx_hal_rcc.c ****       
 475              		.loc 1 452 0
 476 01f6 3368     		ldr	r3, [r6]
 477 01f8 43F48073 		orr	r3, r3, #256
 478 01fc 3360     		str	r3, [r6]
 455:c/stm32f1xx_hal_rcc.c **** 
 479              		.loc 1 455 0
 480 01fe FFF7FEFF 		bl	HAL_GetTick
 481              	.LVL41:
 482 0202 8046     		mov	r8, r0
 483              	.LVL42:
 484              	.L46:
 457:c/stm32f1xx_hal_rcc.c ****       {
 485              		.loc 1 457 0
 486 0204 3368     		ldr	r3, [r6]
 487 0206 DA05     		lsls	r2, r3, #23
 488 0208 DCD4     		bmi	.L48
 459:c/stm32f1xx_hal_rcc.c ****         {
 489              		.loc 1 459 0
 490 020a FFF7FEFF 		bl	HAL_GetTick
 491              	.LVL43:
 492 020e A0EB0800 		sub	r0, r0, r8
 493 0212 6428     		cmp	r0, #100
 494 0214 F6D9     		bls	.L46
 495 0216 35E7     		b	.L19
 496              	.LVL44:
 497              	.L90:
 467:c/stm32f1xx_hal_rcc.c ****     /* Check the LSE State */
 498              		.loc 1 467 0 discriminator 2
 499 0218 ABB9     		cbnz	r3, .L50
 467:c/stm32f1xx_hal_rcc.c ****     /* Check the LSE State */
 500              		.loc 1 467 0 is_stmt 0 discriminator 3
 501 021a 236A     		ldr	r3, [r4, #32]
 491:c/stm32f1xx_hal_rcc.c ****         {
 502              		.loc 1 491 0 is_stmt 1 discriminator 3
 503 021c 41F28838 		movw	r8, #5000
 467:c/stm32f1xx_hal_rcc.c ****     /* Check the LSE State */
 504              		.loc 1 467 0 discriminator 3
 505 0220 23F00103 		bic	r3, r3, #1
 506 0224 2362     		str	r3, [r4, #32]
 507 0226 236A     		ldr	r3, [r4, #32]
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 40


 508 0228 23F00403 		bic	r3, r3, #4
 509 022c 2362     		str	r3, [r4, #32]
 486:c/stm32f1xx_hal_rcc.c ****       
 510              		.loc 1 486 0 discriminator 3
 511 022e FFF7FEFF 		bl	HAL_GetTick
 512              	.LVL45:
 513 0232 0646     		mov	r6, r0
 514              	.LVL46:
 515              	.L51:
 489:c/stm32f1xx_hal_rcc.c ****       {
 516              		.loc 1 489 0
 517 0234 236A     		ldr	r3, [r4, #32]
 518 0236 9807     		lsls	r0, r3, #30
 519 0238 D3D5     		bpl	.L56
 491:c/stm32f1xx_hal_rcc.c ****         {
 520              		.loc 1 491 0
 521 023a FFF7FEFF 		bl	HAL_GetTick
 522              	.LVL47:
 523 023e 801B     		subs	r0, r0, r6
 524 0240 4045     		cmp	r0, r8
 525 0242 F7D9     		bls	.L51
 526 0244 1EE7     		b	.L19
 527              	.LVL48:
 528              	.L50:
 467:c/stm32f1xx_hal_rcc.c ****     /* Check the LSE State */
 529              		.loc 1 467 0 discriminator 4
 530 0246 052B     		cmp	r3, #5
 531 0248 236A     		ldr	r3, [r4, #32]
 532 024a 03D1     		bne	.L52
 467:c/stm32f1xx_hal_rcc.c ****     /* Check the LSE State */
 533              		.loc 1 467 0 is_stmt 0 discriminator 5
 534 024c 43F00403 		orr	r3, r3, #4
 535 0250 2362     		str	r3, [r4, #32]
 536 0252 BAE7     		b	.L95
 537              	.L52:
 467:c/stm32f1xx_hal_rcc.c ****     /* Check the LSE State */
 538              		.loc 1 467 0 discriminator 6
 539 0254 23F00103 		bic	r3, r3, #1
 540 0258 2362     		str	r3, [r4, #32]
 541 025a 236A     		ldr	r3, [r4, #32]
 542 025c 23F00403 		bic	r3, r3, #4
 543 0260 B6E7     		b	.L93
 544              	.LVL49:
 545              	.L53:
 477:c/stm32f1xx_hal_rcc.c ****         {
 546              		.loc 1 477 0 is_stmt 1
 547 0262 FFF7FEFF 		bl	HAL_GetTick
 548              	.LVL50:
 549 0266 A0EB0800 		sub	r0, r0, r8
 550 026a B042     		cmp	r0, r6
 551 026c B6D9     		bls	.L67
 552 026e 09E7     		b	.L19
 553              	.L97:
 554              		.align	2
 555              	.L96:
 556 0270 00100240 		.word	1073876992
 557 0274 00004242 		.word	1111621632
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 41


 558 0278 80044242 		.word	1111622784
 559 027c 00000000 		.word	SystemCoreClock
 560 0280 00700040 		.word	1073770496
 561              	.LVL51:
 562              	.L57:
 563              	.LBE20:
 601:c/stm32f1xx_hal_rcc.c ****     { 
 564              		.loc 1 601 0
 565 0284 224C     		ldr	r4, .L98
 566 0286 6368     		ldr	r3, [r4, #4]
 567 0288 03F00C03 		and	r3, r3, #12
 568 028c 082B     		cmp	r3, #8
 569 028e 3FF4E2AE 		beq	.L25
 570 0292 0023     		movs	r3, #0
 571 0294 1F4E     		ldr	r6, .L98+4
 603:c/stm32f1xx_hal_rcc.c ****       {
 572              		.loc 1 603 0
 573 0296 022A     		cmp	r2, #2
 610:c/stm32f1xx_hal_rcc.c ****         
 574              		.loc 1 610 0
 575 0298 3360     		str	r3, [r6]
 603:c/stm32f1xx_hal_rcc.c ****       {
 576              		.loc 1 603 0
 577 029a 2BD1     		bne	.L58
 613:c/stm32f1xx_hal_rcc.c ****         
 578              		.loc 1 613 0
 579 029c FFF7FEFF 		bl	HAL_GetTick
 580              	.LVL52:
 581 02a0 0746     		mov	r7, r0
 582              	.LVL53:
 583              	.L59:
 616:c/stm32f1xx_hal_rcc.c ****         {
 584              		.loc 1 616 0
 585 02a2 2368     		ldr	r3, [r4]
 586 02a4 9901     		lsls	r1, r3, #6
 587 02a6 1FD4     		bmi	.L60
 626:c/stm32f1xx_hal_rcc.c ****         {
 588              		.loc 1 626 0
 589 02a8 2B6A     		ldr	r3, [r5, #32]
 590 02aa B3F5803F 		cmp	r3, #65536
 591 02ae 05D1     		bne	.L61
 638:c/stm32f1xx_hal_rcc.c ****         }
 592              		.loc 1 638 0
 593 02b0 6268     		ldr	r2, [r4, #4]
 594 02b2 A968     		ldr	r1, [r5, #8]
 595 02b4 22F40032 		bic	r2, r2, #131072
 596 02b8 0A43     		orrs	r2, r2, r1
 597 02ba 6260     		str	r2, [r4, #4]
 598              	.L61:
 642:c/stm32f1xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLMUL);
 599              		.loc 1 642 0
 600 02bc 696A     		ldr	r1, [r5, #36]
 601 02be 6268     		ldr	r2, [r4, #4]
 602 02c0 0B43     		orrs	r3, r3, r1
 603 02c2 22F47412 		bic	r2, r2, #3997696
 604 02c6 1343     		orrs	r3, r3, r2
 605 02c8 6360     		str	r3, [r4, #4]
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 42


 645:c/stm32f1xx_hal_rcc.c ****         
 606              		.loc 1 645 0
 607 02ca 0123     		movs	r3, #1
 608 02cc 3360     		str	r3, [r6]
 648:c/stm32f1xx_hal_rcc.c ****         
 609              		.loc 1 648 0
 610 02ce FFF7FEFF 		bl	HAL_GetTick
 611              	.LVL54:
 612 02d2 0546     		mov	r5, r0
 613              	.LVL55:
 614              	.L62:
 651:c/stm32f1xx_hal_rcc.c ****         {
 615              		.loc 1 651 0
 616 02d4 2368     		ldr	r3, [r4]
 617 02d6 9A01     		lsls	r2, r3, #6
 618 02d8 3FF5A7AE 		bmi	.L64
 653:c/stm32f1xx_hal_rcc.c ****           {
 619              		.loc 1 653 0
 620 02dc FFF7FEFF 		bl	HAL_GetTick
 621              	.LVL56:
 622 02e0 401B     		subs	r0, r0, r5
 623 02e2 0228     		cmp	r0, #2
 624 02e4 F6D9     		bls	.L62
 625 02e6 CDE6     		b	.L19
 626              	.LVL57:
 627              	.L60:
 618:c/stm32f1xx_hal_rcc.c ****           {
 628              		.loc 1 618 0
 629 02e8 FFF7FEFF 		bl	HAL_GetTick
 630              	.LVL58:
 631 02ec C01B     		subs	r0, r0, r7
 632 02ee 0228     		cmp	r0, #2
 633 02f0 D7D9     		bls	.L59
 634 02f2 C7E6     		b	.L19
 635              	.LVL59:
 636              	.L58:
 665:c/stm32f1xx_hal_rcc.c ****         
 637              		.loc 1 665 0
 638 02f4 FFF7FEFF 		bl	HAL_GetTick
 639              	.LVL60:
 640 02f8 0546     		mov	r5, r0
 641              	.LVL61:
 642              	.L65:
 668:c/stm32f1xx_hal_rcc.c ****         {
 643              		.loc 1 668 0
 644 02fa 2368     		ldr	r3, [r4]
 645 02fc 9B01     		lsls	r3, r3, #6
 646 02fe 7FF594AE 		bpl	.L64
 670:c/stm32f1xx_hal_rcc.c ****           {
 647              		.loc 1 670 0
 648 0302 FFF7FEFF 		bl	HAL_GetTick
 649              	.LVL62:
 650 0306 401B     		subs	r0, r0, r5
 651 0308 0228     		cmp	r0, #2
 652 030a F6D9     		bls	.L65
 653 030c BAE6     		b	.L19
 654              	.L99:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 43


 655 030e 00BF     		.align	2
 656              	.L98:
 657 0310 00100240 		.word	1073876992
 658 0314 60004242 		.word	1111621728
 659              		.cfi_endproc
 660              	.LFE65:
 662              		.section	.text.HAL_RCC_MCOConfig,"ax",%progbits
 663              		.align	1
 664              		.global	HAL_RCC_MCOConfig
 665              		.syntax unified
 666              		.thumb
 667              		.thumb_func
 668              		.fpu softvfp
 670              	HAL_RCC_MCOConfig:
 671              	.LFB67:
 903:c/stm32f1xx_hal_rcc.c ****   GPIO_InitTypeDef gpio = {0U};
 672              		.loc 1 903 0
 673              		.cfi_startproc
 674              		@ args = 0, pretend = 0, frame = 24
 675              		@ frame_needed = 0, uses_anonymous_args = 0
 676              	.LVL63:
 677 0000 30B5     		push	{r4, r5, lr}
 678              		.cfi_def_cfa_offset 12
 679              		.cfi_offset 4, -12
 680              		.cfi_offset 5, -8
 681              		.cfi_offset 14, -4
 682 0002 87B0     		sub	sp, sp, #28
 683              		.cfi_def_cfa_offset 40
 903:c/stm32f1xx_hal_rcc.c ****   GPIO_InitTypeDef gpio = {0U};
 684              		.loc 1 903 0
 685 0004 0D46     		mov	r5, r1
 904:c/stm32f1xx_hal_rcc.c **** 
 686              		.loc 1 904 0
 687 0006 1022     		movs	r2, #16
 688              	.LVL64:
 689 0008 0021     		movs	r1, #0
 690              	.LVL65:
 691 000a 02A8     		add	r0, sp, #8
 692              	.LVL66:
 693 000c FFF7FEFF 		bl	memset
 694              	.LVL67:
 916:c/stm32f1xx_hal_rcc.c ****   gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 695              		.loc 1 916 0
 696 0010 0223     		movs	r3, #2
 697 0012 0393     		str	r3, [sp, #12]
 917:c/stm32f1xx_hal_rcc.c ****   gpio.Pull      = GPIO_NOPULL;
 698              		.loc 1 917 0
 699 0014 0323     		movs	r3, #3
 700 0016 0593     		str	r3, [sp, #20]
 919:c/stm32f1xx_hal_rcc.c **** 
 701              		.loc 1 919 0
 702 0018 4FF48073 		mov	r3, #256
 703              	.LBB22:
 922:c/stm32f1xx_hal_rcc.c **** 
 704              		.loc 1 922 0
 705 001c 0A4C     		ldr	r4, .L101
 706              	.LBE22:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 44


 919:c/stm32f1xx_hal_rcc.c **** 
 707              		.loc 1 919 0
 708 001e 0293     		str	r3, [sp, #8]
 709              	.LBB23:
 922:c/stm32f1xx_hal_rcc.c **** 
 710              		.loc 1 922 0
 711 0020 A369     		ldr	r3, [r4, #24]
 712              	.LBE23:
 924:c/stm32f1xx_hal_rcc.c **** 
 713              		.loc 1 924 0
 714 0022 02A9     		add	r1, sp, #8
 715              	.LBB24:
 922:c/stm32f1xx_hal_rcc.c **** 
 716              		.loc 1 922 0
 717 0024 43F00403 		orr	r3, r3, #4
 718 0028 A361     		str	r3, [r4, #24]
 719 002a A369     		ldr	r3, [r4, #24]
 720              	.LBE24:
 924:c/stm32f1xx_hal_rcc.c **** 
 721              		.loc 1 924 0
 722 002c 0748     		ldr	r0, .L101+4
 723              	.LBB25:
 922:c/stm32f1xx_hal_rcc.c **** 
 724              		.loc 1 922 0
 725 002e 03F00403 		and	r3, r3, #4
 726 0032 0193     		str	r3, [sp, #4]
 727 0034 019B     		ldr	r3, [sp, #4]
 728              	.LBE25:
 924:c/stm32f1xx_hal_rcc.c **** 
 729              		.loc 1 924 0
 730 0036 FFF7FEFF 		bl	HAL_GPIO_Init
 731              	.LVL68:
 927:c/stm32f1xx_hal_rcc.c **** }
 732              		.loc 1 927 0
 733 003a 6168     		ldr	r1, [r4, #4]
 734 003c 21F0E061 		bic	r1, r1, #117440512
 735 0040 2943     		orrs	r1, r1, r5
 736 0042 6160     		str	r1, [r4, #4]
 928:c/stm32f1xx_hal_rcc.c **** 
 737              		.loc 1 928 0
 738 0044 07B0     		add	sp, sp, #28
 739              		.cfi_def_cfa_offset 12
 740              		@ sp needed
 741 0046 30BD     		pop	{r4, r5, pc}
 742              	.LVL69:
 743              	.L102:
 744              		.align	2
 745              	.L101:
 746 0048 00100240 		.word	1073876992
 747 004c 00080140 		.word	1073809408
 748              		.cfi_endproc
 749              	.LFE67:
 751              		.section	.text.HAL_RCC_EnableCSS,"ax",%progbits
 752              		.align	1
 753              		.global	HAL_RCC_EnableCSS
 754              		.syntax unified
 755              		.thumb
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 45


 756              		.thumb_func
 757              		.fpu softvfp
 759              	HAL_RCC_EnableCSS:
 760              	.LFB68:
 940:c/stm32f1xx_hal_rcc.c ****   *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 761              		.loc 1 940 0
 762              		.cfi_startproc
 763              		@ args = 0, pretend = 0, frame = 0
 764              		@ frame_needed = 0, uses_anonymous_args = 0
 765              		@ link register save eliminated.
 941:c/stm32f1xx_hal_rcc.c **** }
 766              		.loc 1 941 0
 767 0000 0122     		movs	r2, #1
 768 0002 014B     		ldr	r3, .L104
 769 0004 1A60     		str	r2, [r3]
 770 0006 7047     		bx	lr
 771              	.L105:
 772              		.align	2
 773              	.L104:
 774 0008 4C004242 		.word	1111621708
 775              		.cfi_endproc
 776              	.LFE68:
 778              		.section	.text.HAL_RCC_DisableCSS,"ax",%progbits
 779              		.align	1
 780              		.global	HAL_RCC_DisableCSS
 781              		.syntax unified
 782              		.thumb
 783              		.thumb_func
 784              		.fpu softvfp
 786              	HAL_RCC_DisableCSS:
 787              	.LFB69:
 949:c/stm32f1xx_hal_rcc.c ****   *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 788              		.loc 1 949 0
 789              		.cfi_startproc
 790              		@ args = 0, pretend = 0, frame = 0
 791              		@ frame_needed = 0, uses_anonymous_args = 0
 792              		@ link register save eliminated.
 950:c/stm32f1xx_hal_rcc.c **** }
 793              		.loc 1 950 0
 794 0000 0022     		movs	r2, #0
 795 0002 014B     		ldr	r3, .L107
 796 0004 1A60     		str	r2, [r3]
 797 0006 7047     		bx	lr
 798              	.L108:
 799              		.align	2
 800              	.L107:
 801 0008 4C004242 		.word	1111621708
 802              		.cfi_endproc
 803              	.LFE69:
 805              		.section	.text.HAL_RCC_GetSysClockFreq,"ax",%progbits
 806              		.align	1
 807              		.global	HAL_RCC_GetSysClockFreq
 808              		.syntax unified
 809              		.thumb
 810              		.thumb_func
 811              		.fpu softvfp
 813              	HAL_RCC_GetSysClockFreq:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 46


 814              	.LFB70:
 983:c/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
 815              		.loc 1 983 0
 816              		.cfi_startproc
 817              		@ args = 0, pretend = 0, frame = 24
 818              		@ frame_needed = 0, uses_anonymous_args = 0
 819 0000 30B5     		push	{r4, r5, lr}
 820              		.cfi_def_cfa_offset 12
 821              		.cfi_offset 4, -12
 822              		.cfi_offset 5, -8
 823              		.cfi_offset 14, -4
 988:c/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1)
 824              		.loc 1 988 0
 825 0002 1A4B     		ldr	r3, .L118
 983:c/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
 826              		.loc 1 983 0
 827 0004 87B0     		sub	sp, sp, #28
 828              		.cfi_def_cfa_offset 40
 988:c/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1)
 829              		.loc 1 988 0
 830 0006 02AC     		add	r4, sp, #8
 831 0008 03F11005 		add	r5, r3, #16
 832              	.L110:
 833 000c 2246     		mov	r2, r4
 834 000e 1868     		ldr	r0, [r3]	@ unaligned
 835 0010 5968     		ldr	r1, [r3, #4]	@ unaligned
 836 0012 0833     		adds	r3, r3, #8
 837 0014 03C2     		stmia	r2!, {r0, r1}
 838 0016 AB42     		cmp	r3, r5
 839 0018 1446     		mov	r4, r2
 840 001a F7D1     		bne	.L110
 992:c/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1*/
 841              		.loc 1 992 0
 842 001c 0123     		movs	r3, #1
 843 001e 8DF80430 		strb	r3, [sp, #4]
 844 0022 0223     		movs	r3, #2
1002:c/stm32f1xx_hal_rcc.c ****   
 845              		.loc 1 1002 0
 846 0024 1249     		ldr	r1, .L118+4
 992:c/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1*/
 847              		.loc 1 992 0
 848 0026 8DF80530 		strb	r3, [sp, #5]
 849              	.LVL70:
1002:c/stm32f1xx_hal_rcc.c ****   
 850              		.loc 1 1002 0
 851 002a 4B68     		ldr	r3, [r1, #4]
 852              	.LVL71:
1005:c/stm32f1xx_hal_rcc.c ****   {
 853              		.loc 1 1005 0
 854 002c 03F00C02 		and	r2, r3, #12
 855 0030 082A     		cmp	r2, #8
 856 0032 18D1     		bne	.L116
1014:c/stm32f1xx_hal_rcc.c ****       if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 857              		.loc 1 1014 0
 858 0034 C3F38342 		ubfx	r2, r3, #18, #4
1015:c/stm32f1xx_hal_rcc.c ****       {
 859              		.loc 1 1015 0
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 47


 860 0038 DB03     		lsls	r3, r3, #15
 861              	.LVL72:
1020:c/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1*/
 862              		.loc 1 1020 0
 863 003a 48BF     		it	mi
 864 003c 4B68     		ldrmi	r3, [r1, #4]
1014:c/stm32f1xx_hal_rcc.c ****       if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 865              		.loc 1 1014 0
 866 003e 06A8     		add	r0, sp, #24
 867 0040 0244     		add	r2, r2, r0
1020:c/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1*/
 868              		.loc 1 1020 0
 869 0042 48BF     		it	mi
 870 0044 C3F34043 		ubfxmi	r3, r3, #17, #1
1014:c/stm32f1xx_hal_rcc.c ****       if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 871              		.loc 1 1014 0
 872 0048 12F8100C 		ldrb	r0, [r2, #-16]	@ zero_extendqisi2
 873              	.LVL73:
1020:c/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1*/
 874              		.loc 1 1020 0
 875 004c 41BF     		itttt	mi
 876 004e 06AA     		addmi	r2, sp, #24
 877 0050 9B18     		addmi	r3, r3, r2
 878 0052 13F8142C 		ldrbmi	r2, [r3, #-20]	@ zero_extendqisi2
1046:c/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1SRC*/
 879              		.loc 1 1046 0
 880 0056 074B     		ldrmi	r3, .L118+8
1052:c/stm32f1xx_hal_rcc.c ****       }
 881              		.loc 1 1052 0
 882 0058 54BF     		ite	pl
 883 005a 074B     		ldrpl	r3, .L118+12
1046:c/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1SRC*/
 884              		.loc 1 1046 0
 885 005c B3FBF2F3 		udivmi	r3, r3, r2
1052:c/stm32f1xx_hal_rcc.c ****       }
 886              		.loc 1 1052 0
 887 0060 5843     		muls	r0, r3, r0
 888              	.LVL74:
 889              	.L109:
1065:c/stm32f1xx_hal_rcc.c **** 
 890              		.loc 1 1065 0
 891 0062 07B0     		add	sp, sp, #28
 892              		.cfi_remember_state
 893              		.cfi_def_cfa_offset 12
 894              		@ sp needed
 895 0064 30BD     		pop	{r4, r5, pc}
 896              	.LVL75:
 897              	.L116:
 898              		.cfi_restore_state
1009:c/stm32f1xx_hal_rcc.c ****       break;
 899              		.loc 1 1009 0
 900 0066 0348     		ldr	r0, .L118+8
 901              	.LVL76:
1064:c/stm32f1xx_hal_rcc.c **** }
 902              		.loc 1 1064 0
 903 0068 FBE7     		b	.L109
 904              	.L119:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 48


 905 006a 00BF     		.align	2
 906              	.L118:
 907 006c 00000000 		.word	.LANCHOR0
 908 0070 00100240 		.word	1073876992
 909 0074 00127A00 		.word	8000000
 910 0078 00093D00 		.word	4000000
 911              		.cfi_endproc
 912              	.LFE70:
 914              		.section	.text.HAL_RCC_ClockConfig,"ax",%progbits
 915              		.align	1
 916              		.global	HAL_RCC_ClockConfig
 917              		.syntax unified
 918              		.thumb
 919              		.thumb_func
 920              		.fpu softvfp
 922              	HAL_RCC_ClockConfig:
 923              	.LFB66:
 710:c/stm32f1xx_hal_rcc.c ****   uint32_t tickstart = 0U;
 924              		.loc 1 710 0
 925              		.cfi_startproc
 926              		@ args = 0, pretend = 0, frame = 0
 927              		@ frame_needed = 0, uses_anonymous_args = 0
 928              	.LVL77:
 724:c/stm32f1xx_hal_rcc.c ****   {    
 929              		.loc 1 724 0
 930 0000 4D4A     		ldr	r2, .L165
 710:c/stm32f1xx_hal_rcc.c ****   uint32_t tickstart = 0U;
 931              		.loc 1 710 0
 932 0002 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 933              		.cfi_def_cfa_offset 24
 934              		.cfi_offset 4, -24
 935              		.cfi_offset 5, -20
 936              		.cfi_offset 6, -16
 937              		.cfi_offset 7, -12
 938              		.cfi_offset 8, -8
 939              		.cfi_offset 14, -4
 724:c/stm32f1xx_hal_rcc.c ****   {    
 940              		.loc 1 724 0
 941 0006 1368     		ldr	r3, [r2]
 710:c/stm32f1xx_hal_rcc.c ****   uint32_t tickstart = 0U;
 942              		.loc 1 710 0
 943 0008 0546     		mov	r5, r0
 724:c/stm32f1xx_hal_rcc.c ****   {    
 944              		.loc 1 724 0
 945 000a 03F00703 		and	r3, r3, #7
 946 000e 8B42     		cmp	r3, r1
 710:c/stm32f1xx_hal_rcc.c ****   uint32_t tickstart = 0U;
 947              		.loc 1 710 0
 948 0010 0E46     		mov	r6, r1
 724:c/stm32f1xx_hal_rcc.c ****   {    
 949              		.loc 1 724 0
 950 0012 28D3     		bcc	.L121
 951              	.L124:
 739:c/stm32f1xx_hal_rcc.c ****   {
 952              		.loc 1 739 0
 953 0014 2A68     		ldr	r2, [r5]
 954 0016 9107     		lsls	r1, r2, #30
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 49


 955              	.LVL78:
 956 0018 32D4     		bmi	.L122
 957              	.LVL79:
 958              	.L123:
 746:c/stm32f1xx_hal_rcc.c ****   {    
 959              		.loc 1 746 0
 960 001a D207     		lsls	r2, r2, #31
 961 001c 38D4     		bmi	.L126
 962              	.LVL80:
 963              	.L136:
 815:c/stm32f1xx_hal_rcc.c ****   {    
 964              		.loc 1 815 0
 965 001e 464A     		ldr	r2, .L165
 966 0020 1368     		ldr	r3, [r2]
 967 0022 03F00703 		and	r3, r3, #7
 968 0026 9E42     		cmp	r6, r3
 969 0028 73D3     		bcc	.L127
 970              	.L128:
 830:c/stm32f1xx_hal_rcc.c ****   {
 971              		.loc 1 830 0
 972 002a 2A68     		ldr	r2, [r5]
 973 002c 434C     		ldr	r4, .L165+4
 974 002e 12F0040F 		tst	r2, #4
 975 0032 79D1     		bne	.L142
 976              	.L143:
 837:c/stm32f1xx_hal_rcc.c ****   {
 977              		.loc 1 837 0
 978 0034 1307     		lsls	r3, r2, #28
 979 0036 06D5     		bpl	.L144
 840:c/stm32f1xx_hal_rcc.c ****   }
 980              		.loc 1 840 0
 981 0038 6368     		ldr	r3, [r4, #4]
 982 003a 2A69     		ldr	r2, [r5, #16]
 983 003c 23F46053 		bic	r3, r3, #14336
 984 0040 43EAC203 		orr	r3, r3, r2, lsl #3
 985 0044 6360     		str	r3, [r4, #4]
 986              	.L144:
 844:c/stm32f1xx_hal_rcc.c **** 
 987              		.loc 1 844 0
 988 0046 FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 989              	.LVL81:
 990 004a 6368     		ldr	r3, [r4, #4]
 991 004c 3C4A     		ldr	r2, .L165+8
 992 004e C3F30313 		ubfx	r3, r3, #4, #4
 993 0052 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 994 0054 D840     		lsrs	r0, r0, r3
 995 0056 3B4B     		ldr	r3, .L165+12
 996 0058 1860     		str	r0, [r3]
 847:c/stm32f1xx_hal_rcc.c ****   
 997              		.loc 1 847 0
 998 005a 0020     		movs	r0, #0
 999 005c FFF7FEFF 		bl	HAL_InitTick
 1000              	.LVL82:
 849:c/stm32f1xx_hal_rcc.c **** }
 1001              		.loc 1 849 0
 1002 0060 0020     		movs	r0, #0
 850:c/stm32f1xx_hal_rcc.c **** 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 50


 1003              		.loc 1 850 0
 1004 0062 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1005              	.LVL83:
 1006              	.L121:
 727:c/stm32f1xx_hal_rcc.c ****     
 1007              		.loc 1 727 0
 1008 0066 1368     		ldr	r3, [r2]
 1009 0068 23F00703 		bic	r3, r3, #7
 1010 006c 0B43     		orrs	r3, r3, r1
 1011 006e 1360     		str	r3, [r2]
 731:c/stm32f1xx_hal_rcc.c ****     {
 1012              		.loc 1 731 0
 1013 0070 1368     		ldr	r3, [r2]
 1014 0072 03F00703 		and	r3, r3, #7
 1015 0076 9942     		cmp	r1, r3
 1016 0078 CCD0     		beq	.L124
 1017              	.LVL84:
 1018              	.L130:
 733:c/stm32f1xx_hal_rcc.c ****     }
 1019              		.loc 1 733 0
 1020 007a 0120     		movs	r0, #1
 1021 007c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1022              	.LVL85:
 1023              	.L122:
 742:c/stm32f1xx_hal_rcc.c ****   }
 1024              		.loc 1 742 0
 1025 0080 2E49     		ldr	r1, .L165+4
 1026 0082 A868     		ldr	r0, [r5, #8]
 1027              	.LVL86:
 1028 0084 4B68     		ldr	r3, [r1, #4]
 1029 0086 23F0F003 		bic	r3, r3, #240
 1030 008a 0343     		orrs	r3, r3, r0
 1031 008c 4B60     		str	r3, [r1, #4]
 1032 008e C4E7     		b	.L123
 1033              	.L126:
 751:c/stm32f1xx_hal_rcc.c ****     {
 1034              		.loc 1 751 0
 1035 0090 6A68     		ldr	r2, [r5, #4]
 1036 0092 2A4C     		ldr	r4, .L165+4
 1037 0094 012A     		cmp	r2, #1
 754:c/stm32f1xx_hal_rcc.c ****       {
 1038              		.loc 1 754 0
 1039 0096 2368     		ldr	r3, [r4]
 751:c/stm32f1xx_hal_rcc.c ****     {
 1040              		.loc 1 751 0
 1041 0098 1CD1     		bne	.L129
 754:c/stm32f1xx_hal_rcc.c ****       {
 1042              		.loc 1 754 0
 1043 009a 13F4003F 		tst	r3, #131072
 1044              	.L163:
 772:c/stm32f1xx_hal_rcc.c ****       {
 1045              		.loc 1 772 0
 1046 009e ECD0     		beq	.L130
 777:c/stm32f1xx_hal_rcc.c **** 
 1047              		.loc 1 777 0
 1048 00a0 6368     		ldr	r3, [r4, #4]
 786:c/stm32f1xx_hal_rcc.c ****         {
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 51


 1049              		.loc 1 786 0
 1050 00a2 41F28838 		movw	r8, #5000
 777:c/stm32f1xx_hal_rcc.c **** 
 1051              		.loc 1 777 0
 1052 00a6 23F00303 		bic	r3, r3, #3
 1053 00aa 1343     		orrs	r3, r3, r2
 1054 00ac 6360     		str	r3, [r4, #4]
 780:c/stm32f1xx_hal_rcc.c ****     
 1055              		.loc 1 780 0
 1056 00ae FFF7FEFF 		bl	HAL_GetTick
 1057              	.LVL87:
 782:c/stm32f1xx_hal_rcc.c ****     {
 1058              		.loc 1 782 0
 1059 00b2 6B68     		ldr	r3, [r5, #4]
 780:c/stm32f1xx_hal_rcc.c ****     
 1060              		.loc 1 780 0
 1061 00b4 0746     		mov	r7, r0
 1062              	.LVL88:
 782:c/stm32f1xx_hal_rcc.c ****     {
 1063              		.loc 1 782 0
 1064 00b6 012B     		cmp	r3, #1
 1065 00b8 14D1     		bne	.L160
 1066              	.LVL89:
 1067              	.L133:
 784:c/stm32f1xx_hal_rcc.c ****       {
 1068              		.loc 1 784 0
 1069 00ba 6368     		ldr	r3, [r4, #4]
 1070 00bc 03F00C03 		and	r3, r3, #12
 1071 00c0 042B     		cmp	r3, #4
 1072 00c2 ACD0     		beq	.L136
 786:c/stm32f1xx_hal_rcc.c ****         {
 1073              		.loc 1 786 0
 1074 00c4 FFF7FEFF 		bl	HAL_GetTick
 1075              	.LVL90:
 1076 00c8 C01B     		subs	r0, r0, r7
 1077 00ca 4045     		cmp	r0, r8
 1078 00cc F5D9     		bls	.L133
 1079              	.L139:
 788:c/stm32f1xx_hal_rcc.c ****         }
 1080              		.loc 1 788 0
 1081 00ce 0320     		movs	r0, #3
 1082 00d0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1083              	.LVL91:
 1084              	.L129:
 760:c/stm32f1xx_hal_rcc.c ****     {
 1085              		.loc 1 760 0
 1086 00d4 022A     		cmp	r2, #2
 1087 00d6 02D1     		bne	.L132
 763:c/stm32f1xx_hal_rcc.c ****       {
 1088              		.loc 1 763 0
 1089 00d8 13F0007F 		tst	r3, #33554432
 1090 00dc DFE7     		b	.L163
 1091              	.L132:
 772:c/stm32f1xx_hal_rcc.c ****       {
 1092              		.loc 1 772 0
 1093 00de 13F0020F 		tst	r3, #2
 1094 00e2 DCE7     		b	.L163
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 52


 1095              	.LVL92:
 1096              	.L160:
 792:c/stm32f1xx_hal_rcc.c ****     {
 1097              		.loc 1 792 0
 1098 00e4 022B     		cmp	r3, #2
 1099 00e6 0FD1     		bne	.L138
 1100              	.LVL93:
 1101              	.L137:
 794:c/stm32f1xx_hal_rcc.c ****       {
 1102              		.loc 1 794 0
 1103 00e8 6368     		ldr	r3, [r4, #4]
 1104 00ea 03F00C03 		and	r3, r3, #12
 1105 00ee 082B     		cmp	r3, #8
 1106 00f0 95D0     		beq	.L136
 796:c/stm32f1xx_hal_rcc.c ****         {
 1107              		.loc 1 796 0
 1108 00f2 FFF7FEFF 		bl	HAL_GetTick
 1109              	.LVL94:
 1110 00f6 C01B     		subs	r0, r0, r7
 1111 00f8 4045     		cmp	r0, r8
 1112 00fa F5D9     		bls	.L137
 1113 00fc E7E7     		b	.L139
 1114              	.L141:
 806:c/stm32f1xx_hal_rcc.c ****         {
 1115              		.loc 1 806 0
 1116 00fe FFF7FEFF 		bl	HAL_GetTick
 1117              	.LVL95:
 1118 0102 C01B     		subs	r0, r0, r7
 1119 0104 4045     		cmp	r0, r8
 1120 0106 E2D8     		bhi	.L139
 1121              	.L138:
 804:c/stm32f1xx_hal_rcc.c ****       {
 1122              		.loc 1 804 0
 1123 0108 6368     		ldr	r3, [r4, #4]
 1124 010a 13F00C0F 		tst	r3, #12
 1125 010e F6D1     		bne	.L141
 1126 0110 85E7     		b	.L136
 1127              	.LVL96:
 1128              	.L127:
 818:c/stm32f1xx_hal_rcc.c ****     
 1129              		.loc 1 818 0
 1130 0112 1368     		ldr	r3, [r2]
 1131 0114 23F00703 		bic	r3, r3, #7
 1132 0118 3343     		orrs	r3, r3, r6
 1133 011a 1360     		str	r3, [r2]
 822:c/stm32f1xx_hal_rcc.c ****     {
 1134              		.loc 1 822 0
 1135 011c 1368     		ldr	r3, [r2]
 1136 011e 03F00703 		and	r3, r3, #7
 1137 0122 9E42     		cmp	r6, r3
 1138 0124 A9D1     		bne	.L130
 1139 0126 80E7     		b	.L128
 1140              	.L142:
 833:c/stm32f1xx_hal_rcc.c ****   }
 1141              		.loc 1 833 0
 1142 0128 6368     		ldr	r3, [r4, #4]
 1143 012a E968     		ldr	r1, [r5, #12]
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 53


 1144 012c 23F4E063 		bic	r3, r3, #1792
 1145 0130 0B43     		orrs	r3, r3, r1
 1146 0132 6360     		str	r3, [r4, #4]
 1147 0134 7EE7     		b	.L143
 1148              	.L166:
 1149 0136 00BF     		.align	2
 1150              	.L165:
 1151 0138 00200240 		.word	1073881088
 1152 013c 00100240 		.word	1073876992
 1153 0140 00000000 		.word	AHBPrescTable
 1154 0144 00000000 		.word	SystemCoreClock
 1155              		.cfi_endproc
 1156              	.LFE66:
 1158              		.section	.text.HAL_RCC_GetHCLKFreq,"ax",%progbits
 1159              		.align	1
 1160              		.global	HAL_RCC_GetHCLKFreq
 1161              		.syntax unified
 1162              		.thumb
 1163              		.thumb_func
 1164              		.fpu softvfp
 1166              	HAL_RCC_GetHCLKFreq:
 1167              	.LFB71:
1077:c/stm32f1xx_hal_rcc.c ****   return SystemCoreClock;
 1168              		.loc 1 1077 0
 1169              		.cfi_startproc
 1170              		@ args = 0, pretend = 0, frame = 0
 1171              		@ frame_needed = 0, uses_anonymous_args = 0
 1172              		@ link register save eliminated.
1079:c/stm32f1xx_hal_rcc.c **** 
 1173              		.loc 1 1079 0
 1174 0000 014B     		ldr	r3, .L168
 1175 0002 1868     		ldr	r0, [r3]
 1176 0004 7047     		bx	lr
 1177              	.L169:
 1178 0006 00BF     		.align	2
 1179              	.L168:
 1180 0008 00000000 		.word	SystemCoreClock
 1181              		.cfi_endproc
 1182              	.LFE71:
 1184              		.section	.text.HAL_RCC_GetPCLK1Freq,"ax",%progbits
 1185              		.align	1
 1186              		.global	HAL_RCC_GetPCLK1Freq
 1187              		.syntax unified
 1188              		.thumb
 1189              		.thumb_func
 1190              		.fpu softvfp
 1192              	HAL_RCC_GetPCLK1Freq:
 1193              	.LFB72:
1088:c/stm32f1xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
 1194              		.loc 1 1088 0
 1195              		.cfi_startproc
 1196              		@ args = 0, pretend = 0, frame = 0
 1197              		@ frame_needed = 0, uses_anonymous_args = 0
 1198              		@ link register save eliminated.
1090:c/stm32f1xx_hal_rcc.c **** }    
 1199              		.loc 1 1090 0
 1200 0000 044B     		ldr	r3, .L171
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 54


 1201 0002 054A     		ldr	r2, .L171+4
 1202 0004 5B68     		ldr	r3, [r3, #4]
 1203 0006 C3F30223 		ubfx	r3, r3, #8, #3
 1204 000a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1205 000c 034A     		ldr	r2, .L171+8
 1206 000e 1068     		ldr	r0, [r2]
1091:c/stm32f1xx_hal_rcc.c **** 
 1207              		.loc 1 1091 0
 1208 0010 D840     		lsrs	r0, r0, r3
 1209 0012 7047     		bx	lr
 1210              	.L172:
 1211              		.align	2
 1212              	.L171:
 1213 0014 00100240 		.word	1073876992
 1214 0018 00000000 		.word	APBPrescTable
 1215 001c 00000000 		.word	SystemCoreClock
 1216              		.cfi_endproc
 1217              	.LFE72:
 1219              		.section	.text.HAL_RCC_GetPCLK2Freq,"ax",%progbits
 1220              		.align	1
 1221              		.global	HAL_RCC_GetPCLK2Freq
 1222              		.syntax unified
 1223              		.thumb
 1224              		.thumb_func
 1225              		.fpu softvfp
 1227              	HAL_RCC_GetPCLK2Freq:
 1228              	.LFB73:
1100:c/stm32f1xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
 1229              		.loc 1 1100 0
 1230              		.cfi_startproc
 1231              		@ args = 0, pretend = 0, frame = 0
 1232              		@ frame_needed = 0, uses_anonymous_args = 0
 1233              		@ link register save eliminated.
1102:c/stm32f1xx_hal_rcc.c **** } 
 1234              		.loc 1 1102 0
 1235 0000 044B     		ldr	r3, .L174
 1236 0002 054A     		ldr	r2, .L174+4
 1237 0004 5B68     		ldr	r3, [r3, #4]
 1238 0006 C3F3C223 		ubfx	r3, r3, #11, #3
 1239 000a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1240 000c 034A     		ldr	r2, .L174+8
 1241 000e 1068     		ldr	r0, [r2]
1103:c/stm32f1xx_hal_rcc.c **** 
 1242              		.loc 1 1103 0
 1243 0010 D840     		lsrs	r0, r0, r3
 1244 0012 7047     		bx	lr
 1245              	.L175:
 1246              		.align	2
 1247              	.L174:
 1248 0014 00100240 		.word	1073876992
 1249 0018 00000000 		.word	APBPrescTable
 1250 001c 00000000 		.word	SystemCoreClock
 1251              		.cfi_endproc
 1252              	.LFE73:
 1254              		.section	.text.HAL_RCC_GetOscConfig,"ax",%progbits
 1255              		.align	1
 1256              		.global	HAL_RCC_GetOscConfig
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 55


 1257              		.syntax unified
 1258              		.thumb
 1259              		.thumb_func
 1260              		.fpu softvfp
 1262              	HAL_RCC_GetOscConfig:
 1263              	.LFB74:
1113:c/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
 1264              		.loc 1 1113 0
 1265              		.cfi_startproc
 1266              		@ args = 0, pretend = 0, frame = 0
 1267              		@ frame_needed = 0, uses_anonymous_args = 0
 1268              		@ link register save eliminated.
 1269              	.LVL97:
1118:c/stm32f1xx_hal_rcc.c ****                   | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 1270              		.loc 1 1118 0
 1271 0000 0F23     		movs	r3, #15
 1272 0002 0360     		str	r3, [r0]
1127:c/stm32f1xx_hal_rcc.c ****   {
 1273              		.loc 1 1127 0
 1274 0004 1D4B     		ldr	r3, .L190
 1275 0006 1A68     		ldr	r2, [r3]
 1276 0008 5203     		lsls	r2, r2, #13
 1277 000a 2AD5     		bpl	.L177
1129:c/stm32f1xx_hal_rcc.c ****   }
 1278              		.loc 1 1129 0
 1279 000c 4FF4A022 		mov	r2, #327680
 1280              	.L179:
1137:c/stm32f1xx_hal_rcc.c ****   }
 1281              		.loc 1 1137 0
 1282 0010 4260     		str	r2, [r0, #4]
1139:c/stm32f1xx_hal_rcc.c **** 
 1283              		.loc 1 1139 0
 1284 0012 5A68     		ldr	r2, [r3, #4]
 1285 0014 02F40032 		and	r2, r2, #131072
 1286 0018 8260     		str	r2, [r0, #8]
1142:c/stm32f1xx_hal_rcc.c ****   {
 1287              		.loc 1 1142 0
 1288 001a 1A68     		ldr	r2, [r3]
 1289 001c 12F00102 		ands	r2, r2, #1
1144:c/stm32f1xx_hal_rcc.c ****   }
 1290              		.loc 1 1144 0
 1291 0020 18BF     		it	ne
 1292 0022 0122     		movne	r2, #1
1148:c/stm32f1xx_hal_rcc.c ****   }
 1293              		.loc 1 1148 0
 1294 0024 0261     		str	r2, [r0, #16]
1151:c/stm32f1xx_hal_rcc.c ****   
 1295              		.loc 1 1151 0
 1296 0026 1A68     		ldr	r2, [r3]
 1297 0028 C2F3C402 		ubfx	r2, r2, #3, #5
 1298 002c 4261     		str	r2, [r0, #20]
1154:c/stm32f1xx_hal_rcc.c ****   {
 1299              		.loc 1 1154 0
 1300 002e 1A6A     		ldr	r2, [r3, #32]
 1301 0030 5107     		lsls	r1, r2, #29
 1302 0032 1DD5     		bpl	.L182
1156:c/stm32f1xx_hal_rcc.c ****   }
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 56


 1303              		.loc 1 1156 0
 1304 0034 0522     		movs	r2, #5
 1305              	.L184:
1164:c/stm32f1xx_hal_rcc.c ****   }
 1306              		.loc 1 1164 0
 1307 0036 C260     		str	r2, [r0, #12]
1168:c/stm32f1xx_hal_rcc.c ****   {
 1308              		.loc 1 1168 0
 1309 0038 5A6A     		ldr	r2, [r3, #36]
 1310 003a 12F00102 		ands	r2, r2, #1
1170:c/stm32f1xx_hal_rcc.c ****   }
 1311              		.loc 1 1170 0
 1312 003e 18BF     		it	ne
 1313 0040 0122     		movne	r2, #1
1174:c/stm32f1xx_hal_rcc.c ****   }
 1314              		.loc 1 1174 0
 1315 0042 8261     		str	r2, [r0, #24]
1179:c/stm32f1xx_hal_rcc.c ****   {
 1316              		.loc 1 1179 0
 1317 0044 1A68     		ldr	r2, [r3]
 1318 0046 D201     		lsls	r2, r2, #7
1181:c/stm32f1xx_hal_rcc.c ****   }
 1319              		.loc 1 1181 0
 1320 0048 4CBF     		ite	mi
 1321 004a 0222     		movmi	r2, #2
1185:c/stm32f1xx_hal_rcc.c ****   }
 1322              		.loc 1 1185 0
 1323 004c 0122     		movpl	r2, #1
 1324 004e C261     		str	r2, [r0, #28]
1187:c/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMULL);
 1325              		.loc 1 1187 0
 1326 0050 5A68     		ldr	r2, [r3, #4]
 1327 0052 02F48032 		and	r2, r2, #65536
 1328 0056 0262     		str	r2, [r0, #32]
1188:c/stm32f1xx_hal_rcc.c **** #if defined(RCC_CR_PLL2ON)
 1329              		.loc 1 1188 0
 1330 0058 5B68     		ldr	r3, [r3, #4]
 1331 005a 03F47013 		and	r3, r3, #3932160
 1332 005e 4362     		str	r3, [r0, #36]
 1333 0060 7047     		bx	lr
 1334              	.L177:
1131:c/stm32f1xx_hal_rcc.c ****   {
 1335              		.loc 1 1131 0
 1336 0062 1A68     		ldr	r2, [r3]
 1337 0064 12F48032 		ands	r2, r2, #65536
1133:c/stm32f1xx_hal_rcc.c ****   }
 1338              		.loc 1 1133 0
 1339 0068 18BF     		it	ne
 1340 006a 4FF48032 		movne	r2, #65536
 1341 006e CFE7     		b	.L179
 1342              	.L182:
1158:c/stm32f1xx_hal_rcc.c ****   {
 1343              		.loc 1 1158 0
 1344 0070 1A6A     		ldr	r2, [r3, #32]
 1345 0072 12F00102 		ands	r2, r2, #1
1160:c/stm32f1xx_hal_rcc.c ****   }
 1346              		.loc 1 1160 0
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 57


 1347 0076 18BF     		it	ne
 1348 0078 0122     		movne	r2, #1
 1349 007a DCE7     		b	.L184
 1350              	.L191:
 1351              		.align	2
 1352              	.L190:
 1353 007c 00100240 		.word	1073876992
 1354              		.cfi_endproc
 1355              	.LFE74:
 1357              		.section	.text.HAL_RCC_GetClockConfig,"ax",%progbits
 1358              		.align	1
 1359              		.global	HAL_RCC_GetClockConfig
 1360              		.syntax unified
 1361              		.thumb
 1362              		.thumb_func
 1363              		.fpu softvfp
 1365              	HAL_RCC_GetClockConfig:
 1366              	.LFB75:
1213:c/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
 1367              		.loc 1 1213 0
 1368              		.cfi_startproc
 1369              		@ args = 0, pretend = 0, frame = 0
 1370              		@ frame_needed = 0, uses_anonymous_args = 0
 1371              		@ link register save eliminated.
 1372              	.LVL98:
1219:c/stm32f1xx_hal_rcc.c ****   
 1373              		.loc 1 1219 0
 1374 0000 0F23     		movs	r3, #15
 1375 0002 0360     		str	r3, [r0]
1222:c/stm32f1xx_hal_rcc.c ****   
 1376              		.loc 1 1222 0
 1377 0004 0B4B     		ldr	r3, .L193
 1378 0006 5A68     		ldr	r2, [r3, #4]
 1379 0008 02F00302 		and	r2, r2, #3
 1380 000c 4260     		str	r2, [r0, #4]
1225:c/stm32f1xx_hal_rcc.c ****   
 1381              		.loc 1 1225 0
 1382 000e 5A68     		ldr	r2, [r3, #4]
 1383 0010 02F0F002 		and	r2, r2, #240
 1384 0014 8260     		str	r2, [r0, #8]
1228:c/stm32f1xx_hal_rcc.c ****   
 1385              		.loc 1 1228 0
 1386 0016 5A68     		ldr	r2, [r3, #4]
 1387 0018 02F4E062 		and	r2, r2, #1792
 1388 001c C260     		str	r2, [r0, #12]
1231:c/stm32f1xx_hal_rcc.c ****   
 1389              		.loc 1 1231 0
 1390 001e 5B68     		ldr	r3, [r3, #4]
 1391 0020 DB08     		lsrs	r3, r3, #3
 1392 0022 03F4E063 		and	r3, r3, #1792
 1393 0026 0361     		str	r3, [r0, #16]
1235:c/stm32f1xx_hal_rcc.c **** #else
 1394              		.loc 1 1235 0
 1395 0028 034B     		ldr	r3, .L193+4
 1396 002a 1B68     		ldr	r3, [r3]
 1397 002c 03F00703 		and	r3, r3, #7
 1398 0030 0B60     		str	r3, [r1]
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 58


 1399 0032 7047     		bx	lr
 1400              	.L194:
 1401              		.align	2
 1402              	.L193:
 1403 0034 00100240 		.word	1073876992
 1404 0038 00200240 		.word	1073881088
 1405              		.cfi_endproc
 1406              	.LFE75:
 1408              		.section	.text.HAL_RCC_CSSCallback,"ax",%progbits
 1409              		.align	1
 1410              		.weak	HAL_RCC_CSSCallback
 1411              		.syntax unified
 1412              		.thumb
 1413              		.thumb_func
 1414              		.fpu softvfp
 1416              	HAL_RCC_CSSCallback:
 1417              	.LFB78:
1273:c/stm32f1xx_hal_rcc.c **** }
1274:c/stm32f1xx_hal_rcc.c **** 
1275:c/stm32f1xx_hal_rcc.c **** /**
1276:c/stm32f1xx_hal_rcc.c ****   * @brief  RCC Clock Security System interrupt callback
1277:c/stm32f1xx_hal_rcc.c ****   * @retval none
1278:c/stm32f1xx_hal_rcc.c ****   */
1279:c/stm32f1xx_hal_rcc.c **** __weak void HAL_RCC_CSSCallback(void)
1280:c/stm32f1xx_hal_rcc.c **** {
 1418              		.loc 1 1280 0
 1419              		.cfi_startproc
 1420              		@ args = 0, pretend = 0, frame = 0
 1421              		@ frame_needed = 0, uses_anonymous_args = 0
 1422              		@ link register save eliminated.
 1423 0000 7047     		bx	lr
 1424              		.cfi_endproc
 1425              	.LFE78:
 1427              		.section	.text.HAL_RCC_NMI_IRQHandler,"ax",%progbits
 1428              		.align	1
 1429              		.global	HAL_RCC_NMI_IRQHandler
 1430              		.syntax unified
 1431              		.thumb
 1432              		.thumb_func
 1433              		.fpu softvfp
 1435              	HAL_RCC_NMI_IRQHandler:
 1436              	.LFB76:
1248:c/stm32f1xx_hal_rcc.c ****   /* Check RCC CSSF flag  */
 1437              		.loc 1 1248 0
 1438              		.cfi_startproc
 1439              		@ args = 0, pretend = 0, frame = 0
 1440              		@ frame_needed = 0, uses_anonymous_args = 0
1248:c/stm32f1xx_hal_rcc.c ****   /* Check RCC CSSF flag  */
 1441              		.loc 1 1248 0
 1442 0000 08B5     		push	{r3, lr}
 1443              		.cfi_def_cfa_offset 8
 1444              		.cfi_offset 3, -8
 1445              		.cfi_offset 14, -4
1250:c/stm32f1xx_hal_rcc.c ****   {
 1446              		.loc 1 1250 0
 1447 0002 054B     		ldr	r3, .L201
 1448 0004 9B68     		ldr	r3, [r3, #8]
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 59


 1449 0006 1B06     		lsls	r3, r3, #24
 1450 0008 04D5     		bpl	.L196
1253:c/stm32f1xx_hal_rcc.c ****     
 1451              		.loc 1 1253 0
 1452 000a FFF7FEFF 		bl	HAL_RCC_CSSCallback
 1453              	.LVL99:
1256:c/stm32f1xx_hal_rcc.c ****   }
 1454              		.loc 1 1256 0
 1455 000e 8022     		movs	r2, #128
 1456 0010 024B     		ldr	r3, .L201+4
 1457 0012 1A70     		strb	r2, [r3]
 1458              	.L196:
 1459 0014 08BD     		pop	{r3, pc}
 1460              	.L202:
 1461 0016 00BF     		.align	2
 1462              	.L201:
 1463 0018 00100240 		.word	1073876992
 1464 001c 0A100240 		.word	1073877002
 1465              		.cfi_endproc
 1466              	.LFE76:
 1468              		.section	.rodata
 1469              		.set	.LANCHOR0,. + 0
 1470              	.LC0:
 1471 0000 02       		.byte	2
 1472 0001 03       		.byte	3
 1473 0002 04       		.byte	4
 1474 0003 05       		.byte	5
 1475 0004 06       		.byte	6
 1476 0005 07       		.byte	7
 1477 0006 08       		.byte	8
 1478 0007 09       		.byte	9
 1479 0008 0A       		.byte	10
 1480 0009 0B       		.byte	11
 1481 000a 0C       		.byte	12
 1482 000b 0D       		.byte	13
 1483 000c 0E       		.byte	14
 1484 000d 0F       		.byte	15
 1485 000e 10       		.byte	16
 1486 000f 10       		.byte	16
 1487              		.text
 1488              	.Letext0:
 1489              		.file 3 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/machine/_
 1490              		.file 4 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_stdi
 1491              		.file 5 "c/core_cm3.h"
 1492              		.file 6 "c/system_stm32f1xx.h"
 1493              		.file 7 "c/stm32f103xb.h"
 1494              		.file 8 "c/stm32f1xx.h"
 1495              		.file 9 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/lock.
 1496              		.file 10 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_typ
 1497              		.file 11 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/lib/gcc/arm-none-eabi/6.3.1/in
 1498              		.file 12 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/reen
 1499              		.file 13 "c/stm32f1xx_hal_def.h"
 1500              		.file 14 "c/stm32f1xx_hal_rcc.h"
 1501              		.file 15 "c/stm32f1xx_hal_rcc_ex.h"
 1502              		.file 16 "c/stm32f1xx_hal_gpio.h"
 1503              		.file 17 "c/stm32f1xx_hal.h"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s 			page 60


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_rcc.c
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:16     .text.HAL_RCC_DeInit:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:23     .text.HAL_RCC_DeInit:0000000000000000 HAL_RCC_DeInit
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:64     .text.HAL_RCC_DeInit:0000000000000038 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:71     .text.HAL_RCC_OscConfig:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:78     .text.HAL_RCC_OscConfig:0000000000000000 HAL_RCC_OscConfig
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:556    .text.HAL_RCC_OscConfig:0000000000000270 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:565    .text.HAL_RCC_OscConfig:0000000000000284 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:657    .text.HAL_RCC_OscConfig:0000000000000310 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:663    .text.HAL_RCC_MCOConfig:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:670    .text.HAL_RCC_MCOConfig:0000000000000000 HAL_RCC_MCOConfig
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:746    .text.HAL_RCC_MCOConfig:0000000000000048 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:752    .text.HAL_RCC_EnableCSS:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:759    .text.HAL_RCC_EnableCSS:0000000000000000 HAL_RCC_EnableCSS
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:774    .text.HAL_RCC_EnableCSS:0000000000000008 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:779    .text.HAL_RCC_DisableCSS:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:786    .text.HAL_RCC_DisableCSS:0000000000000000 HAL_RCC_DisableCSS
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:801    .text.HAL_RCC_DisableCSS:0000000000000008 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:806    .text.HAL_RCC_GetSysClockFreq:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:813    .text.HAL_RCC_GetSysClockFreq:0000000000000000 HAL_RCC_GetSysClockFreq
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:907    .text.HAL_RCC_GetSysClockFreq:000000000000006c $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:915    .text.HAL_RCC_ClockConfig:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:922    .text.HAL_RCC_ClockConfig:0000000000000000 HAL_RCC_ClockConfig
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:1151   .text.HAL_RCC_ClockConfig:0000000000000138 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:1159   .text.HAL_RCC_GetHCLKFreq:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:1166   .text.HAL_RCC_GetHCLKFreq:0000000000000000 HAL_RCC_GetHCLKFreq
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:1180   .text.HAL_RCC_GetHCLKFreq:0000000000000008 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:1185   .text.HAL_RCC_GetPCLK1Freq:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:1192   .text.HAL_RCC_GetPCLK1Freq:0000000000000000 HAL_RCC_GetPCLK1Freq
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:1213   .text.HAL_RCC_GetPCLK1Freq:0000000000000014 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:1220   .text.HAL_RCC_GetPCLK2Freq:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:1227   .text.HAL_RCC_GetPCLK2Freq:0000000000000000 HAL_RCC_GetPCLK2Freq
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:1248   .text.HAL_RCC_GetPCLK2Freq:0000000000000014 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:1255   .text.HAL_RCC_GetOscConfig:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:1262   .text.HAL_RCC_GetOscConfig:0000000000000000 HAL_RCC_GetOscConfig
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:1353   .text.HAL_RCC_GetOscConfig:000000000000007c $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:1358   .text.HAL_RCC_GetClockConfig:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:1365   .text.HAL_RCC_GetClockConfig:0000000000000000 HAL_RCC_GetClockConfig
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:1403   .text.HAL_RCC_GetClockConfig:0000000000000034 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:1409   .text.HAL_RCC_CSSCallback:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:1416   .text.HAL_RCC_CSSCallback:0000000000000000 HAL_RCC_CSSCallback
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:1428   .text.HAL_RCC_NMI_IRQHandler:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:1435   .text.HAL_RCC_NMI_IRQHandler:0000000000000000 HAL_RCC_NMI_IRQHandler
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccYB3zHi.s:1463   .text.HAL_RCC_NMI_IRQHandler:0000000000000018 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
SystemCoreClock
HAL_GetTick
memset
HAL_GPIO_Init
HAL_InitTick
AHBPrescTable
APBPrescTable
exit code: 0
OPT_LEVEL = Some("s")
HOST = Some("x86_64-apple-darwin")
CFLAGS_arm-none-eabi = None
CFLAGS_arm_none_eabi = None
TARGET_CFLAGS = None
CFLAGS = None
DEBUG = Some("true")
running: "arm-none-eabi-gcc" "-Os" "-ffunction-sections" "-fdata-sections" "-g" "-DSTM32F103xB" "-DUSE_HAL_DRIVER" "-mcpu=cortex-m3" "-mthumb" "-Wall" "-fdata-sections" "-ffunction-sections" "-Wa,-a,-ad" "-g" "-Wall" "-Wextra" "-o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/stm32f1xx_hal_rcc_ex.o" "-c" "c/stm32f1xx_hal_rcc_ex.c"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cc3oMrH7.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_hal_rcc_ex.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_RCCEx_PeriphCLKConfig,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_RCCEx_PeriphCLKConfig
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_RCCEx_PeriphCLKConfig:
  24              	.LFB64:
  25              		.file 1 "c/stm32f1xx_hal_rcc_ex.c"
   1:c/stm32f1xx_hal_rcc_ex.c **** /**
   2:c/stm32f1xx_hal_rcc_ex.c ****   ******************************************************************************
   3:c/stm32f1xx_hal_rcc_ex.c ****   * @file    stm32f1xx_hal_rcc_ex.c
   4:c/stm32f1xx_hal_rcc_ex.c ****   * @author  MCD Application Team
   5:c/stm32f1xx_hal_rcc_ex.c ****   * @version V1.1.1
   6:c/stm32f1xx_hal_rcc_ex.c ****   * @date    12-May-2017
   7:c/stm32f1xx_hal_rcc_ex.c ****   * @brief   Extended RCC HAL module driver.
   8:c/stm32f1xx_hal_rcc_ex.c ****   *          This file provides firmware functions to manage the following 
   9:c/stm32f1xx_hal_rcc_ex.c ****   *          functionalities RCC extension peripheral:
  10:c/stm32f1xx_hal_rcc_ex.c ****   *           + Extended Peripheral Control functions
  11:c/stm32f1xx_hal_rcc_ex.c ****   *  
  12:c/stm32f1xx_hal_rcc_ex.c ****   ******************************************************************************
  13:c/stm32f1xx_hal_rcc_ex.c ****   * @attention
  14:c/stm32f1xx_hal_rcc_ex.c ****   *
  15:c/stm32f1xx_hal_rcc_ex.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  16:c/stm32f1xx_hal_rcc_ex.c ****   *
  17:c/stm32f1xx_hal_rcc_ex.c ****   * Redistribution and use in source and binary forms, with or without modification,
  18:c/stm32f1xx_hal_rcc_ex.c ****   * are permitted provided that the following conditions are met:
  19:c/stm32f1xx_hal_rcc_ex.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  20:c/stm32f1xx_hal_rcc_ex.c ****   *      this list of conditions and the following disclaimer.
  21:c/stm32f1xx_hal_rcc_ex.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  22:c/stm32f1xx_hal_rcc_ex.c ****   *      this list of conditions and the following disclaimer in the documentation
  23:c/stm32f1xx_hal_rcc_ex.c ****   *      and/or other materials provided with the distribution.
  24:c/stm32f1xx_hal_rcc_ex.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  25:c/stm32f1xx_hal_rcc_ex.c ****   *      may be used to endorse or promote products derived from this software
  26:c/stm32f1xx_hal_rcc_ex.c ****   *      without specific prior written permission.
  27:c/stm32f1xx_hal_rcc_ex.c ****   *
  28:c/stm32f1xx_hal_rcc_ex.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  29:c/stm32f1xx_hal_rcc_ex.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  30:c/stm32f1xx_hal_rcc_ex.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  31:c/stm32f1xx_hal_rcc_ex.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  32:c/stm32f1xx_hal_rcc_ex.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:c/stm32f1xx_hal_rcc_ex.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cc3oMrH7.s 			page 2


  34:c/stm32f1xx_hal_rcc_ex.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  35:c/stm32f1xx_hal_rcc_ex.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  36:c/stm32f1xx_hal_rcc_ex.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  37:c/stm32f1xx_hal_rcc_ex.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  38:c/stm32f1xx_hal_rcc_ex.c ****   *
  39:c/stm32f1xx_hal_rcc_ex.c ****   ******************************************************************************  
  40:c/stm32f1xx_hal_rcc_ex.c ****   */ 
  41:c/stm32f1xx_hal_rcc_ex.c **** 
  42:c/stm32f1xx_hal_rcc_ex.c **** /* Includes ------------------------------------------------------------------*/
  43:c/stm32f1xx_hal_rcc_ex.c **** #include "stm32f1xx_hal.h"
  44:c/stm32f1xx_hal_rcc_ex.c **** 
  45:c/stm32f1xx_hal_rcc_ex.c **** /** @addtogroup STM32F1xx_HAL_Driver
  46:c/stm32f1xx_hal_rcc_ex.c ****   * @{
  47:c/stm32f1xx_hal_rcc_ex.c ****   */
  48:c/stm32f1xx_hal_rcc_ex.c **** 
  49:c/stm32f1xx_hal_rcc_ex.c **** #ifdef HAL_RCC_MODULE_ENABLED
  50:c/stm32f1xx_hal_rcc_ex.c **** 
  51:c/stm32f1xx_hal_rcc_ex.c **** /** @defgroup RCCEx RCCEx
  52:c/stm32f1xx_hal_rcc_ex.c ****   * @brief RCC Extension HAL module driver.
  53:c/stm32f1xx_hal_rcc_ex.c ****   * @{
  54:c/stm32f1xx_hal_rcc_ex.c ****   */
  55:c/stm32f1xx_hal_rcc_ex.c **** 
  56:c/stm32f1xx_hal_rcc_ex.c **** /* Private typedef -----------------------------------------------------------*/
  57:c/stm32f1xx_hal_rcc_ex.c **** /* Private define ------------------------------------------------------------*/
  58:c/stm32f1xx_hal_rcc_ex.c **** /** @defgroup RCCEx_Private_Constants RCCEx Private Constants
  59:c/stm32f1xx_hal_rcc_ex.c ****   * @{
  60:c/stm32f1xx_hal_rcc_ex.c ****   */
  61:c/stm32f1xx_hal_rcc_ex.c **** /**
  62:c/stm32f1xx_hal_rcc_ex.c ****   * @}
  63:c/stm32f1xx_hal_rcc_ex.c ****   */
  64:c/stm32f1xx_hal_rcc_ex.c **** 
  65:c/stm32f1xx_hal_rcc_ex.c **** /* Private macro -------------------------------------------------------------*/
  66:c/stm32f1xx_hal_rcc_ex.c **** /** @defgroup RCCEx_Private_Macros RCCEx Private Macros
  67:c/stm32f1xx_hal_rcc_ex.c ****   * @{
  68:c/stm32f1xx_hal_rcc_ex.c ****   */
  69:c/stm32f1xx_hal_rcc_ex.c **** /**
  70:c/stm32f1xx_hal_rcc_ex.c ****   * @}
  71:c/stm32f1xx_hal_rcc_ex.c ****   */
  72:c/stm32f1xx_hal_rcc_ex.c **** 
  73:c/stm32f1xx_hal_rcc_ex.c **** /* Private variables ---------------------------------------------------------*/
  74:c/stm32f1xx_hal_rcc_ex.c **** /* Private function prototypes -----------------------------------------------*/
  75:c/stm32f1xx_hal_rcc_ex.c **** /* Private functions ---------------------------------------------------------*/
  76:c/stm32f1xx_hal_rcc_ex.c **** 
  77:c/stm32f1xx_hal_rcc_ex.c **** /** @defgroup RCCEx_Exported_Functions RCCEx Exported Functions
  78:c/stm32f1xx_hal_rcc_ex.c ****   * @{
  79:c/stm32f1xx_hal_rcc_ex.c ****   */
  80:c/stm32f1xx_hal_rcc_ex.c **** 
  81:c/stm32f1xx_hal_rcc_ex.c **** /** @defgroup RCCEx_Exported_Functions_Group1 Peripheral Control functions 
  82:c/stm32f1xx_hal_rcc_ex.c ****   *  @brief  Extended Peripheral Control functions  
  83:c/stm32f1xx_hal_rcc_ex.c ****   *
  84:c/stm32f1xx_hal_rcc_ex.c **** @verbatim   
  85:c/stm32f1xx_hal_rcc_ex.c ****  ===============================================================================
  86:c/stm32f1xx_hal_rcc_ex.c ****                 ##### Extended Peripheral Control functions  #####
  87:c/stm32f1xx_hal_rcc_ex.c ****  ===============================================================================  
  88:c/stm32f1xx_hal_rcc_ex.c ****     [..]
  89:c/stm32f1xx_hal_rcc_ex.c ****     This subsection provides a set of functions allowing to control the RCC Clocks 
  90:c/stm32f1xx_hal_rcc_ex.c ****     frequencies.
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cc3oMrH7.s 			page 3


  91:c/stm32f1xx_hal_rcc_ex.c ****     [..] 
  92:c/stm32f1xx_hal_rcc_ex.c ****     (@) Important note: Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to
  93:c/stm32f1xx_hal_rcc_ex.c ****         select the RTC clock source; in this case the Backup domain will be reset in  
  94:c/stm32f1xx_hal_rcc_ex.c ****         order to modify the RTC Clock source, as consequence RTC registers (including 
  95:c/stm32f1xx_hal_rcc_ex.c ****         the backup registers) are set to their reset values.
  96:c/stm32f1xx_hal_rcc_ex.c ****       
  97:c/stm32f1xx_hal_rcc_ex.c **** @endverbatim
  98:c/stm32f1xx_hal_rcc_ex.c ****   * @{
  99:c/stm32f1xx_hal_rcc_ex.c ****   */
 100:c/stm32f1xx_hal_rcc_ex.c **** 
 101:c/stm32f1xx_hal_rcc_ex.c **** /**
 102:c/stm32f1xx_hal_rcc_ex.c ****   * @brief  Initializes the RCC extended peripherals clocks according to the specified parameters i
 103:c/stm32f1xx_hal_rcc_ex.c ****   *         RCC_PeriphCLKInitTypeDef.
 104:c/stm32f1xx_hal_rcc_ex.c ****   * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
 105:c/stm32f1xx_hal_rcc_ex.c ****   *         contains the configuration information for the Extended Peripherals clocks(RTC clock).
 106:c/stm32f1xx_hal_rcc_ex.c ****   *
 107:c/stm32f1xx_hal_rcc_ex.c ****   * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select 
 108:c/stm32f1xx_hal_rcc_ex.c ****   *         the RTC clock source; in this case the Backup domain will be reset in  
 109:c/stm32f1xx_hal_rcc_ex.c ****   *         order to modify the RTC Clock source, as consequence RTC registers (including 
 110:c/stm32f1xx_hal_rcc_ex.c ****   *         the backup registers) are set to their reset values.
 111:c/stm32f1xx_hal_rcc_ex.c ****   *
 112:c/stm32f1xx_hal_rcc_ex.c ****   * @note   In case of STM32F105xC or STM32F107xC devices, PLLI2S will be enabled if requested on 
 113:c/stm32f1xx_hal_rcc_ex.c ****   *         one of 2 I2S interfaces. When PLLI2S is enabled, you need to call HAL_RCCEx_DisablePLLI
 114:c/stm32f1xx_hal_rcc_ex.c ****   *         manually disable it.
 115:c/stm32f1xx_hal_rcc_ex.c ****   *
 116:c/stm32f1xx_hal_rcc_ex.c ****   * @retval HAL status
 117:c/stm32f1xx_hal_rcc_ex.c ****   */
 118:c/stm32f1xx_hal_rcc_ex.c **** HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
 119:c/stm32f1xx_hal_rcc_ex.c **** {
  26              		.loc 1 119 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
 120:c/stm32f1xx_hal_rcc_ex.c ****   uint32_t tickstart = 0U, temp_reg = 0U;
 121:c/stm32f1xx_hal_rcc_ex.c **** #if defined(STM32F105xC) || defined(STM32F107xC)
 122:c/stm32f1xx_hal_rcc_ex.c ****   uint32_t  pllactive = 0U;
 123:c/stm32f1xx_hal_rcc_ex.c **** #endif /* STM32F105xC || STM32F107xC */
 124:c/stm32f1xx_hal_rcc_ex.c **** 
 125:c/stm32f1xx_hal_rcc_ex.c ****   /* Check the parameters */
 126:c/stm32f1xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 127:c/stm32f1xx_hal_rcc_ex.c ****   
 128:c/stm32f1xx_hal_rcc_ex.c ****   /*------------------------------- RTC/LCD Configuration ------------------------*/ 
 129:c/stm32f1xx_hal_rcc_ex.c ****   if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
  31              		.loc 1 129 0
  32 0000 0368     		ldr	r3, [r0]
 119:c/stm32f1xx_hal_rcc_ex.c ****   uint32_t tickstart = 0U, temp_reg = 0U;
  33              		.loc 1 119 0
  34 0002 2DE9F341 		push	{r0, r1, r4, r5, r6, r7, r8, lr}
  35              		.cfi_def_cfa_offset 32
  36              		.cfi_offset 4, -24
  37              		.cfi_offset 5, -20
  38              		.cfi_offset 6, -16
  39              		.cfi_offset 7, -12
  40              		.cfi_offset 8, -8
  41              		.cfi_offset 14, -4
  42              		.loc 1 129 0
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cc3oMrH7.s 			page 4


  43 0006 D907     		lsls	r1, r3, #31
 119:c/stm32f1xx_hal_rcc_ex.c ****   uint32_t tickstart = 0U, temp_reg = 0U;
  44              		.loc 1 119 0
  45 0008 0546     		mov	r5, r0
  46              		.loc 1 129 0
  47 000a 20D5     		bpl	.L3
  48              	.LVL1:
  49              	.LBB2:
 130:c/stm32f1xx_hal_rcc_ex.c ****   {
 131:c/stm32f1xx_hal_rcc_ex.c ****     /* check for RTC Parameters used to output RTCCLK */
 132:c/stm32f1xx_hal_rcc_ex.c ****     assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 133:c/stm32f1xx_hal_rcc_ex.c **** 
 134:c/stm32f1xx_hal_rcc_ex.c ****     FlagStatus       pwrclkchanged = RESET;
 135:c/stm32f1xx_hal_rcc_ex.c **** 
 136:c/stm32f1xx_hal_rcc_ex.c ****     /* As soon as function is called to change RTC clock source, activation of the 
 137:c/stm32f1xx_hal_rcc_ex.c ****        power domain is done. */
 138:c/stm32f1xx_hal_rcc_ex.c ****     /* Requires to enable write access to Backup Domain of necessary */
 139:c/stm32f1xx_hal_rcc_ex.c ****     if(__HAL_RCC_PWR_IS_CLK_DISABLED())
  50              		.loc 1 139 0
  51 000c 354C     		ldr	r4, .L27
  52 000e E369     		ldr	r3, [r4, #28]
  53 0010 DA00     		lsls	r2, r3, #3
  54 0012 32D4     		bmi	.L18
 140:c/stm32f1xx_hal_rcc_ex.c ****     {
 141:c/stm32f1xx_hal_rcc_ex.c ****     __HAL_RCC_PWR_CLK_ENABLE();
 142:c/stm32f1xx_hal_rcc_ex.c ****       pwrclkchanged = SET;
  55              		.loc 1 142 0
  56 0014 0127     		movs	r7, #1
  57              	.LBB3:
 141:c/stm32f1xx_hal_rcc_ex.c ****       pwrclkchanged = SET;
  58              		.loc 1 141 0
  59 0016 E369     		ldr	r3, [r4, #28]
  60 0018 43F08053 		orr	r3, r3, #268435456
  61 001c E361     		str	r3, [r4, #28]
  62 001e E369     		ldr	r3, [r4, #28]
  63 0020 03F08053 		and	r3, r3, #268435456
  64 0024 0193     		str	r3, [sp, #4]
  65 0026 019B     		ldr	r3, [sp, #4]
  66              	.LVL2:
  67              	.L4:
  68              	.LBE3:
 143:c/stm32f1xx_hal_rcc_ex.c ****     }
 144:c/stm32f1xx_hal_rcc_ex.c ****     
 145:c/stm32f1xx_hal_rcc_ex.c ****     if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
  69              		.loc 1 145 0
  70 0028 2F4E     		ldr	r6, .L27+4
  71 002a 3368     		ldr	r3, [r6]
  72 002c DB05     		lsls	r3, r3, #23
  73 002e 26D5     		bpl	.L5
  74              	.LVL3:
  75              	.L11:
 146:c/stm32f1xx_hal_rcc_ex.c ****     {
 147:c/stm32f1xx_hal_rcc_ex.c ****       /* Enable write access to Backup domain */
 148:c/stm32f1xx_hal_rcc_ex.c ****       SET_BIT(PWR->CR, PWR_CR_DBP);
 149:c/stm32f1xx_hal_rcc_ex.c ****       
 150:c/stm32f1xx_hal_rcc_ex.c ****       /* Wait for Backup domain Write protection disable */
 151:c/stm32f1xx_hal_rcc_ex.c ****       tickstart = HAL_GetTick();
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cc3oMrH7.s 			page 5


 152:c/stm32f1xx_hal_rcc_ex.c ****       
 153:c/stm32f1xx_hal_rcc_ex.c ****       while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 154:c/stm32f1xx_hal_rcc_ex.c ****       {
 155:c/stm32f1xx_hal_rcc_ex.c ****         if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 156:c/stm32f1xx_hal_rcc_ex.c ****         {
 157:c/stm32f1xx_hal_rcc_ex.c ****           return HAL_TIMEOUT;
 158:c/stm32f1xx_hal_rcc_ex.c ****         }
 159:c/stm32f1xx_hal_rcc_ex.c ****       }
 160:c/stm32f1xx_hal_rcc_ex.c ****     }
 161:c/stm32f1xx_hal_rcc_ex.c ****       
 162:c/stm32f1xx_hal_rcc_ex.c ****     /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value 
 163:c/stm32f1xx_hal_rcc_ex.c ****     temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
  76              		.loc 1 163 0
  77 0030 236A     		ldr	r3, [r4, #32]
  78              	.LVL4:
 164:c/stm32f1xx_hal_rcc_ex.c ****     if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSE
  79              		.loc 1 164 0
  80 0032 13F44073 		ands	r3, r3, #768
  81              	.LVL5:
  82 0036 36D1     		bne	.L6
  83              	.LVL6:
  84              	.L7:
 165:c/stm32f1xx_hal_rcc_ex.c ****     {
 166:c/stm32f1xx_hal_rcc_ex.c ****       /* Store the content of BDCR register before the reset of Backup Domain */
 167:c/stm32f1xx_hal_rcc_ex.c ****       temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 168:c/stm32f1xx_hal_rcc_ex.c ****       /* RTC Clock selection can be changed only if the Backup Domain is reset */
 169:c/stm32f1xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_FORCE();
 170:c/stm32f1xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_RELEASE();
 171:c/stm32f1xx_hal_rcc_ex.c ****       /* Restore the Content of BDCR register */
 172:c/stm32f1xx_hal_rcc_ex.c ****       RCC->BDCR = temp_reg;
 173:c/stm32f1xx_hal_rcc_ex.c **** 
 174:c/stm32f1xx_hal_rcc_ex.c ****       /* Wait for LSERDY if LSE was enabled */
 175:c/stm32f1xx_hal_rcc_ex.c ****       if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 176:c/stm32f1xx_hal_rcc_ex.c ****       {
 177:c/stm32f1xx_hal_rcc_ex.c ****         /* Get Start Tick */
 178:c/stm32f1xx_hal_rcc_ex.c ****         tickstart = HAL_GetTick();
 179:c/stm32f1xx_hal_rcc_ex.c ****       
 180:c/stm32f1xx_hal_rcc_ex.c ****         /* Wait till LSE is ready */  
 181:c/stm32f1xx_hal_rcc_ex.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 182:c/stm32f1xx_hal_rcc_ex.c ****         {
 183:c/stm32f1xx_hal_rcc_ex.c ****           if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 184:c/stm32f1xx_hal_rcc_ex.c ****           {
 185:c/stm32f1xx_hal_rcc_ex.c ****             return HAL_TIMEOUT;
 186:c/stm32f1xx_hal_rcc_ex.c ****           }      
 187:c/stm32f1xx_hal_rcc_ex.c ****         }  
 188:c/stm32f1xx_hal_rcc_ex.c ****       }
 189:c/stm32f1xx_hal_rcc_ex.c ****     }
 190:c/stm32f1xx_hal_rcc_ex.c ****     __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
  85              		.loc 1 190 0
  86 0038 236A     		ldr	r3, [r4, #32]
  87 003a 6A68     		ldr	r2, [r5, #4]
  88 003c 23F44073 		bic	r3, r3, #768
  89 0040 1343     		orrs	r3, r3, r2
  90 0042 2362     		str	r3, [r4, #32]
 191:c/stm32f1xx_hal_rcc_ex.c **** 
 192:c/stm32f1xx_hal_rcc_ex.c ****     /* Require to disable power clock if necessary */
 193:c/stm32f1xx_hal_rcc_ex.c ****     if(pwrclkchanged == SET)
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cc3oMrH7.s 			page 6


  91              		.loc 1 193 0
  92 0044 1FB1     		cbz	r7, .L3
 194:c/stm32f1xx_hal_rcc_ex.c ****     {
 195:c/stm32f1xx_hal_rcc_ex.c ****       __HAL_RCC_PWR_CLK_DISABLE();
  93              		.loc 1 195 0
  94 0046 E369     		ldr	r3, [r4, #28]
  95 0048 23F08053 		bic	r3, r3, #268435456
  96 004c E361     		str	r3, [r4, #28]
  97              	.LVL7:
  98              	.L3:
  99              	.LBE2:
 196:c/stm32f1xx_hal_rcc_ex.c ****     }
 197:c/stm32f1xx_hal_rcc_ex.c ****   }
 198:c/stm32f1xx_hal_rcc_ex.c **** 
 199:c/stm32f1xx_hal_rcc_ex.c ****   /*------------------------------ ADC clock Configuration ------------------*/ 
 200:c/stm32f1xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 100              		.loc 1 200 0
 101 004e 2868     		ldr	r0, [r5]
 102 0050 8307     		lsls	r3, r0, #30
 103 0052 06D5     		bpl	.L17
 201:c/stm32f1xx_hal_rcc_ex.c ****   {
 202:c/stm32f1xx_hal_rcc_ex.c ****     /* Check the parameters */
 203:c/stm32f1xx_hal_rcc_ex.c ****     assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 204:c/stm32f1xx_hal_rcc_ex.c ****     
 205:c/stm32f1xx_hal_rcc_ex.c ****     /* Configure the ADC clock source */
 206:c/stm32f1xx_hal_rcc_ex.c ****     __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 104              		.loc 1 206 0
 105 0054 234A     		ldr	r2, .L27
 106 0056 A968     		ldr	r1, [r5, #8]
 107 0058 5368     		ldr	r3, [r2, #4]
 108 005a 23F44043 		bic	r3, r3, #49152
 109 005e 0B43     		orrs	r3, r3, r1
 110 0060 5360     		str	r3, [r2, #4]
 111              	.L17:
 207:c/stm32f1xx_hal_rcc_ex.c ****   }
 208:c/stm32f1xx_hal_rcc_ex.c **** 
 209:c/stm32f1xx_hal_rcc_ex.c **** #if defined(STM32F105xC) || defined(STM32F107xC)
 210:c/stm32f1xx_hal_rcc_ex.c ****   /*------------------------------ I2S2 Configuration ------------------------*/ 
 211:c/stm32f1xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 212:c/stm32f1xx_hal_rcc_ex.c ****   {
 213:c/stm32f1xx_hal_rcc_ex.c ****     /* Check the parameters */
 214:c/stm32f1xx_hal_rcc_ex.c ****     assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));
 215:c/stm32f1xx_hal_rcc_ex.c **** 
 216:c/stm32f1xx_hal_rcc_ex.c ****     /* Configure the I2S2 clock source */
 217:c/stm32f1xx_hal_rcc_ex.c ****     __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 218:c/stm32f1xx_hal_rcc_ex.c ****   }
 219:c/stm32f1xx_hal_rcc_ex.c **** 
 220:c/stm32f1xx_hal_rcc_ex.c ****   /*------------------------------ I2S3 Configuration ------------------------*/ 
 221:c/stm32f1xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 222:c/stm32f1xx_hal_rcc_ex.c ****   {
 223:c/stm32f1xx_hal_rcc_ex.c ****     /* Check the parameters */
 224:c/stm32f1xx_hal_rcc_ex.c ****     assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));
 225:c/stm32f1xx_hal_rcc_ex.c ****     
 226:c/stm32f1xx_hal_rcc_ex.c ****     /* Configure the I2S3 clock source */
 227:c/stm32f1xx_hal_rcc_ex.c ****     __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 228:c/stm32f1xx_hal_rcc_ex.c ****   }
 229:c/stm32f1xx_hal_rcc_ex.c **** 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cc3oMrH7.s 			page 7


 230:c/stm32f1xx_hal_rcc_ex.c ****   /*------------------------------ PLL I2S Configuration ----------------------*/ 
 231:c/stm32f1xx_hal_rcc_ex.c ****   /* Check that PLLI2S need to be enabled */
 232:c/stm32f1xx_hal_rcc_ex.c ****   if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC
 233:c/stm32f1xx_hal_rcc_ex.c ****   {
 234:c/stm32f1xx_hal_rcc_ex.c ****     /* Update flag to indicate that PLL I2S should be active */
 235:c/stm32f1xx_hal_rcc_ex.c ****     pllactive = 1;
 236:c/stm32f1xx_hal_rcc_ex.c ****   }
 237:c/stm32f1xx_hal_rcc_ex.c **** 
 238:c/stm32f1xx_hal_rcc_ex.c ****   /* Check if PLL I2S need to be enabled */
 239:c/stm32f1xx_hal_rcc_ex.c ****   if (pllactive == 1)
 240:c/stm32f1xx_hal_rcc_ex.c ****   {
 241:c/stm32f1xx_hal_rcc_ex.c ****     /* Enable PLL I2S only if not active */
 242:c/stm32f1xx_hal_rcc_ex.c ****     if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 243:c/stm32f1xx_hal_rcc_ex.c ****     {
 244:c/stm32f1xx_hal_rcc_ex.c ****       /* Check the parameters */
 245:c/stm32f1xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
 246:c/stm32f1xx_hal_rcc_ex.c ****       assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));
 247:c/stm32f1xx_hal_rcc_ex.c **** 
 248:c/stm32f1xx_hal_rcc_ex.c ****       /* Prediv2 can be written only when the PLL2 is disabled. */
 249:c/stm32f1xx_hal_rcc_ex.c ****       /* Return an error only if new value is different from the programmed value */
 250:c/stm32f1xx_hal_rcc_ex.c ****       if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL2ON) && \
 251:c/stm32f1xx_hal_rcc_ex.c ****         (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 252:c/stm32f1xx_hal_rcc_ex.c ****       {
 253:c/stm32f1xx_hal_rcc_ex.c ****         return HAL_ERROR;
 254:c/stm32f1xx_hal_rcc_ex.c ****       }
 255:c/stm32f1xx_hal_rcc_ex.c **** 
 256:c/stm32f1xx_hal_rcc_ex.c ****       /* Configure the HSE prediv2 factor --------------------------------*/
 257:c/stm32f1xx_hal_rcc_ex.c ****       __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 258:c/stm32f1xx_hal_rcc_ex.c **** 
 259:c/stm32f1xx_hal_rcc_ex.c ****       /* Configure the main PLLI2S multiplication factors. */
 260:c/stm32f1xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 261:c/stm32f1xx_hal_rcc_ex.c ****       
 262:c/stm32f1xx_hal_rcc_ex.c ****       /* Enable the main PLLI2S. */
 263:c/stm32f1xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_ENABLE();
 264:c/stm32f1xx_hal_rcc_ex.c ****       
 265:c/stm32f1xx_hal_rcc_ex.c ****       /* Get Start Tick*/
 266:c/stm32f1xx_hal_rcc_ex.c ****       tickstart = HAL_GetTick();
 267:c/stm32f1xx_hal_rcc_ex.c ****       
 268:c/stm32f1xx_hal_rcc_ex.c ****       /* Wait till PLLI2S is ready */
 269:c/stm32f1xx_hal_rcc_ex.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 270:c/stm32f1xx_hal_rcc_ex.c ****       {
 271:c/stm32f1xx_hal_rcc_ex.c ****         if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 272:c/stm32f1xx_hal_rcc_ex.c ****         {
 273:c/stm32f1xx_hal_rcc_ex.c ****           return HAL_TIMEOUT;
 274:c/stm32f1xx_hal_rcc_ex.c ****         }
 275:c/stm32f1xx_hal_rcc_ex.c ****       }
 276:c/stm32f1xx_hal_rcc_ex.c ****     }
 277:c/stm32f1xx_hal_rcc_ex.c ****     else
 278:c/stm32f1xx_hal_rcc_ex.c ****     {
 279:c/stm32f1xx_hal_rcc_ex.c ****       /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
 280:c/stm32f1xx_hal_rcc_ex.c ****       if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 281:c/stm32f1xx_hal_rcc_ex.c ****       {
 282:c/stm32f1xx_hal_rcc_ex.c ****           return HAL_ERROR;
 283:c/stm32f1xx_hal_rcc_ex.c ****       }
 284:c/stm32f1xx_hal_rcc_ex.c ****     }
 285:c/stm32f1xx_hal_rcc_ex.c ****   }
 286:c/stm32f1xx_hal_rcc_ex.c **** #endif /* STM32F105xC || STM32F107xC */
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cc3oMrH7.s 			page 8


 287:c/stm32f1xx_hal_rcc_ex.c **** 
 288:c/stm32f1xx_hal_rcc_ex.c **** #if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 289:c/stm32f1xx_hal_rcc_ex.c ****  || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 290:c/stm32f1xx_hal_rcc_ex.c ****  || defined(STM32F105xC) || defined(STM32F107xC)
 291:c/stm32f1xx_hal_rcc_ex.c ****   /*------------------------------ USB clock Configuration ------------------*/ 
 292:c/stm32f1xx_hal_rcc_ex.c ****   if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 112              		.loc 1 292 0
 113 0062 10F01000 		ands	r0, r0, #16
 114 0066 1BD0     		beq	.L9
 293:c/stm32f1xx_hal_rcc_ex.c ****   {
 294:c/stm32f1xx_hal_rcc_ex.c ****     /* Check the parameters */
 295:c/stm32f1xx_hal_rcc_ex.c ****     assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 296:c/stm32f1xx_hal_rcc_ex.c ****     
 297:c/stm32f1xx_hal_rcc_ex.c ****     /* Configure the USB clock source */
 298:c/stm32f1xx_hal_rcc_ex.c ****     __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 115              		.loc 1 298 0
 116 0068 1E4A     		ldr	r2, .L27
 117 006a E968     		ldr	r1, [r5, #12]
 118 006c 5368     		ldr	r3, [r2, #4]
 299:c/stm32f1xx_hal_rcc_ex.c ****   }
 300:c/stm32f1xx_hal_rcc_ex.c **** #endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG ||
 301:c/stm32f1xx_hal_rcc_ex.c **** 
 302:c/stm32f1xx_hal_rcc_ex.c ****   return HAL_OK;
 119              		.loc 1 302 0
 120 006e 0020     		movs	r0, #0
 298:c/stm32f1xx_hal_rcc_ex.c ****   }
 121              		.loc 1 298 0
 122 0070 23F48003 		bic	r3, r3, #4194304
 123 0074 0B43     		orrs	r3, r3, r1
 124 0076 5360     		str	r3, [r2, #4]
 125 0078 12E0     		b	.L9
 126              	.LVL8:
 127              	.L18:
 128              	.LBB4:
 134:c/stm32f1xx_hal_rcc_ex.c **** 
 129              		.loc 1 134 0
 130 007a 0027     		movs	r7, #0
 131 007c D4E7     		b	.L4
 132              	.LVL9:
 133              	.L5:
 148:c/stm32f1xx_hal_rcc_ex.c ****       
 134              		.loc 1 148 0
 135 007e 3368     		ldr	r3, [r6]
 136 0080 43F48073 		orr	r3, r3, #256
 137 0084 3360     		str	r3, [r6]
 151:c/stm32f1xx_hal_rcc_ex.c ****       
 138              		.loc 1 151 0
 139 0086 FFF7FEFF 		bl	HAL_GetTick
 140              	.LVL10:
 141 008a 8046     		mov	r8, r0
 142              	.LVL11:
 143              	.L8:
 153:c/stm32f1xx_hal_rcc_ex.c ****       {
 144              		.loc 1 153 0
 145 008c 3368     		ldr	r3, [r6]
 146 008e D805     		lsls	r0, r3, #23
 147 0090 CED4     		bmi	.L11
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cc3oMrH7.s 			page 9


 155:c/stm32f1xx_hal_rcc_ex.c ****         {
 148              		.loc 1 155 0
 149 0092 FFF7FEFF 		bl	HAL_GetTick
 150              	.LVL12:
 151 0096 A0EB0800 		sub	r0, r0, r8
 152 009a 6428     		cmp	r0, #100
 153 009c F6D9     		bls	.L8
 154              	.LVL13:
 155              	.L15:
 157:c/stm32f1xx_hal_rcc_ex.c ****         }
 156              		.loc 1 157 0
 157 009e 0320     		movs	r0, #3
 158              	.LVL14:
 159              	.L9:
 160              	.LBE4:
 303:c/stm32f1xx_hal_rcc_ex.c **** }
 161              		.loc 1 303 0
 162 00a0 02B0     		add	sp, sp, #8
 163              		.cfi_remember_state
 164              		.cfi_def_cfa_offset 24
 165              		@ sp needed
 166 00a2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 167              	.LVL15:
 168              	.L6:
 169              		.cfi_restore_state
 170              	.LBB5:
 164:c/stm32f1xx_hal_rcc_ex.c ****     {
 171              		.loc 1 164 0 discriminator 1
 172 00a6 6A68     		ldr	r2, [r5, #4]
 173 00a8 02F44072 		and	r2, r2, #768
 174 00ac 9342     		cmp	r3, r2
 175 00ae C3D0     		beq	.L7
 169:c/stm32f1xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_RELEASE();
 176              		.loc 1 169 0
 177 00b0 0120     		movs	r0, #1
 178 00b2 0E4A     		ldr	r2, .L27+8
 167:c/stm32f1xx_hal_rcc_ex.c ****       /* RTC Clock selection can be changed only if the Backup Domain is reset */
 179              		.loc 1 167 0
 180 00b4 236A     		ldr	r3, [r4, #32]
 181              	.LVL16:
 169:c/stm32f1xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_RELEASE();
 182              		.loc 1 169 0
 183 00b6 1060     		str	r0, [r2]
 170:c/stm32f1xx_hal_rcc_ex.c ****       /* Restore the Content of BDCR register */
 184              		.loc 1 170 0
 185 00b8 0020     		movs	r0, #0
 167:c/stm32f1xx_hal_rcc_ex.c ****       /* RTC Clock selection can be changed only if the Backup Domain is reset */
 186              		.loc 1 167 0
 187 00ba 23F44071 		bic	r1, r3, #768
 188              	.LVL17:
 170:c/stm32f1xx_hal_rcc_ex.c ****       /* Restore the Content of BDCR register */
 189              		.loc 1 170 0
 190 00be 1060     		str	r0, [r2]
 172:c/stm32f1xx_hal_rcc_ex.c **** 
 191              		.loc 1 172 0
 192 00c0 2162     		str	r1, [r4, #32]
 175:c/stm32f1xx_hal_rcc_ex.c ****       {
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cc3oMrH7.s 			page 10


 193              		.loc 1 175 0
 194 00c2 D907     		lsls	r1, r3, #31
 195              	.LVL18:
 196 00c4 B8D5     		bpl	.L7
 178:c/stm32f1xx_hal_rcc_ex.c ****       
 197              		.loc 1 178 0
 198 00c6 FFF7FEFF 		bl	HAL_GetTick
 199              	.LVL19:
 183:c/stm32f1xx_hal_rcc_ex.c ****           {
 200              		.loc 1 183 0
 201 00ca 41F28838 		movw	r8, #5000
 178:c/stm32f1xx_hal_rcc_ex.c ****       
 202              		.loc 1 178 0
 203 00ce 0646     		mov	r6, r0
 204              	.LVL20:
 205              	.L14:
 181:c/stm32f1xx_hal_rcc_ex.c ****         {
 206              		.loc 1 181 0
 207 00d0 236A     		ldr	r3, [r4, #32]
 208 00d2 9A07     		lsls	r2, r3, #30
 209 00d4 B0D4     		bmi	.L7
 183:c/stm32f1xx_hal_rcc_ex.c ****           {
 210              		.loc 1 183 0
 211 00d6 FFF7FEFF 		bl	HAL_GetTick
 212              	.LVL21:
 213 00da 801B     		subs	r0, r0, r6
 214 00dc 4045     		cmp	r0, r8
 215 00de F7D9     		bls	.L14
 216 00e0 DDE7     		b	.L15
 217              	.L28:
 218 00e2 00BF     		.align	2
 219              	.L27:
 220 00e4 00100240 		.word	1073876992
 221 00e8 00700040 		.word	1073770496
 222 00ec 40044242 		.word	1111622720
 223              	.LBE5:
 224              		.cfi_endproc
 225              	.LFE64:
 227              		.section	.text.HAL_RCCEx_GetPeriphCLKConfig,"ax",%progbits
 228              		.align	1
 229              		.global	HAL_RCCEx_GetPeriphCLKConfig
 230              		.syntax unified
 231              		.thumb
 232              		.thumb_func
 233              		.fpu softvfp
 235              	HAL_RCCEx_GetPeriphCLKConfig:
 236              	.LFB65:
 304:c/stm32f1xx_hal_rcc_ex.c **** 
 305:c/stm32f1xx_hal_rcc_ex.c **** /**
 306:c/stm32f1xx_hal_rcc_ex.c ****   * @brief  Get the PeriphClkInit according to the internal
 307:c/stm32f1xx_hal_rcc_ex.c ****   * RCC configuration registers.
 308:c/stm32f1xx_hal_rcc_ex.c ****   * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that 
 309:c/stm32f1xx_hal_rcc_ex.c ****   *         returns the configuration information for the Extended Peripherals clocks(RTC, I2S, ADC
 310:c/stm32f1xx_hal_rcc_ex.c ****   * @retval None
 311:c/stm32f1xx_hal_rcc_ex.c ****   */
 312:c/stm32f1xx_hal_rcc_ex.c **** void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
 313:c/stm32f1xx_hal_rcc_ex.c **** {
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cc3oMrH7.s 			page 11


 237              		.loc 1 313 0
 238              		.cfi_startproc
 239              		@ args = 0, pretend = 0, frame = 0
 240              		@ frame_needed = 0, uses_anonymous_args = 0
 241              		@ link register save eliminated.
 242              	.LVL22:
 314:c/stm32f1xx_hal_rcc_ex.c ****   uint32_t srcclk = 0U;
 315:c/stm32f1xx_hal_rcc_ex.c ****   
 316:c/stm32f1xx_hal_rcc_ex.c ****   /* Set all possible values for the extended clock type parameter------------*/
 317:c/stm32f1xx_hal_rcc_ex.c ****   PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_RTC;
 318:c/stm32f1xx_hal_rcc_ex.c **** 
 319:c/stm32f1xx_hal_rcc_ex.c ****   /* Get the RTC configuration -----------------------------------------------*/
 320:c/stm32f1xx_hal_rcc_ex.c ****   srcclk = __HAL_RCC_GET_RTC_SOURCE();
 243              		.loc 1 320 0
 244 0000 074B     		ldr	r3, .L30
 245 0002 1A6A     		ldr	r2, [r3, #32]
 246              	.LVL23:
 247 0004 02F44072 		and	r2, r2, #768
 248              	.LVL24:
 321:c/stm32f1xx_hal_rcc_ex.c ****   /* Source clock is LSE or LSI*/
 322:c/stm32f1xx_hal_rcc_ex.c ****   PeriphClkInit->RTCClockSelection = srcclk;
 249              		.loc 1 322 0
 250 0008 4260     		str	r2, [r0, #4]
 323:c/stm32f1xx_hal_rcc_ex.c **** 
 324:c/stm32f1xx_hal_rcc_ex.c ****   /* Get the ADC clock configuration -----------------------------------------*/
 325:c/stm32f1xx_hal_rcc_ex.c ****   PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_ADC;
 326:c/stm32f1xx_hal_rcc_ex.c ****   PeriphClkInit->AdcClockSelection = __HAL_RCC_GET_ADC_SOURCE();
 251              		.loc 1 326 0
 252 000a 5A68     		ldr	r2, [r3, #4]
 253              	.LVL25:
 254 000c 02F44042 		and	r2, r2, #49152
 255 0010 8260     		str	r2, [r0, #8]
 327:c/stm32f1xx_hal_rcc_ex.c **** 
 328:c/stm32f1xx_hal_rcc_ex.c **** #if defined(STM32F105xC) || defined(STM32F107xC)
 329:c/stm32f1xx_hal_rcc_ex.c ****   /* Get the I2S2 clock configuration -----------------------------------------*/
 330:c/stm32f1xx_hal_rcc_ex.c ****   PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2S2;
 331:c/stm32f1xx_hal_rcc_ex.c ****   PeriphClkInit->I2s2ClockSelection = __HAL_RCC_GET_I2S2_SOURCE();
 332:c/stm32f1xx_hal_rcc_ex.c **** 
 333:c/stm32f1xx_hal_rcc_ex.c ****   /* Get the I2S3 clock configuration -----------------------------------------*/
 334:c/stm32f1xx_hal_rcc_ex.c ****   PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2S3;
 335:c/stm32f1xx_hal_rcc_ex.c ****   PeriphClkInit->I2s3ClockSelection = __HAL_RCC_GET_I2S3_SOURCE();
 336:c/stm32f1xx_hal_rcc_ex.c **** 
 337:c/stm32f1xx_hal_rcc_ex.c **** #endif /* STM32F105xC || STM32F107xC */
 338:c/stm32f1xx_hal_rcc_ex.c **** 
 339:c/stm32f1xx_hal_rcc_ex.c **** #if defined(STM32F103xE) || defined(STM32F103xG)
 340:c/stm32f1xx_hal_rcc_ex.c ****   /* Get the I2S2 clock configuration -----------------------------------------*/
 341:c/stm32f1xx_hal_rcc_ex.c ****   PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2S2;
 342:c/stm32f1xx_hal_rcc_ex.c ****   PeriphClkInit->I2s2ClockSelection = RCC_I2S2CLKSOURCE_SYSCLK;
 343:c/stm32f1xx_hal_rcc_ex.c **** 
 344:c/stm32f1xx_hal_rcc_ex.c ****   /* Get the I2S3 clock configuration -----------------------------------------*/
 345:c/stm32f1xx_hal_rcc_ex.c ****   PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2S3;
 346:c/stm32f1xx_hal_rcc_ex.c ****   PeriphClkInit->I2s3ClockSelection = RCC_I2S3CLKSOURCE_SYSCLK;
 347:c/stm32f1xx_hal_rcc_ex.c **** 
 348:c/stm32f1xx_hal_rcc_ex.c **** #endif /* STM32F103xE || STM32F103xG */
 349:c/stm32f1xx_hal_rcc_ex.c **** 
 350:c/stm32f1xx_hal_rcc_ex.c **** #if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 351:c/stm32f1xx_hal_rcc_ex.c ****  || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cc3oMrH7.s 			page 12


 352:c/stm32f1xx_hal_rcc_ex.c ****  || defined(STM32F105xC) || defined(STM32F107xC)
 353:c/stm32f1xx_hal_rcc_ex.c ****   /* Get the USB clock configuration -----------------------------------------*/
 354:c/stm32f1xx_hal_rcc_ex.c ****   PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_USB;
 256              		.loc 1 354 0
 257 0012 1322     		movs	r2, #19
 258 0014 0260     		str	r2, [r0]
 355:c/stm32f1xx_hal_rcc_ex.c ****   PeriphClkInit->UsbClockSelection = __HAL_RCC_GET_USB_SOURCE();
 259              		.loc 1 355 0
 260 0016 5B68     		ldr	r3, [r3, #4]
 261 0018 03F48003 		and	r3, r3, #4194304
 262 001c C360     		str	r3, [r0, #12]
 263 001e 7047     		bx	lr
 264              	.L31:
 265              		.align	2
 266              	.L30:
 267 0020 00100240 		.word	1073876992
 268              		.cfi_endproc
 269              	.LFE65:
 271              		.section	.text.HAL_RCCEx_GetPeriphCLKFreq,"ax",%progbits
 272              		.align	1
 273              		.global	HAL_RCCEx_GetPeriphCLKFreq
 274              		.syntax unified
 275              		.thumb
 276              		.thumb_func
 277              		.fpu softvfp
 279              	HAL_RCCEx_GetPeriphCLKFreq:
 280              	.LFB66:
 356:c/stm32f1xx_hal_rcc_ex.c **** #endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG ||
 357:c/stm32f1xx_hal_rcc_ex.c **** }
 358:c/stm32f1xx_hal_rcc_ex.c **** 
 359:c/stm32f1xx_hal_rcc_ex.c **** /**
 360:c/stm32f1xx_hal_rcc_ex.c ****   * @brief  Returns the peripheral clock frequency
 361:c/stm32f1xx_hal_rcc_ex.c ****   * @note   Returns 0 if peripheral clock is unknown
 362:c/stm32f1xx_hal_rcc_ex.c ****   * @param  PeriphClk Peripheral clock identifier
 363:c/stm32f1xx_hal_rcc_ex.c ****   *         This parameter can be one of the following values:
 364:c/stm32f1xx_hal_rcc_ex.c ****   *            @arg @ref RCC_PERIPHCLK_RTC  RTC peripheral clock
 365:c/stm32f1xx_hal_rcc_ex.c ****   *            @arg @ref RCC_PERIPHCLK_ADC  ADC peripheral clock
 366:c/stm32f1xx_hal_rcc_ex.c ****   @if STM32F103xE
 367:c/stm32f1xx_hal_rcc_ex.c ****   *            @arg @ref RCC_PERIPHCLK_I2S2 I2S2 peripheral clock
 368:c/stm32f1xx_hal_rcc_ex.c ****   *            @arg @ref RCC_PERIPHCLK_I2S3 I2S3 peripheral clock
 369:c/stm32f1xx_hal_rcc_ex.c ****   *            @arg @ref RCC_PERIPHCLK_I2S3 I2S3 peripheral clock
 370:c/stm32f1xx_hal_rcc_ex.c ****   @endif
 371:c/stm32f1xx_hal_rcc_ex.c ****   @if STM32F103xG
 372:c/stm32f1xx_hal_rcc_ex.c ****   *            @arg @ref RCC_PERIPHCLK_I2S2 I2S2 peripheral clock
 373:c/stm32f1xx_hal_rcc_ex.c ****   *            @arg @ref RCC_PERIPHCLK_I2S3 I2S3 peripheral clock
 374:c/stm32f1xx_hal_rcc_ex.c ****   *            @arg @ref RCC_PERIPHCLK_I2S3 I2S3 peripheral clock
 375:c/stm32f1xx_hal_rcc_ex.c ****   *            @arg @ref RCC_PERIPHCLK_I2S2 I2S2 peripheral clock
 376:c/stm32f1xx_hal_rcc_ex.c ****   @endif
 377:c/stm32f1xx_hal_rcc_ex.c ****   @if STM32F105xC
 378:c/stm32f1xx_hal_rcc_ex.c ****   *            @arg @ref RCC_PERIPHCLK_I2S2 I2S2 peripheral clock
 379:c/stm32f1xx_hal_rcc_ex.c ****   *            @arg @ref RCC_PERIPHCLK_I2S3 I2S3 peripheral clock
 380:c/stm32f1xx_hal_rcc_ex.c ****   *            @arg @ref RCC_PERIPHCLK_I2S3 I2S3 peripheral clock
 381:c/stm32f1xx_hal_rcc_ex.c ****   *            @arg @ref RCC_PERIPHCLK_I2S2 I2S2 peripheral clock
 382:c/stm32f1xx_hal_rcc_ex.c ****   *            @arg @ref RCC_PERIPHCLK_I2S3 I2S3 peripheral clock
 383:c/stm32f1xx_hal_rcc_ex.c ****   *            @arg @ref RCC_PERIPHCLK_I2S3 I2S3 peripheral clock
 384:c/stm32f1xx_hal_rcc_ex.c ****   *            @arg @ref RCC_PERIPHCLK_I2S2 I2S2 peripheral clock
 385:c/stm32f1xx_hal_rcc_ex.c ****   *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cc3oMrH7.s 			page 13


 386:c/stm32f1xx_hal_rcc_ex.c ****   @endif
 387:c/stm32f1xx_hal_rcc_ex.c ****   @if STM32F107xC
 388:c/stm32f1xx_hal_rcc_ex.c ****   *            @arg @ref RCC_PERIPHCLK_I2S2 I2S2 peripheral clock
 389:c/stm32f1xx_hal_rcc_ex.c ****   *            @arg @ref RCC_PERIPHCLK_I2S3 I2S3 peripheral clock
 390:c/stm32f1xx_hal_rcc_ex.c ****   *            @arg @ref RCC_PERIPHCLK_I2S3 I2S3 peripheral clock
 391:c/stm32f1xx_hal_rcc_ex.c ****   *            @arg @ref RCC_PERIPHCLK_I2S2 I2S2 peripheral clock
 392:c/stm32f1xx_hal_rcc_ex.c ****   *            @arg @ref RCC_PERIPHCLK_I2S3 I2S3 peripheral clock
 393:c/stm32f1xx_hal_rcc_ex.c ****   *            @arg @ref RCC_PERIPHCLK_I2S3 I2S3 peripheral clock
 394:c/stm32f1xx_hal_rcc_ex.c ****   *            @arg @ref RCC_PERIPHCLK_I2S2 I2S2 peripheral clock
 395:c/stm32f1xx_hal_rcc_ex.c ****   *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
 396:c/stm32f1xx_hal_rcc_ex.c ****   @endif
 397:c/stm32f1xx_hal_rcc_ex.c ****   @if STM32F102xx
 398:c/stm32f1xx_hal_rcc_ex.c ****   *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
 399:c/stm32f1xx_hal_rcc_ex.c ****   @endif
 400:c/stm32f1xx_hal_rcc_ex.c ****   @if STM32F103xx
 401:c/stm32f1xx_hal_rcc_ex.c ****   *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
 402:c/stm32f1xx_hal_rcc_ex.c ****   @endif
 403:c/stm32f1xx_hal_rcc_ex.c ****   * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
 404:c/stm32f1xx_hal_rcc_ex.c ****   */
 405:c/stm32f1xx_hal_rcc_ex.c **** uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
 406:c/stm32f1xx_hal_rcc_ex.c **** {
 281              		.loc 1 406 0
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 24
 284              		@ frame_needed = 0, uses_anonymous_args = 0
 285              	.LVL26:
 286 0000 70B5     		push	{r4, r5, r6, lr}
 287              		.cfi_def_cfa_offset 16
 288              		.cfi_offset 4, -16
 289              		.cfi_offset 5, -12
 290              		.cfi_offset 6, -8
 291              		.cfi_offset 14, -4
 292 0002 0446     		mov	r4, r0
 407:c/stm32f1xx_hal_rcc_ex.c **** #if defined(STM32F105xC) || defined(STM32F107xC)
 408:c/stm32f1xx_hal_rcc_ex.c ****   const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 409:c/stm32f1xx_hal_rcc_ex.c ****   const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 410:c/stm32f1xx_hal_rcc_ex.c **** 
 411:c/stm32f1xx_hal_rcc_ex.c ****   uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 412:c/stm32f1xx_hal_rcc_ex.c ****   uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 413:c/stm32f1xx_hal_rcc_ex.c **** #endif /* STM32F105xC || STM32F107xC */
 414:c/stm32f1xx_hal_rcc_ex.c **** #if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
 415:c/stm32f1xx_hal_rcc_ex.c ****     defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
 416:c/stm32f1xx_hal_rcc_ex.c ****   const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 293              		.loc 1 416 0
 294 0004 354B     		ldr	r3, .L52
 406:c/stm32f1xx_hal_rcc_ex.c **** #if defined(STM32F105xC) || defined(STM32F107xC)
 295              		.loc 1 406 0
 296 0006 86B0     		sub	sp, sp, #24
 297              		.cfi_def_cfa_offset 40
 298              		.loc 1 416 0
 299 0008 02AD     		add	r5, sp, #8
 300 000a 03F11006 		add	r6, r3, #16
 301              	.LVL27:
 302              	.L33:
 303 000e 2A46     		mov	r2, r5
 304 0010 1868     		ldr	r0, [r3]	@ unaligned
 305 0012 5968     		ldr	r1, [r3, #4]	@ unaligned
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cc3oMrH7.s 			page 14


 306 0014 0833     		adds	r3, r3, #8
 307 0016 03C2     		stmia	r2!, {r0, r1}
 308 0018 B342     		cmp	r3, r6
 309 001a 1546     		mov	r5, r2
 310 001c F7D1     		bne	.L33
 417:c/stm32f1xx_hal_rcc_ex.c ****   const uint8_t aPredivFactorTable[2] = {1, 2};
 311              		.loc 1 417 0
 312 001e 0123     		movs	r3, #1
 313 0020 8DF80430 		strb	r3, [sp, #4]
 314 0024 0223     		movs	r3, #2
 418:c/stm32f1xx_hal_rcc_ex.c **** 
 419:c/stm32f1xx_hal_rcc_ex.c ****   uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 420:c/stm32f1xx_hal_rcc_ex.c **** #endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
 421:c/stm32f1xx_hal_rcc_ex.c ****   uint32_t temp_reg = 0U, frequency = 0U;
 422:c/stm32f1xx_hal_rcc_ex.c **** 
 423:c/stm32f1xx_hal_rcc_ex.c ****   /* Check the parameters */
 424:c/stm32f1xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 425:c/stm32f1xx_hal_rcc_ex.c ****   
 426:c/stm32f1xx_hal_rcc_ex.c ****   switch (PeriphClk)
 315              		.loc 1 426 0
 316 0026 9C42     		cmp	r4, r3
 417:c/stm32f1xx_hal_rcc_ex.c ****   const uint8_t aPredivFactorTable[2] = {1, 2};
 317              		.loc 1 417 0
 318 0028 8DF80530 		strb	r3, [sp, #5]
 319              	.LVL28:
 320              		.loc 1 426 0
 321 002c 47D0     		beq	.L35
 322 002e 102C     		cmp	r4, #16
 323 0030 17D0     		beq	.L36
 324 0032 012C     		cmp	r4, #1
 325 0034 4FD1     		bne	.L45
 427:c/stm32f1xx_hal_rcc_ex.c ****   {
 428:c/stm32f1xx_hal_rcc_ex.c **** #if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 429:c/stm32f1xx_hal_rcc_ex.c ****  || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 430:c/stm32f1xx_hal_rcc_ex.c ****  || defined(STM32F105xC) || defined(STM32F107xC)
 431:c/stm32f1xx_hal_rcc_ex.c ****   case RCC_PERIPHCLK_USB:  
 432:c/stm32f1xx_hal_rcc_ex.c ****     {
 433:c/stm32f1xx_hal_rcc_ex.c ****       /* Get RCC configuration ------------------------------------------------------*/
 434:c/stm32f1xx_hal_rcc_ex.c ****       temp_reg = RCC->CFGR;
 435:c/stm32f1xx_hal_rcc_ex.c ****   
 436:c/stm32f1xx_hal_rcc_ex.c ****       /* Check if PLL is enabled */
 437:c/stm32f1xx_hal_rcc_ex.c ****       if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 438:c/stm32f1xx_hal_rcc_ex.c ****       {
 439:c/stm32f1xx_hal_rcc_ex.c ****         pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos
 440:c/stm32f1xx_hal_rcc_ex.c ****         if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 441:c/stm32f1xx_hal_rcc_ex.c ****         {
 442:c/stm32f1xx_hal_rcc_ex.c **** #if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 443:c/stm32f1xx_hal_rcc_ex.c ****  || defined(STM32F100xE)
 444:c/stm32f1xx_hal_rcc_ex.c ****           prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PRED
 445:c/stm32f1xx_hal_rcc_ex.c **** #else
 446:c/stm32f1xx_hal_rcc_ex.c ****           prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTP
 447:c/stm32f1xx_hal_rcc_ex.c **** #endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */
 448:c/stm32f1xx_hal_rcc_ex.c **** 
 449:c/stm32f1xx_hal_rcc_ex.c **** #if defined(STM32F105xC) || defined(STM32F107xC)
 450:c/stm32f1xx_hal_rcc_ex.c ****           if(HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 451:c/stm32f1xx_hal_rcc_ex.c ****           {
 452:c/stm32f1xx_hal_rcc_ex.c ****             /* PLL2 selected as Prediv1 source */
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cc3oMrH7.s 			page 15


 453:c/stm32f1xx_hal_rcc_ex.c ****             /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
 454:c/stm32f1xx_hal_rcc_ex.c ****             prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 455:c/stm32f1xx_hal_rcc_ex.c ****             pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 456:c/stm32f1xx_hal_rcc_ex.c ****             pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 457:c/stm32f1xx_hal_rcc_ex.c ****           }
 458:c/stm32f1xx_hal_rcc_ex.c ****           else
 459:c/stm32f1xx_hal_rcc_ex.c ****           {
 460:c/stm32f1xx_hal_rcc_ex.c ****             /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
 461:c/stm32f1xx_hal_rcc_ex.c ****             pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 462:c/stm32f1xx_hal_rcc_ex.c ****           }
 463:c/stm32f1xx_hal_rcc_ex.c ****           
 464:c/stm32f1xx_hal_rcc_ex.c ****           /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using fl
 465:c/stm32f1xx_hal_rcc_ex.c ****           /* In this case need to divide pllclk by 2 */
 466:c/stm32f1xx_hal_rcc_ex.c ****           if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos]
 467:c/stm32f1xx_hal_rcc_ex.c ****           {
 468:c/stm32f1xx_hal_rcc_ex.c ****               pllclk = pllclk / 2;
 469:c/stm32f1xx_hal_rcc_ex.c ****           }
 470:c/stm32f1xx_hal_rcc_ex.c **** #else
 471:c/stm32f1xx_hal_rcc_ex.c ****           if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 472:c/stm32f1xx_hal_rcc_ex.c ****           {
 473:c/stm32f1xx_hal_rcc_ex.c ****             /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
 474:c/stm32f1xx_hal_rcc_ex.c ****             pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 475:c/stm32f1xx_hal_rcc_ex.c ****           }
 476:c/stm32f1xx_hal_rcc_ex.c **** #endif /* STM32F105xC || STM32F107xC */
 477:c/stm32f1xx_hal_rcc_ex.c ****         }
 478:c/stm32f1xx_hal_rcc_ex.c ****         else
 479:c/stm32f1xx_hal_rcc_ex.c ****         {
 480:c/stm32f1xx_hal_rcc_ex.c ****           /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
 481:c/stm32f1xx_hal_rcc_ex.c ****           pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 482:c/stm32f1xx_hal_rcc_ex.c ****         }
 483:c/stm32f1xx_hal_rcc_ex.c **** 
 484:c/stm32f1xx_hal_rcc_ex.c ****         /* Calcul of the USB frequency*/
 485:c/stm32f1xx_hal_rcc_ex.c **** #if defined(STM32F105xC) || defined(STM32F107xC)
 486:c/stm32f1xx_hal_rcc_ex.c ****         /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
 487:c/stm32f1xx_hal_rcc_ex.c ****         if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 488:c/stm32f1xx_hal_rcc_ex.c ****         {
 489:c/stm32f1xx_hal_rcc_ex.c ****           /* Prescaler of 2 selected for USB */ 
 490:c/stm32f1xx_hal_rcc_ex.c ****           frequency = pllclk;
 491:c/stm32f1xx_hal_rcc_ex.c ****         }
 492:c/stm32f1xx_hal_rcc_ex.c ****         else
 493:c/stm32f1xx_hal_rcc_ex.c ****         {
 494:c/stm32f1xx_hal_rcc_ex.c ****           /* Prescaler of 3 selected for USB */ 
 495:c/stm32f1xx_hal_rcc_ex.c ****           frequency = (2 * pllclk) / 3;
 496:c/stm32f1xx_hal_rcc_ex.c ****         }
 497:c/stm32f1xx_hal_rcc_ex.c **** #else
 498:c/stm32f1xx_hal_rcc_ex.c ****         /* USBCLK = PLLCLK / USB prescaler */
 499:c/stm32f1xx_hal_rcc_ex.c ****         if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 500:c/stm32f1xx_hal_rcc_ex.c ****         {
 501:c/stm32f1xx_hal_rcc_ex.c ****           /* No prescaler selected for USB */
 502:c/stm32f1xx_hal_rcc_ex.c ****           frequency = pllclk;
 503:c/stm32f1xx_hal_rcc_ex.c ****         }
 504:c/stm32f1xx_hal_rcc_ex.c ****         else
 505:c/stm32f1xx_hal_rcc_ex.c ****         {
 506:c/stm32f1xx_hal_rcc_ex.c ****           /* Prescaler of 1.5 selected for USB */ 
 507:c/stm32f1xx_hal_rcc_ex.c ****           frequency = (pllclk * 2) / 3;
 508:c/stm32f1xx_hal_rcc_ex.c ****         }
 509:c/stm32f1xx_hal_rcc_ex.c **** #endif
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cc3oMrH7.s 			page 16


 510:c/stm32f1xx_hal_rcc_ex.c ****       }
 511:c/stm32f1xx_hal_rcc_ex.c ****       break;
 512:c/stm32f1xx_hal_rcc_ex.c ****     }
 513:c/stm32f1xx_hal_rcc_ex.c **** #endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG ||
 514:c/stm32f1xx_hal_rcc_ex.c **** #if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
 515:c/stm32f1xx_hal_rcc_ex.c ****   case RCC_PERIPHCLK_I2S2:  
 516:c/stm32f1xx_hal_rcc_ex.c ****     {
 517:c/stm32f1xx_hal_rcc_ex.c **** #if defined(STM32F103xE) || defined(STM32F103xG)
 518:c/stm32f1xx_hal_rcc_ex.c ****       /* SYSCLK used as source clock for I2S2 */
 519:c/stm32f1xx_hal_rcc_ex.c ****       frequency = HAL_RCC_GetSysClockFreq();
 520:c/stm32f1xx_hal_rcc_ex.c **** #else
 521:c/stm32f1xx_hal_rcc_ex.c ****       if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 522:c/stm32f1xx_hal_rcc_ex.c ****       {
 523:c/stm32f1xx_hal_rcc_ex.c ****         /* SYSCLK used as source clock for I2S2 */
 524:c/stm32f1xx_hal_rcc_ex.c ****         frequency = HAL_RCC_GetSysClockFreq();
 525:c/stm32f1xx_hal_rcc_ex.c ****       }
 526:c/stm32f1xx_hal_rcc_ex.c ****       else
 527:c/stm32f1xx_hal_rcc_ex.c ****       {
 528:c/stm32f1xx_hal_rcc_ex.c ****          /* Check if PLLI2S is enabled */
 529:c/stm32f1xx_hal_rcc_ex.c ****         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 530:c/stm32f1xx_hal_rcc_ex.c ****         {
 531:c/stm32f1xx_hal_rcc_ex.c ****           /* PLLI2SVCO = 2 * PLLI2SCLK = 2 * (HSE/PREDIV2 * PLL3MUL) */
 532:c/stm32f1xx_hal_rcc_ex.c ****           prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 533:c/stm32f1xx_hal_rcc_ex.c ****           pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 534:c/stm32f1xx_hal_rcc_ex.c ****           frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 535:c/stm32f1xx_hal_rcc_ex.c ****         }
 536:c/stm32f1xx_hal_rcc_ex.c ****       }
 537:c/stm32f1xx_hal_rcc_ex.c **** #endif /* STM32F103xE || STM32F103xG */
 538:c/stm32f1xx_hal_rcc_ex.c ****       break;
 539:c/stm32f1xx_hal_rcc_ex.c ****     }
 540:c/stm32f1xx_hal_rcc_ex.c ****   case RCC_PERIPHCLK_I2S3:
 541:c/stm32f1xx_hal_rcc_ex.c ****     {
 542:c/stm32f1xx_hal_rcc_ex.c **** #if defined(STM32F103xE) || defined(STM32F103xG)
 543:c/stm32f1xx_hal_rcc_ex.c ****       /* SYSCLK used as source clock for I2S3 */
 544:c/stm32f1xx_hal_rcc_ex.c ****       frequency = HAL_RCC_GetSysClockFreq();
 545:c/stm32f1xx_hal_rcc_ex.c **** #else
 546:c/stm32f1xx_hal_rcc_ex.c ****       if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 547:c/stm32f1xx_hal_rcc_ex.c ****       {
 548:c/stm32f1xx_hal_rcc_ex.c ****         /* SYSCLK used as source clock for I2S3 */
 549:c/stm32f1xx_hal_rcc_ex.c ****         frequency = HAL_RCC_GetSysClockFreq();
 550:c/stm32f1xx_hal_rcc_ex.c ****       }
 551:c/stm32f1xx_hal_rcc_ex.c ****       else
 552:c/stm32f1xx_hal_rcc_ex.c ****       {
 553:c/stm32f1xx_hal_rcc_ex.c ****          /* Check if PLLI2S is enabled */
 554:c/stm32f1xx_hal_rcc_ex.c ****         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 555:c/stm32f1xx_hal_rcc_ex.c ****         {
 556:c/stm32f1xx_hal_rcc_ex.c ****           /* PLLI2SVCO = 2 * PLLI2SCLK = 2 * (HSE/PREDIV2 * PLL3MUL) */
 557:c/stm32f1xx_hal_rcc_ex.c ****           prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 558:c/stm32f1xx_hal_rcc_ex.c ****           pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 559:c/stm32f1xx_hal_rcc_ex.c ****           frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 560:c/stm32f1xx_hal_rcc_ex.c ****         }
 561:c/stm32f1xx_hal_rcc_ex.c ****       }
 562:c/stm32f1xx_hal_rcc_ex.c **** #endif /* STM32F103xE || STM32F103xG */
 563:c/stm32f1xx_hal_rcc_ex.c ****       break;
 564:c/stm32f1xx_hal_rcc_ex.c ****     }
 565:c/stm32f1xx_hal_rcc_ex.c **** #endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
 566:c/stm32f1xx_hal_rcc_ex.c ****   case RCC_PERIPHCLK_RTC:  
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cc3oMrH7.s 			page 17


 567:c/stm32f1xx_hal_rcc_ex.c ****     {
 568:c/stm32f1xx_hal_rcc_ex.c ****       /* Get RCC BDCR configuration ------------------------------------------------------*/
 569:c/stm32f1xx_hal_rcc_ex.c ****       temp_reg = RCC->BDCR;
 570:c/stm32f1xx_hal_rcc_ex.c **** 
 571:c/stm32f1xx_hal_rcc_ex.c ****       /* Check if LSE is ready if RTC clock selection is LSE */
 572:c/stm32f1xx_hal_rcc_ex.c ****       if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_B
 326              		.loc 1 572 0
 327 0036 40F20231 		movw	r1, #770
 569:c/stm32f1xx_hal_rcc_ex.c **** 
 328              		.loc 1 569 0
 329 003a 294A     		ldr	r2, .L52+4
 330 003c 136A     		ldr	r3, [r2, #32]
 331              	.LVL29:
 332              		.loc 1 572 0
 333 003e 1940     		ands	r1, r1, r3
 334 0040 B1F5817F 		cmp	r1, #258
 335 0044 44D0     		beq	.L43
 573:c/stm32f1xx_hal_rcc_ex.c ****       {
 574:c/stm32f1xx_hal_rcc_ex.c ****         frequency = LSE_VALUE;
 575:c/stm32f1xx_hal_rcc_ex.c ****       }
 576:c/stm32f1xx_hal_rcc_ex.c ****       /* Check if LSI is ready if RTC clock selection is LSI */
 577:c/stm32f1xx_hal_rcc_ex.c ****       else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, 
 336              		.loc 1 577 0
 337 0046 03F44073 		and	r3, r3, #768
 338              	.LVL30:
 339 004a B3F5007F 		cmp	r3, #512
 340 004e 2DD1     		bne	.L40
 578:c/stm32f1xx_hal_rcc_ex.c ****       {
 579:c/stm32f1xx_hal_rcc_ex.c ****         frequency = LSI_VALUE;
 341              		.loc 1 579 0 discriminator 1
 342 0050 49F64040 		movw	r0, #40000
 577:c/stm32f1xx_hal_rcc_ex.c ****       {
 343              		.loc 1 577 0 discriminator 1
 344 0054 536A     		ldr	r3, [r2, #36]
 345              		.loc 1 579 0 discriminator 1
 346 0056 13F0020F 		tst	r3, #2
 347              	.L51:
 580:c/stm32f1xx_hal_rcc_ex.c ****       }
 581:c/stm32f1xx_hal_rcc_ex.c ****       else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC
 582:c/stm32f1xx_hal_rcc_ex.c ****       {
 583:c/stm32f1xx_hal_rcc_ex.c ****         frequency = HSE_VALUE / 128U;
 348              		.loc 1 583 0 discriminator 1
 349 005a 08BF     		it	eq
 350 005c 0020     		moveq	r0, #0
 351              	.LVL31:
 352              	.L32:
 584:c/stm32f1xx_hal_rcc_ex.c ****       }
 585:c/stm32f1xx_hal_rcc_ex.c ****       /* Clock not enabled for RTC*/
 586:c/stm32f1xx_hal_rcc_ex.c ****       else
 587:c/stm32f1xx_hal_rcc_ex.c ****       {
 588:c/stm32f1xx_hal_rcc_ex.c ****         frequency = 0U;
 589:c/stm32f1xx_hal_rcc_ex.c ****       }
 590:c/stm32f1xx_hal_rcc_ex.c ****       break;
 591:c/stm32f1xx_hal_rcc_ex.c ****     }
 592:c/stm32f1xx_hal_rcc_ex.c ****   case RCC_PERIPHCLK_ADC:  
 593:c/stm32f1xx_hal_rcc_ex.c ****     {
 594:c/stm32f1xx_hal_rcc_ex.c ****       frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cc3oMrH7.s 			page 18


 595:c/stm32f1xx_hal_rcc_ex.c ****       break;
 596:c/stm32f1xx_hal_rcc_ex.c ****     }
 597:c/stm32f1xx_hal_rcc_ex.c ****   default: 
 598:c/stm32f1xx_hal_rcc_ex.c ****     {
 599:c/stm32f1xx_hal_rcc_ex.c ****       break;
 600:c/stm32f1xx_hal_rcc_ex.c ****     }
 601:c/stm32f1xx_hal_rcc_ex.c ****   }
 602:c/stm32f1xx_hal_rcc_ex.c ****   return(frequency);
 603:c/stm32f1xx_hal_rcc_ex.c **** }
 353              		.loc 1 603 0
 354 005e 06B0     		add	sp, sp, #24
 355              		.cfi_remember_state
 356              		.cfi_def_cfa_offset 16
 357              		@ sp needed
 358 0060 70BD     		pop	{r4, r5, r6, pc}
 359              	.LVL32:
 360              	.L36:
 361              		.cfi_restore_state
 434:c/stm32f1xx_hal_rcc_ex.c ****   
 362              		.loc 1 434 0
 363 0062 1F4B     		ldr	r3, .L52+4
 364 0064 5968     		ldr	r1, [r3, #4]
 365              	.LVL33:
 437:c/stm32f1xx_hal_rcc_ex.c ****       {
 366              		.loc 1 437 0
 367 0066 1868     		ldr	r0, [r3]
 368 0068 10F08070 		ands	r0, r0, #16777216
 369 006c F7D0     		beq	.L32
 439:c/stm32f1xx_hal_rcc_ex.c ****         if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 370              		.loc 1 439 0
 371 006e C1F38342 		ubfx	r2, r1, #18, #4
 372 0072 06A8     		add	r0, sp, #24
 373 0074 0244     		add	r2, r2, r0
 374 0076 12F8100C 		ldrb	r0, [r2, #-16]	@ zero_extendqisi2
 375              	.LVL34:
 440:c/stm32f1xx_hal_rcc_ex.c ****         {
 376              		.loc 1 440 0
 377 007a CA03     		lsls	r2, r1, #15
 446:c/stm32f1xx_hal_rcc_ex.c **** #endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */
 378              		.loc 1 446 0
 379 007c 41BF     		itttt	mi
 380 007e 5A68     		ldrmi	r2, [r3, #4]
 381              	.LVL35:
 382 0080 06A9     		addmi	r1, sp, #24
 383              	.LVL36:
 384 0082 C2F34042 		ubfxmi	r2, r2, #17, #1
 385              	.LVL37:
 386 0086 5218     		addmi	r2, r2, r1
 387 0088 44BF     		itt	mi
 388 008a 12F8141C 		ldrbmi	r1, [r2, #-20]	@ zero_extendqisi2
 474:c/stm32f1xx_hal_rcc_ex.c ****           }
 389              		.loc 1 474 0
 390 008e 154A     		ldrmi	r2, .L52+8
 499:c/stm32f1xx_hal_rcc_ex.c ****         {
 391              		.loc 1 499 0
 392 0090 5B68     		ldr	r3, [r3, #4]
 474:c/stm32f1xx_hal_rcc_ex.c ****           }
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cc3oMrH7.s 			page 19


 393              		.loc 1 474 0
 394 0092 4CBF     		ite	mi
 395 0094 B2FBF1F2 		udivmi	r2, r2, r1
 481:c/stm32f1xx_hal_rcc_ex.c ****         }
 396              		.loc 1 481 0
 397 0098 134A     		ldrpl	r2, .L52+12
 499:c/stm32f1xx_hal_rcc_ex.c ****         {
 398              		.loc 1 499 0
 399 009a 5B02     		lsls	r3, r3, #9
 481:c/stm32f1xx_hal_rcc_ex.c ****         }
 400              		.loc 1 481 0
 401 009c 02FB00F0 		mul	r0, r2, r0
 402              	.LVL38:
 499:c/stm32f1xx_hal_rcc_ex.c ****         {
 403              		.loc 1 499 0
 404 00a0 DDD4     		bmi	.L32
 507:c/stm32f1xx_hal_rcc_ex.c ****         }
 405              		.loc 1 507 0
 406 00a2 0323     		movs	r3, #3
 407 00a4 4000     		lsls	r0, r0, #1
 408              	.LVL39:
 409              	.L50:
 594:c/stm32f1xx_hal_rcc_ex.c ****       break;
 410              		.loc 1 594 0
 411 00a6 B0FBF3F0 		udiv	r0, r0, r3
 412              	.LVL40:
 595:c/stm32f1xx_hal_rcc_ex.c ****     }
 413              		.loc 1 595 0
 414 00aa D8E7     		b	.L32
 415              	.LVL41:
 416              	.L40:
 581:c/stm32f1xx_hal_rcc_ex.c ****       {
 417              		.loc 1 581 0
 418 00ac B3F5407F 		cmp	r3, #768
 419 00b0 11D1     		bne	.L45
 581:c/stm32f1xx_hal_rcc_ex.c ****       {
 420              		.loc 1 581 0 is_stmt 0 discriminator 1
 421 00b2 1368     		ldr	r3, [r2]
 583:c/stm32f1xx_hal_rcc_ex.c ****       }
 422              		.loc 1 583 0 is_stmt 1 discriminator 1
 423 00b4 4FF22440 		movw	r0, #62500
 424 00b8 13F4003F 		tst	r3, #131072
 425 00bc CDE7     		b	.L51
 426              	.LVL42:
 427              	.L35:
 594:c/stm32f1xx_hal_rcc_ex.c ****       break;
 428              		.loc 1 594 0
 429 00be FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 430              	.LVL43:
 431 00c2 074B     		ldr	r3, .L52+4
 432 00c4 5B68     		ldr	r3, [r3, #4]
 433 00c6 C3F38133 		ubfx	r3, r3, #14, #2
 434 00ca 0133     		adds	r3, r3, #1
 435 00cc 5B00     		lsls	r3, r3, #1
 436 00ce EAE7     		b	.L50
 437              	.LVL44:
 438              	.L43:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cc3oMrH7.s 			page 20


 574:c/stm32f1xx_hal_rcc_ex.c ****       }
 439              		.loc 1 574 0
 440 00d0 4FF40040 		mov	r0, #32768
 441 00d4 C3E7     		b	.L32
 442              	.LVL45:
 443              	.L45:
 588:c/stm32f1xx_hal_rcc_ex.c ****       }
 444              		.loc 1 588 0
 445 00d6 0020     		movs	r0, #0
 446 00d8 C1E7     		b	.L32
 447              	.L53:
 448 00da 00BF     		.align	2
 449              	.L52:
 450 00dc 00000000 		.word	.LANCHOR0
 451 00e0 00100240 		.word	1073876992
 452 00e4 00127A00 		.word	8000000
 453 00e8 00093D00 		.word	4000000
 454              		.cfi_endproc
 455              	.LFE66:
 457              		.section	.rodata
 458              		.set	.LANCHOR0,. + 0
 459              	.LC0:
 460 0000 02       		.byte	2
 461 0001 03       		.byte	3
 462 0002 04       		.byte	4
 463 0003 05       		.byte	5
 464 0004 06       		.byte	6
 465 0005 07       		.byte	7
 466 0006 08       		.byte	8
 467 0007 09       		.byte	9
 468 0008 0A       		.byte	10
 469 0009 0B       		.byte	11
 470 000a 0C       		.byte	12
 471 000b 0D       		.byte	13
 472 000c 0E       		.byte	14
 473 000d 0F       		.byte	15
 474 000e 10       		.byte	16
 475 000f 10       		.byte	16
 476              		.text
 477              	.Letext0:
 478              		.file 2 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/machine/_
 479              		.file 3 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_stdi
 480              		.file 4 "c/core_cm3.h"
 481              		.file 5 "c/system_stm32f1xx.h"
 482              		.file 6 "c/stm32f103xb.h"
 483              		.file 7 "c/stm32f1xx.h"
 484              		.file 8 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/lock.
 485              		.file 9 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_type
 486              		.file 10 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/lib/gcc/arm-none-eabi/6.3.1/in
 487              		.file 11 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/reen
 488              		.file 12 "c/stm32f1xx_hal_def.h"
 489              		.file 13 "c/stm32f1xx_hal_rcc_ex.h"
 490              		.file 14 "c/stm32f1xx_hal_rcc.h"
 491              		.file 15 "c/stm32f1xx_hal.h"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cc3oMrH7.s 			page 21


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_rcc_ex.c
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cc3oMrH7.s:16     .text.HAL_RCCEx_PeriphCLKConfig:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cc3oMrH7.s:23     .text.HAL_RCCEx_PeriphCLKConfig:0000000000000000 HAL_RCCEx_PeriphCLKConfig
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cc3oMrH7.s:220    .text.HAL_RCCEx_PeriphCLKConfig:00000000000000e4 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cc3oMrH7.s:228    .text.HAL_RCCEx_GetPeriphCLKConfig:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cc3oMrH7.s:235    .text.HAL_RCCEx_GetPeriphCLKConfig:0000000000000000 HAL_RCCEx_GetPeriphCLKConfig
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cc3oMrH7.s:267    .text.HAL_RCCEx_GetPeriphCLKConfig:0000000000000020 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cc3oMrH7.s:272    .text.HAL_RCCEx_GetPeriphCLKFreq:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cc3oMrH7.s:279    .text.HAL_RCCEx_GetPeriphCLKFreq:0000000000000000 HAL_RCCEx_GetPeriphCLKFreq
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cc3oMrH7.s:450    .text.HAL_RCCEx_GetPeriphCLKFreq:00000000000000dc $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_RCC_GetPCLK2Freq
exit code: 0
OPT_LEVEL = Some("s")
HOST = Some("x86_64-apple-darwin")
CFLAGS_arm-none-eabi = None
CFLAGS_arm_none_eabi = None
TARGET_CFLAGS = None
CFLAGS = None
DEBUG = Some("true")
running: "arm-none-eabi-gcc" "-Os" "-ffunction-sections" "-fdata-sections" "-g" "-DSTM32F103xB" "-DUSE_HAL_DRIVER" "-mcpu=cortex-m3" "-mthumb" "-Wall" "-fdata-sections" "-ffunction-sections" "-Wa,-a,-ad" "-g" "-Wall" "-Wextra" "-o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/stm32f1xx_it.o" "-c" "c/stm32f1xx_it.c"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHVvN2H.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_it.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NMI_Handler,"ax",%progbits
  16              		.align	1
  17              		.global	NMI_Handler
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	NMI_Handler:
  24              	.LFB79:
  25              		.cfi_startproc
  26              		@ args = 0, pretend = 0, frame = 0
  27              		@ frame_needed = 0, uses_anonymous_args = 0
  28              		@ link register save eliminated.
  29 0000 7047     		bx	lr
  30              		.cfi_endproc
  31              	.LFE79:
  33              		.section	.text.HardFault_Handler,"ax",%progbits
  34              		.align	1
  35              		.global	HardFault_Handler
  36              		.syntax unified
  37              		.thumb
  38              		.thumb_func
  39              		.fpu softvfp
  41              	HardFault_Handler:
  42              	.LFB65:
  43              		.file 1 "c/stm32f1xx_it.c"
   1:c/stm32f1xx_it.c **** /**
   2:c/stm32f1xx_it.c ****   ******************************************************************************
   3:c/stm32f1xx_it.c ****   * @file    stm32f1xx_it.c
   4:c/stm32f1xx_it.c ****   * @brief   Interrupt Service Routines.
   5:c/stm32f1xx_it.c ****   ******************************************************************************
   6:c/stm32f1xx_it.c ****   *
   7:c/stm32f1xx_it.c ****   * COPYRIGHT(c) 2017 STMicroelectronics
   8:c/stm32f1xx_it.c ****   *
   9:c/stm32f1xx_it.c ****   * Redistribution and use in source and binary forms, with or without modification,
  10:c/stm32f1xx_it.c ****   * are permitted provided that the following conditions are met:
  11:c/stm32f1xx_it.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  12:c/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer.
  13:c/stm32f1xx_it.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  14:c/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer in the documentation
  15:c/stm32f1xx_it.c ****   *      and/or other materials provided with the distribution.
  16:c/stm32f1xx_it.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  17:c/stm32f1xx_it.c ****   *      may be used to endorse or promote products derived from this software
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHVvN2H.s 			page 2


  18:c/stm32f1xx_it.c ****   *      without specific prior written permission.
  19:c/stm32f1xx_it.c ****   *
  20:c/stm32f1xx_it.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:c/stm32f1xx_it.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:c/stm32f1xx_it.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  23:c/stm32f1xx_it.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  24:c/stm32f1xx_it.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  25:c/stm32f1xx_it.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  26:c/stm32f1xx_it.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  27:c/stm32f1xx_it.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  28:c/stm32f1xx_it.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  29:c/stm32f1xx_it.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  30:c/stm32f1xx_it.c ****   *
  31:c/stm32f1xx_it.c ****   ******************************************************************************
  32:c/stm32f1xx_it.c ****   */
  33:c/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
  34:c/stm32f1xx_it.c **** #include "stm32f1xx_hal.h"
  35:c/stm32f1xx_it.c **** #include "stm32f1xx.h"
  36:c/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  37:c/stm32f1xx_it.c **** 
  38:c/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  39:c/stm32f1xx_it.c **** 
  40:c/stm32f1xx_it.c **** /* USER CODE END 0 */
  41:c/stm32f1xx_it.c **** 
  42:c/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  43:c/stm32f1xx_it.c **** extern PCD_HandleTypeDef hpcd_USB_FS;
  44:c/stm32f1xx_it.c **** 
  45:c/stm32f1xx_it.c **** /******************************************************************************/
  46:c/stm32f1xx_it.c **** /*            Cortex-M3 Processor Interruption and Exception Handlers         */ 
  47:c/stm32f1xx_it.c **** /******************************************************************************/
  48:c/stm32f1xx_it.c **** 
  49:c/stm32f1xx_it.c **** /**
  50:c/stm32f1xx_it.c **** * @brief This function handles Non maskable interrupt.
  51:c/stm32f1xx_it.c **** */
  52:c/stm32f1xx_it.c **** void NMI_Handler(void)
  53:c/stm32f1xx_it.c **** {
  54:c/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  55:c/stm32f1xx_it.c **** 
  56:c/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  57:c/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  58:c/stm32f1xx_it.c **** 
  59:c/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  60:c/stm32f1xx_it.c **** }
  61:c/stm32f1xx_it.c **** 
  62:c/stm32f1xx_it.c **** /**
  63:c/stm32f1xx_it.c **** * @brief This function handles Hard fault interrupt.
  64:c/stm32f1xx_it.c **** */
  65:c/stm32f1xx_it.c **** void HardFault_Handler(void)
  66:c/stm32f1xx_it.c **** {
  44              		.loc 1 66 0
  45              		.cfi_startproc
  46              		@ Volatile: function does not return.
  47              		@ args = 0, pretend = 0, frame = 0
  48              		@ frame_needed = 0, uses_anonymous_args = 0
  49              		@ link register save eliminated.
  50              	.L3:
  51 0000 FEE7     		b	.L3
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHVvN2H.s 			page 3


  52              		.cfi_endproc
  53              	.LFE65:
  55              		.section	.text.MemManage_Handler,"ax",%progbits
  56              		.align	1
  57              		.global	MemManage_Handler
  58              		.syntax unified
  59              		.thumb
  60              		.thumb_func
  61              		.fpu softvfp
  63              	MemManage_Handler:
  64              	.LFB66:
  67:c/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  68:c/stm32f1xx_it.c **** 
  69:c/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  70:c/stm32f1xx_it.c ****   while (1)
  71:c/stm32f1xx_it.c ****   {
  72:c/stm32f1xx_it.c ****   }
  73:c/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 1 */
  74:c/stm32f1xx_it.c **** 
  75:c/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 1 */
  76:c/stm32f1xx_it.c **** }
  77:c/stm32f1xx_it.c **** 
  78:c/stm32f1xx_it.c **** /**
  79:c/stm32f1xx_it.c **** * @brief This function handles Memory management fault.
  80:c/stm32f1xx_it.c **** */
  81:c/stm32f1xx_it.c **** void MemManage_Handler(void)
  82:c/stm32f1xx_it.c **** {
  65              		.loc 1 82 0
  66              		.cfi_startproc
  67              		@ Volatile: function does not return.
  68              		@ args = 0, pretend = 0, frame = 0
  69              		@ frame_needed = 0, uses_anonymous_args = 0
  70              		@ link register save eliminated.
  71              	.L5:
  72 0000 FEE7     		b	.L5
  73              		.cfi_endproc
  74              	.LFE66:
  76              		.section	.text.BusFault_Handler,"ax",%progbits
  77              		.align	1
  78              		.global	BusFault_Handler
  79              		.syntax unified
  80              		.thumb
  81              		.thumb_func
  82              		.fpu softvfp
  84              	BusFault_Handler:
  85              	.LFB67:
  83:c/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  84:c/stm32f1xx_it.c **** 
  85:c/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
  86:c/stm32f1xx_it.c ****   while (1)
  87:c/stm32f1xx_it.c ****   {
  88:c/stm32f1xx_it.c ****   }
  89:c/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 1 */
  90:c/stm32f1xx_it.c **** 
  91:c/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 1 */
  92:c/stm32f1xx_it.c **** }
  93:c/stm32f1xx_it.c **** 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHVvN2H.s 			page 4


  94:c/stm32f1xx_it.c **** /**
  95:c/stm32f1xx_it.c **** * @brief This function handles Prefetch fault, memory access fault.
  96:c/stm32f1xx_it.c **** */
  97:c/stm32f1xx_it.c **** void BusFault_Handler(void)
  98:c/stm32f1xx_it.c **** {
  86              		.loc 1 98 0
  87              		.cfi_startproc
  88              		@ Volatile: function does not return.
  89              		@ args = 0, pretend = 0, frame = 0
  90              		@ frame_needed = 0, uses_anonymous_args = 0
  91              		@ link register save eliminated.
  92              	.L7:
  93 0000 FEE7     		b	.L7
  94              		.cfi_endproc
  95              	.LFE67:
  97              		.section	.text.UsageFault_Handler,"ax",%progbits
  98              		.align	1
  99              		.global	UsageFault_Handler
 100              		.syntax unified
 101              		.thumb
 102              		.thumb_func
 103              		.fpu softvfp
 105              	UsageFault_Handler:
 106              	.LFB68:
  99:c/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 100:c/stm32f1xx_it.c **** 
 101:c/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 102:c/stm32f1xx_it.c ****   while (1)
 103:c/stm32f1xx_it.c ****   {
 104:c/stm32f1xx_it.c ****   }
 105:c/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 1 */
 106:c/stm32f1xx_it.c **** 
 107:c/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 1 */
 108:c/stm32f1xx_it.c **** }
 109:c/stm32f1xx_it.c **** 
 110:c/stm32f1xx_it.c **** /**
 111:c/stm32f1xx_it.c **** * @brief This function handles Undefined instruction or illegal state.
 112:c/stm32f1xx_it.c **** */
 113:c/stm32f1xx_it.c **** void UsageFault_Handler(void)
 114:c/stm32f1xx_it.c **** {
 107              		.loc 1 114 0
 108              		.cfi_startproc
 109              		@ Volatile: function does not return.
 110              		@ args = 0, pretend = 0, frame = 0
 111              		@ frame_needed = 0, uses_anonymous_args = 0
 112              		@ link register save eliminated.
 113              	.L9:
 114 0000 FEE7     		b	.L9
 115              		.cfi_endproc
 116              	.LFE68:
 118              		.section	.text.SVC_Handler,"ax",%progbits
 119              		.align	1
 120              		.global	SVC_Handler
 121              		.syntax unified
 122              		.thumb
 123              		.thumb_func
 124              		.fpu softvfp
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHVvN2H.s 			page 5


 126              	SVC_Handler:
 127              	.LFB77:
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 0
 130              		@ frame_needed = 0, uses_anonymous_args = 0
 131              		@ link register save eliminated.
 132 0000 7047     		bx	lr
 133              		.cfi_endproc
 134              	.LFE77:
 136              		.section	.text.DebugMon_Handler,"ax",%progbits
 137              		.align	1
 138              		.global	DebugMon_Handler
 139              		.syntax unified
 140              		.thumb
 141              		.thumb_func
 142              		.fpu softvfp
 144              	DebugMon_Handler:
 145              	.LFB75:
 146              		.cfi_startproc
 147              		@ args = 0, pretend = 0, frame = 0
 148              		@ frame_needed = 0, uses_anonymous_args = 0
 149              		@ link register save eliminated.
 150 0000 7047     		bx	lr
 151              		.cfi_endproc
 152              	.LFE75:
 154              		.section	.text.PendSV_Handler,"ax",%progbits
 155              		.align	1
 156              		.global	PendSV_Handler
 157              		.syntax unified
 158              		.thumb
 159              		.thumb_func
 160              		.fpu softvfp
 162              	PendSV_Handler:
 163              	.LFB71:
 115:c/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 116:c/stm32f1xx_it.c **** 
 117:c/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 118:c/stm32f1xx_it.c ****   while (1)
 119:c/stm32f1xx_it.c ****   {
 120:c/stm32f1xx_it.c ****   }
 121:c/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 1 */
 122:c/stm32f1xx_it.c **** 
 123:c/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 1 */
 124:c/stm32f1xx_it.c **** }
 125:c/stm32f1xx_it.c **** 
 126:c/stm32f1xx_it.c **** /**
 127:c/stm32f1xx_it.c **** * @brief This function handles System service call via SWI instruction.
 128:c/stm32f1xx_it.c **** */
 129:c/stm32f1xx_it.c **** void SVC_Handler(void)
 130:c/stm32f1xx_it.c **** {
 131:c/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 132:c/stm32f1xx_it.c **** 
 133:c/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 134:c/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 135:c/stm32f1xx_it.c **** 
 136:c/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 137:c/stm32f1xx_it.c **** }
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHVvN2H.s 			page 6


 138:c/stm32f1xx_it.c **** 
 139:c/stm32f1xx_it.c **** /**
 140:c/stm32f1xx_it.c **** * @brief This function handles Debug monitor.
 141:c/stm32f1xx_it.c **** */
 142:c/stm32f1xx_it.c **** void DebugMon_Handler(void)
 143:c/stm32f1xx_it.c **** {
 144:c/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 145:c/stm32f1xx_it.c **** 
 146:c/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 147:c/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 148:c/stm32f1xx_it.c **** 
 149:c/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 150:c/stm32f1xx_it.c **** }
 151:c/stm32f1xx_it.c **** 
 152:c/stm32f1xx_it.c **** /**
 153:c/stm32f1xx_it.c **** * @brief This function handles Pendable request for system service.
 154:c/stm32f1xx_it.c **** */
 155:c/stm32f1xx_it.c **** void PendSV_Handler(void)
 156:c/stm32f1xx_it.c **** {
 164              		.loc 1 156 0
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 0
 167              		@ frame_needed = 0, uses_anonymous_args = 0
 168              		@ link register save eliminated.
 169 0000 7047     		bx	lr
 170              		.cfi_endproc
 171              	.LFE71:
 173              		.section	.text.SysTick_Handler,"ax",%progbits
 174              		.align	1
 175              		.global	SysTick_Handler
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 179              		.fpu softvfp
 181              	SysTick_Handler:
 182              	.LFB72:
 157:c/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 158:c/stm32f1xx_it.c **** 
 159:c/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 160:c/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 161:c/stm32f1xx_it.c **** 
 162:c/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 163:c/stm32f1xx_it.c **** }
 164:c/stm32f1xx_it.c **** 
 165:c/stm32f1xx_it.c **** /**
 166:c/stm32f1xx_it.c **** * @brief This function handles System tick timer.
 167:c/stm32f1xx_it.c **** */
 168:c/stm32f1xx_it.c **** void SysTick_Handler(void)
 169:c/stm32f1xx_it.c **** {
 183              		.loc 1 169 0
 184              		.cfi_startproc
 185              		@ args = 0, pretend = 0, frame = 0
 186              		@ frame_needed = 0, uses_anonymous_args = 0
 187              		.loc 1 169 0
 188 0000 08B5     		push	{r3, lr}
 189              		.cfi_def_cfa_offset 8
 190              		.cfi_offset 3, -8
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHVvN2H.s 			page 7


 191              		.cfi_offset 14, -4
 170:c/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 171:c/stm32f1xx_it.c **** 
 172:c/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 173:c/stm32f1xx_it.c ****   HAL_IncTick();
 192              		.loc 1 173 0
 193 0002 FFF7FEFF 		bl	HAL_IncTick
 194              	.LVL0:
 174:c/stm32f1xx_it.c ****   HAL_SYSTICK_IRQHandler();
 175:c/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 176:c/stm32f1xx_it.c **** 
 177:c/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 178:c/stm32f1xx_it.c **** }
 195              		.loc 1 178 0
 196 0006 BDE80840 		pop	{r3, lr}
 197              		.cfi_restore 14
 198              		.cfi_restore 3
 199              		.cfi_def_cfa_offset 0
 174:c/stm32f1xx_it.c ****   HAL_SYSTICK_IRQHandler();
 200              		.loc 1 174 0
 201 000a FFF7FEBF 		b	HAL_SYSTICK_IRQHandler
 202              	.LVL1:
 203              		.cfi_endproc
 204              	.LFE72:
 206              		.section	.text.USB_LP_CAN1_RX0_IRQHandler,"ax",%progbits
 207              		.align	1
 208              		.global	USB_LP_CAN1_RX0_IRQHandler
 209              		.syntax unified
 210              		.thumb
 211              		.thumb_func
 212              		.fpu softvfp
 214              	USB_LP_CAN1_RX0_IRQHandler:
 215              	.LFB73:
 179:c/stm32f1xx_it.c **** 
 180:c/stm32f1xx_it.c **** /******************************************************************************/
 181:c/stm32f1xx_it.c **** /* STM32F1xx Peripheral Interrupt Handlers                                    */
 182:c/stm32f1xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 183:c/stm32f1xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 184:c/stm32f1xx_it.c **** /* please refer to the startup file (startup_stm32f1xx.s).                    */
 185:c/stm32f1xx_it.c **** /******************************************************************************/
 186:c/stm32f1xx_it.c **** 
 187:c/stm32f1xx_it.c **** /**
 188:c/stm32f1xx_it.c **** * @brief This function handles USB low priority or CAN RX0 interrupts.
 189:c/stm32f1xx_it.c **** */
 190:c/stm32f1xx_it.c **** void USB_LP_CAN1_RX0_IRQHandler(void)
 191:c/stm32f1xx_it.c **** {
 216              		.loc 1 191 0
 217              		.cfi_startproc
 218              		@ args = 0, pretend = 0, frame = 0
 219              		@ frame_needed = 0, uses_anonymous_args = 0
 220              		@ link register save eliminated.
 192:c/stm32f1xx_it.c ****   /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */
 193:c/stm32f1xx_it.c **** 
 194:c/stm32f1xx_it.c ****   /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
 195:c/stm32f1xx_it.c ****   HAL_PCD_IRQHandler(&hpcd_USB_FS);
 221              		.loc 1 195 0
 222 0000 0148     		ldr	r0, .L15
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHVvN2H.s 			page 8


 223 0002 FFF7FEBF 		b	HAL_PCD_IRQHandler
 224              	.LVL2:
 225              	.L16:
 226 0006 00BF     		.align	2
 227              	.L15:
 228 0008 00000000 		.word	hpcd_USB_FS
 229              		.cfi_endproc
 230              	.LFE73:
 232              		.text
 233              	.Letext0:
 234              		.file 2 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/machine/_
 235              		.file 3 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_stdi
 236              		.file 4 "c/core_cm3.h"
 237              		.file 5 "c/system_stm32f1xx.h"
 238              		.file 6 "c/stm32f103xb.h"
 239              		.file 7 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/lock.
 240              		.file 8 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_type
 241              		.file 9 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/lib/gcc/arm-none-eabi/6.3.1/inc
 242              		.file 10 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/reen
 243              		.file 11 "c/stm32f1xx_hal_def.h"
 244              		.file 12 "c/stm32f1xx_ll_usb.h"
 245              		.file 13 "c/stm32f1xx_hal_pcd.h"
 246              		.file 14 "c/stm32f1xx_hal.h"
 247              		.file 15 "c/stm32f1xx_hal_cortex.h"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHVvN2H.s 			page 9


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_it.c
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHVvN2H.s:16     .text.NMI_Handler:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHVvN2H.s:23     .text.NMI_Handler:0000000000000000 NMI_Handler
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHVvN2H.s:34     .text.HardFault_Handler:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHVvN2H.s:41     .text.HardFault_Handler:0000000000000000 HardFault_Handler
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHVvN2H.s:56     .text.MemManage_Handler:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHVvN2H.s:63     .text.MemManage_Handler:0000000000000000 MemManage_Handler
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHVvN2H.s:77     .text.BusFault_Handler:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHVvN2H.s:84     .text.BusFault_Handler:0000000000000000 BusFault_Handler
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHVvN2H.s:98     .text.UsageFault_Handler:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHVvN2H.s:105    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHVvN2H.s:119    .text.SVC_Handler:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHVvN2H.s:126    .text.SVC_Handler:0000000000000000 SVC_Handler
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHVvN2H.s:137    .text.DebugMon_Handler:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHVvN2H.s:144    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHVvN2H.s:155    .text.PendSV_Handler:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHVvN2H.s:162    .text.PendSV_Handler:0000000000000000 PendSV_Handler
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHVvN2H.s:174    .text.SysTick_Handler:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHVvN2H.s:181    .text.SysTick_Handler:0000000000000000 SysTick_Handler
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHVvN2H.s:207    .text.USB_LP_CAN1_RX0_IRQHandler:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHVvN2H.s:214    .text.USB_LP_CAN1_RX0_IRQHandler:0000000000000000 USB_LP_CAN1_RX0_IRQHandler
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccHVvN2H.s:228    .text.USB_LP_CAN1_RX0_IRQHandler:0000000000000008 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_SYSTICK_IRQHandler
HAL_PCD_IRQHandler
hpcd_USB_FS
exit code: 0
OPT_LEVEL = Some("s")
HOST = Some("x86_64-apple-darwin")
CFLAGS_arm-none-eabi = None
CFLAGS_arm_none_eabi = None
TARGET_CFLAGS = None
CFLAGS = None
DEBUG = Some("true")
running: "arm-none-eabi-gcc" "-Os" "-ffunction-sections" "-fdata-sections" "-g" "-DSTM32F103xB" "-DUSE_HAL_DRIVER" "-mcpu=cortex-m3" "-mthumb" "-Wall" "-fdata-sections" "-ffunction-sections" "-Wa,-a,-ad" "-g" "-Wall" "-Wextra" "-o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/stm32f1xx_ll_usb.o" "-c" "c/stm32f1xx_ll_usb.c"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_ll_usb.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.USB_CoreInit,"ax",%progbits
  16              		.align	1
  17              		.global	USB_CoreInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	USB_CoreInit:
  24              	.LFB64:
  25              		.file 1 "c/stm32f1xx_ll_usb.c"
   1:c/stm32f1xx_ll_usb.c **** /**
   2:c/stm32f1xx_ll_usb.c ****   ******************************************************************************
   3:c/stm32f1xx_ll_usb.c ****   * @file    stm32f1xx_ll_usb.c
   4:c/stm32f1xx_ll_usb.c ****   * @author  MCD Application Team
   5:c/stm32f1xx_ll_usb.c ****   * @version V1.1.1
   6:c/stm32f1xx_ll_usb.c ****   * @date    12-May-2017
   7:c/stm32f1xx_ll_usb.c ****   * @brief   USB Low Layer HAL module driver.
   8:c/stm32f1xx_ll_usb.c ****   *
   9:c/stm32f1xx_ll_usb.c ****   *          This file provides firmware functions to manage the following 
  10:c/stm32f1xx_ll_usb.c ****   *          functionalities of the USB Peripheral Controller:
  11:c/stm32f1xx_ll_usb.c ****   *           + Initialization/de-initialization functions
  12:c/stm32f1xx_ll_usb.c ****   *           + I/O operation functions
  13:c/stm32f1xx_ll_usb.c ****   *           + Peripheral Control functions 
  14:c/stm32f1xx_ll_usb.c ****   *           + Peripheral State functions
  15:c/stm32f1xx_ll_usb.c ****   *
  16:c/stm32f1xx_ll_usb.c ****   @verbatim
  17:c/stm32f1xx_ll_usb.c ****   ==============================================================================
  18:c/stm32f1xx_ll_usb.c ****                     ##### How to use this driver #####
  19:c/stm32f1xx_ll_usb.c ****   ==============================================================================
  20:c/stm32f1xx_ll_usb.c ****     [..]
  21:c/stm32f1xx_ll_usb.c ****       (#) Fill parameters of Init structure in USB_OTG_CfgTypeDef structure.
  22:c/stm32f1xx_ll_usb.c ****   
  23:c/stm32f1xx_ll_usb.c ****       (#) Call USB_CoreInit() API to initialize the USB Core peripheral.
  24:c/stm32f1xx_ll_usb.c **** 
  25:c/stm32f1xx_ll_usb.c ****       (#) The upper HAL HCD/PCD driver will call the right routines for its internal processes.
  26:c/stm32f1xx_ll_usb.c **** 
  27:c/stm32f1xx_ll_usb.c ****   @endverbatim
  28:c/stm32f1xx_ll_usb.c ****   ******************************************************************************
  29:c/stm32f1xx_ll_usb.c ****   * @attention
  30:c/stm32f1xx_ll_usb.c ****   *
  31:c/stm32f1xx_ll_usb.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  32:c/stm32f1xx_ll_usb.c ****   *
  33:c/stm32f1xx_ll_usb.c ****   * Redistribution and use in source and binary forms, with or without modification,
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 2


  34:c/stm32f1xx_ll_usb.c ****   * are permitted provided that the following conditions are met:
  35:c/stm32f1xx_ll_usb.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  36:c/stm32f1xx_ll_usb.c ****   *      this list of conditions and the following disclaimer.
  37:c/stm32f1xx_ll_usb.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  38:c/stm32f1xx_ll_usb.c ****   *      this list of conditions and the following disclaimer in the documentation
  39:c/stm32f1xx_ll_usb.c ****   *      and/or other materials provided with the distribution.
  40:c/stm32f1xx_ll_usb.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  41:c/stm32f1xx_ll_usb.c ****   *      may be used to endorse or promote products derived from this software
  42:c/stm32f1xx_ll_usb.c ****   *      without specific prior written permission.
  43:c/stm32f1xx_ll_usb.c ****   *
  44:c/stm32f1xx_ll_usb.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  45:c/stm32f1xx_ll_usb.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  46:c/stm32f1xx_ll_usb.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  47:c/stm32f1xx_ll_usb.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  48:c/stm32f1xx_ll_usb.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  49:c/stm32f1xx_ll_usb.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  50:c/stm32f1xx_ll_usb.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  51:c/stm32f1xx_ll_usb.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  52:c/stm32f1xx_ll_usb.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  53:c/stm32f1xx_ll_usb.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  54:c/stm32f1xx_ll_usb.c ****   *
  55:c/stm32f1xx_ll_usb.c ****   ******************************************************************************
  56:c/stm32f1xx_ll_usb.c ****   */ 
  57:c/stm32f1xx_ll_usb.c **** 
  58:c/stm32f1xx_ll_usb.c **** /* Includes ------------------------------------------------------------------*/
  59:c/stm32f1xx_ll_usb.c **** #include "stm32f1xx_hal.h"
  60:c/stm32f1xx_ll_usb.c **** 
  61:c/stm32f1xx_ll_usb.c **** /** @addtogroup STM32F1xx_HAL_Driver
  62:c/stm32f1xx_ll_usb.c ****   * @{
  63:c/stm32f1xx_ll_usb.c ****   */
  64:c/stm32f1xx_ll_usb.c **** 
  65:c/stm32f1xx_ll_usb.c **** /** @defgroup USB_LL USB Low Layer
  66:c/stm32f1xx_ll_usb.c ****   * @brief Low layer module for USB_FS and USB_OTG_FS drivers
  67:c/stm32f1xx_ll_usb.c ****   * @{
  68:c/stm32f1xx_ll_usb.c ****   */
  69:c/stm32f1xx_ll_usb.c **** 
  70:c/stm32f1xx_ll_usb.c **** #if defined (HAL_PCD_MODULE_ENABLED) || defined (HAL_HCD_MODULE_ENABLED)
  71:c/stm32f1xx_ll_usb.c **** 
  72:c/stm32f1xx_ll_usb.c **** #if defined(STM32F102x6) || defined(STM32F102xB) || \
  73:c/stm32f1xx_ll_usb.c ****     defined(STM32F103x6) || defined(STM32F103xB) || \
  74:c/stm32f1xx_ll_usb.c ****     defined(STM32F103xE) || defined(STM32F103xG) || \
  75:c/stm32f1xx_ll_usb.c ****     defined(STM32F105xC) || defined(STM32F107xC)
  76:c/stm32f1xx_ll_usb.c ****  
  77:c/stm32f1xx_ll_usb.c **** /* Private types -------------------------------------------------------------*/
  78:c/stm32f1xx_ll_usb.c **** /* Private variables ---------------------------------------------------------*/
  79:c/stm32f1xx_ll_usb.c **** /* Private constants ---------------------------------------------------------*/
  80:c/stm32f1xx_ll_usb.c **** /* Private macros ------------------------------------------------------------*/
  81:c/stm32f1xx_ll_usb.c **** /* Private functions ---------------------------------------------------------*/
  82:c/stm32f1xx_ll_usb.c **** #if defined (USB_OTG_FS)
  83:c/stm32f1xx_ll_usb.c **** /** @defgroup USB_LL_Private_Functions USB Low Layer Private Functions
  84:c/stm32f1xx_ll_usb.c ****   * @{
  85:c/stm32f1xx_ll_usb.c ****   */
  86:c/stm32f1xx_ll_usb.c **** static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx);
  87:c/stm32f1xx_ll_usb.c **** /**
  88:c/stm32f1xx_ll_usb.c ****   * @}
  89:c/stm32f1xx_ll_usb.c ****   */
  90:c/stm32f1xx_ll_usb.c **** #endif /* USB_OTG_FS */
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 3


  91:c/stm32f1xx_ll_usb.c **** 
  92:c/stm32f1xx_ll_usb.c **** /* Exported functions --------------------------------------------------------*/
  93:c/stm32f1xx_ll_usb.c **** /** @defgroup USB_LL_Exported_Functions USB Low Layer Exported Functions
  94:c/stm32f1xx_ll_usb.c ****   * @{
  95:c/stm32f1xx_ll_usb.c ****   */
  96:c/stm32f1xx_ll_usb.c **** 
  97:c/stm32f1xx_ll_usb.c **** /** @defgroup USB_LL_Exported_Functions_Group1 Peripheral Control functions
  98:c/stm32f1xx_ll_usb.c ****  *  @brief   management functions
  99:c/stm32f1xx_ll_usb.c ****  *
 100:c/stm32f1xx_ll_usb.c **** @verbatim
 101:c/stm32f1xx_ll_usb.c ****  ===============================================================================
 102:c/stm32f1xx_ll_usb.c ****                       ##### Peripheral Control functions #####
 103:c/stm32f1xx_ll_usb.c ****  ===============================================================================  
 104:c/stm32f1xx_ll_usb.c ****     [..]
 105:c/stm32f1xx_ll_usb.c ****     This subsection provides a set of functions allowing to control the PCD data 
 106:c/stm32f1xx_ll_usb.c ****     transfers.
 107:c/stm32f1xx_ll_usb.c ****  
 108:c/stm32f1xx_ll_usb.c **** @endverbatim
 109:c/stm32f1xx_ll_usb.c ****   * @{
 110:c/stm32f1xx_ll_usb.c ****   */
 111:c/stm32f1xx_ll_usb.c ****   
 112:c/stm32f1xx_ll_usb.c **** /*==============================================================================
 113:c/stm32f1xx_ll_usb.c ****     USB OTG FS peripheral available on STM32F105xx and STM32F107xx devices 
 114:c/stm32f1xx_ll_usb.c **** ==============================================================================*/
 115:c/stm32f1xx_ll_usb.c **** #if defined (USB_OTG_FS)
 116:c/stm32f1xx_ll_usb.c **** 
 117:c/stm32f1xx_ll_usb.c **** /**
 118:c/stm32f1xx_ll_usb.c ****   * @brief  Initializes the USB Core
 119:c/stm32f1xx_ll_usb.c ****   * @param  USBx: USB Instance
 120:c/stm32f1xx_ll_usb.c ****   * @param  cfg : pointer to a USB_OTG_CfgTypeDef structure that contains
 121:c/stm32f1xx_ll_usb.c ****   *         the configuration information for the specified USBx peripheral.
 122:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
 123:c/stm32f1xx_ll_usb.c ****   */
 124:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
 125:c/stm32f1xx_ll_usb.c **** {
 126:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
 127:c/stm32f1xx_ll_usb.c ****   UNUSED(cfg);
 128:c/stm32f1xx_ll_usb.c **** 
 129:c/stm32f1xx_ll_usb.c ****   /* Select FS Embedded PHY */
 130:c/stm32f1xx_ll_usb.c ****   USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 131:c/stm32f1xx_ll_usb.c ****   
 132:c/stm32f1xx_ll_usb.c ****   /* Reset after a PHY select and set Host mode */
 133:c/stm32f1xx_ll_usb.c ****   USB_CoreReset(USBx);
 134:c/stm32f1xx_ll_usb.c ****   
 135:c/stm32f1xx_ll_usb.c ****   /* Deactivate the power down*/
 136:c/stm32f1xx_ll_usb.c ****   USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 137:c/stm32f1xx_ll_usb.c ****   
 138:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
 139:c/stm32f1xx_ll_usb.c **** }
 140:c/stm32f1xx_ll_usb.c **** 
 141:c/stm32f1xx_ll_usb.c **** /**
 142:c/stm32f1xx_ll_usb.c ****   * @brief  USB_EnableGlobalInt
 143:c/stm32f1xx_ll_usb.c ****   *         Enables the controller's Global Int in the AHB Config reg
 144:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
 145:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
 146:c/stm32f1xx_ll_usb.c ****   */
 147:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 4


 148:c/stm32f1xx_ll_usb.c **** {
 149:c/stm32f1xx_ll_usb.c ****   USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 150:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
 151:c/stm32f1xx_ll_usb.c **** }
 152:c/stm32f1xx_ll_usb.c **** 
 153:c/stm32f1xx_ll_usb.c **** /**
 154:c/stm32f1xx_ll_usb.c ****   * @brief  USB_DisableGlobalInt
 155:c/stm32f1xx_ll_usb.c ****   *         Disable the controller's Global Int in the AHB Config reg
 156:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
 157:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
 158:c/stm32f1xx_ll_usb.c **** */
 159:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
 160:c/stm32f1xx_ll_usb.c **** {
 161:c/stm32f1xx_ll_usb.c ****   USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 162:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
 163:c/stm32f1xx_ll_usb.c **** }
 164:c/stm32f1xx_ll_usb.c **** 
 165:c/stm32f1xx_ll_usb.c **** /**
 166:c/stm32f1xx_ll_usb.c ****   * @brief  USB_SetCurrentMode : Set functional mode
 167:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
 168:c/stm32f1xx_ll_usb.c ****   * @param  mode :  current core mode
 169:c/stm32f1xx_ll_usb.c ****   *          This parameter can be one of the these values:
 170:c/stm32f1xx_ll_usb.c ****   *            @arg USB_DEVICE_MODE: Peripheral mode mode
 171:c/stm32f1xx_ll_usb.c ****   *            @arg USB_HOST_MODE: Host mode
 172:c/stm32f1xx_ll_usb.c ****   *            @arg USB_DRD_MODE: Dual Role Device mode  
 173:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
 174:c/stm32f1xx_ll_usb.c ****   */
 175:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_ModeTypeDef mode)
 176:c/stm32f1xx_ll_usb.c **** {
 177:c/stm32f1xx_ll_usb.c ****   USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 178:c/stm32f1xx_ll_usb.c ****   
 179:c/stm32f1xx_ll_usb.c ****   if ( mode == USB_HOST_MODE)
 180:c/stm32f1xx_ll_usb.c ****   {
 181:c/stm32f1xx_ll_usb.c ****     USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 182:c/stm32f1xx_ll_usb.c ****   }
 183:c/stm32f1xx_ll_usb.c ****   else if (mode == USB_DEVICE_MODE)
 184:c/stm32f1xx_ll_usb.c ****   {
 185:c/stm32f1xx_ll_usb.c ****     USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 186:c/stm32f1xx_ll_usb.c ****   }
 187:c/stm32f1xx_ll_usb.c ****   HAL_Delay(50);
 188:c/stm32f1xx_ll_usb.c ****   
 189:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
 190:c/stm32f1xx_ll_usb.c **** }
 191:c/stm32f1xx_ll_usb.c **** 
 192:c/stm32f1xx_ll_usb.c **** /**
 193:c/stm32f1xx_ll_usb.c ****   * @brief  USB_DevInit : Initializes the USB_OTG controller registers 
 194:c/stm32f1xx_ll_usb.c ****   *         for device mode
 195:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
 196:c/stm32f1xx_ll_usb.c ****   * @param  cfg  : pointer to a USB_OTG_CfgTypeDef structure that contains
 197:c/stm32f1xx_ll_usb.c ****   *         the configuration information for the specified USBx peripheral.
 198:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
 199:c/stm32f1xx_ll_usb.c ****   */
 200:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
 201:c/stm32f1xx_ll_usb.c **** {
 202:c/stm32f1xx_ll_usb.c ****   uint32_t index = 0;
 203:c/stm32f1xx_ll_usb.c ****   
 204:c/stm32f1xx_ll_usb.c ****   for (index = 0; index < 15 ; index++)
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 5


 205:c/stm32f1xx_ll_usb.c ****   {
 206:c/stm32f1xx_ll_usb.c ****     USBx->DIEPTXF[index] = 0;
 207:c/stm32f1xx_ll_usb.c ****   }
 208:c/stm32f1xx_ll_usb.c ****   
 209:c/stm32f1xx_ll_usb.c ****   /*Activate VBUS Sensing B */
 210:c/stm32f1xx_ll_usb.c ****   USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 211:c/stm32f1xx_ll_usb.c **** 
 212:c/stm32f1xx_ll_usb.c ****   /* Restart the Phy Clock */
 213:c/stm32f1xx_ll_usb.c ****   USBx_PCGCCTL = 0;
 214:c/stm32f1xx_ll_usb.c ****   
 215:c/stm32f1xx_ll_usb.c ****   /* Device mode configuration */
 216:c/stm32f1xx_ll_usb.c ****   USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 217:c/stm32f1xx_ll_usb.c ****   
 218:c/stm32f1xx_ll_usb.c ****   /* Set Full speed phy */
 219:c/stm32f1xx_ll_usb.c ****   USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 220:c/stm32f1xx_ll_usb.c ****   
 221:c/stm32f1xx_ll_usb.c ****   /* Flush the FIFOs */
 222:c/stm32f1xx_ll_usb.c ****   USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 223:c/stm32f1xx_ll_usb.c ****   USB_FlushRxFifo(USBx);
 224:c/stm32f1xx_ll_usb.c ****   
 225:c/stm32f1xx_ll_usb.c ****   /* Clear all pending Device Interrupts */
 226:c/stm32f1xx_ll_usb.c ****   USBx_DEVICE->DIEPMSK = 0;
 227:c/stm32f1xx_ll_usb.c ****   USBx_DEVICE->DOEPMSK = 0;
 228:c/stm32f1xx_ll_usb.c ****   USBx_DEVICE->DAINT = 0xFFFFFFFF;
 229:c/stm32f1xx_ll_usb.c ****   USBx_DEVICE->DAINTMSK = 0;
 230:c/stm32f1xx_ll_usb.c ****   
 231:c/stm32f1xx_ll_usb.c ****   for (index = 0; index < cfg.dev_endpoints; index++)
 232:c/stm32f1xx_ll_usb.c ****   {
 233:c/stm32f1xx_ll_usb.c ****     if ((USBx_INEP(index)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 234:c/stm32f1xx_ll_usb.c ****     {
 235:c/stm32f1xx_ll_usb.c ****       USBx_INEP(index)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 236:c/stm32f1xx_ll_usb.c ****     }
 237:c/stm32f1xx_ll_usb.c ****     else
 238:c/stm32f1xx_ll_usb.c ****     {
 239:c/stm32f1xx_ll_usb.c ****       USBx_INEP(index)->DIEPCTL = 0;
 240:c/stm32f1xx_ll_usb.c ****     }
 241:c/stm32f1xx_ll_usb.c ****     
 242:c/stm32f1xx_ll_usb.c ****     USBx_INEP(index)->DIEPTSIZ = 0;
 243:c/stm32f1xx_ll_usb.c ****     USBx_INEP(index)->DIEPINT  = 0xFF;
 244:c/stm32f1xx_ll_usb.c ****   }
 245:c/stm32f1xx_ll_usb.c ****   
 246:c/stm32f1xx_ll_usb.c ****   for (index = 0; index < cfg.dev_endpoints; index++)
 247:c/stm32f1xx_ll_usb.c ****   {
 248:c/stm32f1xx_ll_usb.c ****     if ((USBx_OUTEP(index)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 249:c/stm32f1xx_ll_usb.c ****     {
 250:c/stm32f1xx_ll_usb.c ****       USBx_OUTEP(index)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 251:c/stm32f1xx_ll_usb.c ****     }
 252:c/stm32f1xx_ll_usb.c ****     else
 253:c/stm32f1xx_ll_usb.c ****     {
 254:c/stm32f1xx_ll_usb.c ****       USBx_OUTEP(index)->DOEPCTL = 0;
 255:c/stm32f1xx_ll_usb.c ****     }
 256:c/stm32f1xx_ll_usb.c ****     
 257:c/stm32f1xx_ll_usb.c ****     USBx_OUTEP(index)->DOEPTSIZ = 0;
 258:c/stm32f1xx_ll_usb.c ****     USBx_OUTEP(index)->DOEPINT  = 0xFF;
 259:c/stm32f1xx_ll_usb.c ****   }
 260:c/stm32f1xx_ll_usb.c ****   
 261:c/stm32f1xx_ll_usb.c ****   USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 6


 262:c/stm32f1xx_ll_usb.c ****   
 263:c/stm32f1xx_ll_usb.c ****   /* Disable all interrupts. */
 264:c/stm32f1xx_ll_usb.c ****   USBx->GINTMSK = 0;
 265:c/stm32f1xx_ll_usb.c ****   
 266:c/stm32f1xx_ll_usb.c ****   /* Clear any pending interrupts */
 267:c/stm32f1xx_ll_usb.c ****   USBx->GINTSTS = 0xBFFFFFFF;
 268:c/stm32f1xx_ll_usb.c ****   
 269:c/stm32f1xx_ll_usb.c ****   /* Enable the common interrupts */
 270:c/stm32f1xx_ll_usb.c ****   USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 271:c/stm32f1xx_ll_usb.c ****   
 272:c/stm32f1xx_ll_usb.c ****   /* Enable interrupts matching to the Device mode ONLY */
 273:c/stm32f1xx_ll_usb.c ****   USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 274:c/stm32f1xx_ll_usb.c ****                     USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
 275:c/stm32f1xx_ll_usb.c ****                     USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
 276:c/stm32f1xx_ll_usb.c ****                     USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
 277:c/stm32f1xx_ll_usb.c ****   
 278:c/stm32f1xx_ll_usb.c ****   if(cfg.Sof_enable)
 279:c/stm32f1xx_ll_usb.c ****   {
 280:c/stm32f1xx_ll_usb.c ****     USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 281:c/stm32f1xx_ll_usb.c ****   }
 282:c/stm32f1xx_ll_usb.c **** 
 283:c/stm32f1xx_ll_usb.c ****   if (cfg.vbus_sensing_enable == ENABLE)
 284:c/stm32f1xx_ll_usb.c ****   {
 285:c/stm32f1xx_ll_usb.c ****     USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 286:c/stm32f1xx_ll_usb.c ****   }
 287:c/stm32f1xx_ll_usb.c ****   
 288:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
 289:c/stm32f1xx_ll_usb.c **** }
 290:c/stm32f1xx_ll_usb.c **** 
 291:c/stm32f1xx_ll_usb.c **** /**
 292:c/stm32f1xx_ll_usb.c ****   * @brief  USB_OTG_FlushTxFifo : Flush a Tx FIFO
 293:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
 294:c/stm32f1xx_ll_usb.c ****   * @param  num : FIFO number
 295:c/stm32f1xx_ll_usb.c ****   *         This parameter can be a value from 1 to 15
 296:c/stm32f1xx_ll_usb.c ****             15 means Flush all Tx FIFOs
 297:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
 298:c/stm32f1xx_ll_usb.c ****   */
 299:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
 300:c/stm32f1xx_ll_usb.c **** {
 301:c/stm32f1xx_ll_usb.c ****   uint32_t count = 0;
 302:c/stm32f1xx_ll_usb.c ****   
 303:c/stm32f1xx_ll_usb.c ****   USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)(num << 6)); 
 304:c/stm32f1xx_ll_usb.c ****   
 305:c/stm32f1xx_ll_usb.c ****   do
 306:c/stm32f1xx_ll_usb.c ****   {
 307:c/stm32f1xx_ll_usb.c ****     if (++count > 200000)
 308:c/stm32f1xx_ll_usb.c ****     {
 309:c/stm32f1xx_ll_usb.c ****       return HAL_TIMEOUT;
 310:c/stm32f1xx_ll_usb.c ****     }
 311:c/stm32f1xx_ll_usb.c ****   }
 312:c/stm32f1xx_ll_usb.c ****   while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 313:c/stm32f1xx_ll_usb.c ****   
 314:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
 315:c/stm32f1xx_ll_usb.c **** }
 316:c/stm32f1xx_ll_usb.c **** 
 317:c/stm32f1xx_ll_usb.c **** /**
 318:c/stm32f1xx_ll_usb.c ****   * @brief  USB_FlushRxFifo : Flush Rx FIFO
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 7


 319:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
 320:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
 321:c/stm32f1xx_ll_usb.c ****   */
 322:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
 323:c/stm32f1xx_ll_usb.c **** {
 324:c/stm32f1xx_ll_usb.c ****   uint32_t count = 0;
 325:c/stm32f1xx_ll_usb.c ****   
 326:c/stm32f1xx_ll_usb.c ****   USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 327:c/stm32f1xx_ll_usb.c ****   
 328:c/stm32f1xx_ll_usb.c ****   do
 329:c/stm32f1xx_ll_usb.c ****   {
 330:c/stm32f1xx_ll_usb.c ****     if (++count > 200000)
 331:c/stm32f1xx_ll_usb.c ****     {
 332:c/stm32f1xx_ll_usb.c ****       return HAL_TIMEOUT;
 333:c/stm32f1xx_ll_usb.c ****     }
 334:c/stm32f1xx_ll_usb.c ****   }
 335:c/stm32f1xx_ll_usb.c ****   while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 336:c/stm32f1xx_ll_usb.c ****   
 337:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
 338:c/stm32f1xx_ll_usb.c **** }
 339:c/stm32f1xx_ll_usb.c **** 
 340:c/stm32f1xx_ll_usb.c **** /**
 341:c/stm32f1xx_ll_usb.c ****   * @brief  USB_SetDevSpeed :Initializes the DevSpd field of DCFG register 
 342:c/stm32f1xx_ll_usb.c ****   *         depending the PHY type and the enumeration speed of the device.
 343:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
 344:c/stm32f1xx_ll_usb.c ****   * @param  speed : device speed
 345:c/stm32f1xx_ll_usb.c ****   *          This parameter can be one of the these values:
 346:c/stm32f1xx_ll_usb.c ****   *            @arg USB_OTG_SPEED_FULL: Full speed mode
 347:c/stm32f1xx_ll_usb.c ****   *            @arg USB_OTG_SPEED_LOW: Low speed mode
 348:c/stm32f1xx_ll_usb.c ****   * @retval  Hal status
 349:c/stm32f1xx_ll_usb.c ****   */
 350:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
 351:c/stm32f1xx_ll_usb.c **** {
 352:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
 353:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
 354:c/stm32f1xx_ll_usb.c **** 
 355:c/stm32f1xx_ll_usb.c ****   USBx_DEVICE->DCFG |= speed;
 356:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
 357:c/stm32f1xx_ll_usb.c **** }
 358:c/stm32f1xx_ll_usb.c **** 
 359:c/stm32f1xx_ll_usb.c **** /**
 360:c/stm32f1xx_ll_usb.c ****   * @brief  USB_GetDevSpeed :Return the  Dev Speed 
 361:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
 362:c/stm32f1xx_ll_usb.c ****   * @retval speed : device speed
 363:c/stm32f1xx_ll_usb.c ****   *          This parameter can be one of the these values:
 364:c/stm32f1xx_ll_usb.c ****   *            @arg USB_OTG_SPEED_FULL: Full speed mode
 365:c/stm32f1xx_ll_usb.c ****   *            @arg USB_OTG_SPEED_LOW: Low speed mode
 366:c/stm32f1xx_ll_usb.c ****   */
 367:c/stm32f1xx_ll_usb.c **** uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
 368:c/stm32f1xx_ll_usb.c **** {
 369:c/stm32f1xx_ll_usb.c ****   uint8_t speed = 0;
 370:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
 371:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
 372:c/stm32f1xx_ll_usb.c **** 
 373:c/stm32f1xx_ll_usb.c ****   if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 374:c/stm32f1xx_ll_usb.c ****       ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 375:c/stm32f1xx_ll_usb.c ****   {
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 8


 376:c/stm32f1xx_ll_usb.c ****     speed = USB_OTG_SPEED_FULL;
 377:c/stm32f1xx_ll_usb.c ****   }
 378:c/stm32f1xx_ll_usb.c ****   else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 379:c/stm32f1xx_ll_usb.c ****   {
 380:c/stm32f1xx_ll_usb.c ****     speed = USB_OTG_SPEED_LOW;
 381:c/stm32f1xx_ll_usb.c ****   }
 382:c/stm32f1xx_ll_usb.c ****   
 383:c/stm32f1xx_ll_usb.c ****   return speed;
 384:c/stm32f1xx_ll_usb.c **** }
 385:c/stm32f1xx_ll_usb.c **** 
 386:c/stm32f1xx_ll_usb.c **** /**
 387:c/stm32f1xx_ll_usb.c ****   * @brief  Activate and configure an endpoint
 388:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
 389:c/stm32f1xx_ll_usb.c ****   * @param  ep: pointer to endpoint structure
 390:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
 391:c/stm32f1xx_ll_usb.c ****   */
 392:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
 393:c/stm32f1xx_ll_usb.c **** {
 394:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
 395:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
 396:c/stm32f1xx_ll_usb.c **** 
 397:c/stm32f1xx_ll_usb.c ****   if (ep->is_in)
 398:c/stm32f1xx_ll_usb.c ****   {
 399:c/stm32f1xx_ll_usb.c ****     /* Assign a Tx FIFO */
 400:c/stm32f1xx_ll_usb.c ****     ep->tx_fifo_num = ep->num;
 401:c/stm32f1xx_ll_usb.c ****   }
 402:c/stm32f1xx_ll_usb.c ****   /* Set initial data PID. */
 403:c/stm32f1xx_ll_usb.c ****   if (ep->type == EP_TYPE_BULK )
 404:c/stm32f1xx_ll_usb.c ****   {
 405:c/stm32f1xx_ll_usb.c ****     ep->data_pid_start = 0;
 406:c/stm32f1xx_ll_usb.c ****   }
 407:c/stm32f1xx_ll_usb.c ****   
 408:c/stm32f1xx_ll_usb.c ****   if (ep->is_in == 1)
 409:c/stm32f1xx_ll_usb.c ****   {
 410:c/stm32f1xx_ll_usb.c ****    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 411:c/stm32f1xx_ll_usb.c **** 
 412:c/stm32f1xx_ll_usb.c ****     if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 413:c/stm32f1xx_ll_usb.c ****     {
 414:c/stm32f1xx_ll_usb.c ****       USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) 
 415:c/stm32f1xx_ll_usb.c ****         ((ep->num) << 22 ) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
 416:c/stm32f1xx_ll_usb.c ****     }
 417:c/stm32f1xx_ll_usb.c ****   }
 418:c/stm32f1xx_ll_usb.c ****   else
 419:c/stm32f1xx_ll_usb.c ****   {
 420:c/stm32f1xx_ll_usb.c ****      USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 421:c/stm32f1xx_ll_usb.c ****      
 422:c/stm32f1xx_ll_usb.c ****     if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 423:c/stm32f1xx_ll_usb.c ****     {
 424:c/stm32f1xx_ll_usb.c ****       USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 )
 425:c/stm32f1xx_ll_usb.c ****        (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
 426:c/stm32f1xx_ll_usb.c ****     }
 427:c/stm32f1xx_ll_usb.c ****   }
 428:c/stm32f1xx_ll_usb.c ****   
 429:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
 430:c/stm32f1xx_ll_usb.c **** }
 431:c/stm32f1xx_ll_usb.c **** 
 432:c/stm32f1xx_ll_usb.c **** /**
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 9


 433:c/stm32f1xx_ll_usb.c ****   * @brief  De-activate and de-initialize an endpoint
 434:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
 435:c/stm32f1xx_ll_usb.c ****   * @param  ep: pointer to endpoint structure
 436:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
 437:c/stm32f1xx_ll_usb.c ****   */
 438:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
 439:c/stm32f1xx_ll_usb.c **** {
 440:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
 441:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
 442:c/stm32f1xx_ll_usb.c **** 
 443:c/stm32f1xx_ll_usb.c ****   /* Read DEPCTLn register */
 444:c/stm32f1xx_ll_usb.c ****   if (ep->is_in == 1)
 445:c/stm32f1xx_ll_usb.c ****   {
 446:c/stm32f1xx_ll_usb.c ****     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 447:c/stm32f1xx_ll_usb.c ****     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 448:c/stm32f1xx_ll_usb.c ****     USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;
 449:c/stm32f1xx_ll_usb.c ****   }
 450:c/stm32f1xx_ll_usb.c ****   else
 451:c/stm32f1xx_ll_usb.c ****   {
 452:c/stm32f1xx_ll_usb.c ****     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 453:c/stm32f1xx_ll_usb.c ****     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 454:c/stm32f1xx_ll_usb.c ****     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;
 455:c/stm32f1xx_ll_usb.c ****   }
 456:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
 457:c/stm32f1xx_ll_usb.c **** }
 458:c/stm32f1xx_ll_usb.c **** 
 459:c/stm32f1xx_ll_usb.c **** /**
 460:c/stm32f1xx_ll_usb.c ****   * @brief  USB_EPStartXfer : setup and starts a transfer over an EP
 461:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
 462:c/stm32f1xx_ll_usb.c ****   * @param  ep: pointer to endpoint structure
 463:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
 464:c/stm32f1xx_ll_usb.c ****   */
 465:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
 466:c/stm32f1xx_ll_usb.c **** {
 467:c/stm32f1xx_ll_usb.c ****   uint16_t pktcnt = 0;
 468:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
 469:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
 470:c/stm32f1xx_ll_usb.c **** 
 471:c/stm32f1xx_ll_usb.c ****   /* IN endpoint */
 472:c/stm32f1xx_ll_usb.c ****   if (ep->is_in == 1)
 473:c/stm32f1xx_ll_usb.c ****   {
 474:c/stm32f1xx_ll_usb.c ****     /* Zero Length Packet? */
 475:c/stm32f1xx_ll_usb.c ****     if (ep->xfer_len == 0)
 476:c/stm32f1xx_ll_usb.c ****     {
 477:c/stm32f1xx_ll_usb.c ****       USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 478:c/stm32f1xx_ll_usb.c ****       USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 479:c/stm32f1xx_ll_usb.c ****       USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 480:c/stm32f1xx_ll_usb.c ****     }
 481:c/stm32f1xx_ll_usb.c ****     else
 482:c/stm32f1xx_ll_usb.c ****     {
 483:c/stm32f1xx_ll_usb.c ****       /* Program the transfer size and packet count
 484:c/stm32f1xx_ll_usb.c ****       * as follows: xfersize = N * maxpacket +
 485:c/stm32f1xx_ll_usb.c ****       * short_packet pktcnt = N + (short_packet
 486:c/stm32f1xx_ll_usb.c ****       * exist ? 1 : 0)
 487:c/stm32f1xx_ll_usb.c ****       */
 488:c/stm32f1xx_ll_usb.c ****       USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 489:c/stm32f1xx_ll_usb.c ****       USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 10


 490:c/stm32f1xx_ll_usb.c ****       USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1
 491:c/stm32f1xx_ll_usb.c ****       USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 492:c/stm32f1xx_ll_usb.c ****       
 493:c/stm32f1xx_ll_usb.c ****       if (ep->type == EP_TYPE_ISOC)
 494:c/stm32f1xx_ll_usb.c ****       {
 495:c/stm32f1xx_ll_usb.c ****         USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 496:c/stm32f1xx_ll_usb.c ****         USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29)); 
 497:c/stm32f1xx_ll_usb.c ****       }
 498:c/stm32f1xx_ll_usb.c ****     }
 499:c/stm32f1xx_ll_usb.c ****     
 500:c/stm32f1xx_ll_usb.c ****     if (ep->type != EP_TYPE_ISOC)
 501:c/stm32f1xx_ll_usb.c ****     {
 502:c/stm32f1xx_ll_usb.c ****       /* Enable the Tx FIFO Empty Interrupt for this EP */
 503:c/stm32f1xx_ll_usb.c ****       if (ep->xfer_len > 0)
 504:c/stm32f1xx_ll_usb.c ****       {
 505:c/stm32f1xx_ll_usb.c ****         USBx_DEVICE->DIEPEMPMSK |= 1 << ep->num;
 506:c/stm32f1xx_ll_usb.c ****       }
 507:c/stm32f1xx_ll_usb.c ****     }
 508:c/stm32f1xx_ll_usb.c ****     
 509:c/stm32f1xx_ll_usb.c ****     if (ep->type == EP_TYPE_ISOC)
 510:c/stm32f1xx_ll_usb.c ****     {
 511:c/stm32f1xx_ll_usb.c ****       if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 512:c/stm32f1xx_ll_usb.c ****       {
 513:c/stm32f1xx_ll_usb.c ****         USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 514:c/stm32f1xx_ll_usb.c ****       }
 515:c/stm32f1xx_ll_usb.c ****       else
 516:c/stm32f1xx_ll_usb.c ****       {
 517:c/stm32f1xx_ll_usb.c ****         USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 518:c/stm32f1xx_ll_usb.c ****       }
 519:c/stm32f1xx_ll_usb.c ****     } 
 520:c/stm32f1xx_ll_usb.c ****     
 521:c/stm32f1xx_ll_usb.c ****     /* EP enable, IN data in FIFO */
 522:c/stm32f1xx_ll_usb.c ****     USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 523:c/stm32f1xx_ll_usb.c ****     
 524:c/stm32f1xx_ll_usb.c ****     if (ep->type == EP_TYPE_ISOC)
 525:c/stm32f1xx_ll_usb.c ****     {
 526:c/stm32f1xx_ll_usb.c ****       USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len);
 527:c/stm32f1xx_ll_usb.c ****     }
 528:c/stm32f1xx_ll_usb.c ****   }
 529:c/stm32f1xx_ll_usb.c ****   else /* OUT endpoint */
 530:c/stm32f1xx_ll_usb.c ****   {
 531:c/stm32f1xx_ll_usb.c ****     /* Program the transfer size and packet count as follows:
 532:c/stm32f1xx_ll_usb.c ****     * pktcnt = N
 533:c/stm32f1xx_ll_usb.c ****     * xfersize = N * maxpacket
 534:c/stm32f1xx_ll_usb.c ****     */
 535:c/stm32f1xx_ll_usb.c ****     USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 536:c/stm32f1xx_ll_usb.c ****     USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 537:c/stm32f1xx_ll_usb.c ****     
 538:c/stm32f1xx_ll_usb.c ****     if (ep->xfer_len == 0)
 539:c/stm32f1xx_ll_usb.c ****     {
 540:c/stm32f1xx_ll_usb.c ****       USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 541:c/stm32f1xx_ll_usb.c ****       USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 542:c/stm32f1xx_ll_usb.c ****     }
 543:c/stm32f1xx_ll_usb.c ****     else
 544:c/stm32f1xx_ll_usb.c ****     {
 545:c/stm32f1xx_ll_usb.c ****       pktcnt = (ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket;
 546:c/stm32f1xx_ll_usb.c ****       USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19));
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 11


 547:c/stm32f1xx_ll_usb.c ****       USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 548:c/stm32f1xx_ll_usb.c ****     }
 549:c/stm32f1xx_ll_usb.c ****     
 550:c/stm32f1xx_ll_usb.c ****     if (ep->type == EP_TYPE_ISOC)
 551:c/stm32f1xx_ll_usb.c ****     {
 552:c/stm32f1xx_ll_usb.c ****       if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 553:c/stm32f1xx_ll_usb.c ****       {
 554:c/stm32f1xx_ll_usb.c ****         USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 555:c/stm32f1xx_ll_usb.c ****       }
 556:c/stm32f1xx_ll_usb.c ****       else
 557:c/stm32f1xx_ll_usb.c ****       {
 558:c/stm32f1xx_ll_usb.c ****         USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 559:c/stm32f1xx_ll_usb.c ****       }
 560:c/stm32f1xx_ll_usb.c ****     }
 561:c/stm32f1xx_ll_usb.c ****     /* EP enable */
 562:c/stm32f1xx_ll_usb.c ****     USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 563:c/stm32f1xx_ll_usb.c ****   }
 564:c/stm32f1xx_ll_usb.c ****   
 565:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
 566:c/stm32f1xx_ll_usb.c **** }
 567:c/stm32f1xx_ll_usb.c **** 
 568:c/stm32f1xx_ll_usb.c **** /**
 569:c/stm32f1xx_ll_usb.c ****   * @brief  USB_EP0StartXfer : setup and starts a transfer over the EP  0
 570:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
 571:c/stm32f1xx_ll_usb.c ****   * @param  ep: pointer to endpoint structure
 572:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
 573:c/stm32f1xx_ll_usb.c ****   */
 574:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
 575:c/stm32f1xx_ll_usb.c **** {
 576:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
 577:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
 578:c/stm32f1xx_ll_usb.c **** 
 579:c/stm32f1xx_ll_usb.c ****   /* IN endpoint */
 580:c/stm32f1xx_ll_usb.c ****   if (ep->is_in == 1)
 581:c/stm32f1xx_ll_usb.c ****   {
 582:c/stm32f1xx_ll_usb.c ****     /* Zero Length Packet? */
 583:c/stm32f1xx_ll_usb.c ****     if (ep->xfer_len == 0)
 584:c/stm32f1xx_ll_usb.c ****     {
 585:c/stm32f1xx_ll_usb.c ****       USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 586:c/stm32f1xx_ll_usb.c ****       USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19));
 587:c/stm32f1xx_ll_usb.c ****       USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 588:c/stm32f1xx_ll_usb.c ****     }
 589:c/stm32f1xx_ll_usb.c ****     else
 590:c/stm32f1xx_ll_usb.c ****     {
 591:c/stm32f1xx_ll_usb.c ****       /* Program the transfer size and packet count
 592:c/stm32f1xx_ll_usb.c ****       * as follows: xfersize = N * maxpacket +
 593:c/stm32f1xx_ll_usb.c ****       * short_packet pktcnt = N + (short_packet
 594:c/stm32f1xx_ll_usb.c ****       * exist ? 1 : 0)
 595:c/stm32f1xx_ll_usb.c ****       */
 596:c/stm32f1xx_ll_usb.c ****       USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 597:c/stm32f1xx_ll_usb.c ****       USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 598:c/stm32f1xx_ll_usb.c ****       
 599:c/stm32f1xx_ll_usb.c ****       if(ep->xfer_len > ep->maxpacket)
 600:c/stm32f1xx_ll_usb.c ****       {
 601:c/stm32f1xx_ll_usb.c ****         ep->xfer_len = ep->maxpacket;
 602:c/stm32f1xx_ll_usb.c ****       }
 603:c/stm32f1xx_ll_usb.c ****       USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19));
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 12


 604:c/stm32f1xx_ll_usb.c ****       USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 605:c/stm32f1xx_ll_usb.c ****     }
 606:c/stm32f1xx_ll_usb.c ****     
 607:c/stm32f1xx_ll_usb.c ****     /* Enable the Tx FIFO Empty Interrupt for this EP */
 608:c/stm32f1xx_ll_usb.c ****     if (ep->xfer_len > 0)
 609:c/stm32f1xx_ll_usb.c ****     {
 610:c/stm32f1xx_ll_usb.c ****       USBx_DEVICE->DIEPEMPMSK |= 1 << (ep->num);
 611:c/stm32f1xx_ll_usb.c ****     }
 612:c/stm32f1xx_ll_usb.c ****     
 613:c/stm32f1xx_ll_usb.c ****     /* EP enable, IN data in FIFO */
 614:c/stm32f1xx_ll_usb.c ****     USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);   
 615:c/stm32f1xx_ll_usb.c ****   }
 616:c/stm32f1xx_ll_usb.c ****   else /* OUT endpoint */
 617:c/stm32f1xx_ll_usb.c ****   {
 618:c/stm32f1xx_ll_usb.c ****     /* Program the transfer size and packet count as follows:
 619:c/stm32f1xx_ll_usb.c ****     * pktcnt = N
 620:c/stm32f1xx_ll_usb.c ****     * xfersize = N * maxpacket
 621:c/stm32f1xx_ll_usb.c ****     */
 622:c/stm32f1xx_ll_usb.c ****     USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 623:c/stm32f1xx_ll_usb.c ****     USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 624:c/stm32f1xx_ll_usb.c ****     
 625:c/stm32f1xx_ll_usb.c ****     if (ep->xfer_len > 0)
 626:c/stm32f1xx_ll_usb.c ****     {
 627:c/stm32f1xx_ll_usb.c ****       ep->xfer_len = ep->maxpacket;
 628:c/stm32f1xx_ll_usb.c ****     }
 629:c/stm32f1xx_ll_usb.c ****     
 630:c/stm32f1xx_ll_usb.c ****     USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 631:c/stm32f1xx_ll_usb.c ****     USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 632:c/stm32f1xx_ll_usb.c ****     
 633:c/stm32f1xx_ll_usb.c ****     /* EP enable */
 634:c/stm32f1xx_ll_usb.c ****     USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 635:c/stm32f1xx_ll_usb.c ****   }
 636:c/stm32f1xx_ll_usb.c ****   
 637:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
 638:c/stm32f1xx_ll_usb.c **** }
 639:c/stm32f1xx_ll_usb.c **** 
 640:c/stm32f1xx_ll_usb.c **** /**
 641:c/stm32f1xx_ll_usb.c ****   * @brief  USB_WritePacket : Writes a packet into the Tx FIFO associated 
 642:c/stm32f1xx_ll_usb.c ****   *         with the EP/channel
 643:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
 644:c/stm32f1xx_ll_usb.c ****   * @param  src :  pointer to source buffer
 645:c/stm32f1xx_ll_usb.c ****   * @param  ch_ep_num : endpoint or host channel number
 646:c/stm32f1xx_ll_usb.c ****   * @param  len : Number of bytes to write
 647:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
 648:c/stm32f1xx_ll_usb.c ****   */
 649:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uin
 650:c/stm32f1xx_ll_usb.c **** {
 651:c/stm32f1xx_ll_usb.c ****   uint32_t count32b = 0 , index = 0;
 652:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
 653:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
 654:c/stm32f1xx_ll_usb.c **** 
 655:c/stm32f1xx_ll_usb.c ****   count32b =  (len + 3) / 4;
 656:c/stm32f1xx_ll_usb.c ****   for (index = 0; index < count32b; index++, src += 4)
 657:c/stm32f1xx_ll_usb.c ****   {
 658:c/stm32f1xx_ll_usb.c ****     USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 659:c/stm32f1xx_ll_usb.c ****   }
 660:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 13


 661:c/stm32f1xx_ll_usb.c **** }
 662:c/stm32f1xx_ll_usb.c **** 
 663:c/stm32f1xx_ll_usb.c **** /**
 664:c/stm32f1xx_ll_usb.c ****   * @brief  USB_ReadPacket : read a packet from the Tx FIFO associated 
 665:c/stm32f1xx_ll_usb.c ****   *         with the EP/channel
 666:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
 667:c/stm32f1xx_ll_usb.c ****   * @param  dest : destination pointer
 668:c/stm32f1xx_ll_usb.c ****   * @param  len : Number of bytes to read
 669:c/stm32f1xx_ll_usb.c ****   * @retval pointer to destination buffer
 670:c/stm32f1xx_ll_usb.c ****   */
 671:c/stm32f1xx_ll_usb.c **** void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
 672:c/stm32f1xx_ll_usb.c **** {
 673:c/stm32f1xx_ll_usb.c ****   uint32_t index = 0;
 674:c/stm32f1xx_ll_usb.c ****   uint32_t count32b = (len + 3) / 4;
 675:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
 676:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
 677:c/stm32f1xx_ll_usb.c **** 
 678:c/stm32f1xx_ll_usb.c ****   for ( index = 0; index < count32b; index++, dest += 4 )
 679:c/stm32f1xx_ll_usb.c ****   {
 680:c/stm32f1xx_ll_usb.c ****     *(__packed uint32_t *)dest = USBx_DFIFO(0);
 681:c/stm32f1xx_ll_usb.c ****     
 682:c/stm32f1xx_ll_usb.c ****   }
 683:c/stm32f1xx_ll_usb.c ****   return ((void *)dest);
 684:c/stm32f1xx_ll_usb.c **** }
 685:c/stm32f1xx_ll_usb.c **** 
 686:c/stm32f1xx_ll_usb.c **** /**
 687:c/stm32f1xx_ll_usb.c ****   * @brief  USB_EPSetStall : set a stall condition over an EP
 688:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
 689:c/stm32f1xx_ll_usb.c ****   * @param  ep: pointer to endpoint structure   
 690:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
 691:c/stm32f1xx_ll_usb.c ****   */
 692:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
 693:c/stm32f1xx_ll_usb.c **** {
 694:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
 695:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
 696:c/stm32f1xx_ll_usb.c **** 
 697:c/stm32f1xx_ll_usb.c ****   if (ep->is_in == 1)
 698:c/stm32f1xx_ll_usb.c ****   {
 699:c/stm32f1xx_ll_usb.c ****     if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0)
 700:c/stm32f1xx_ll_usb.c ****     {
 701:c/stm32f1xx_ll_usb.c ****       USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 702:c/stm32f1xx_ll_usb.c ****     } 
 703:c/stm32f1xx_ll_usb.c ****     USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 704:c/stm32f1xx_ll_usb.c ****   }
 705:c/stm32f1xx_ll_usb.c ****   else
 706:c/stm32f1xx_ll_usb.c ****   {
 707:c/stm32f1xx_ll_usb.c ****     if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
 708:c/stm32f1xx_ll_usb.c ****     {
 709:c/stm32f1xx_ll_usb.c ****       USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 710:c/stm32f1xx_ll_usb.c ****     } 
 711:c/stm32f1xx_ll_usb.c ****     USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 712:c/stm32f1xx_ll_usb.c ****   }
 713:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
 714:c/stm32f1xx_ll_usb.c **** }
 715:c/stm32f1xx_ll_usb.c **** 
 716:c/stm32f1xx_ll_usb.c **** /**
 717:c/stm32f1xx_ll_usb.c ****   * @brief  USB_EPClearStall : Clear a stall condition over an EP
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 14


 718:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
 719:c/stm32f1xx_ll_usb.c ****   * @param  ep: pointer to endpoint structure
 720:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
 721:c/stm32f1xx_ll_usb.c ****   */
 722:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
 723:c/stm32f1xx_ll_usb.c **** {
 724:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
 725:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
 726:c/stm32f1xx_ll_usb.c **** 
 727:c/stm32f1xx_ll_usb.c ****   if (ep->is_in == 1)
 728:c/stm32f1xx_ll_usb.c ****   {
 729:c/stm32f1xx_ll_usb.c ****     USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 730:c/stm32f1xx_ll_usb.c ****     if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 731:c/stm32f1xx_ll_usb.c ****     {
 732:c/stm32f1xx_ll_usb.c ****        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 733:c/stm32f1xx_ll_usb.c ****     }
 734:c/stm32f1xx_ll_usb.c ****   }
 735:c/stm32f1xx_ll_usb.c ****   else
 736:c/stm32f1xx_ll_usb.c ****   {
 737:c/stm32f1xx_ll_usb.c ****     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 738:c/stm32f1xx_ll_usb.c ****     if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 739:c/stm32f1xx_ll_usb.c ****     {
 740:c/stm32f1xx_ll_usb.c ****       USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 741:c/stm32f1xx_ll_usb.c ****     }
 742:c/stm32f1xx_ll_usb.c ****   }
 743:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
 744:c/stm32f1xx_ll_usb.c **** }
 745:c/stm32f1xx_ll_usb.c **** 
 746:c/stm32f1xx_ll_usb.c **** /**
 747:c/stm32f1xx_ll_usb.c ****   * @brief  USB_StopDevice : Stop the usb device mode
 748:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
 749:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
 750:c/stm32f1xx_ll_usb.c ****   */
 751:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
 752:c/stm32f1xx_ll_usb.c **** {
 753:c/stm32f1xx_ll_usb.c ****   uint32_t index = 0;
 754:c/stm32f1xx_ll_usb.c ****   
 755:c/stm32f1xx_ll_usb.c ****   /* Clear Pending interrupt */
 756:c/stm32f1xx_ll_usb.c ****   for (index = 0; index < 15 ; index++)
 757:c/stm32f1xx_ll_usb.c ****   {
 758:c/stm32f1xx_ll_usb.c ****     USBx_INEP(index)->DIEPINT  = 0xFF;
 759:c/stm32f1xx_ll_usb.c ****     USBx_OUTEP(index)->DOEPINT  = 0xFF;
 760:c/stm32f1xx_ll_usb.c ****   }
 761:c/stm32f1xx_ll_usb.c ****   USBx_DEVICE->DAINT = 0xFFFFFFFF;
 762:c/stm32f1xx_ll_usb.c ****   
 763:c/stm32f1xx_ll_usb.c ****   /* Clear interrupt masks */
 764:c/stm32f1xx_ll_usb.c ****   USBx_DEVICE->DIEPMSK  = 0;
 765:c/stm32f1xx_ll_usb.c ****   USBx_DEVICE->DOEPMSK  = 0;
 766:c/stm32f1xx_ll_usb.c ****   USBx_DEVICE->DAINTMSK = 0;
 767:c/stm32f1xx_ll_usb.c ****   
 768:c/stm32f1xx_ll_usb.c ****   /* Flush the FIFO */
 769:c/stm32f1xx_ll_usb.c ****   USB_FlushRxFifo(USBx);
 770:c/stm32f1xx_ll_usb.c ****   USB_FlushTxFifo(USBx ,  0x10 );
 771:c/stm32f1xx_ll_usb.c ****   
 772:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
 773:c/stm32f1xx_ll_usb.c **** }
 774:c/stm32f1xx_ll_usb.c **** 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 15


 775:c/stm32f1xx_ll_usb.c **** /**
 776:c/stm32f1xx_ll_usb.c ****   * @brief  USB_SetDevAddress : Stop the usb device mode
 777:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
 778:c/stm32f1xx_ll_usb.c ****   * @param  address : new device address to be assigned
 779:c/stm32f1xx_ll_usb.c ****   *          This parameter can be a value from 0 to 255
 780:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
 781:c/stm32f1xx_ll_usb.c ****   */
 782:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
 783:c/stm32f1xx_ll_usb.c **** {
 784:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
 785:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
 786:c/stm32f1xx_ll_usb.c ****   UNUSED(address);
 787:c/stm32f1xx_ll_usb.c ****   USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 788:c/stm32f1xx_ll_usb.c ****   USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD;
 789:c/stm32f1xx_ll_usb.c ****   
 790:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
 791:c/stm32f1xx_ll_usb.c **** }
 792:c/stm32f1xx_ll_usb.c **** 
 793:c/stm32f1xx_ll_usb.c **** /**
 794:c/stm32f1xx_ll_usb.c ****   * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
 795:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
 796:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
 797:c/stm32f1xx_ll_usb.c ****   */
 798:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
 799:c/stm32f1xx_ll_usb.c **** {
 800:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
 801:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
 802:c/stm32f1xx_ll_usb.c **** 
 803:c/stm32f1xx_ll_usb.c ****   USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 804:c/stm32f1xx_ll_usb.c ****   HAL_Delay(3);
 805:c/stm32f1xx_ll_usb.c ****   
 806:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
 807:c/stm32f1xx_ll_usb.c **** }
 808:c/stm32f1xx_ll_usb.c **** 
 809:c/stm32f1xx_ll_usb.c **** /**
 810:c/stm32f1xx_ll_usb.c ****   * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
 811:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
 812:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
 813:c/stm32f1xx_ll_usb.c ****   */
 814:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
 815:c/stm32f1xx_ll_usb.c **** {
 816:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
 817:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
 818:c/stm32f1xx_ll_usb.c **** 
 819:c/stm32f1xx_ll_usb.c ****   USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 820:c/stm32f1xx_ll_usb.c ****   HAL_Delay(3);
 821:c/stm32f1xx_ll_usb.c ****   
 822:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
 823:c/stm32f1xx_ll_usb.c **** }
 824:c/stm32f1xx_ll_usb.c **** 
 825:c/stm32f1xx_ll_usb.c **** /**
 826:c/stm32f1xx_ll_usb.c ****   * @brief  USB_ReadInterrupts: return the global USB interrupt status
 827:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
 828:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
 829:c/stm32f1xx_ll_usb.c ****   */
 830:c/stm32f1xx_ll_usb.c **** uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
 831:c/stm32f1xx_ll_usb.c **** {
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 16


 832:c/stm32f1xx_ll_usb.c ****   uint32_t tmpreg = 0;
 833:c/stm32f1xx_ll_usb.c ****   
 834:c/stm32f1xx_ll_usb.c ****   tmpreg = USBx->GINTSTS;
 835:c/stm32f1xx_ll_usb.c ****   tmpreg &= USBx->GINTMSK;
 836:c/stm32f1xx_ll_usb.c ****   return tmpreg;
 837:c/stm32f1xx_ll_usb.c **** }
 838:c/stm32f1xx_ll_usb.c **** 
 839:c/stm32f1xx_ll_usb.c **** /**
 840:c/stm32f1xx_ll_usb.c ****   * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
 841:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
 842:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
 843:c/stm32f1xx_ll_usb.c ****   */
 844:c/stm32f1xx_ll_usb.c **** uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
 845:c/stm32f1xx_ll_usb.c **** {
 846:c/stm32f1xx_ll_usb.c ****   uint32_t tmpreg = 0;
 847:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
 848:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
 849:c/stm32f1xx_ll_usb.c **** 
 850:c/stm32f1xx_ll_usb.c ****   tmpreg  = USBx_DEVICE->DAINT;
 851:c/stm32f1xx_ll_usb.c ****   tmpreg &= USBx_DEVICE->DAINTMSK;
 852:c/stm32f1xx_ll_usb.c ****   return ((tmpreg & 0xffff0000) >> 16);
 853:c/stm32f1xx_ll_usb.c **** }
 854:c/stm32f1xx_ll_usb.c **** 
 855:c/stm32f1xx_ll_usb.c **** /**
 856:c/stm32f1xx_ll_usb.c ****   * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
 857:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
 858:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
 859:c/stm32f1xx_ll_usb.c ****   */
 860:c/stm32f1xx_ll_usb.c **** uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
 861:c/stm32f1xx_ll_usb.c **** {
 862:c/stm32f1xx_ll_usb.c ****   uint32_t tmpreg = 0;
 863:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
 864:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
 865:c/stm32f1xx_ll_usb.c **** 
 866:c/stm32f1xx_ll_usb.c ****   tmpreg  = USBx_DEVICE->DAINT;
 867:c/stm32f1xx_ll_usb.c ****   tmpreg &= USBx_DEVICE->DAINTMSK;
 868:c/stm32f1xx_ll_usb.c ****   return ((tmpreg & 0xFFFF));
 869:c/stm32f1xx_ll_usb.c **** }
 870:c/stm32f1xx_ll_usb.c **** 
 871:c/stm32f1xx_ll_usb.c **** /**
 872:c/stm32f1xx_ll_usb.c ****   * @brief  Returns Device OUT EP Interrupt register
 873:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
 874:c/stm32f1xx_ll_usb.c ****   * @param  epnum : endpoint number
 875:c/stm32f1xx_ll_usb.c ****   *          This parameter can be a value from 0 to 15
 876:c/stm32f1xx_ll_usb.c ****   * @retval Device OUT EP Interrupt register
 877:c/stm32f1xx_ll_usb.c ****   */
 878:c/stm32f1xx_ll_usb.c **** uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
 879:c/stm32f1xx_ll_usb.c **** {
 880:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
 881:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
 882:c/stm32f1xx_ll_usb.c **** 
 883:c/stm32f1xx_ll_usb.c ****   uint32_t tmpreg = 0;
 884:c/stm32f1xx_ll_usb.c ****   tmpreg  = USBx_OUTEP(epnum)->DOEPINT;
 885:c/stm32f1xx_ll_usb.c ****   tmpreg &= USBx_DEVICE->DOEPMSK;
 886:c/stm32f1xx_ll_usb.c ****   return tmpreg;
 887:c/stm32f1xx_ll_usb.c **** }
 888:c/stm32f1xx_ll_usb.c **** 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 17


 889:c/stm32f1xx_ll_usb.c **** /**
 890:c/stm32f1xx_ll_usb.c ****   * @brief  Returns Device IN EP Interrupt register
 891:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
 892:c/stm32f1xx_ll_usb.c ****   * @param  epnum : endpoint number
 893:c/stm32f1xx_ll_usb.c ****   *          This parameter can be a value from 0 to 15
 894:c/stm32f1xx_ll_usb.c ****   * @retval Device IN EP Interrupt register
 895:c/stm32f1xx_ll_usb.c ****   */
 896:c/stm32f1xx_ll_usb.c **** uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
 897:c/stm32f1xx_ll_usb.c **** {
 898:c/stm32f1xx_ll_usb.c ****   uint32_t tmpreg = 0, msk = 0, emp = 0;
 899:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
 900:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
 901:c/stm32f1xx_ll_usb.c **** 
 902:c/stm32f1xx_ll_usb.c ****   msk = USBx_DEVICE->DIEPMSK;
 903:c/stm32f1xx_ll_usb.c ****   emp = USBx_DEVICE->DIEPEMPMSK;
 904:c/stm32f1xx_ll_usb.c ****   msk |= ((emp >> epnum) & 0x1) << 7;
 905:c/stm32f1xx_ll_usb.c ****   tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 906:c/stm32f1xx_ll_usb.c ****   return tmpreg;
 907:c/stm32f1xx_ll_usb.c **** }
 908:c/stm32f1xx_ll_usb.c **** 
 909:c/stm32f1xx_ll_usb.c **** /**
 910:c/stm32f1xx_ll_usb.c ****   * @brief  USB_ClearInterrupts: clear a USB interrupt
 911:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
 912:c/stm32f1xx_ll_usb.c ****   * @param  interrupt : interrupt flag
 913:c/stm32f1xx_ll_usb.c ****   * @retval None
 914:c/stm32f1xx_ll_usb.c ****   */
 915:c/stm32f1xx_ll_usb.c **** void  USB_ClearInterrupts (USB_OTG_GlobalTypeDef *USBx, uint32_t interrupt)
 916:c/stm32f1xx_ll_usb.c **** {
 917:c/stm32f1xx_ll_usb.c ****   USBx->GINTSTS |= interrupt;
 918:c/stm32f1xx_ll_usb.c **** }
 919:c/stm32f1xx_ll_usb.c **** 
 920:c/stm32f1xx_ll_usb.c **** /**
 921:c/stm32f1xx_ll_usb.c ****   * @brief  Returns USB core mode
 922:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
 923:c/stm32f1xx_ll_usb.c ****   * @retval return core mode : Host or Device
 924:c/stm32f1xx_ll_usb.c ****   *          This parameter can be one of the these values:
 925:c/stm32f1xx_ll_usb.c ****   *           0 : Host 
 926:c/stm32f1xx_ll_usb.c ****   *           1 : Device
 927:c/stm32f1xx_ll_usb.c ****   */
 928:c/stm32f1xx_ll_usb.c **** uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
 929:c/stm32f1xx_ll_usb.c **** {
 930:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
 931:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
 932:c/stm32f1xx_ll_usb.c **** 
 933:c/stm32f1xx_ll_usb.c ****   return ((USBx->GINTSTS ) & 0x1);
 934:c/stm32f1xx_ll_usb.c **** }
 935:c/stm32f1xx_ll_usb.c **** 
 936:c/stm32f1xx_ll_usb.c **** /**
 937:c/stm32f1xx_ll_usb.c ****   * @brief  Activate EP0 for Setup transactions
 938:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
 939:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
 940:c/stm32f1xx_ll_usb.c ****   */
 941:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
 942:c/stm32f1xx_ll_usb.c **** {
 943:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
 944:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
 945:c/stm32f1xx_ll_usb.c ****   /* Set the MPS of the IN EP based on the enumeration speed */
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 18


 946:c/stm32f1xx_ll_usb.c ****   USBx_INEP(0)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 947:c/stm32f1xx_ll_usb.c ****   
 948:c/stm32f1xx_ll_usb.c ****   if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 949:c/stm32f1xx_ll_usb.c ****   {
 950:c/stm32f1xx_ll_usb.c ****     USBx_INEP(0)->DIEPCTL |= 3;
 951:c/stm32f1xx_ll_usb.c ****   }
 952:c/stm32f1xx_ll_usb.c ****   USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 953:c/stm32f1xx_ll_usb.c ****   
 954:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
 955:c/stm32f1xx_ll_usb.c **** }
 956:c/stm32f1xx_ll_usb.c **** 
 957:c/stm32f1xx_ll_usb.c **** /**
 958:c/stm32f1xx_ll_usb.c ****   * @brief  Prepare the EP0 to start the first control setup
 959:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
 960:c/stm32f1xx_ll_usb.c ****   * @param  psetup : pointer to setup packet
 961:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
 962:c/stm32f1xx_ll_usb.c ****   */
 963:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
 964:c/stm32f1xx_ll_usb.c **** {
 965:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
 966:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
 967:c/stm32f1xx_ll_usb.c ****   UNUSED(psetup);
 968:c/stm32f1xx_ll_usb.c ****   USBx_OUTEP(0)->DOEPTSIZ = 0;
 969:c/stm32f1xx_ll_usb.c ****   USBx_OUTEP(0)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 970:c/stm32f1xx_ll_usb.c ****   USBx_OUTEP(0)->DOEPTSIZ |= (3 * 8);
 971:c/stm32f1xx_ll_usb.c ****   USBx_OUTEP(0)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 972:c/stm32f1xx_ll_usb.c ****   
 973:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
 974:c/stm32f1xx_ll_usb.c **** }
 975:c/stm32f1xx_ll_usb.c **** 
 976:c/stm32f1xx_ll_usb.c **** /**
 977:c/stm32f1xx_ll_usb.c ****   * @brief  USB_HostInit : Initializes the USB OTG controller registers 
 978:c/stm32f1xx_ll_usb.c ****   *         for Host mode 
 979:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
 980:c/stm32f1xx_ll_usb.c ****   * @param  cfg  : pointer to a USB_OTG_CfgTypeDef structure that contains
 981:c/stm32f1xx_ll_usb.c ****   *         the configuration information for the specified USBx peripheral.
 982:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
 983:c/stm32f1xx_ll_usb.c ****   */
 984:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_HostInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
 985:c/stm32f1xx_ll_usb.c **** {
 986:c/stm32f1xx_ll_usb.c ****   uint32_t index = 0;
 987:c/stm32f1xx_ll_usb.c ****   
 988:c/stm32f1xx_ll_usb.c ****   /* Restart the Phy Clock */
 989:c/stm32f1xx_ll_usb.c ****   USBx_PCGCCTL = 0;
 990:c/stm32f1xx_ll_usb.c ****   
 991:c/stm32f1xx_ll_usb.c ****   /* no VBUS sensing*/
 992:c/stm32f1xx_ll_usb.c ****   USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSASEN);
 993:c/stm32f1xx_ll_usb.c ****   USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSBSEN);
 994:c/stm32f1xx_ll_usb.c ****   
 995:c/stm32f1xx_ll_usb.c ****   /* Disable the FS/LS support mode only */
 996:c/stm32f1xx_ll_usb.c ****   if((cfg.speed == USB_OTG_SPEED_FULL)&&
 997:c/stm32f1xx_ll_usb.c ****      (USBx != USB_OTG_FS))
 998:c/stm32f1xx_ll_usb.c ****   {
 999:c/stm32f1xx_ll_usb.c ****     USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
1000:c/stm32f1xx_ll_usb.c ****   }
1001:c/stm32f1xx_ll_usb.c ****   else
1002:c/stm32f1xx_ll_usb.c ****   {
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 19


1003:c/stm32f1xx_ll_usb.c ****     USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
1004:c/stm32f1xx_ll_usb.c ****   }
1005:c/stm32f1xx_ll_usb.c ****   
1006:c/stm32f1xx_ll_usb.c ****   /* Make sure the FIFOs are flushed. */
1007:c/stm32f1xx_ll_usb.c ****   USB_FlushTxFifo(USBx, 0x10 ); /* all Tx FIFOs */
1008:c/stm32f1xx_ll_usb.c ****   USB_FlushRxFifo(USBx);
1009:c/stm32f1xx_ll_usb.c ****   
1010:c/stm32f1xx_ll_usb.c ****   /* Clear all pending HC Interrupts */
1011:c/stm32f1xx_ll_usb.c ****   for (index = 0; index < cfg.Host_channels; index++)
1012:c/stm32f1xx_ll_usb.c ****   {
1013:c/stm32f1xx_ll_usb.c ****     USBx_HC(index)->HCINT = 0xFFFFFFFF;
1014:c/stm32f1xx_ll_usb.c ****     USBx_HC(index)->HCINTMSK = 0;
1015:c/stm32f1xx_ll_usb.c ****   }
1016:c/stm32f1xx_ll_usb.c ****   
1017:c/stm32f1xx_ll_usb.c ****   /* Enable VBUS driving */
1018:c/stm32f1xx_ll_usb.c ****   USB_DriveVbus(USBx, 1);
1019:c/stm32f1xx_ll_usb.c ****   
1020:c/stm32f1xx_ll_usb.c ****   HAL_Delay(200);
1021:c/stm32f1xx_ll_usb.c ****   
1022:c/stm32f1xx_ll_usb.c ****   /* Disable all interrupts. */
1023:c/stm32f1xx_ll_usb.c ****   USBx->GINTMSK = 0;
1024:c/stm32f1xx_ll_usb.c ****   
1025:c/stm32f1xx_ll_usb.c ****   /* Clear any pending interrupts */
1026:c/stm32f1xx_ll_usb.c ****   USBx->GINTSTS = 0xFFFFFFFF;
1027:c/stm32f1xx_ll_usb.c ****   
1028:c/stm32f1xx_ll_usb.c ****   if(USBx == USB_OTG_FS)
1029:c/stm32f1xx_ll_usb.c ****   {
1030:c/stm32f1xx_ll_usb.c ****     /* set Rx FIFO size */
1031:c/stm32f1xx_ll_usb.c ****     USBx->GRXFSIZ  = (uint32_t )0x80; 
1032:c/stm32f1xx_ll_usb.c ****     USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60 << 16)& USB_OTG_NPTXFD) | 0x80);
1033:c/stm32f1xx_ll_usb.c ****     USBx->HPTXFSIZ = (uint32_t )(((0x40 << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0);
1034:c/stm32f1xx_ll_usb.c ****   }
1035:c/stm32f1xx_ll_usb.c ****   
1036:c/stm32f1xx_ll_usb.c ****   /* Enable the common interrupts */
1037:c/stm32f1xx_ll_usb.c ****   USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
1038:c/stm32f1xx_ll_usb.c ****   
1039:c/stm32f1xx_ll_usb.c ****   /* Enable interrupts matching to the Host mode ONLY */
1040:c/stm32f1xx_ll_usb.c ****   USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
1041:c/stm32f1xx_ll_usb.c ****                     USB_OTG_GINTMSK_SOFM             |USB_OTG_GINTSTS_DISCINT|\
1042:c/stm32f1xx_ll_usb.c ****                     USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);
1043:c/stm32f1xx_ll_usb.c ****   
1044:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
1045:c/stm32f1xx_ll_usb.c **** }
1046:c/stm32f1xx_ll_usb.c **** 
1047:c/stm32f1xx_ll_usb.c **** /**
1048:c/stm32f1xx_ll_usb.c ****   * @brief  USB_InitFSLSPClkSel : Initializes the FSLSPClkSel field of the 
1049:c/stm32f1xx_ll_usb.c ****   *         HCFG register on the PHY type and set the right frame interval
1050:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
1051:c/stm32f1xx_ll_usb.c ****   * @param  freq : clock frequency
1052:c/stm32f1xx_ll_usb.c ****   *          This parameter can be one of the these values:
1053:c/stm32f1xx_ll_usb.c ****   *           HCFG_48_MHZ : Full Speed 48 MHz Clock 
1054:c/stm32f1xx_ll_usb.c ****   *           HCFG_6_MHZ : Low Speed 6 MHz Clock 
1055:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
1056:c/stm32f1xx_ll_usb.c ****   */
1057:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
1058:c/stm32f1xx_ll_usb.c **** {
1059:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 20


1060:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
1061:c/stm32f1xx_ll_usb.c **** 
1062:c/stm32f1xx_ll_usb.c ****   USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
1063:c/stm32f1xx_ll_usb.c ****   USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
1064:c/stm32f1xx_ll_usb.c ****   
1065:c/stm32f1xx_ll_usb.c ****   if (freq ==  HCFG_48_MHZ)
1066:c/stm32f1xx_ll_usb.c ****   {
1067:c/stm32f1xx_ll_usb.c ****     USBx_HOST->HFIR = (uint32_t)48000;
1068:c/stm32f1xx_ll_usb.c ****   }
1069:c/stm32f1xx_ll_usb.c ****   else if (freq ==  HCFG_6_MHZ)
1070:c/stm32f1xx_ll_usb.c ****   {
1071:c/stm32f1xx_ll_usb.c ****     USBx_HOST->HFIR = (uint32_t)6000;
1072:c/stm32f1xx_ll_usb.c ****   }
1073:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
1074:c/stm32f1xx_ll_usb.c **** }
1075:c/stm32f1xx_ll_usb.c **** 
1076:c/stm32f1xx_ll_usb.c **** /**
1077:c/stm32f1xx_ll_usb.c **** * @brief  USB_OTG_ResetPort : Reset Host Port
1078:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
1079:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
1080:c/stm32f1xx_ll_usb.c ****   * @note : (1)The application must wait at least 10 ms
1081:c/stm32f1xx_ll_usb.c ****   *   before clearing the reset bit.
1082:c/stm32f1xx_ll_usb.c ****   */
1083:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
1084:c/stm32f1xx_ll_usb.c **** {
1085:c/stm32f1xx_ll_usb.c ****   __IO uint32_t hprt0 = 0;
1086:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
1087:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
1088:c/stm32f1xx_ll_usb.c **** 
1089:c/stm32f1xx_ll_usb.c ****   hprt0 = USBx_HPRT0;
1090:c/stm32f1xx_ll_usb.c ****   
1091:c/stm32f1xx_ll_usb.c ****   hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
1092:c/stm32f1xx_ll_usb.c ****     USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
1093:c/stm32f1xx_ll_usb.c ****   
1094:c/stm32f1xx_ll_usb.c ****   USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);  
1095:c/stm32f1xx_ll_usb.c ****   HAL_Delay (10);                                /* See Note #1 */
1096:c/stm32f1xx_ll_usb.c ****   USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0); 
1097:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
1098:c/stm32f1xx_ll_usb.c **** }
1099:c/stm32f1xx_ll_usb.c **** 
1100:c/stm32f1xx_ll_usb.c **** /**
1101:c/stm32f1xx_ll_usb.c ****   * @brief  USB_DriveVbus : activate or de-activate vbus
1102:c/stm32f1xx_ll_usb.c ****   * @param  state : VBUS state
1103:c/stm32f1xx_ll_usb.c ****   *          This parameter can be one of the these values:
1104:c/stm32f1xx_ll_usb.c ****   *           0 : VBUS Active 
1105:c/stm32f1xx_ll_usb.c ****   *           1 : VBUS Inactive
1106:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
1107:c/stm32f1xx_ll_usb.c **** */
1108:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
1109:c/stm32f1xx_ll_usb.c **** {
1110:c/stm32f1xx_ll_usb.c ****   __IO uint32_t hprt0 = 0;
1111:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
1112:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
1113:c/stm32f1xx_ll_usb.c **** 
1114:c/stm32f1xx_ll_usb.c ****   hprt0 = USBx_HPRT0;
1115:c/stm32f1xx_ll_usb.c ****   hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
1116:c/stm32f1xx_ll_usb.c ****           USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 21


1117:c/stm32f1xx_ll_usb.c ****   
1118:c/stm32f1xx_ll_usb.c ****   if (((hprt0 & USB_OTG_HPRT_PPWR) == 0 ) && (state == 1 ))
1119:c/stm32f1xx_ll_usb.c ****   {
1120:c/stm32f1xx_ll_usb.c ****     USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
1121:c/stm32f1xx_ll_usb.c ****   }
1122:c/stm32f1xx_ll_usb.c ****   if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0 ))
1123:c/stm32f1xx_ll_usb.c ****   {
1124:c/stm32f1xx_ll_usb.c ****     USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
1125:c/stm32f1xx_ll_usb.c ****   }
1126:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
1127:c/stm32f1xx_ll_usb.c **** }
1128:c/stm32f1xx_ll_usb.c **** 
1129:c/stm32f1xx_ll_usb.c **** /**
1130:c/stm32f1xx_ll_usb.c ****   * @brief  Return Host Core speed
1131:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
1132:c/stm32f1xx_ll_usb.c ****   * @retval speed : Host speed
1133:c/stm32f1xx_ll_usb.c ****   *          This parameter can be one of the these values:
1134:c/stm32f1xx_ll_usb.c ****   *            @arg USB_OTG_SPEED_FULL: Full speed mode
1135:c/stm32f1xx_ll_usb.c ****   *            @arg USB_OTG_SPEED_LOW: Low speed mode
1136:c/stm32f1xx_ll_usb.c ****   */
1137:c/stm32f1xx_ll_usb.c **** uint32_t USB_GetHostSpeed (USB_OTG_GlobalTypeDef *USBx)
1138:c/stm32f1xx_ll_usb.c **** {
1139:c/stm32f1xx_ll_usb.c ****   __IO uint32_t hprt0 = 0;
1140:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
1141:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
1142:c/stm32f1xx_ll_usb.c **** 
1143:c/stm32f1xx_ll_usb.c ****   hprt0 = USBx_HPRT0;
1144:c/stm32f1xx_ll_usb.c ****   return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
1145:c/stm32f1xx_ll_usb.c **** }
1146:c/stm32f1xx_ll_usb.c **** 
1147:c/stm32f1xx_ll_usb.c **** /**
1148:c/stm32f1xx_ll_usb.c ****   * @brief  Return Host Current Frame number
1149:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
1150:c/stm32f1xx_ll_usb.c ****   * @retval current frame number
1151:c/stm32f1xx_ll_usb.c **** */
1152:c/stm32f1xx_ll_usb.c **** uint32_t USB_GetCurrentFrame (USB_OTG_GlobalTypeDef *USBx)
1153:c/stm32f1xx_ll_usb.c **** {
1154:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
1155:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
1156:c/stm32f1xx_ll_usb.c **** 
1157:c/stm32f1xx_ll_usb.c ****   return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
1158:c/stm32f1xx_ll_usb.c **** }
1159:c/stm32f1xx_ll_usb.c **** 
1160:c/stm32f1xx_ll_usb.c **** /**
1161:c/stm32f1xx_ll_usb.c ****   * @brief  Initialize a host channel
1162:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
1163:c/stm32f1xx_ll_usb.c ****   * @param  ch_num : Channel number
1164:c/stm32f1xx_ll_usb.c ****   *         This parameter can be a value from 1 to 15
1165:c/stm32f1xx_ll_usb.c ****   * @param  epnum : Endpoint number
1166:c/stm32f1xx_ll_usb.c ****   *          This parameter can be a value from 1 to 15
1167:c/stm32f1xx_ll_usb.c ****   * @param  dev_address : Current device address
1168:c/stm32f1xx_ll_usb.c ****   *          This parameter can be a value from 0 to 255
1169:c/stm32f1xx_ll_usb.c ****   * @param  speed : Current device speed
1170:c/stm32f1xx_ll_usb.c ****   *          This parameter can be one of the these values:
1171:c/stm32f1xx_ll_usb.c ****   *            @arg USB_OTG_SPEED_FULL: Full speed mode
1172:c/stm32f1xx_ll_usb.c ****   *            @arg USB_OTG_SPEED_LOW: Low speed mode
1173:c/stm32f1xx_ll_usb.c ****   * @param  ep_type : Endpoint Type
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 22


1174:c/stm32f1xx_ll_usb.c ****   *          This parameter can be one of the these values:
1175:c/stm32f1xx_ll_usb.c ****   *            @arg EP_TYPE_CTRL: Control type
1176:c/stm32f1xx_ll_usb.c ****   *            @arg EP_TYPE_ISOC: Isochronous type
1177:c/stm32f1xx_ll_usb.c ****   *            @arg EP_TYPE_BULK: Bulk type
1178:c/stm32f1xx_ll_usb.c ****   *            @arg EP_TYPE_INTR: Interrupt type
1179:c/stm32f1xx_ll_usb.c ****   * @param  mps : Max Packet Size
1180:c/stm32f1xx_ll_usb.c ****   *          This parameter can be a value from 0 to32K
1181:c/stm32f1xx_ll_usb.c ****   * @retval HAL state
1182:c/stm32f1xx_ll_usb.c ****   */
1183:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx,  
1184:c/stm32f1xx_ll_usb.c ****                               uint8_t ch_num,
1185:c/stm32f1xx_ll_usb.c ****                               uint8_t epnum,
1186:c/stm32f1xx_ll_usb.c ****                               uint8_t dev_address,
1187:c/stm32f1xx_ll_usb.c ****                               uint8_t speed,
1188:c/stm32f1xx_ll_usb.c ****                               uint8_t ep_type,
1189:c/stm32f1xx_ll_usb.c ****                               uint16_t mps)
1190:c/stm32f1xx_ll_usb.c **** {
1191:c/stm32f1xx_ll_usb.c ****   /* Clear old interrupt conditions for this host channel. */
1192:c/stm32f1xx_ll_usb.c ****   USBx_HC(ch_num)->HCINT = 0xFFFFFFFF;
1193:c/stm32f1xx_ll_usb.c ****   
1194:c/stm32f1xx_ll_usb.c ****   /* Enable channel interrupts required for this transfer. */
1195:c/stm32f1xx_ll_usb.c ****   switch (ep_type) 
1196:c/stm32f1xx_ll_usb.c ****   {
1197:c/stm32f1xx_ll_usb.c ****   case EP_TYPE_CTRL:
1198:c/stm32f1xx_ll_usb.c ****   case EP_TYPE_BULK:
1199:c/stm32f1xx_ll_usb.c ****     USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
1200:c/stm32f1xx_ll_usb.c ****                                 USB_OTG_HCINTMSK_STALLM |\
1201:c/stm32f1xx_ll_usb.c ****                                 USB_OTG_HCINTMSK_TXERRM |\
1202:c/stm32f1xx_ll_usb.c ****                                 USB_OTG_HCINTMSK_DTERRM |\
1203:c/stm32f1xx_ll_usb.c ****                                 USB_OTG_HCINTMSK_AHBERR |\
1204:c/stm32f1xx_ll_usb.c ****                                 USB_OTG_HCINTMSK_NAKM ;
1205:c/stm32f1xx_ll_usb.c ****   
1206:c/stm32f1xx_ll_usb.c ****     if (epnum & 0x80) 
1207:c/stm32f1xx_ll_usb.c ****     {
1208:c/stm32f1xx_ll_usb.c ****       USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
1209:c/stm32f1xx_ll_usb.c ****     }
1210:c/stm32f1xx_ll_usb.c ****     break;
1211:c/stm32f1xx_ll_usb.c ****   
1212:c/stm32f1xx_ll_usb.c ****   case EP_TYPE_INTR:
1213:c/stm32f1xx_ll_usb.c ****     USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
1214:c/stm32f1xx_ll_usb.c ****                                 USB_OTG_HCINTMSK_STALLM |\
1215:c/stm32f1xx_ll_usb.c ****                                 USB_OTG_HCINTMSK_TXERRM |\
1216:c/stm32f1xx_ll_usb.c ****                                 USB_OTG_HCINTMSK_DTERRM |\
1217:c/stm32f1xx_ll_usb.c ****                                 USB_OTG_HCINTMSK_NAKM   |\
1218:c/stm32f1xx_ll_usb.c ****                                 USB_OTG_HCINTMSK_AHBERR |\
1219:c/stm32f1xx_ll_usb.c ****                                 USB_OTG_HCINTMSK_FRMORM ;
1220:c/stm32f1xx_ll_usb.c ****     
1221:c/stm32f1xx_ll_usb.c ****     if (epnum & 0x80) 
1222:c/stm32f1xx_ll_usb.c ****     {
1223:c/stm32f1xx_ll_usb.c ****       USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
1224:c/stm32f1xx_ll_usb.c ****     }
1225:c/stm32f1xx_ll_usb.c ****     
1226:c/stm32f1xx_ll_usb.c ****     break;
1227:c/stm32f1xx_ll_usb.c ****   
1228:c/stm32f1xx_ll_usb.c ****   case EP_TYPE_ISOC:
1229:c/stm32f1xx_ll_usb.c ****     USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
1230:c/stm32f1xx_ll_usb.c ****                                 USB_OTG_HCINTMSK_ACKM   |\
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 23


1231:c/stm32f1xx_ll_usb.c ****                                 USB_OTG_HCINTMSK_AHBERR |\
1232:c/stm32f1xx_ll_usb.c ****                                 USB_OTG_HCINTMSK_FRMORM ;
1233:c/stm32f1xx_ll_usb.c ****     
1234:c/stm32f1xx_ll_usb.c ****     if (epnum & 0x80) 
1235:c/stm32f1xx_ll_usb.c ****     {
1236:c/stm32f1xx_ll_usb.c ****       USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
1237:c/stm32f1xx_ll_usb.c ****     }
1238:c/stm32f1xx_ll_usb.c ****     break;
1239:c/stm32f1xx_ll_usb.c ****   }
1240:c/stm32f1xx_ll_usb.c ****   
1241:c/stm32f1xx_ll_usb.c ****   /* Enable the top level host channel interrupt. */
1242:c/stm32f1xx_ll_usb.c ****   USBx_HOST->HAINTMSK |= (1 << ch_num);
1243:c/stm32f1xx_ll_usb.c ****   
1244:c/stm32f1xx_ll_usb.c ****   /* Make sure host channel interrupts are enabled. */
1245:c/stm32f1xx_ll_usb.c ****   USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
1246:c/stm32f1xx_ll_usb.c ****   
1247:c/stm32f1xx_ll_usb.c ****   /* Program the HCCHAR register */
1248:c/stm32f1xx_ll_usb.c ****   USBx_HC(ch_num)->HCCHAR = (((dev_address << 22) & USB_OTG_HCCHAR_DAD)  |\
1249:c/stm32f1xx_ll_usb.c ****                              (((epnum & 0x7F)<< 11) & USB_OTG_HCCHAR_EPNUM)|\
1250:c/stm32f1xx_ll_usb.c ****                              ((((epnum & 0x80) == 0x80)<< 15) & USB_OTG_HCCHAR_EPDIR)|\
1251:c/stm32f1xx_ll_usb.c ****                              (((speed == HPRT0_PRTSPD_LOW_SPEED)<< 17) & USB_OTG_HCCHAR_LSDEV)|\
1252:c/stm32f1xx_ll_usb.c ****                              ((ep_type << 18) & USB_OTG_HCCHAR_EPTYP)|\
1253:c/stm32f1xx_ll_usb.c ****                              (mps & USB_OTG_HCCHAR_MPSIZ));
1254:c/stm32f1xx_ll_usb.c ****   
1255:c/stm32f1xx_ll_usb.c ****   if (ep_type == EP_TYPE_INTR)
1256:c/stm32f1xx_ll_usb.c ****   {
1257:c/stm32f1xx_ll_usb.c ****     USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
1258:c/stm32f1xx_ll_usb.c ****   }
1259:c/stm32f1xx_ll_usb.c ****   
1260:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
1261:c/stm32f1xx_ll_usb.c **** }
1262:c/stm32f1xx_ll_usb.c **** 
1263:c/stm32f1xx_ll_usb.c **** /**
1264:c/stm32f1xx_ll_usb.c ****   * @brief  Start a transfer over a host channel
1265:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
1266:c/stm32f1xx_ll_usb.c ****   * @param  hc : pointer to host channel structure
1267:c/stm32f1xx_ll_usb.c ****   * @retval HAL state
1268:c/stm32f1xx_ll_usb.c ****   */
1269:c/stm32f1xx_ll_usb.c **** #if defined   (__CC_ARM) /*!< ARM Compiler */
1270:c/stm32f1xx_ll_usb.c **** #pragma O0
1271:c/stm32f1xx_ll_usb.c **** #elif defined (__GNUC__) /*!< GNU Compiler */
1272:c/stm32f1xx_ll_usb.c **** #pragma GCC optimize ("O0")
1273:c/stm32f1xx_ll_usb.c **** #endif /* __CC_ARM */
1274:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
1275:c/stm32f1xx_ll_usb.c **** {
1276:c/stm32f1xx_ll_usb.c ****   uint8_t  is_oddframe = 0;
1277:c/stm32f1xx_ll_usb.c ****   uint16_t len_words = 0;
1278:c/stm32f1xx_ll_usb.c ****   uint16_t num_packets = 0;
1279:c/stm32f1xx_ll_usb.c ****   uint16_t max_hc_pkt_count = 256;
1280:c/stm32f1xx_ll_usb.c ****   uint32_t tmpreg = 0;
1281:c/stm32f1xx_ll_usb.c ****   
1282:c/stm32f1xx_ll_usb.c ****   /* Compute the expected number of packets associated to the transfer */
1283:c/stm32f1xx_ll_usb.c ****   if (hc->xfer_len > 0)
1284:c/stm32f1xx_ll_usb.c ****   {
1285:c/stm32f1xx_ll_usb.c ****     num_packets = (hc->xfer_len + hc->max_packet - 1) / hc->max_packet;
1286:c/stm32f1xx_ll_usb.c ****     
1287:c/stm32f1xx_ll_usb.c ****     if (num_packets > max_hc_pkt_count)
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 24


1288:c/stm32f1xx_ll_usb.c ****     {
1289:c/stm32f1xx_ll_usb.c ****       num_packets = max_hc_pkt_count;
1290:c/stm32f1xx_ll_usb.c ****       hc->xfer_len = num_packets * hc->max_packet;
1291:c/stm32f1xx_ll_usb.c ****     }
1292:c/stm32f1xx_ll_usb.c ****   }
1293:c/stm32f1xx_ll_usb.c ****   else
1294:c/stm32f1xx_ll_usb.c ****   {
1295:c/stm32f1xx_ll_usb.c ****     num_packets = 1;
1296:c/stm32f1xx_ll_usb.c ****   }
1297:c/stm32f1xx_ll_usb.c ****   if (hc->ep_is_in)
1298:c/stm32f1xx_ll_usb.c ****   {
1299:c/stm32f1xx_ll_usb.c ****     hc->xfer_len = num_packets * hc->max_packet;
1300:c/stm32f1xx_ll_usb.c ****   }
1301:c/stm32f1xx_ll_usb.c ****   
1302:c/stm32f1xx_ll_usb.c ****   /* Initialize the HCTSIZn register */
1303:c/stm32f1xx_ll_usb.c ****   USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
1304:c/stm32f1xx_ll_usb.c ****     ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |\
1305:c/stm32f1xx_ll_usb.c ****       (((hc->data_pid) << 29) & USB_OTG_HCTSIZ_DPID);
1306:c/stm32f1xx_ll_usb.c ****   
1307:c/stm32f1xx_ll_usb.c ****   is_oddframe = (USBx_HOST->HFNUM & 0x01) ? 0 : 1;
1308:c/stm32f1xx_ll_usb.c ****   USBx_HC(hc->ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
1309:c/stm32f1xx_ll_usb.c ****   USBx_HC(hc->ch_num)->HCCHAR |= (is_oddframe << 29);
1310:c/stm32f1xx_ll_usb.c ****   
1311:c/stm32f1xx_ll_usb.c ****   /* Set host channel enable */
1312:c/stm32f1xx_ll_usb.c ****   tmpreg = USBx_HC(hc->ch_num)->HCCHAR;
1313:c/stm32f1xx_ll_usb.c ****   tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
1314:c/stm32f1xx_ll_usb.c ****   tmpreg |= USB_OTG_HCCHAR_CHENA;
1315:c/stm32f1xx_ll_usb.c ****   USBx_HC(hc->ch_num)->HCCHAR = tmpreg;
1316:c/stm32f1xx_ll_usb.c ****   
1317:c/stm32f1xx_ll_usb.c ****   if((hc->ep_is_in == 0) && (hc->xfer_len > 0))
1318:c/stm32f1xx_ll_usb.c ****   {
1319:c/stm32f1xx_ll_usb.c ****     switch(hc->ep_type) 
1320:c/stm32f1xx_ll_usb.c ****     {
1321:c/stm32f1xx_ll_usb.c ****       /* Non periodic transfer */
1322:c/stm32f1xx_ll_usb.c ****     case EP_TYPE_CTRL:
1323:c/stm32f1xx_ll_usb.c ****     case EP_TYPE_BULK:
1324:c/stm32f1xx_ll_usb.c ****       len_words = (hc->xfer_len + 3) / 4;
1325:c/stm32f1xx_ll_usb.c ****       
1326:c/stm32f1xx_ll_usb.c ****       /* check if there is enough space in FIFO space */
1327:c/stm32f1xx_ll_usb.c ****       if(len_words > (USBx->HNPTXSTS & 0xFFFF))
1328:c/stm32f1xx_ll_usb.c ****       {
1329:c/stm32f1xx_ll_usb.c ****         /* need to process data in nptxfempty interrupt */
1330:c/stm32f1xx_ll_usb.c ****         USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
1331:c/stm32f1xx_ll_usb.c ****       }
1332:c/stm32f1xx_ll_usb.c ****       break;
1333:c/stm32f1xx_ll_usb.c ****       
1334:c/stm32f1xx_ll_usb.c ****       /* Periodic transfer */
1335:c/stm32f1xx_ll_usb.c ****     case EP_TYPE_INTR:
1336:c/stm32f1xx_ll_usb.c ****     case EP_TYPE_ISOC:
1337:c/stm32f1xx_ll_usb.c ****       len_words = (hc->xfer_len + 3) / 4;
1338:c/stm32f1xx_ll_usb.c ****       /* check if there is enough space in FIFO space */
1339:c/stm32f1xx_ll_usb.c ****       if(len_words > (USBx_HOST->HPTXSTS & 0xFFFF)) /* split the transfer */
1340:c/stm32f1xx_ll_usb.c ****       {
1341:c/stm32f1xx_ll_usb.c ****         /* need to process data in ptxfempty interrupt */
1342:c/stm32f1xx_ll_usb.c ****         USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;          
1343:c/stm32f1xx_ll_usb.c ****       }
1344:c/stm32f1xx_ll_usb.c ****       break;
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 25


1345:c/stm32f1xx_ll_usb.c ****       
1346:c/stm32f1xx_ll_usb.c ****     default:
1347:c/stm32f1xx_ll_usb.c ****       break;
1348:c/stm32f1xx_ll_usb.c ****     }
1349:c/stm32f1xx_ll_usb.c ****     
1350:c/stm32f1xx_ll_usb.c ****     /* Write packet into the Tx FIFO. */
1351:c/stm32f1xx_ll_usb.c ****     USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, hc->xfer_len);
1352:c/stm32f1xx_ll_usb.c ****   }
1353:c/stm32f1xx_ll_usb.c ****   
1354:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
1355:c/stm32f1xx_ll_usb.c **** }
1356:c/stm32f1xx_ll_usb.c **** 
1357:c/stm32f1xx_ll_usb.c **** /**
1358:c/stm32f1xx_ll_usb.c ****   * @brief Read all host channel interrupts status
1359:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
1360:c/stm32f1xx_ll_usb.c ****   * @retval HAL state
1361:c/stm32f1xx_ll_usb.c ****   */
1362:c/stm32f1xx_ll_usb.c **** uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
1363:c/stm32f1xx_ll_usb.c **** {
1364:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
1365:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
1366:c/stm32f1xx_ll_usb.c **** 
1367:c/stm32f1xx_ll_usb.c ****   return ((USBx_HOST->HAINT) & 0xFFFF);
1368:c/stm32f1xx_ll_usb.c **** }
1369:c/stm32f1xx_ll_usb.c **** 
1370:c/stm32f1xx_ll_usb.c **** /**
1371:c/stm32f1xx_ll_usb.c ****   * @brief  Halt a host channel
1372:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
1373:c/stm32f1xx_ll_usb.c ****   * @param  hc_num : Host Channel number
1374:c/stm32f1xx_ll_usb.c ****   *         This parameter can be a value from 1 to 15
1375:c/stm32f1xx_ll_usb.c ****   * @retval HAL state
1376:c/stm32f1xx_ll_usb.c ****   */
1377:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
1378:c/stm32f1xx_ll_usb.c **** {
1379:c/stm32f1xx_ll_usb.c ****   uint32_t count = 0;
1380:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
1381:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
1382:c/stm32f1xx_ll_usb.c **** 
1383:c/stm32f1xx_ll_usb.c ****   /* Check for space in the request queue to issue the halt. */
1384:c/stm32f1xx_ll_usb.c ****   if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) ||
1385:c/stm32f1xx_ll_usb.c ****      (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
1386:c/stm32f1xx_ll_usb.c ****   {
1387:c/stm32f1xx_ll_usb.c ****     USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
1388:c/stm32f1xx_ll_usb.c ****     
1389:c/stm32f1xx_ll_usb.c ****     if ((USBx->HNPTXSTS & 0xFFFF) == 0)
1390:c/stm32f1xx_ll_usb.c ****     {
1391:c/stm32f1xx_ll_usb.c ****       USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
1392:c/stm32f1xx_ll_usb.c ****       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
1393:c/stm32f1xx_ll_usb.c ****       USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
1394:c/stm32f1xx_ll_usb.c ****       do
1395:c/stm32f1xx_ll_usb.c ****       {
1396:c/stm32f1xx_ll_usb.c ****         if (++count > 1000)
1397:c/stm32f1xx_ll_usb.c ****         {
1398:c/stm32f1xx_ll_usb.c ****           break;
1399:c/stm32f1xx_ll_usb.c ****         }
1400:c/stm32f1xx_ll_usb.c ****       } 
1401:c/stm32f1xx_ll_usb.c ****       while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 26


1402:c/stm32f1xx_ll_usb.c ****     }
1403:c/stm32f1xx_ll_usb.c ****     else
1404:c/stm32f1xx_ll_usb.c ****     {
1405:c/stm32f1xx_ll_usb.c ****       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
1406:c/stm32f1xx_ll_usb.c ****     }
1407:c/stm32f1xx_ll_usb.c ****   }
1408:c/stm32f1xx_ll_usb.c ****   else
1409:c/stm32f1xx_ll_usb.c ****   {
1410:c/stm32f1xx_ll_usb.c ****     USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
1411:c/stm32f1xx_ll_usb.c ****     
1412:c/stm32f1xx_ll_usb.c ****     if ((USBx_HOST->HPTXSTS & 0xFFFF) == 0)
1413:c/stm32f1xx_ll_usb.c ****     {
1414:c/stm32f1xx_ll_usb.c ****       USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
1415:c/stm32f1xx_ll_usb.c ****       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
1416:c/stm32f1xx_ll_usb.c ****       USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
1417:c/stm32f1xx_ll_usb.c ****       do
1418:c/stm32f1xx_ll_usb.c ****       {
1419:c/stm32f1xx_ll_usb.c ****         if (++count > 1000)
1420:c/stm32f1xx_ll_usb.c ****         {
1421:c/stm32f1xx_ll_usb.c ****           break;
1422:c/stm32f1xx_ll_usb.c ****         }
1423:c/stm32f1xx_ll_usb.c ****       } 
1424:c/stm32f1xx_ll_usb.c ****       while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
1425:c/stm32f1xx_ll_usb.c ****     }
1426:c/stm32f1xx_ll_usb.c ****     else
1427:c/stm32f1xx_ll_usb.c ****     {
1428:c/stm32f1xx_ll_usb.c ****        USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
1429:c/stm32f1xx_ll_usb.c ****     }
1430:c/stm32f1xx_ll_usb.c ****   }
1431:c/stm32f1xx_ll_usb.c ****   
1432:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
1433:c/stm32f1xx_ll_usb.c **** }
1434:c/stm32f1xx_ll_usb.c **** 
1435:c/stm32f1xx_ll_usb.c **** /**
1436:c/stm32f1xx_ll_usb.c ****   * @brief  Initiate Do Ping protocol
1437:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
1438:c/stm32f1xx_ll_usb.c ****   * @param  hc_num : Host Channel number
1439:c/stm32f1xx_ll_usb.c ****   *         This parameter can be a value from 1 to 15
1440:c/stm32f1xx_ll_usb.c ****   * @retval HAL state
1441:c/stm32f1xx_ll_usb.c ****   */
1442:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx , uint8_t ch_num)
1443:c/stm32f1xx_ll_usb.c **** {
1444:c/stm32f1xx_ll_usb.c ****   uint8_t  num_packets = 1;
1445:c/stm32f1xx_ll_usb.c ****   uint32_t tmpreg = 0;
1446:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
1447:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
1448:c/stm32f1xx_ll_usb.c **** 
1449:c/stm32f1xx_ll_usb.c ****   USBx_HC(ch_num)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |\
1450:c/stm32f1xx_ll_usb.c ****                                 USB_OTG_HCTSIZ_DOPING;
1451:c/stm32f1xx_ll_usb.c ****   
1452:c/stm32f1xx_ll_usb.c ****   /* Set host channel enable */
1453:c/stm32f1xx_ll_usb.c ****   tmpreg = USBx_HC(ch_num)->HCCHAR;
1454:c/stm32f1xx_ll_usb.c ****   tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
1455:c/stm32f1xx_ll_usb.c ****   tmpreg |= USB_OTG_HCCHAR_CHENA;
1456:c/stm32f1xx_ll_usb.c ****   USBx_HC(ch_num)->HCCHAR = tmpreg;
1457:c/stm32f1xx_ll_usb.c ****   
1458:c/stm32f1xx_ll_usb.c ****   return HAL_OK;  
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 27


1459:c/stm32f1xx_ll_usb.c **** }
1460:c/stm32f1xx_ll_usb.c **** 
1461:c/stm32f1xx_ll_usb.c **** /**
1462:c/stm32f1xx_ll_usb.c ****   * @brief  Stop Host Core
1463:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
1464:c/stm32f1xx_ll_usb.c ****   * @retval HAL state
1465:c/stm32f1xx_ll_usb.c ****   */
1466:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
1467:c/stm32f1xx_ll_usb.c **** {
1468:c/stm32f1xx_ll_usb.c ****   uint8_t index;
1469:c/stm32f1xx_ll_usb.c ****   uint32_t count = 0;
1470:c/stm32f1xx_ll_usb.c ****   uint32_t value = 0;
1471:c/stm32f1xx_ll_usb.c ****   
1472:c/stm32f1xx_ll_usb.c ****   USB_DisableGlobalInt(USBx);
1473:c/stm32f1xx_ll_usb.c ****   
1474:c/stm32f1xx_ll_usb.c ****     /* Flush FIFO */
1475:c/stm32f1xx_ll_usb.c ****   USB_FlushTxFifo(USBx, 0x10);
1476:c/stm32f1xx_ll_usb.c ****   USB_FlushRxFifo(USBx);
1477:c/stm32f1xx_ll_usb.c ****   
1478:c/stm32f1xx_ll_usb.c ****   /* Flush out any leftover queued requests. */
1479:c/stm32f1xx_ll_usb.c ****   for (index = 0; index <= 15; index++)
1480:c/stm32f1xx_ll_usb.c ****   {
1481:c/stm32f1xx_ll_usb.c ****     value = USBx_HC(index)->HCCHAR;
1482:c/stm32f1xx_ll_usb.c ****     value |=  USB_OTG_HCCHAR_CHDIS;
1483:c/stm32f1xx_ll_usb.c ****     value &= ~USB_OTG_HCCHAR_CHENA;
1484:c/stm32f1xx_ll_usb.c ****     value &= ~USB_OTG_HCCHAR_EPDIR;
1485:c/stm32f1xx_ll_usb.c ****     USBx_HC(index)->HCCHAR = value;
1486:c/stm32f1xx_ll_usb.c ****   }
1487:c/stm32f1xx_ll_usb.c ****   
1488:c/stm32f1xx_ll_usb.c ****   /* Halt all channels to put them into a known state. */
1489:c/stm32f1xx_ll_usb.c ****   for (index = 0; index <= 15; index++)
1490:c/stm32f1xx_ll_usb.c ****   {
1491:c/stm32f1xx_ll_usb.c ****     value = USBx_HC(index)->HCCHAR ;
1492:c/stm32f1xx_ll_usb.c ****     value |= USB_OTG_HCCHAR_CHDIS;
1493:c/stm32f1xx_ll_usb.c ****     value |= USB_OTG_HCCHAR_CHENA;
1494:c/stm32f1xx_ll_usb.c ****     value &= ~USB_OTG_HCCHAR_EPDIR;
1495:c/stm32f1xx_ll_usb.c ****     USBx_HC(index)->HCCHAR = value;
1496:c/stm32f1xx_ll_usb.c ****     
1497:c/stm32f1xx_ll_usb.c ****     do
1498:c/stm32f1xx_ll_usb.c ****     {
1499:c/stm32f1xx_ll_usb.c ****       if (++count > 1000)
1500:c/stm32f1xx_ll_usb.c ****       {
1501:c/stm32f1xx_ll_usb.c ****         break;
1502:c/stm32f1xx_ll_usb.c ****       }
1503:c/stm32f1xx_ll_usb.c ****     }
1504:c/stm32f1xx_ll_usb.c ****     while ((USBx_HC(index)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
1505:c/stm32f1xx_ll_usb.c ****   }
1506:c/stm32f1xx_ll_usb.c ****   
1507:c/stm32f1xx_ll_usb.c ****   /* Clear any pending Host interrupts */
1508:c/stm32f1xx_ll_usb.c ****   USBx_HOST->HAINT = 0xFFFFFFFF;
1509:c/stm32f1xx_ll_usb.c ****   USBx->GINTSTS = 0xFFFFFFFF;
1510:c/stm32f1xx_ll_usb.c ****   USB_EnableGlobalInt(USBx);
1511:c/stm32f1xx_ll_usb.c ****   
1512:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
1513:c/stm32f1xx_ll_usb.c **** }
1514:c/stm32f1xx_ll_usb.c **** 
1515:c/stm32f1xx_ll_usb.c **** /**
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 28


1516:c/stm32f1xx_ll_usb.c ****   * @brief  USB_ActivateRemoteWakeup : active remote wakeup signalling
1517:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
1518:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
1519:c/stm32f1xx_ll_usb.c ****   */
1520:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_ActivateRemoteWakeup(USB_OTG_GlobalTypeDef *USBx)
1521:c/stm32f1xx_ll_usb.c **** {
1522:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
1523:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
1524:c/stm32f1xx_ll_usb.c ****   if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
1525:c/stm32f1xx_ll_usb.c ****   {
1526:c/stm32f1xx_ll_usb.c ****     /* active Remote wakeup signalling */
1527:c/stm32f1xx_ll_usb.c ****     USBx_DEVICE->DCTL |= USB_OTG_DCTL_RWUSIG;
1528:c/stm32f1xx_ll_usb.c ****   }
1529:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
1530:c/stm32f1xx_ll_usb.c **** }
1531:c/stm32f1xx_ll_usb.c **** 
1532:c/stm32f1xx_ll_usb.c **** /**
1533:c/stm32f1xx_ll_usb.c ****   * @brief  USB_DeActivateRemoteWakeup : de-active remote wakeup signalling
1534:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
1535:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
1536:c/stm32f1xx_ll_usb.c ****   */
1537:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_DeActivateRemoteWakeup(USB_OTG_GlobalTypeDef *USBx)
1538:c/stm32f1xx_ll_usb.c **** {
1539:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
1540:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
1541:c/stm32f1xx_ll_usb.c ****   /* active Remote wakeup signalling */
1542:c/stm32f1xx_ll_usb.c ****    USBx_DEVICE->DCTL &= ~(USB_OTG_DCTL_RWUSIG);
1543:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
1544:c/stm32f1xx_ll_usb.c **** }
1545:c/stm32f1xx_ll_usb.c **** 
1546:c/stm32f1xx_ll_usb.c **** #endif /* USB_OTG_FS */
1547:c/stm32f1xx_ll_usb.c **** 
1548:c/stm32f1xx_ll_usb.c **** /*==============================================================================
1549:c/stm32f1xx_ll_usb.c ****     USB Device FS peripheral available on STM32F102xx and STM32F103xx devices 
1550:c/stm32f1xx_ll_usb.c **** ==============================================================================*/
1551:c/stm32f1xx_ll_usb.c **** #if defined (USB)
1552:c/stm32f1xx_ll_usb.c **** /**
1553:c/stm32f1xx_ll_usb.c ****   * @brief  Initializes the USB Core
1554:c/stm32f1xx_ll_usb.c ****   * @param  USBx: USB Instance
1555:c/stm32f1xx_ll_usb.c ****   * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
1556:c/stm32f1xx_ll_usb.c ****   *         the configuration information for the specified USBx peripheral.
1557:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
1558:c/stm32f1xx_ll_usb.c ****   */
1559:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
1560:c/stm32f1xx_ll_usb.c **** {
  26              		.loc 1 1560 0
  27              		.cfi_startproc
  28              		@ args = 36, pretend = 16, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
  32 0000 84B0     		sub	sp, sp, #16
  33              		.cfi_def_cfa_offset 16
  34              		.loc 1 1560 0
  35 0002 01A8     		add	r0, sp, #4
  36              	.LVL1:
  37 0004 80E80E00 		stm	r0, {r1, r2, r3}
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 29


1561:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
1562:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
1563:c/stm32f1xx_ll_usb.c ****   UNUSED(cfg);
1564:c/stm32f1xx_ll_usb.c ****   /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
1565:c/stm32f1xx_ll_usb.c ****               only by USB OTG FS peripheral.
1566:c/stm32f1xx_ll_usb.c ****             - This function is added to ensure compatibility across platforms.
1567:c/stm32f1xx_ll_usb.c ****    */
1568:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
1569:c/stm32f1xx_ll_usb.c **** }
  38              		.loc 1 1569 0
  39 0008 04B0     		add	sp, sp, #16
  40              		.cfi_def_cfa_offset 0
  41 000a 0020     		movs	r0, #0
  42 000c 7047     		bx	lr
  43              		.cfi_endproc
  44              	.LFE64:
  46              		.section	.text.USB_EnableGlobalInt,"ax",%progbits
  47              		.align	1
  48              		.global	USB_EnableGlobalInt
  49              		.syntax unified
  50              		.thumb
  51              		.thumb_func
  52              		.fpu softvfp
  54              	USB_EnableGlobalInt:
  55              	.LFB65:
1570:c/stm32f1xx_ll_usb.c **** 
1571:c/stm32f1xx_ll_usb.c **** /**
1572:c/stm32f1xx_ll_usb.c ****   * @brief  USB_EnableGlobalInt
1573:c/stm32f1xx_ll_usb.c ****   *         Enables the controller's Global Int in the AHB Config reg
1574:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
1575:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
1576:c/stm32f1xx_ll_usb.c ****   */
1577:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
1578:c/stm32f1xx_ll_usb.c **** {
  56              		.loc 1 1578 0
  57              		.cfi_startproc
  58              		@ args = 0, pretend = 0, frame = 0
  59              		@ frame_needed = 0, uses_anonymous_args = 0
  60              		@ link register save eliminated.
  61              	.LVL2:
1579:c/stm32f1xx_ll_usb.c ****   uint32_t winterruptmask = 0;
1580:c/stm32f1xx_ll_usb.c ****   
1581:c/stm32f1xx_ll_usb.c ****   /* Set winterruptmask variable */
1582:c/stm32f1xx_ll_usb.c ****   winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
1583:c/stm32f1xx_ll_usb.c ****      | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
1584:c/stm32f1xx_ll_usb.c ****   
1585:c/stm32f1xx_ll_usb.c ****   /* Set interrupt mask */
1586:c/stm32f1xx_ll_usb.c ****   USBx->CNTR |= winterruptmask;
  62              		.loc 1 1586 0
  63 0000 B0F84030 		ldrh	r3, [r0, #64]
  64 0004 9BB2     		uxth	r3, r3
  65 0006 43F43F43 		orr	r3, r3, #48896
  66 000a A0F84030 		strh	r3, [r0, #64]	@ movhi
1587:c/stm32f1xx_ll_usb.c ****   
1588:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
1589:c/stm32f1xx_ll_usb.c **** }
  67              		.loc 1 1589 0
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 30


  68 000e 0020     		movs	r0, #0
  69              	.LVL3:
  70 0010 7047     		bx	lr
  71              		.cfi_endproc
  72              	.LFE65:
  74              		.section	.text.USB_DisableGlobalInt,"ax",%progbits
  75              		.align	1
  76              		.global	USB_DisableGlobalInt
  77              		.syntax unified
  78              		.thumb
  79              		.thumb_func
  80              		.fpu softvfp
  82              	USB_DisableGlobalInt:
  83              	.LFB66:
1590:c/stm32f1xx_ll_usb.c **** 
1591:c/stm32f1xx_ll_usb.c **** /**
1592:c/stm32f1xx_ll_usb.c ****   * @brief  USB_DisableGlobalInt
1593:c/stm32f1xx_ll_usb.c ****   *         Disable the controller's Global Int in the AHB Config reg
1594:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
1595:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
1596:c/stm32f1xx_ll_usb.c **** */
1597:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
1598:c/stm32f1xx_ll_usb.c **** {
  84              		.loc 1 1598 0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              		@ link register save eliminated.
  89              	.LVL4:
1599:c/stm32f1xx_ll_usb.c ****   uint32_t winterruptmask = 0;
1600:c/stm32f1xx_ll_usb.c ****   
1601:c/stm32f1xx_ll_usb.c ****   /* Set winterruptmask variable */
1602:c/stm32f1xx_ll_usb.c ****   winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
1603:c/stm32f1xx_ll_usb.c ****     | USB_CNTR_ESOFM | USB_CNTR_RESETM;
1604:c/stm32f1xx_ll_usb.c ****   
1605:c/stm32f1xx_ll_usb.c ****   /* Clear interrupt mask */
1606:c/stm32f1xx_ll_usb.c ****   USBx->CNTR &= ~winterruptmask;
  90              		.loc 1 1606 0
  91 0000 B0F84030 		ldrh	r3, [r0, #64]
  92 0004 23F47453 		bic	r3, r3, #15616
  93 0008 5B04     		lsls	r3, r3, #17
  94 000a 5B0C     		lsrs	r3, r3, #17
  95 000c A0F84030 		strh	r3, [r0, #64]	@ movhi
1607:c/stm32f1xx_ll_usb.c ****   
1608:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
1609:c/stm32f1xx_ll_usb.c **** }
  96              		.loc 1 1609 0
  97 0010 0020     		movs	r0, #0
  98              	.LVL5:
  99 0012 7047     		bx	lr
 100              		.cfi_endproc
 101              	.LFE66:
 103              		.section	.text.USB_SetCurrentMode,"ax",%progbits
 104              		.align	1
 105              		.global	USB_SetCurrentMode
 106              		.syntax unified
 107              		.thumb
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 31


 108              		.thumb_func
 109              		.fpu softvfp
 111              	USB_SetCurrentMode:
 112              	.LFB67:
1610:c/stm32f1xx_ll_usb.c **** 
1611:c/stm32f1xx_ll_usb.c **** /**
1612:c/stm32f1xx_ll_usb.c ****   * @brief  USB_SetCurrentMode : Set functional mode
1613:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
1614:c/stm32f1xx_ll_usb.c ****   * @param  mode :  current core mode
1615:c/stm32f1xx_ll_usb.c ****   *          This parameter can be one of the these values:
1616:c/stm32f1xx_ll_usb.c ****   *            @arg USB_DEVICE_MODE: Peripheral mode mode
1617:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
1618:c/stm32f1xx_ll_usb.c ****   */
1619:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx , USB_ModeTypeDef mode)
1620:c/stm32f1xx_ll_usb.c **** {
 113              		.loc 1 1620 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              		@ link register save eliminated.
 118              	.LVL6:
1621:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
1622:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
1623:c/stm32f1xx_ll_usb.c ****   UNUSED(mode);
1624:c/stm32f1xx_ll_usb.c ****   /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
1625:c/stm32f1xx_ll_usb.c ****               only by USB OTG FS peripheral.
1626:c/stm32f1xx_ll_usb.c ****             - This function is added to ensure compatibility across platforms.
1627:c/stm32f1xx_ll_usb.c ****    */
1628:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
1629:c/stm32f1xx_ll_usb.c **** }
 119              		.loc 1 1629 0
 120 0000 0020     		movs	r0, #0
 121              	.LVL7:
 122 0002 7047     		bx	lr
 123              		.cfi_endproc
 124              	.LFE67:
 126              		.section	.text.USB_DevInit,"ax",%progbits
 127              		.align	1
 128              		.global	USB_DevInit
 129              		.syntax unified
 130              		.thumb
 131              		.thumb_func
 132              		.fpu softvfp
 134              	USB_DevInit:
 135              	.LFB68:
1630:c/stm32f1xx_ll_usb.c **** 
1631:c/stm32f1xx_ll_usb.c **** /**
1632:c/stm32f1xx_ll_usb.c ****   * @brief  USB_DevInit : Initializes the USB controller registers 
1633:c/stm32f1xx_ll_usb.c ****   *         for device mode
1634:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
1635:c/stm32f1xx_ll_usb.c ****   * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
1636:c/stm32f1xx_ll_usb.c ****   *         the configuration information for the specified USBx peripheral.
1637:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
1638:c/stm32f1xx_ll_usb.c ****   */
1639:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
1640:c/stm32f1xx_ll_usb.c **** {
 136              		.loc 1 1640 0
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 32


 137              		.cfi_startproc
 138              		@ args = 36, pretend = 16, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 140              	.LVL8:
 141 0000 84B0     		sub	sp, sp, #16
 142              		.cfi_def_cfa_offset 16
 143 0002 10B5     		push	{r4, lr}
 144              		.cfi_def_cfa_offset 24
 145              		.cfi_offset 4, -24
 146              		.cfi_offset 14, -20
 147              		.loc 1 1640 0
 148 0004 03AC     		add	r4, sp, #12
 149 0006 84E80E00 		stm	r4, {r1, r2, r3}
1641:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
1642:c/stm32f1xx_ll_usb.c ****   UNUSED(cfg);
1643:c/stm32f1xx_ll_usb.c **** 
1644:c/stm32f1xx_ll_usb.c ****   /* Init Device */
1645:c/stm32f1xx_ll_usb.c ****   /*CNTR_FRES = 1*/
1646:c/stm32f1xx_ll_usb.c ****   USBx->CNTR = USB_CNTR_FRES;
1647:c/stm32f1xx_ll_usb.c ****   
1648:c/stm32f1xx_ll_usb.c ****   /*CNTR_FRES = 0*/
1649:c/stm32f1xx_ll_usb.c ****   USBx->CNTR = 0;
1650:c/stm32f1xx_ll_usb.c ****  
1651:c/stm32f1xx_ll_usb.c ****   /*Clear pending interrupts*/
1652:c/stm32f1xx_ll_usb.c ****   USBx->ISTR = 0;
1653:c/stm32f1xx_ll_usb.c ****   
1654:c/stm32f1xx_ll_usb.c ****   /*Set Btable Address*/
1655:c/stm32f1xx_ll_usb.c ****   USBx->BTABLE = BTABLE_ADDRESS;
1656:c/stm32f1xx_ll_usb.c ****   
1657:c/stm32f1xx_ll_usb.c ****   /* Enable USB Device Interrupt mask */
1658:c/stm32f1xx_ll_usb.c ****   USB_EnableGlobalInt(USBx);
1659:c/stm32f1xx_ll_usb.c ****     
1660:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
1661:c/stm32f1xx_ll_usb.c **** }
 150              		.loc 1 1661 0
 151 000a BDE81040 		pop	{r4, lr}
 152              		.cfi_restore 14
 153              		.cfi_restore 4
 154              		.cfi_def_cfa_offset 16
1649:c/stm32f1xx_ll_usb.c ****  
 155              		.loc 1 1649 0
 156 000e 0022     		movs	r2, #0
1646:c/stm32f1xx_ll_usb.c ****   
 157              		.loc 1 1646 0
 158 0010 0123     		movs	r3, #1
 159 0012 A0F84030 		strh	r3, [r0, #64]	@ movhi
1649:c/stm32f1xx_ll_usb.c ****  
 160              		.loc 1 1649 0
 161 0016 A0F84020 		strh	r2, [r0, #64]	@ movhi
1652:c/stm32f1xx_ll_usb.c ****   
 162              		.loc 1 1652 0
 163 001a A0F84420 		strh	r2, [r0, #68]	@ movhi
1655:c/stm32f1xx_ll_usb.c ****   
 164              		.loc 1 1655 0
 165 001e A0F85020 		strh	r2, [r0, #80]	@ movhi
 166              	.LVL9:
 167              	.LBB4:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 33


 168              	.LBB5:
1586:c/stm32f1xx_ll_usb.c ****   
 169              		.loc 1 1586 0
 170 0022 B0F84030 		ldrh	r3, [r0, #64]
 171              	.LBE5:
 172              	.LBE4:
 173              		.loc 1 1661 0
 174 0026 04B0     		add	sp, sp, #16
 175              		.cfi_def_cfa_offset 0
 176              	.LBB7:
 177              	.LBB6:
1586:c/stm32f1xx_ll_usb.c ****   
 178              		.loc 1 1586 0
 179 0028 9BB2     		uxth	r3, r3
 180 002a 43F43F43 		orr	r3, r3, #48896
 181 002e A0F84030 		strh	r3, [r0, #64]	@ movhi
 182              	.LVL10:
 183              	.LBE6:
 184              	.LBE7:
 185              		.loc 1 1661 0
 186 0032 1046     		mov	r0, r2
 187              	.LVL11:
 188 0034 7047     		bx	lr
 189              		.cfi_endproc
 190              	.LFE68:
 192              		.section	.text.USB_FlushTxFifo,"ax",%progbits
 193              		.align	1
 194              		.global	USB_FlushTxFifo
 195              		.syntax unified
 196              		.thumb
 197              		.thumb_func
 198              		.fpu softvfp
 200              	USB_FlushTxFifo:
 201              	.LFB69:
1662:c/stm32f1xx_ll_usb.c **** 
1663:c/stm32f1xx_ll_usb.c **** /**
1664:c/stm32f1xx_ll_usb.c ****   * @brief  USB_FlushTxFifo : Flush a Tx FIFO
1665:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
1666:c/stm32f1xx_ll_usb.c ****   * @param  num : FIFO number
1667:c/stm32f1xx_ll_usb.c ****   *         This parameter can be a value from 1 to 15
1668:c/stm32f1xx_ll_usb.c ****             15 means Flush all Tx FIFOs
1669:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
1670:c/stm32f1xx_ll_usb.c ****   */
1671:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_FlushTxFifo (USB_TypeDef *USBx, uint32_t num)
1672:c/stm32f1xx_ll_usb.c **** {
 202              		.loc 1 1672 0
 203              		.cfi_startproc
 204              		@ args = 0, pretend = 0, frame = 0
 205              		@ frame_needed = 0, uses_anonymous_args = 0
 206              		@ link register save eliminated.
 207              	.LVL12:
1673:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
1674:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
1675:c/stm32f1xx_ll_usb.c ****   UNUSED(num);
1676:c/stm32f1xx_ll_usb.c ****   /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
1677:c/stm32f1xx_ll_usb.c ****               only by USB OTG FS peripheral.
1678:c/stm32f1xx_ll_usb.c ****             - This function is added to ensure compatibility across platforms.
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 34


1679:c/stm32f1xx_ll_usb.c ****    */
1680:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
1681:c/stm32f1xx_ll_usb.c **** }
 208              		.loc 1 1681 0
 209 0000 0020     		movs	r0, #0
 210              	.LVL13:
 211 0002 7047     		bx	lr
 212              		.cfi_endproc
 213              	.LFE69:
 215              		.section	.text.USB_FlushRxFifo,"ax",%progbits
 216              		.align	1
 217              		.global	USB_FlushRxFifo
 218              		.syntax unified
 219              		.thumb
 220              		.thumb_func
 221              		.fpu softvfp
 223              	USB_FlushRxFifo:
 224              	.LFB98:
 225              		.cfi_startproc
 226              		@ args = 0, pretend = 0, frame = 0
 227              		@ frame_needed = 0, uses_anonymous_args = 0
 228              		@ link register save eliminated.
 229 0000 0020     		movs	r0, #0
 230 0002 7047     		bx	lr
 231              		.cfi_endproc
 232              	.LFE98:
 234              		.section	.text.USB_ActivateEndpoint,"ax",%progbits
 235              		.align	1
 236              		.global	USB_ActivateEndpoint
 237              		.syntax unified
 238              		.thumb
 239              		.thumb_func
 240              		.fpu softvfp
 242              	USB_ActivateEndpoint:
 243              	.LFB71:
1682:c/stm32f1xx_ll_usb.c **** 
1683:c/stm32f1xx_ll_usb.c **** /**
1684:c/stm32f1xx_ll_usb.c ****   * @brief  USB_FlushRxFifo : Flush Rx FIFO
1685:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
1686:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
1687:c/stm32f1xx_ll_usb.c ****   */
1688:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef *USBx)
1689:c/stm32f1xx_ll_usb.c **** {
1690:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
1691:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
1692:c/stm32f1xx_ll_usb.c ****   /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
1693:c/stm32f1xx_ll_usb.c ****               only by USB OTG FS peripheral.
1694:c/stm32f1xx_ll_usb.c ****             - This function is added to ensure compatibility across platforms.
1695:c/stm32f1xx_ll_usb.c ****    */
1696:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
1697:c/stm32f1xx_ll_usb.c **** }
1698:c/stm32f1xx_ll_usb.c **** 
1699:c/stm32f1xx_ll_usb.c **** /**
1700:c/stm32f1xx_ll_usb.c ****   * @brief  Activate and configure an endpoint
1701:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
1702:c/stm32f1xx_ll_usb.c ****   * @param  ep: pointer to endpoint structure
1703:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 35


1704:c/stm32f1xx_ll_usb.c ****   */
1705:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
1706:c/stm32f1xx_ll_usb.c **** {
 244              		.loc 1 1706 0
 245              		.cfi_startproc
 246              		@ args = 0, pretend = 0, frame = 0
 247              		@ frame_needed = 0, uses_anonymous_args = 0
 248              	.LVL14:
 249              		.loc 1 1706 0
 250 0000 70B5     		push	{r4, r5, r6, lr}
 251              		.cfi_def_cfa_offset 16
 252              		.cfi_offset 4, -16
 253              		.cfi_offset 5, -12
 254              		.cfi_offset 6, -8
 255              		.cfi_offset 14, -4
1707:c/stm32f1xx_ll_usb.c ****   /* initialize Endpoint */
1708:c/stm32f1xx_ll_usb.c ****   switch (ep->type)
 256              		.loc 1 1708 0
 257 0002 CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 258 0004 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 259 0006 032B     		cmp	r3, #3
 260 0008 0FD8     		bhi	.L9
 261 000a DFE803F0 		tbb	[pc, r3]
 262              	.L11:
 263 000e 02       		.byte	(.L10-.L11)/2
 264 000f 64       		.byte	(.L12-.L11)/2
 265 0010 50       		.byte	(.L13-.L11)/2
 266 0011 59       		.byte	(.L14-.L11)/2
 267              		.p2align 1
 268              	.L10:
1709:c/stm32f1xx_ll_usb.c ****   {
1710:c/stm32f1xx_ll_usb.c ****   case EP_TYPE_CTRL:
1711:c/stm32f1xx_ll_usb.c ****     PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 269              		.loc 1 1711 0
 270 0012 30F82230 		ldrh	r3, [r0, r2, lsl #2]
 271 0016 23F4EC43 		bic	r3, r3, #30208
 272 001a 23F07003 		bic	r3, r3, #112
 273 001e 1B04     		lsls	r3, r3, #16
 274 0020 1B0C     		lsrs	r3, r3, #16
 275 0022 43F40073 		orr	r3, r3, #512
 276              	.L50:
1712:c/stm32f1xx_ll_usb.c ****     break;
1713:c/stm32f1xx_ll_usb.c ****   case EP_TYPE_BULK:
1714:c/stm32f1xx_ll_usb.c ****     PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
1715:c/stm32f1xx_ll_usb.c ****     break;
1716:c/stm32f1xx_ll_usb.c ****   case EP_TYPE_INTR:
1717:c/stm32f1xx_ll_usb.c ****     PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
1718:c/stm32f1xx_ll_usb.c ****     break;
1719:c/stm32f1xx_ll_usb.c ****   case EP_TYPE_ISOC:
1720:c/stm32f1xx_ll_usb.c ****     PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 277              		.loc 1 1720 0
 278 0026 20F82230 		strh	r3, [r0, r2, lsl #2]	@ movhi
 279              	.L9:
1721:c/stm32f1xx_ll_usb.c ****     break;
1722:c/stm32f1xx_ll_usb.c ****   default:
1723:c/stm32f1xx_ll_usb.c ****       break;
1724:c/stm32f1xx_ll_usb.c ****   } 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 36


1725:c/stm32f1xx_ll_usb.c ****   
1726:c/stm32f1xx_ll_usb.c ****   PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 280              		.loc 1 1726 0
 281 002a 40F60F73 		movw	r3, #3855
 282 002e 0C78     		ldrb	r4, [r1]	@ zero_extendqisi2
 283 0030 30F82420 		ldrh	r2, [r0, r4, lsl #2]
 284 0034 44F40045 		orr	r5, r4, #32768
 285 0038 45F08005 		orr	r5, r5, #128
 286 003c 1A40     		ands	r2, r2, r3
 287 003e 2A43     		orrs	r2, r2, r5
 288 0040 20F82420 		strh	r2, [r0, r4, lsl #2]	@ movhi
1727:c/stm32f1xx_ll_usb.c ****   
1728:c/stm32f1xx_ll_usb.c ****   if (ep->doublebuffer == 0) 
 289              		.loc 1 1728 0
 290 0044 8A7A     		ldrb	r2, [r1, #10]	@ zero_extendqisi2
 291 0046 0D78     		ldrb	r5, [r1]	@ zero_extendqisi2
 292 0048 002A     		cmp	r2, #0
 293 004a 40F09780 		bne	.L15
1729:c/stm32f1xx_ll_usb.c ****   {
1730:c/stm32f1xx_ll_usb.c ****     if (ep->is_in)
 294              		.loc 1 1730 0
 295 004e 4C78     		ldrb	r4, [r1, #1]	@ zero_extendqisi2
 296 0050 8A88     		ldrh	r2, [r1, #4]
 297 0052 002C     		cmp	r4, #0
 298 0054 4AD0     		beq	.L16
1731:c/stm32f1xx_ll_usb.c ****     {
1732:c/stm32f1xx_ll_usb.c ****       /*Set the endpoint Transmit buffer address */
1733:c/stm32f1xx_ll_usb.c ****       PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 299              		.loc 1 1733 0
 300 0056 B0F85040 		ldrh	r4, [r0, #80]
 301 005a 5208     		lsrs	r2, r2, #1
 302 005c A4B2     		uxth	r4, r4
 303 005e 04EBC504 		add	r4, r4, r5, lsl #3
 304 0062 00EB4404 		add	r4, r0, r4, lsl #1
 305 0066 5200     		lsls	r2, r2, #1
 306 0068 C4F80024 		str	r2, [r4, #1024]
1734:c/stm32f1xx_ll_usb.c ****       PCD_CLEAR_TX_DTOG(USBx, ep->num);
 307              		.loc 1 1734 0
 308 006c 0C78     		ldrb	r4, [r1]	@ zero_extendqisi2
 309 006e 30F82420 		ldrh	r2, [r0, r4, lsl #2]
 310 0072 5206     		lsls	r2, r2, #25
 311 0074 08D5     		bpl	.L17
 312              		.loc 1 1734 0 is_stmt 0 discriminator 1
 313 0076 30F82420 		ldrh	r2, [r0, r4, lsl #2]
 314 007a 1340     		ands	r3, r3, r2
 315 007c 43F40043 		orr	r3, r3, #32768
 316 0080 43F0C003 		orr	r3, r3, #192
 317 0084 20F82430 		strh	r3, [r0, r4, lsl #2]	@ movhi
 318              	.L17:
 319              	.LBB8:
1735:c/stm32f1xx_ll_usb.c ****       /* Configure NAK status for the Endpoint*/
1736:c/stm32f1xx_ll_usb.c ****       PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 320              		.loc 1 1736 0 is_stmt 1
 321 0088 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 322 008a 30F82230 		ldrh	r3, [r0, r2, lsl #2]
 323 008e 23F4E043 		bic	r3, r3, #28672
 324 0092 23F04003 		bic	r3, r3, #64
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 37


 325 0096 1B04     		lsls	r3, r3, #16
 326 0098 1B0C     		lsrs	r3, r3, #16
 327              	.LVL15:
 328 009a 83F02003 		eor	r3, r3, #32
 329              	.LVL16:
 330              	.L52:
 331              	.LBE8:
 332              	.LBB9:
1737:c/stm32f1xx_ll_usb.c ****     }
1738:c/stm32f1xx_ll_usb.c ****     else
1739:c/stm32f1xx_ll_usb.c ****     {
1740:c/stm32f1xx_ll_usb.c ****       /*Set the endpoint Receive buffer address */
1741:c/stm32f1xx_ll_usb.c ****       PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
1742:c/stm32f1xx_ll_usb.c ****       /*Set the endpoint Receive buffer counter*/
1743:c/stm32f1xx_ll_usb.c ****       PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
1744:c/stm32f1xx_ll_usb.c ****       PCD_CLEAR_RX_DTOG(USBx, ep->num);
1745:c/stm32f1xx_ll_usb.c ****       /* Configure VALID status for the Endpoint*/
1746:c/stm32f1xx_ll_usb.c ****       PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 333              		.loc 1 1746 0
 334 009e 43F40043 		orr	r3, r3, #32768
 335 00a2 43F08003 		orr	r3, r3, #128
 336 00a6 20F82230 		strh	r3, [r0, r2, lsl #2]	@ movhi
 337              	.LVL17:
 338              	.L18:
 339              	.LBE9:
1747:c/stm32f1xx_ll_usb.c ****     }
1748:c/stm32f1xx_ll_usb.c ****   }
1749:c/stm32f1xx_ll_usb.c ****   /*Double Buffer*/
1750:c/stm32f1xx_ll_usb.c ****   else
1751:c/stm32f1xx_ll_usb.c ****   {
1752:c/stm32f1xx_ll_usb.c ****     /*Set the endpoint as double buffered*/
1753:c/stm32f1xx_ll_usb.c ****     PCD_SET_EP_DBUF(USBx, ep->num);
1754:c/stm32f1xx_ll_usb.c ****     /*Set buffer address for double buffered mode*/
1755:c/stm32f1xx_ll_usb.c ****     PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
1756:c/stm32f1xx_ll_usb.c ****     
1757:c/stm32f1xx_ll_usb.c ****     if (ep->is_in==0)
1758:c/stm32f1xx_ll_usb.c ****     {
1759:c/stm32f1xx_ll_usb.c ****       /* Clear the data toggle bits for the endpoint IN/OUT*/
1760:c/stm32f1xx_ll_usb.c ****       PCD_CLEAR_RX_DTOG(USBx, ep->num);
1761:c/stm32f1xx_ll_usb.c ****       PCD_CLEAR_TX_DTOG(USBx, ep->num);
1762:c/stm32f1xx_ll_usb.c ****       
1763:c/stm32f1xx_ll_usb.c ****       /* Reset value of the data toggle bits for the endpoint out*/
1764:c/stm32f1xx_ll_usb.c ****       PCD_TX_DTOG(USBx, ep->num);
1765:c/stm32f1xx_ll_usb.c ****       
1766:c/stm32f1xx_ll_usb.c ****       PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
1767:c/stm32f1xx_ll_usb.c ****       PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
1768:c/stm32f1xx_ll_usb.c ****     }
1769:c/stm32f1xx_ll_usb.c ****     else
1770:c/stm32f1xx_ll_usb.c ****     {
1771:c/stm32f1xx_ll_usb.c ****       /* Clear the data toggle bits for the endpoint IN/OUT*/
1772:c/stm32f1xx_ll_usb.c ****       PCD_CLEAR_RX_DTOG(USBx, ep->num);
1773:c/stm32f1xx_ll_usb.c ****       PCD_CLEAR_TX_DTOG(USBx, ep->num);
1774:c/stm32f1xx_ll_usb.c ****       PCD_RX_DTOG(USBx, ep->num);
1775:c/stm32f1xx_ll_usb.c ****       /* Configure DISABLE status for the Endpoint*/
1776:c/stm32f1xx_ll_usb.c ****       PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
1777:c/stm32f1xx_ll_usb.c ****       PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
1778:c/stm32f1xx_ll_usb.c ****     }
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 38


1779:c/stm32f1xx_ll_usb.c ****   }
1780:c/stm32f1xx_ll_usb.c ****   
1781:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
1782:c/stm32f1xx_ll_usb.c **** }
 340              		.loc 1 1782 0
 341 00aa 0020     		movs	r0, #0
 342              	.LVL18:
 343 00ac 70BD     		pop	{r4, r5, r6, pc}
 344              	.LVL19:
 345              	.L13:
1714:c/stm32f1xx_ll_usb.c ****     break;
 346              		.loc 1 1714 0
 347 00ae 30F82230 		ldrh	r3, [r0, r2, lsl #2]
 348 00b2 23F4EC43 		bic	r3, r3, #30208
 349 00b6 23F07003 		bic	r3, r3, #112
 350 00ba 1B04     		lsls	r3, r3, #16
 351 00bc 1B0C     		lsrs	r3, r3, #16
 352 00be B2E7     		b	.L50
 353              	.L14:
1717:c/stm32f1xx_ll_usb.c ****     break;
 354              		.loc 1 1717 0
 355 00c0 30F82230 		ldrh	r3, [r0, r2, lsl #2]
 356 00c4 23F4EC43 		bic	r3, r3, #30208
 357 00c8 23F07003 		bic	r3, r3, #112
 358 00cc 1B04     		lsls	r3, r3, #16
 359 00ce 1B0C     		lsrs	r3, r3, #16
 360 00d0 43F4C063 		orr	r3, r3, #1536
 361 00d4 A7E7     		b	.L50
 362              	.L12:
1720:c/stm32f1xx_ll_usb.c ****     break;
 363              		.loc 1 1720 0
 364 00d6 30F82230 		ldrh	r3, [r0, r2, lsl #2]
 365 00da 23F4EC43 		bic	r3, r3, #30208
 366 00de 23F07003 		bic	r3, r3, #112
 367 00e2 1B04     		lsls	r3, r3, #16
 368 00e4 1B0C     		lsrs	r3, r3, #16
 369 00e6 43F48063 		orr	r3, r3, #1024
 370 00ea 9CE7     		b	.L50
 371              	.L16:
1741:c/stm32f1xx_ll_usb.c ****       /*Set the endpoint Receive buffer counter*/
 372              		.loc 1 1741 0
 373 00ec B0F85030 		ldrh	r3, [r0, #80]
 374 00f0 5208     		lsrs	r2, r2, #1
 375 00f2 9BB2     		uxth	r3, r3
 376 00f4 0433     		adds	r3, r3, #4
 377 00f6 03EBC503 		add	r3, r3, r5, lsl #3
 378 00fa 5200     		lsls	r2, r2, #1
 379 00fc 00F58064 		add	r4, r0, #1024
 380 0100 44F81320 		str	r2, [r4, r3, lsl #1]
 381              	.LBB10:
1743:c/stm32f1xx_ll_usb.c ****       PCD_CLEAR_RX_DTOG(USBx, ep->num);
 382              		.loc 1 1743 0
 383 0104 B0F85020 		ldrh	r2, [r0, #80]
 384              	.LBB11:
 385 0108 0D69     		ldr	r5, [r1, #16]
 386              	.LBE11:
 387 010a 92B2     		uxth	r2, r2
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 39


 388 010c 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 389 010e 0632     		adds	r2, r2, #6
 390              	.LBB12:
 391 0110 3E2D     		cmp	r5, #62
 392              	.LBE12:
 393 0112 02EBC302 		add	r2, r2, r3, lsl #3
 394              	.LVL20:
 395              	.LBB13:
 396 0116 29D9     		bls	.L19
1743:c/stm32f1xx_ll_usb.c ****       PCD_CLEAR_RX_DTOG(USBx, ep->num);
 397              		.loc 1 1743 0 is_stmt 0 discriminator 1
 398 0118 C5F34F16 		ubfx	r6, r5, #5, #16
 399              	.LVL21:
 400 011c EB06     		lsls	r3, r5, #27
 401 011e 04BF     		itt	eq
 402 0120 06F1FF33 		addeq	r3, r6, #-1
 403 0124 9EB2     		uxtheq	r6, r3
 404              	.LVL22:
 405 0126 6E4B     		ldr	r3, .L54
 406 0128 43EA8623 		orr	r3, r3, r6, lsl #10
 407              	.LVL23:
 408              	.L51:
1743:c/stm32f1xx_ll_usb.c ****       PCD_CLEAR_RX_DTOG(USBx, ep->num);
 409              		.loc 1 1743 0 discriminator 8
 410 012c 9BB2     		uxth	r3, r3
 411 012e 44F81230 		str	r3, [r4, r2, lsl #1]
 412              	.LBE13:
 413              	.LBE10:
1744:c/stm32f1xx_ll_usb.c ****       /* Configure VALID status for the Endpoint*/
 414              		.loc 1 1744 0 is_stmt 1 discriminator 8
 415 0132 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 416              	.LVL24:
 417 0134 30F82230 		ldrh	r3, [r0, r2, lsl #2]
 418 0138 5E04     		lsls	r6, r3, #17
 419 013a 0BD5     		bpl	.L23
1744:c/stm32f1xx_ll_usb.c ****       /* Configure VALID status for the Endpoint*/
 420              		.loc 1 1744 0 is_stmt 0 discriminator 1
 421 013c 30F82230 		ldrh	r3, [r0, r2, lsl #2]
 422 0140 23F0F003 		bic	r3, r3, #240
 423 0144 1B05     		lsls	r3, r3, #20
 424 0146 1B0D     		lsrs	r3, r3, #20
 425 0148 43F44043 		orr	r3, r3, #49152
 426 014c 43F08003 		orr	r3, r3, #128
 427 0150 20F82230 		strh	r3, [r0, r2, lsl #2]	@ movhi
 428              	.L23:
 429              	.LBB15:
1746:c/stm32f1xx_ll_usb.c ****     }
 430              		.loc 1 1746 0 is_stmt 1
 431 0154 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 432 0156 30F82230 		ldrh	r3, [r0, r2, lsl #2]
 433 015a 23F48043 		bic	r3, r3, #16384
 434 015e 23F07003 		bic	r3, r3, #112
 435 0162 1B04     		lsls	r3, r3, #16
 436 0164 1B0C     		lsrs	r3, r3, #16
 437              	.LVL25:
 438 0166 83F44053 		eor	r3, r3, #12288
 439              	.LVL26:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 40


 440 016a 98E7     		b	.L52
 441              	.LVL27:
 442              	.L19:
 443              	.LBE15:
 444              	.LBB16:
 445              	.LBB14:
1743:c/stm32f1xx_ll_usb.c ****       PCD_CLEAR_RX_DTOG(USBx, ep->num);
 446              		.loc 1 1743 0 discriminator 2
 447 016c C5F34F03 		ubfx	r3, r5, #1, #16
 448              	.LVL28:
 449 0170 ED07     		lsls	r5, r5, #31
 450 0172 44BF     		itt	mi
 451 0174 0133     		addmi	r3, r3, #1
 452              	.LVL29:
 453 0176 9BB2     		uxthmi	r3, r3
 454              	.LVL30:
 455 0178 9B02     		lsls	r3, r3, #10
 456              	.LVL31:
 457 017a D7E7     		b	.L51
 458              	.LVL32:
 459              	.L15:
 460              	.LBE14:
 461              	.LBE16:
1753:c/stm32f1xx_ll_usb.c ****     /*Set buffer address for double buffered mode*/
 462              		.loc 1 1753 0
 463 017c 30F82520 		ldrh	r2, [r0, r5, lsl #2]
 464 0180 22F4F872 		bic	r2, r2, #496
 465 0184 1205     		lsls	r2, r2, #20
 466 0186 120D     		lsrs	r2, r2, #20
 467 0188 42F40142 		orr	r2, r2, #33024
 468 018c 42F08002 		orr	r2, r2, #128
 469 0190 20F82520 		strh	r2, [r0, r5, lsl #2]	@ movhi
1755:c/stm32f1xx_ll_usb.c ****     
 470              		.loc 1 1755 0
 471 0194 B0F85020 		ldrh	r2, [r0, #80]
 472 0198 0C78     		ldrb	r4, [r1]	@ zero_extendqisi2
 473 019a 92B2     		uxth	r2, r2
 474 019c 02EBC402 		add	r2, r2, r4, lsl #3
 475 01a0 CC88     		ldrh	r4, [r1, #6]
 476 01a2 00F58065 		add	r5, r0, #1024
 477 01a6 6408     		lsrs	r4, r4, #1
 478 01a8 6400     		lsls	r4, r4, #1
 479 01aa 45F81240 		str	r4, [r5, r2, lsl #1]
 480 01ae B0F85020 		ldrh	r2, [r0, #80]
 481 01b2 0C78     		ldrb	r4, [r1]	@ zero_extendqisi2
 482 01b4 92B2     		uxth	r2, r2
 483 01b6 0432     		adds	r2, r2, #4
 484 01b8 02EBC402 		add	r2, r2, r4, lsl #3
 485 01bc 0C89     		ldrh	r4, [r1, #8]
 486 01be 6408     		lsrs	r4, r4, #1
 487 01c0 6400     		lsls	r4, r4, #1
 488 01c2 45F81240 		str	r4, [r5, r2, lsl #1]
1757:c/stm32f1xx_ll_usb.c ****     {
 489              		.loc 1 1757 0
 490 01c6 4A78     		ldrb	r2, [r1, #1]	@ zero_extendqisi2
 491 01c8 0C78     		ldrb	r4, [r1]	@ zero_extendqisi2
 492 01ca 002A     		cmp	r2, #0
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 41


 493 01cc 47D1     		bne	.L24
1760:c/stm32f1xx_ll_usb.c ****       PCD_CLEAR_TX_DTOG(USBx, ep->num);
 494              		.loc 1 1760 0
 495 01ce 30F82420 		ldrh	r2, [r0, r4, lsl #2]
 496 01d2 5504     		lsls	r5, r2, #17
 497 01d4 08D5     		bpl	.L25
1760:c/stm32f1xx_ll_usb.c ****       PCD_CLEAR_TX_DTOG(USBx, ep->num);
 498              		.loc 1 1760 0 is_stmt 0 discriminator 1
 499 01d6 30F82420 		ldrh	r2, [r0, r4, lsl #2]
 500 01da 1340     		ands	r3, r3, r2
 501 01dc 43F44043 		orr	r3, r3, #49152
 502 01e0 43F08003 		orr	r3, r3, #128
 503 01e4 20F82430 		strh	r3, [r0, r4, lsl #2]	@ movhi
 504              	.L25:
1761:c/stm32f1xx_ll_usb.c ****       
 505              		.loc 1 1761 0 is_stmt 1
 506 01e8 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 507 01ea 30F82230 		ldrh	r3, [r0, r2, lsl #2]
 508 01ee 5C06     		lsls	r4, r3, #25
 509 01f0 0BD5     		bpl	.L26
1761:c/stm32f1xx_ll_usb.c ****       
 510              		.loc 1 1761 0 is_stmt 0 discriminator 1
 511 01f2 30F82230 		ldrh	r3, [r0, r2, lsl #2]
 512 01f6 23F0F003 		bic	r3, r3, #240
 513 01fa 1B05     		lsls	r3, r3, #20
 514 01fc 1B0D     		lsrs	r3, r3, #20
 515 01fe 43F40043 		orr	r3, r3, #32768
 516 0202 43F0C003 		orr	r3, r3, #192
 517 0206 20F82230 		strh	r3, [r0, r2, lsl #2]	@ movhi
 518              	.L26:
1764:c/stm32f1xx_ll_usb.c ****       
 519              		.loc 1 1764 0 is_stmt 1
 520 020a 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 521 020c 30F82230 		ldrh	r3, [r0, r2, lsl #2]
 522 0210 23F0F003 		bic	r3, r3, #240
 523 0214 1B05     		lsls	r3, r3, #20
 524 0216 1B0D     		lsrs	r3, r3, #20
 525 0218 43F40043 		orr	r3, r3, #32768
 526 021c 43F0C003 		orr	r3, r3, #192
 527 0220 20F82230 		strh	r3, [r0, r2, lsl #2]	@ movhi
 528              	.LBB17:
1766:c/stm32f1xx_ll_usb.c ****       PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 529              		.loc 1 1766 0
 530 0224 48F28002 		movw	r2, #32896
 531 0228 0C78     		ldrb	r4, [r1]	@ zero_extendqisi2
 532 022a 30F82430 		ldrh	r3, [r0, r4, lsl #2]
 533 022e 23F48043 		bic	r3, r3, #16384
 534 0232 23F07003 		bic	r3, r3, #112
 535 0236 1B04     		lsls	r3, r3, #16
 536 0238 1B0C     		lsrs	r3, r3, #16
 537              	.LVL33:
 538 023a 83F44053 		eor	r3, r3, #12288
 539              	.LVL34:
 540 023e 1343     		orrs	r3, r3, r2
 541              	.LVL35:
 542 0240 20F82430 		strh	r3, [r0, r4, lsl #2]	@ movhi
 543              	.LBE17:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 42


 544              	.LBB18:
1767:c/stm32f1xx_ll_usb.c ****     }
 545              		.loc 1 1767 0
 546 0244 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 547              	.LVL36:
 548 0246 30F82130 		ldrh	r3, [r0, r1, lsl #2]
 549              	.LVL37:
 550 024a 23F4E043 		bic	r3, r3, #28672
 551              	.LVL38:
 552 024e 23F04003 		bic	r3, r3, #64
 553              	.L53:
 554              	.LBE18:
 555              	.LBB19:
1777:c/stm32f1xx_ll_usb.c ****     }
 556              		.loc 1 1777 0
 557 0252 1B04     		lsls	r3, r3, #16
 558 0254 1B0C     		lsrs	r3, r3, #16
 559 0256 1343     		orrs	r3, r3, r2
 560 0258 20F82130 		strh	r3, [r0, r1, lsl #2]	@ movhi
 561 025c 25E7     		b	.L18
 562              	.LVL39:
 563              	.L24:
 564              	.LBE19:
1772:c/stm32f1xx_ll_usb.c ****       PCD_CLEAR_TX_DTOG(USBx, ep->num);
 565              		.loc 1 1772 0
 566 025e 30F82420 		ldrh	r2, [r0, r4, lsl #2]
 567 0262 5204     		lsls	r2, r2, #17
 568 0264 08D5     		bpl	.L27
1772:c/stm32f1xx_ll_usb.c ****       PCD_CLEAR_TX_DTOG(USBx, ep->num);
 569              		.loc 1 1772 0 is_stmt 0 discriminator 1
 570 0266 30F82420 		ldrh	r2, [r0, r4, lsl #2]
 571 026a 1340     		ands	r3, r3, r2
 572 026c 43F44043 		orr	r3, r3, #49152
 573 0270 43F08003 		orr	r3, r3, #128
 574 0274 20F82430 		strh	r3, [r0, r4, lsl #2]	@ movhi
 575              	.L27:
1773:c/stm32f1xx_ll_usb.c ****       PCD_RX_DTOG(USBx, ep->num);
 576              		.loc 1 1773 0 is_stmt 1
 577 0278 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 578 027a 30F82230 		ldrh	r3, [r0, r2, lsl #2]
 579 027e 5B06     		lsls	r3, r3, #25
 580 0280 0BD5     		bpl	.L28
1773:c/stm32f1xx_ll_usb.c ****       PCD_RX_DTOG(USBx, ep->num);
 581              		.loc 1 1773 0 is_stmt 0 discriminator 1
 582 0282 30F82230 		ldrh	r3, [r0, r2, lsl #2]
 583 0286 23F0F003 		bic	r3, r3, #240
 584 028a 1B05     		lsls	r3, r3, #20
 585 028c 1B0D     		lsrs	r3, r3, #20
 586 028e 43F40043 		orr	r3, r3, #32768
 587 0292 43F0C003 		orr	r3, r3, #192
 588 0296 20F82230 		strh	r3, [r0, r2, lsl #2]	@ movhi
 589              	.L28:
1774:c/stm32f1xx_ll_usb.c ****       /* Configure DISABLE status for the Endpoint*/
 590              		.loc 1 1774 0 is_stmt 1
 591 029a 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 592 029c 30F82230 		ldrh	r3, [r0, r2, lsl #2]
 593 02a0 23F0F003 		bic	r3, r3, #240
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 43


 594 02a4 1B05     		lsls	r3, r3, #20
 595 02a6 1B0D     		lsrs	r3, r3, #20
 596 02a8 43F44043 		orr	r3, r3, #49152
 597 02ac 43F08003 		orr	r3, r3, #128
 598 02b0 20F82230 		strh	r3, [r0, r2, lsl #2]	@ movhi
 599              	.LBB20:
1776:c/stm32f1xx_ll_usb.c ****       PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 600              		.loc 1 1776 0
 601 02b4 48F28002 		movw	r2, #32896
 602 02b8 0C78     		ldrb	r4, [r1]	@ zero_extendqisi2
 603 02ba 30F82430 		ldrh	r3, [r0, r4, lsl #2]
 604              	.LVL40:
 605 02be 23F4E043 		bic	r3, r3, #28672
 606              	.LVL41:
 607 02c2 23F04003 		bic	r3, r3, #64
 608 02c6 1B04     		lsls	r3, r3, #16
 609 02c8 1B0C     		lsrs	r3, r3, #16
 610 02ca 1343     		orrs	r3, r3, r2
 611 02cc 20F82430 		strh	r3, [r0, r4, lsl #2]	@ movhi
 612              	.LBE20:
 613              	.LBB21:
1777:c/stm32f1xx_ll_usb.c ****     }
 614              		.loc 1 1777 0
 615 02d0 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 616              	.LVL42:
 617 02d2 30F82130 		ldrh	r3, [r0, r1, lsl #2]
 618              	.LVL43:
 619 02d6 23F48043 		bic	r3, r3, #16384
 620              	.LVL44:
 621 02da 23F07003 		bic	r3, r3, #112
 622 02de B8E7     		b	.L53
 623              	.L55:
 624              		.align	2
 625              	.L54:
 626 02e0 0080FFFF 		.word	-32768
 627              	.LBE21:
 628              		.cfi_endproc
 629              	.LFE71:
 631              		.section	.text.USB_DeactivateEndpoint,"ax",%progbits
 632              		.align	1
 633              		.global	USB_DeactivateEndpoint
 634              		.syntax unified
 635              		.thumb
 636              		.thumb_func
 637              		.fpu softvfp
 639              	USB_DeactivateEndpoint:
 640              	.LFB72:
1783:c/stm32f1xx_ll_usb.c **** 
1784:c/stm32f1xx_ll_usb.c **** /**
1785:c/stm32f1xx_ll_usb.c ****   * @brief  De-activate and de-initialize an endpoint
1786:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
1787:c/stm32f1xx_ll_usb.c ****   * @param  ep: pointer to endpoint structure
1788:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
1789:c/stm32f1xx_ll_usb.c ****   */
1790:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
1791:c/stm32f1xx_ll_usb.c **** {
 641              		.loc 1 1791 0
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 44


 642              		.cfi_startproc
 643              		@ args = 0, pretend = 0, frame = 0
 644              		@ frame_needed = 0, uses_anonymous_args = 0
 645              	.LVL45:
 646 0000 10B5     		push	{r4, lr}
 647              		.cfi_def_cfa_offset 8
 648              		.cfi_offset 4, -8
 649              		.cfi_offset 14, -4
1792:c/stm32f1xx_ll_usb.c ****   if (ep->doublebuffer == 0) 
 650              		.loc 1 1792 0
 651 0002 8C7A     		ldrb	r4, [r1, #10]	@ zero_extendqisi2
 652 0004 4A78     		ldrb	r2, [r1, #1]	@ zero_extendqisi2
 653 0006 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 654 0008 CCBB     		cbnz	r4, .L57
1793:c/stm32f1xx_ll_usb.c ****   {
1794:c/stm32f1xx_ll_usb.c ****     if (ep->is_in)
 655              		.loc 1 1794 0
 656 000a 02B3     		cbz	r2, .L58
1795:c/stm32f1xx_ll_usb.c ****     {
1796:c/stm32f1xx_ll_usb.c ****       PCD_CLEAR_TX_DTOG(USBx, ep->num);
 657              		.loc 1 1796 0
 658 000c 30F82320 		ldrh	r2, [r0, r3, lsl #2]
 659 0010 5206     		lsls	r2, r2, #25
 660 0012 0BD5     		bpl	.L59
 661              		.loc 1 1796 0 is_stmt 0 discriminator 1
 662 0014 30F82320 		ldrh	r2, [r0, r3, lsl #2]
 663 0018 22F0F002 		bic	r2, r2, #240
 664 001c 1205     		lsls	r2, r2, #20
 665 001e 120D     		lsrs	r2, r2, #20
 666 0020 42F40042 		orr	r2, r2, #32768
 667 0024 42F0C002 		orr	r2, r2, #192
 668 0028 20F82320 		strh	r2, [r0, r3, lsl #2]	@ movhi
 669              	.L59:
 670              	.LBB22:
1797:c/stm32f1xx_ll_usb.c ****       /* Configure DISABLE status for the Endpoint*/
1798:c/stm32f1xx_ll_usb.c ****       PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 671              		.loc 1 1798 0 is_stmt 1
 672 002c 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 673 002e 30F82230 		ldrh	r3, [r0, r2, lsl #2]
 674              	.LVL46:
 675 0032 23F4E043 		bic	r3, r3, #28672
 676              	.LVL47:
 677 0036 23F04003 		bic	r3, r3, #64
 678              	.L85:
 679              	.LBE22:
 680              	.LBB23:
1799:c/stm32f1xx_ll_usb.c ****     }
1800:c/stm32f1xx_ll_usb.c ****     else
1801:c/stm32f1xx_ll_usb.c ****     {
1802:c/stm32f1xx_ll_usb.c ****       PCD_CLEAR_RX_DTOG(USBx, ep->num);
1803:c/stm32f1xx_ll_usb.c ****       /* Configure DISABLE status for the Endpoint*/
1804:c/stm32f1xx_ll_usb.c ****       PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 681              		.loc 1 1804 0
 682 003a 1B04     		lsls	r3, r3, #16
 683 003c 1B0C     		lsrs	r3, r3, #16
 684 003e 43F40043 		orr	r3, r3, #32768
 685 0042 43F08003 		orr	r3, r3, #128
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 45


 686 0046 20F82230 		strh	r3, [r0, r2, lsl #2]	@ movhi
 687              	.LVL48:
 688              	.L60:
 689              	.LBE23:
1805:c/stm32f1xx_ll_usb.c ****     }
1806:c/stm32f1xx_ll_usb.c ****   }
1807:c/stm32f1xx_ll_usb.c ****   /*Double Buffer*/
1808:c/stm32f1xx_ll_usb.c ****   else
1809:c/stm32f1xx_ll_usb.c ****   { 
1810:c/stm32f1xx_ll_usb.c ****     if (ep->is_in==0)
1811:c/stm32f1xx_ll_usb.c ****     {
1812:c/stm32f1xx_ll_usb.c ****       /* Clear the data toggle bits for the endpoint IN/OUT*/
1813:c/stm32f1xx_ll_usb.c ****       PCD_CLEAR_RX_DTOG(USBx, ep->num);
1814:c/stm32f1xx_ll_usb.c ****       PCD_CLEAR_TX_DTOG(USBx, ep->num);
1815:c/stm32f1xx_ll_usb.c ****       
1816:c/stm32f1xx_ll_usb.c ****       /* Reset value of the data toggle bits for the endpoint out*/
1817:c/stm32f1xx_ll_usb.c ****       PCD_TX_DTOG(USBx, ep->num);
1818:c/stm32f1xx_ll_usb.c ****       
1819:c/stm32f1xx_ll_usb.c ****       PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
1820:c/stm32f1xx_ll_usb.c ****       PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
1821:c/stm32f1xx_ll_usb.c ****     }
1822:c/stm32f1xx_ll_usb.c ****     else
1823:c/stm32f1xx_ll_usb.c ****     {
1824:c/stm32f1xx_ll_usb.c ****       /* Clear the data toggle bits for the endpoint IN/OUT*/
1825:c/stm32f1xx_ll_usb.c ****       PCD_CLEAR_RX_DTOG(USBx, ep->num);
1826:c/stm32f1xx_ll_usb.c ****       PCD_CLEAR_TX_DTOG(USBx, ep->num);
1827:c/stm32f1xx_ll_usb.c ****       PCD_RX_DTOG(USBx, ep->num);
1828:c/stm32f1xx_ll_usb.c ****       /* Configure DISABLE status for the Endpoint*/
1829:c/stm32f1xx_ll_usb.c ****       PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
1830:c/stm32f1xx_ll_usb.c ****       PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
1831:c/stm32f1xx_ll_usb.c ****     }
1832:c/stm32f1xx_ll_usb.c ****   }
1833:c/stm32f1xx_ll_usb.c ****   
1834:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
1835:c/stm32f1xx_ll_usb.c **** }
 690              		.loc 1 1835 0
 691 004a 0020     		movs	r0, #0
 692              	.LVL49:
 693 004c 10BD     		pop	{r4, pc}
 694              	.LVL50:
 695              	.L58:
1802:c/stm32f1xx_ll_usb.c ****       /* Configure DISABLE status for the Endpoint*/
 696              		.loc 1 1802 0
 697 004e 30F82320 		ldrh	r2, [r0, r3, lsl #2]
 698 0052 5404     		lsls	r4, r2, #17
 699 0054 0BD5     		bpl	.L61
1802:c/stm32f1xx_ll_usb.c ****       /* Configure DISABLE status for the Endpoint*/
 700              		.loc 1 1802 0 is_stmt 0 discriminator 1
 701 0056 30F82320 		ldrh	r2, [r0, r3, lsl #2]
 702 005a 22F0F002 		bic	r2, r2, #240
 703 005e 1205     		lsls	r2, r2, #20
 704 0060 120D     		lsrs	r2, r2, #20
 705 0062 42F44042 		orr	r2, r2, #49152
 706 0066 42F08002 		orr	r2, r2, #128
 707 006a 20F82320 		strh	r2, [r0, r3, lsl #2]	@ movhi
 708              	.L61:
 709              	.LBB24:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 46


1804:c/stm32f1xx_ll_usb.c ****     }
 710              		.loc 1 1804 0 is_stmt 1
 711 006e 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 712 0070 30F82230 		ldrh	r3, [r0, r2, lsl #2]
 713              	.LVL51:
 714 0074 23F48043 		bic	r3, r3, #16384
 715              	.LVL52:
 716 0078 23F07003 		bic	r3, r3, #112
 717 007c DDE7     		b	.L85
 718              	.L57:
 719              	.LBE24:
1810:c/stm32f1xx_ll_usb.c ****     {
 720              		.loc 1 1810 0
 721 007e 002A     		cmp	r2, #0
 722 0080 48D1     		bne	.L62
1813:c/stm32f1xx_ll_usb.c ****       PCD_CLEAR_TX_DTOG(USBx, ep->num);
 723              		.loc 1 1813 0
 724 0082 30F82320 		ldrh	r2, [r0, r3, lsl #2]
 725 0086 5204     		lsls	r2, r2, #17
 726 0088 0BD5     		bpl	.L63
1813:c/stm32f1xx_ll_usb.c ****       PCD_CLEAR_TX_DTOG(USBx, ep->num);
 727              		.loc 1 1813 0 is_stmt 0 discriminator 1
 728 008a 30F82320 		ldrh	r2, [r0, r3, lsl #2]
 729 008e 22F0F002 		bic	r2, r2, #240
 730 0092 1205     		lsls	r2, r2, #20
 731 0094 120D     		lsrs	r2, r2, #20
 732 0096 42F44042 		orr	r2, r2, #49152
 733 009a 42F08002 		orr	r2, r2, #128
 734 009e 20F82320 		strh	r2, [r0, r3, lsl #2]	@ movhi
 735              	.L63:
1814:c/stm32f1xx_ll_usb.c ****       
 736              		.loc 1 1814 0 is_stmt 1
 737 00a2 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 738 00a4 30F82230 		ldrh	r3, [r0, r2, lsl #2]
 739 00a8 5C06     		lsls	r4, r3, #25
 740 00aa 0BD5     		bpl	.L64
1814:c/stm32f1xx_ll_usb.c ****       
 741              		.loc 1 1814 0 is_stmt 0 discriminator 1
 742 00ac 30F82230 		ldrh	r3, [r0, r2, lsl #2]
 743 00b0 23F0F003 		bic	r3, r3, #240
 744 00b4 1B05     		lsls	r3, r3, #20
 745 00b6 1B0D     		lsrs	r3, r3, #20
 746 00b8 43F40043 		orr	r3, r3, #32768
 747 00bc 43F0C003 		orr	r3, r3, #192
 748 00c0 20F82230 		strh	r3, [r0, r2, lsl #2]	@ movhi
 749              	.L64:
1817:c/stm32f1xx_ll_usb.c ****       
 750              		.loc 1 1817 0 is_stmt 1
 751 00c4 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 752 00c6 30F82230 		ldrh	r3, [r0, r2, lsl #2]
 753 00ca 23F0F003 		bic	r3, r3, #240
 754 00ce 1B05     		lsls	r3, r3, #20
 755 00d0 1B0D     		lsrs	r3, r3, #20
 756 00d2 43F40043 		orr	r3, r3, #32768
 757 00d6 43F0C003 		orr	r3, r3, #192
 758 00da 20F82230 		strh	r3, [r0, r2, lsl #2]	@ movhi
 759              	.LBB25:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 47


1819:c/stm32f1xx_ll_usb.c ****       PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 760              		.loc 1 1819 0
 761 00de 48F28002 		movw	r2, #32896
 762 00e2 0C78     		ldrb	r4, [r1]	@ zero_extendqisi2
 763 00e4 30F82430 		ldrh	r3, [r0, r4, lsl #2]
 764              	.LVL53:
 765 00e8 23F48043 		bic	r3, r3, #16384
 766              	.LVL54:
 767 00ec 23F07003 		bic	r3, r3, #112
 768 00f0 1B04     		lsls	r3, r3, #16
 769 00f2 1B0C     		lsrs	r3, r3, #16
 770 00f4 1343     		orrs	r3, r3, r2
 771 00f6 20F82430 		strh	r3, [r0, r4, lsl #2]	@ movhi
 772              	.LBE25:
 773              	.LBB26:
1820:c/stm32f1xx_ll_usb.c ****     }
 774              		.loc 1 1820 0
 775 00fa 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 776              	.LVL55:
 777 00fc 30F82130 		ldrh	r3, [r0, r1, lsl #2]
 778              	.LVL56:
 779 0100 23F4E043 		bic	r3, r3, #28672
 780              	.LVL57:
 781 0104 23F04003 		bic	r3, r3, #64
 782              	.L86:
 783              	.LBE26:
 784              	.LBB27:
1830:c/stm32f1xx_ll_usb.c ****     }
 785              		.loc 1 1830 0
 786 0108 1B04     		lsls	r3, r3, #16
 787 010a 1B0C     		lsrs	r3, r3, #16
 788 010c 1343     		orrs	r3, r3, r2
 789 010e 20F82130 		strh	r3, [r0, r1, lsl #2]	@ movhi
 790 0112 9AE7     		b	.L60
 791              	.LVL58:
 792              	.L62:
 793              	.LBE27:
1825:c/stm32f1xx_ll_usb.c ****       PCD_CLEAR_TX_DTOG(USBx, ep->num);
 794              		.loc 1 1825 0
 795 0114 30F82320 		ldrh	r2, [r0, r3, lsl #2]
 796 0118 5204     		lsls	r2, r2, #17
 797 011a 0BD5     		bpl	.L65
1825:c/stm32f1xx_ll_usb.c ****       PCD_CLEAR_TX_DTOG(USBx, ep->num);
 798              		.loc 1 1825 0 is_stmt 0 discriminator 1
 799 011c 30F82320 		ldrh	r2, [r0, r3, lsl #2]
 800 0120 22F0F002 		bic	r2, r2, #240
 801 0124 1205     		lsls	r2, r2, #20
 802 0126 120D     		lsrs	r2, r2, #20
 803 0128 42F44042 		orr	r2, r2, #49152
 804 012c 42F08002 		orr	r2, r2, #128
 805 0130 20F82320 		strh	r2, [r0, r3, lsl #2]	@ movhi
 806              	.L65:
1826:c/stm32f1xx_ll_usb.c ****       PCD_RX_DTOG(USBx, ep->num);
 807              		.loc 1 1826 0 is_stmt 1
 808 0134 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 809 0136 30F82230 		ldrh	r3, [r0, r2, lsl #2]
 810 013a 5B06     		lsls	r3, r3, #25
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 48


 811 013c 0BD5     		bpl	.L66
1826:c/stm32f1xx_ll_usb.c ****       PCD_RX_DTOG(USBx, ep->num);
 812              		.loc 1 1826 0 is_stmt 0 discriminator 1
 813 013e 30F82230 		ldrh	r3, [r0, r2, lsl #2]
 814 0142 23F0F003 		bic	r3, r3, #240
 815 0146 1B05     		lsls	r3, r3, #20
 816 0148 1B0D     		lsrs	r3, r3, #20
 817 014a 43F40043 		orr	r3, r3, #32768
 818 014e 43F0C003 		orr	r3, r3, #192
 819 0152 20F82230 		strh	r3, [r0, r2, lsl #2]	@ movhi
 820              	.L66:
1827:c/stm32f1xx_ll_usb.c ****       /* Configure DISABLE status for the Endpoint*/
 821              		.loc 1 1827 0 is_stmt 1
 822 0156 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 823 0158 30F82230 		ldrh	r3, [r0, r2, lsl #2]
 824 015c 23F0F003 		bic	r3, r3, #240
 825 0160 1B05     		lsls	r3, r3, #20
 826 0162 1B0D     		lsrs	r3, r3, #20
 827 0164 43F44043 		orr	r3, r3, #49152
 828 0168 43F08003 		orr	r3, r3, #128
 829 016c 20F82230 		strh	r3, [r0, r2, lsl #2]	@ movhi
 830              	.LBB28:
1829:c/stm32f1xx_ll_usb.c ****       PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 831              		.loc 1 1829 0
 832 0170 48F28002 		movw	r2, #32896
 833 0174 0C78     		ldrb	r4, [r1]	@ zero_extendqisi2
 834 0176 30F82430 		ldrh	r3, [r0, r4, lsl #2]
 835              	.LVL59:
 836 017a 23F4E043 		bic	r3, r3, #28672
 837              	.LVL60:
 838 017e 23F04003 		bic	r3, r3, #64
 839 0182 1B04     		lsls	r3, r3, #16
 840 0184 1B0C     		lsrs	r3, r3, #16
 841 0186 1343     		orrs	r3, r3, r2
 842 0188 20F82430 		strh	r3, [r0, r4, lsl #2]	@ movhi
 843              	.LBE28:
 844              	.LBB29:
1830:c/stm32f1xx_ll_usb.c ****     }
 845              		.loc 1 1830 0
 846 018c 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 847              	.LVL61:
 848 018e 30F82130 		ldrh	r3, [r0, r1, lsl #2]
 849              	.LVL62:
 850 0192 23F48043 		bic	r3, r3, #16384
 851              	.LVL63:
 852 0196 23F07003 		bic	r3, r3, #112
 853 019a B5E7     		b	.L86
 854              	.LBE29:
 855              		.cfi_endproc
 856              	.LFE72:
 858              		.section	.text.USB_WritePacket,"ax",%progbits
 859              		.align	1
 860              		.global	USB_WritePacket
 861              		.syntax unified
 862              		.thumb
 863              		.thumb_func
 864              		.fpu softvfp
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 49


 866              	USB_WritePacket:
 867              	.LFB74:
1836:c/stm32f1xx_ll_usb.c **** 
1837:c/stm32f1xx_ll_usb.c **** /**
1838:c/stm32f1xx_ll_usb.c ****   * @brief  USB_EPStartXfer : setup and starts a transfer over an EP
1839:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
1840:c/stm32f1xx_ll_usb.c ****   * @param  ep: pointer to endpoint structure
1841:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
1842:c/stm32f1xx_ll_usb.c ****   */
1843:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
1844:c/stm32f1xx_ll_usb.c **** {
1845:c/stm32f1xx_ll_usb.c ****   uint16_t pmabuffer = 0;
1846:c/stm32f1xx_ll_usb.c ****   uint32_t len = ep->xfer_len;
1847:c/stm32f1xx_ll_usb.c ****   
1848:c/stm32f1xx_ll_usb.c ****   /* IN endpoint */
1849:c/stm32f1xx_ll_usb.c ****   if (ep->is_in == 1)
1850:c/stm32f1xx_ll_usb.c ****   {
1851:c/stm32f1xx_ll_usb.c ****     /*Multi packet transfer*/
1852:c/stm32f1xx_ll_usb.c ****     if (ep->xfer_len > ep->maxpacket)
1853:c/stm32f1xx_ll_usb.c ****     {
1854:c/stm32f1xx_ll_usb.c ****       len=ep->maxpacket;
1855:c/stm32f1xx_ll_usb.c ****       ep->xfer_len-=len; 
1856:c/stm32f1xx_ll_usb.c ****     }
1857:c/stm32f1xx_ll_usb.c ****     else
1858:c/stm32f1xx_ll_usb.c ****     {  
1859:c/stm32f1xx_ll_usb.c ****       len=ep->xfer_len;
1860:c/stm32f1xx_ll_usb.c ****       ep->xfer_len =0;
1861:c/stm32f1xx_ll_usb.c ****     }
1862:c/stm32f1xx_ll_usb.c ****     
1863:c/stm32f1xx_ll_usb.c ****     /* configure and validate Tx endpoint */
1864:c/stm32f1xx_ll_usb.c ****     if (ep->doublebuffer == 0) 
1865:c/stm32f1xx_ll_usb.c ****     {
1866:c/stm32f1xx_ll_usb.c ****       USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
1867:c/stm32f1xx_ll_usb.c ****       PCD_SET_EP_TX_CNT(USBx, ep->num, len);
1868:c/stm32f1xx_ll_usb.c ****     }
1869:c/stm32f1xx_ll_usb.c ****     else
1870:c/stm32f1xx_ll_usb.c ****     {
1871:c/stm32f1xx_ll_usb.c ****       /* Write the data to the USB endpoint */
1872:c/stm32f1xx_ll_usb.c ****       if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
1873:c/stm32f1xx_ll_usb.c ****       {
1874:c/stm32f1xx_ll_usb.c ****         /* Set the Double buffer counter for pmabuffer1 */
1875:c/stm32f1xx_ll_usb.c ****         PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
1876:c/stm32f1xx_ll_usb.c ****         pmabuffer = ep->pmaaddr1;
1877:c/stm32f1xx_ll_usb.c ****       }
1878:c/stm32f1xx_ll_usb.c ****       else
1879:c/stm32f1xx_ll_usb.c ****       {
1880:c/stm32f1xx_ll_usb.c ****         /* Set the Double buffer counter for pmabuffer0 */
1881:c/stm32f1xx_ll_usb.c ****         PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
1882:c/stm32f1xx_ll_usb.c ****         pmabuffer = ep->pmaaddr0;
1883:c/stm32f1xx_ll_usb.c ****       }
1884:c/stm32f1xx_ll_usb.c ****       USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
1885:c/stm32f1xx_ll_usb.c ****       PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
1886:c/stm32f1xx_ll_usb.c ****     }
1887:c/stm32f1xx_ll_usb.c ****     
1888:c/stm32f1xx_ll_usb.c ****     PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
1889:c/stm32f1xx_ll_usb.c ****   }
1890:c/stm32f1xx_ll_usb.c ****   else /* OUT endpoint */
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 50


1891:c/stm32f1xx_ll_usb.c ****   {
1892:c/stm32f1xx_ll_usb.c ****     /* Multi packet transfer*/
1893:c/stm32f1xx_ll_usb.c ****     if (ep->xfer_len > ep->maxpacket)
1894:c/stm32f1xx_ll_usb.c ****     {
1895:c/stm32f1xx_ll_usb.c ****       len=ep->maxpacket;
1896:c/stm32f1xx_ll_usb.c ****       ep->xfer_len-=len; 
1897:c/stm32f1xx_ll_usb.c ****     }
1898:c/stm32f1xx_ll_usb.c ****     else
1899:c/stm32f1xx_ll_usb.c ****     {
1900:c/stm32f1xx_ll_usb.c ****       len=ep->xfer_len;
1901:c/stm32f1xx_ll_usb.c ****       ep->xfer_len =0;
1902:c/stm32f1xx_ll_usb.c ****     }
1903:c/stm32f1xx_ll_usb.c ****     
1904:c/stm32f1xx_ll_usb.c ****     /* configure and validate Rx endpoint */
1905:c/stm32f1xx_ll_usb.c ****     if (ep->doublebuffer == 0) 
1906:c/stm32f1xx_ll_usb.c ****     {
1907:c/stm32f1xx_ll_usb.c ****       /*Set RX buffer count*/
1908:c/stm32f1xx_ll_usb.c ****       PCD_SET_EP_RX_CNT(USBx, ep->num, len);
1909:c/stm32f1xx_ll_usb.c ****     }
1910:c/stm32f1xx_ll_usb.c ****     else
1911:c/stm32f1xx_ll_usb.c ****     {
1912:c/stm32f1xx_ll_usb.c ****       /*Set the Double buffer counter*/
1913:c/stm32f1xx_ll_usb.c ****       PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
1914:c/stm32f1xx_ll_usb.c ****     }
1915:c/stm32f1xx_ll_usb.c ****     
1916:c/stm32f1xx_ll_usb.c ****     PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
1917:c/stm32f1xx_ll_usb.c ****   }
1918:c/stm32f1xx_ll_usb.c ****   
1919:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
1920:c/stm32f1xx_ll_usb.c **** }
1921:c/stm32f1xx_ll_usb.c **** 
1922:c/stm32f1xx_ll_usb.c **** /**
1923:c/stm32f1xx_ll_usb.c ****   * @brief  USB_WritePacket : Writes a packet into the Tx FIFO associated 
1924:c/stm32f1xx_ll_usb.c ****   *         with the EP/channel
1925:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
1926:c/stm32f1xx_ll_usb.c ****   * @param  src :  pointer to source buffer
1927:c/stm32f1xx_ll_usb.c ****   * @param  ch_ep_num : endpoint or host channel number
1928:c/stm32f1xx_ll_usb.c ****   * @param  len : Number of bytes to write
1929:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
1930:c/stm32f1xx_ll_usb.c ****   */
1931:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_WritePacket(USB_TypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
1932:c/stm32f1xx_ll_usb.c **** {
 868              		.loc 1 1932 0
 869              		.cfi_startproc
 870              		@ args = 0, pretend = 0, frame = 0
 871              		@ frame_needed = 0, uses_anonymous_args = 0
 872              		@ link register save eliminated.
 873              	.LVL64:
1933:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
1934:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
1935:c/stm32f1xx_ll_usb.c ****   UNUSED(src);
1936:c/stm32f1xx_ll_usb.c ****   UNUSED(ch_ep_num);
1937:c/stm32f1xx_ll_usb.c ****   UNUSED(len);
1938:c/stm32f1xx_ll_usb.c ****   /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
1939:c/stm32f1xx_ll_usb.c ****               only by USB OTG FS peripheral.
1940:c/stm32f1xx_ll_usb.c ****             - This function is added to ensure compatibility across platforms.
1941:c/stm32f1xx_ll_usb.c ****    */
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 51


1942:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
1943:c/stm32f1xx_ll_usb.c **** }
 874              		.loc 1 1943 0
 875 0000 0020     		movs	r0, #0
 876              	.LVL65:
 877 0002 7047     		bx	lr
 878              		.cfi_endproc
 879              	.LFE74:
 881              		.section	.text.USB_ReadPacket,"ax",%progbits
 882              		.align	1
 883              		.global	USB_ReadPacket
 884              		.syntax unified
 885              		.thumb
 886              		.thumb_func
 887              		.fpu softvfp
 889              	USB_ReadPacket:
 890              	.LFB75:
1944:c/stm32f1xx_ll_usb.c **** 
1945:c/stm32f1xx_ll_usb.c **** /**
1946:c/stm32f1xx_ll_usb.c ****   * @brief  USB_ReadPacket : read a packet from the Tx FIFO associated 
1947:c/stm32f1xx_ll_usb.c ****   *         with the EP/channel
1948:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
1949:c/stm32f1xx_ll_usb.c ****   * @param  dest : destination pointer
1950:c/stm32f1xx_ll_usb.c ****   * @param  len : Number of bytes to read
1951:c/stm32f1xx_ll_usb.c ****   * @retval pointer to destination buffer
1952:c/stm32f1xx_ll_usb.c ****   */
1953:c/stm32f1xx_ll_usb.c **** void *USB_ReadPacket(USB_TypeDef *USBx, uint8_t *dest, uint16_t len)
1954:c/stm32f1xx_ll_usb.c **** {
 891              		.loc 1 1954 0
 892              		.cfi_startproc
 893              		@ args = 0, pretend = 0, frame = 0
 894              		@ frame_needed = 0, uses_anonymous_args = 0
 895              		@ link register save eliminated.
 896              	.LVL66:
1955:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
1956:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
1957:c/stm32f1xx_ll_usb.c ****   UNUSED(dest);
1958:c/stm32f1xx_ll_usb.c ****   UNUSED(len);
1959:c/stm32f1xx_ll_usb.c ****   /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
1960:c/stm32f1xx_ll_usb.c ****               only by USB OTG FS peripheral.
1961:c/stm32f1xx_ll_usb.c ****             - This function is added to ensure compatibility across platforms.
1962:c/stm32f1xx_ll_usb.c ****    */
1963:c/stm32f1xx_ll_usb.c ****   return ((void *)NULL);
1964:c/stm32f1xx_ll_usb.c **** }
 897              		.loc 1 1964 0
 898 0000 0020     		movs	r0, #0
 899              	.LVL67:
 900 0002 7047     		bx	lr
 901              		.cfi_endproc
 902              	.LFE75:
 904              		.section	.text.USB_EPSetStall,"ax",%progbits
 905              		.align	1
 906              		.global	USB_EPSetStall
 907              		.syntax unified
 908              		.thumb
 909              		.thumb_func
 910              		.fpu softvfp
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 52


 912              	USB_EPSetStall:
 913              	.LFB76:
1965:c/stm32f1xx_ll_usb.c **** 
1966:c/stm32f1xx_ll_usb.c **** /**
1967:c/stm32f1xx_ll_usb.c ****   * @brief  USB_EPSetStall : set a stall condition over an EP
1968:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
1969:c/stm32f1xx_ll_usb.c ****   * @param  ep: pointer to endpoint structure   
1970:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
1971:c/stm32f1xx_ll_usb.c ****   */
1972:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
1973:c/stm32f1xx_ll_usb.c **** {
 914              		.loc 1 1973 0
 915              		.cfi_startproc
 916              		@ args = 0, pretend = 0, frame = 0
 917              		@ frame_needed = 0, uses_anonymous_args = 0
 918              		@ link register save eliminated.
 919              	.LVL68:
1974:c/stm32f1xx_ll_usb.c ****   if (ep->num == 0)
 920              		.loc 1 1974 0
 921 0000 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 922 0002 8AB9     		cbnz	r2, .L90
 923              	.LBB30:
1975:c/stm32f1xx_ll_usb.c ****   {
1976:c/stm32f1xx_ll_usb.c ****     /* This macro sets STALL status for RX & TX*/ 
1977:c/stm32f1xx_ll_usb.c ****     PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 924              		.loc 1 1977 0
 925 0004 0388     		ldrh	r3, [r0]
 926              	.LVL69:
 927 0006 23F48043 		bic	r3, r3, #16384
 928              	.LVL70:
 929 000a 23F04003 		bic	r3, r3, #64
 930 000e 1B04     		lsls	r3, r3, #16
 931 0010 1B0C     		lsrs	r3, r3, #16
 932 0012 83F48053 		eor	r3, r3, #4096
 933 0016 83F01003 		eor	r3, r3, #16
 934 001a 43F40043 		orr	r3, r3, #32768
 935 001e 43F08003 		orr	r3, r3, #128
 936 0022 0380     		strh	r3, [r0]	@ movhi
 937              	.L91:
 938              	.LBE30:
1978:c/stm32f1xx_ll_usb.c ****   }
1979:c/stm32f1xx_ll_usb.c ****   else
1980:c/stm32f1xx_ll_usb.c ****   {
1981:c/stm32f1xx_ll_usb.c ****     if (ep->is_in)
1982:c/stm32f1xx_ll_usb.c ****     {
1983:c/stm32f1xx_ll_usb.c ****       PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
1984:c/stm32f1xx_ll_usb.c ****     }
1985:c/stm32f1xx_ll_usb.c ****     else
1986:c/stm32f1xx_ll_usb.c ****     {
1987:c/stm32f1xx_ll_usb.c ****       PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
1988:c/stm32f1xx_ll_usb.c ****     }
1989:c/stm32f1xx_ll_usb.c ****   }
1990:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
1991:c/stm32f1xx_ll_usb.c **** }
 939              		.loc 1 1991 0
 940 0024 0020     		movs	r0, #0
 941              	.LVL71:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 53


 942 0026 7047     		bx	lr
 943              	.LVL72:
 944              	.L90:
1981:c/stm32f1xx_ll_usb.c ****     {
 945              		.loc 1 1981 0
 946 0028 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 947 002a 83B1     		cbz	r3, .L92
 948              	.LBB31:
1983:c/stm32f1xx_ll_usb.c ****     }
 949              		.loc 1 1983 0
 950 002c 30F82230 		ldrh	r3, [r0, r2, lsl #2]
 951 0030 23F4E043 		bic	r3, r3, #28672
 952 0034 23F04003 		bic	r3, r3, #64
 953 0038 1B04     		lsls	r3, r3, #16
 954 003a 1B0C     		lsrs	r3, r3, #16
 955              	.LVL73:
 956 003c 83F01003 		eor	r3, r3, #16
 957              	.LVL74:
 958              	.L93:
 959              	.LBE31:
 960              	.LBB32:
1987:c/stm32f1xx_ll_usb.c ****     }
 961              		.loc 1 1987 0
 962 0040 43F40043 		orr	r3, r3, #32768
 963 0044 43F08003 		orr	r3, r3, #128
 964 0048 20F82230 		strh	r3, [r0, r2, lsl #2]	@ movhi
 965 004c EAE7     		b	.L91
 966              	.L92:
 967 004e 30F82230 		ldrh	r3, [r0, r2, lsl #2]
 968 0052 23F48043 		bic	r3, r3, #16384
 969 0056 23F07003 		bic	r3, r3, #112
 970 005a 1B04     		lsls	r3, r3, #16
 971 005c 1B0C     		lsrs	r3, r3, #16
 972              	.LVL75:
 973 005e 83F48053 		eor	r3, r3, #4096
 974              	.LVL76:
 975 0062 EDE7     		b	.L93
 976              	.LBE32:
 977              		.cfi_endproc
 978              	.LFE76:
 980              		.section	.text.USB_EPClearStall,"ax",%progbits
 981              		.align	1
 982              		.global	USB_EPClearStall
 983              		.syntax unified
 984              		.thumb
 985              		.thumb_func
 986              		.fpu softvfp
 988              	USB_EPClearStall:
 989              	.LFB77:
1992:c/stm32f1xx_ll_usb.c **** 
1993:c/stm32f1xx_ll_usb.c **** /**
1994:c/stm32f1xx_ll_usb.c ****   * @brief  USB_EPClearStall : Clear a stall condition over an EP
1995:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
1996:c/stm32f1xx_ll_usb.c ****   * @param  ep: pointer to endpoint structure
1997:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
1998:c/stm32f1xx_ll_usb.c ****   */
1999:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 54


2000:c/stm32f1xx_ll_usb.c **** {
 990              		.loc 1 2000 0
 991              		.cfi_startproc
 992              		@ args = 0, pretend = 0, frame = 0
 993              		@ frame_needed = 0, uses_anonymous_args = 0
 994              		@ link register save eliminated.
 995              	.LVL77:
2001:c/stm32f1xx_ll_usb.c ****   if (ep->is_in)
 996              		.loc 1 2001 0
 997 0000 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 998 0002 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 999 0004 13B3     		cbz	r3, .L95
2002:c/stm32f1xx_ll_usb.c ****   {
2003:c/stm32f1xx_ll_usb.c ****     PCD_CLEAR_TX_DTOG(USBx, ep->num);
 1000              		.loc 1 2003 0
 1001 0006 30F82230 		ldrh	r3, [r0, r2, lsl #2]
 1002 000a 5B06     		lsls	r3, r3, #25
 1003 000c 0BD5     		bpl	.L96
 1004              		.loc 1 2003 0 is_stmt 0 discriminator 1
 1005 000e 30F82230 		ldrh	r3, [r0, r2, lsl #2]
 1006 0012 23F0F003 		bic	r3, r3, #240
 1007 0016 1B05     		lsls	r3, r3, #20
 1008 0018 1B0D     		lsrs	r3, r3, #20
 1009 001a 43F40043 		orr	r3, r3, #32768
 1010 001e 43F0C003 		orr	r3, r3, #192
 1011 0022 20F82230 		strh	r3, [r0, r2, lsl #2]	@ movhi
 1012              	.L96:
 1013              	.LBB33:
2004:c/stm32f1xx_ll_usb.c ****     PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 1014              		.loc 1 2004 0 is_stmt 1
 1015 0026 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 1016 0028 30F82230 		ldrh	r3, [r0, r2, lsl #2]
 1017 002c 23F4E043 		bic	r3, r3, #28672
 1018 0030 23F04003 		bic	r3, r3, #64
 1019 0034 1B04     		lsls	r3, r3, #16
 1020 0036 1B0C     		lsrs	r3, r3, #16
 1021              	.LVL78:
 1022 0038 83F03003 		eor	r3, r3, #48
 1023              	.LVL79:
 1024              	.L105:
 1025              	.LBE33:
 1026              	.LBB34:
2005:c/stm32f1xx_ll_usb.c ****   }
2006:c/stm32f1xx_ll_usb.c ****   else
2007:c/stm32f1xx_ll_usb.c ****   {
2008:c/stm32f1xx_ll_usb.c ****     PCD_CLEAR_RX_DTOG(USBx, ep->num);
2009:c/stm32f1xx_ll_usb.c ****     PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 1027              		.loc 1 2009 0
 1028 003c 43F40043 		orr	r3, r3, #32768
 1029 0040 43F08003 		orr	r3, r3, #128
 1030 0044 20F82230 		strh	r3, [r0, r2, lsl #2]	@ movhi
 1031              	.LBE34:
2010:c/stm32f1xx_ll_usb.c ****   }
2011:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
2012:c/stm32f1xx_ll_usb.c **** }
 1032              		.loc 1 2012 0
 1033 0048 0020     		movs	r0, #0
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 55


 1034              	.LVL80:
 1035 004a 7047     		bx	lr
 1036              	.LVL81:
 1037              	.L95:
2008:c/stm32f1xx_ll_usb.c ****     PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 1038              		.loc 1 2008 0
 1039 004c 30F82230 		ldrh	r3, [r0, r2, lsl #2]
 1040 0050 5B04     		lsls	r3, r3, #17
 1041 0052 0BD5     		bpl	.L98
2008:c/stm32f1xx_ll_usb.c ****     PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 1042              		.loc 1 2008 0 is_stmt 0 discriminator 1
 1043 0054 30F82230 		ldrh	r3, [r0, r2, lsl #2]
 1044 0058 23F0F003 		bic	r3, r3, #240
 1045 005c 1B05     		lsls	r3, r3, #20
 1046 005e 1B0D     		lsrs	r3, r3, #20
 1047 0060 43F44043 		orr	r3, r3, #49152
 1048 0064 43F08003 		orr	r3, r3, #128
 1049 0068 20F82230 		strh	r3, [r0, r2, lsl #2]	@ movhi
 1050              	.L98:
 1051              	.LBB35:
2009:c/stm32f1xx_ll_usb.c ****   }
 1052              		.loc 1 2009 0 is_stmt 1
 1053 006c 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 1054 006e 30F82230 		ldrh	r3, [r0, r2, lsl #2]
 1055 0072 23F48043 		bic	r3, r3, #16384
 1056 0076 23F07003 		bic	r3, r3, #112
 1057 007a 1B04     		lsls	r3, r3, #16
 1058 007c 1B0C     		lsrs	r3, r3, #16
 1059              	.LVL82:
 1060 007e 83F44053 		eor	r3, r3, #12288
 1061              	.LVL83:
 1062 0082 DBE7     		b	.L105
 1063              	.LBE35:
 1064              		.cfi_endproc
 1065              	.LFE77:
 1067              		.section	.text.USB_StopDevice,"ax",%progbits
 1068              		.align	1
 1069              		.global	USB_StopDevice
 1070              		.syntax unified
 1071              		.thumb
 1072              		.thumb_func
 1073              		.fpu softvfp
 1075              	USB_StopDevice:
 1076              	.LFB78:
2013:c/stm32f1xx_ll_usb.c **** 
2014:c/stm32f1xx_ll_usb.c **** /**
2015:c/stm32f1xx_ll_usb.c ****   * @brief  USB_StopDevice : Stop the usb device mode
2016:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
2017:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
2018:c/stm32f1xx_ll_usb.c ****   */
2019:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_StopDevice(USB_TypeDef *USBx)
2020:c/stm32f1xx_ll_usb.c **** {
 1077              		.loc 1 2020 0
 1078              		.cfi_startproc
 1079              		@ args = 0, pretend = 0, frame = 0
 1080              		@ frame_needed = 0, uses_anonymous_args = 0
 1081              		@ link register save eliminated.
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 56


 1082              	.LVL84:
2021:c/stm32f1xx_ll_usb.c ****   /* disable all interrupts and force USB reset */
2022:c/stm32f1xx_ll_usb.c ****   USBx->CNTR = USB_CNTR_FRES;
 1083              		.loc 1 2022 0
 1084 0000 0122     		movs	r2, #1
2020:c/stm32f1xx_ll_usb.c ****   /* disable all interrupts and force USB reset */
 1085              		.loc 1 2020 0
 1086 0002 0346     		mov	r3, r0
 1087              		.loc 1 2022 0
 1088 0004 A0F84020 		strh	r2, [r0, #64]	@ movhi
2023:c/stm32f1xx_ll_usb.c ****   
2024:c/stm32f1xx_ll_usb.c ****   /* clear interrupt status register */
2025:c/stm32f1xx_ll_usb.c ****   USBx->ISTR = 0;
 1089              		.loc 1 2025 0
 1090 0008 0020     		movs	r0, #0
 1091              	.LVL85:
2026:c/stm32f1xx_ll_usb.c ****   
2027:c/stm32f1xx_ll_usb.c ****   /* switch-off device */
2028:c/stm32f1xx_ll_usb.c ****   USBx->CNTR = (USB_CNTR_FRES | USB_CNTR_PDWN);
 1092              		.loc 1 2028 0
 1093 000a 0322     		movs	r2, #3
2025:c/stm32f1xx_ll_usb.c ****   
 1094              		.loc 1 2025 0
 1095 000c A3F84400 		strh	r0, [r3, #68]	@ movhi
 1096              		.loc 1 2028 0
 1097 0010 A3F84020 		strh	r2, [r3, #64]	@ movhi
2029:c/stm32f1xx_ll_usb.c ****   
2030:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
2031:c/stm32f1xx_ll_usb.c **** }
 1098              		.loc 1 2031 0
 1099 0014 7047     		bx	lr
 1100              		.cfi_endproc
 1101              	.LFE78:
 1103              		.section	.text.USB_SetDevAddress,"ax",%progbits
 1104              		.align	1
 1105              		.global	USB_SetDevAddress
 1106              		.syntax unified
 1107              		.thumb
 1108              		.thumb_func
 1109              		.fpu softvfp
 1111              	USB_SetDevAddress:
 1112              	.LFB79:
2032:c/stm32f1xx_ll_usb.c **** 
2033:c/stm32f1xx_ll_usb.c **** /**
2034:c/stm32f1xx_ll_usb.c ****   * @brief  USB_SetDevAddress : Stop the usb device mode
2035:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
2036:c/stm32f1xx_ll_usb.c ****   * @param  address : new device address to be assigned
2037:c/stm32f1xx_ll_usb.c ****   *          This parameter can be a value from 0 to 255
2038:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
2039:c/stm32f1xx_ll_usb.c ****   */
2040:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
2041:c/stm32f1xx_ll_usb.c **** {
 1113              		.loc 1 2041 0
 1114              		.cfi_startproc
 1115              		@ args = 0, pretend = 0, frame = 0
 1116              		@ frame_needed = 0, uses_anonymous_args = 0
 1117              		@ link register save eliminated.
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 57


 1118              	.LVL86:
2042:c/stm32f1xx_ll_usb.c ****   if(address == 0) 
 1119              		.loc 1 2042 0
 1120 0000 11B9     		cbnz	r1, .L108
2043:c/stm32f1xx_ll_usb.c ****   {
2044:c/stm32f1xx_ll_usb.c ****    /* set device address and enable function */
2045:c/stm32f1xx_ll_usb.c ****    USBx->DADDR = USB_DADDR_EF;
 1121              		.loc 1 2045 0
 1122 0002 8023     		movs	r3, #128
 1123 0004 A0F84C30 		strh	r3, [r0, #76]	@ movhi
 1124              	.L108:
2046:c/stm32f1xx_ll_usb.c ****   }
2047:c/stm32f1xx_ll_usb.c ****   
2048:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
2049:c/stm32f1xx_ll_usb.c **** }
 1125              		.loc 1 2049 0
 1126 0008 0020     		movs	r0, #0
 1127              	.LVL87:
 1128 000a 7047     		bx	lr
 1129              		.cfi_endproc
 1130              	.LFE79:
 1132              		.section	.text.USB_DevConnect,"ax",%progbits
 1133              		.align	1
 1134              		.global	USB_DevConnect
 1135              		.syntax unified
 1136              		.thumb
 1137              		.thumb_func
 1138              		.fpu softvfp
 1140              	USB_DevConnect:
 1141              	.LFB96:
 1142              		.cfi_startproc
 1143              		@ args = 0, pretend = 0, frame = 0
 1144              		@ frame_needed = 0, uses_anonymous_args = 0
 1145              		@ link register save eliminated.
 1146 0000 0020     		movs	r0, #0
 1147 0002 7047     		bx	lr
 1148              		.cfi_endproc
 1149              	.LFE96:
 1151              		.section	.text.USB_DevDisconnect,"ax",%progbits
 1152              		.align	1
 1153              		.global	USB_DevDisconnect
 1154              		.syntax unified
 1155              		.thumb
 1156              		.thumb_func
 1157              		.fpu softvfp
 1159              	USB_DevDisconnect:
 1160              	.LFB81:
2050:c/stm32f1xx_ll_usb.c **** 
2051:c/stm32f1xx_ll_usb.c **** /**
2052:c/stm32f1xx_ll_usb.c ****   * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
2053:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
2054:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
2055:c/stm32f1xx_ll_usb.c ****   */
2056:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef  USB_DevConnect (USB_TypeDef *USBx)
2057:c/stm32f1xx_ll_usb.c **** {
2058:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
2059:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 58


2060:c/stm32f1xx_ll_usb.c ****   /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
2061:c/stm32f1xx_ll_usb.c ****               only by USB OTG FS peripheral.
2062:c/stm32f1xx_ll_usb.c ****             - This function is added to ensure compatibility across platforms.
2063:c/stm32f1xx_ll_usb.c ****    */
2064:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
2065:c/stm32f1xx_ll_usb.c **** }
2066:c/stm32f1xx_ll_usb.c **** 
2067:c/stm32f1xx_ll_usb.c **** /**
2068:c/stm32f1xx_ll_usb.c ****   * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
2069:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
2070:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
2071:c/stm32f1xx_ll_usb.c ****   */
2072:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef  USB_DevDisconnect (USB_TypeDef *USBx)
2073:c/stm32f1xx_ll_usb.c **** {
 1161              		.loc 1 2073 0
 1162              		.cfi_startproc
 1163              		@ args = 0, pretend = 0, frame = 0
 1164              		@ frame_needed = 0, uses_anonymous_args = 0
 1165              		@ link register save eliminated.
 1166              	.LVL88:
2074:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
2075:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
2076:c/stm32f1xx_ll_usb.c ****   /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
2077:c/stm32f1xx_ll_usb.c ****               only by USB OTG FS peripheral.
2078:c/stm32f1xx_ll_usb.c ****             - This function is added to ensure compatibility across platforms.
2079:c/stm32f1xx_ll_usb.c ****    */
2080:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
2081:c/stm32f1xx_ll_usb.c **** }
 1167              		.loc 1 2081 0
 1168 0000 0020     		movs	r0, #0
 1169              	.LVL89:
 1170 0002 7047     		bx	lr
 1171              		.cfi_endproc
 1172              	.LFE81:
 1174              		.section	.text.USB_ReadInterrupts,"ax",%progbits
 1175              		.align	1
 1176              		.global	USB_ReadInterrupts
 1177              		.syntax unified
 1178              		.thumb
 1179              		.thumb_func
 1180              		.fpu softvfp
 1182              	USB_ReadInterrupts:
 1183              	.LFB82:
2082:c/stm32f1xx_ll_usb.c **** 
2083:c/stm32f1xx_ll_usb.c **** /**
2084:c/stm32f1xx_ll_usb.c ****   * @brief  USB_ReadInterrupts: return the global USB interrupt status
2085:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
2086:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
2087:c/stm32f1xx_ll_usb.c ****   */
2088:c/stm32f1xx_ll_usb.c **** uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
2089:c/stm32f1xx_ll_usb.c **** {
 1184              		.loc 1 2089 0
 1185              		.cfi_startproc
 1186              		@ args = 0, pretend = 0, frame = 0
 1187              		@ frame_needed = 0, uses_anonymous_args = 0
 1188              		@ link register save eliminated.
 1189              	.LVL90:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 59


2090:c/stm32f1xx_ll_usb.c ****   uint32_t tmpreg = 0;
2091:c/stm32f1xx_ll_usb.c ****   
2092:c/stm32f1xx_ll_usb.c ****   tmpreg = USBx->ISTR;
 1190              		.loc 1 2092 0
 1191 0000 B0F84400 		ldrh	r0, [r0, #68]
 1192              	.LVL91:
2093:c/stm32f1xx_ll_usb.c ****   return tmpreg;
2094:c/stm32f1xx_ll_usb.c **** }
 1193              		.loc 1 2094 0
 1194 0004 80B2     		uxth	r0, r0
 1195              	.LVL92:
 1196 0006 7047     		bx	lr
 1197              		.cfi_endproc
 1198              	.LFE82:
 1200              		.section	.text.USB_ReadDevAllOutEpInterrupt,"ax",%progbits
 1201              		.align	1
 1202              		.global	USB_ReadDevAllOutEpInterrupt
 1203              		.syntax unified
 1204              		.thumb
 1205              		.thumb_func
 1206              		.fpu softvfp
 1208              	USB_ReadDevAllOutEpInterrupt:
 1209              	.LFB94:
 1210              		.cfi_startproc
 1211              		@ args = 0, pretend = 0, frame = 0
 1212              		@ frame_needed = 0, uses_anonymous_args = 0
 1213              		@ link register save eliminated.
 1214 0000 0020     		movs	r0, #0
 1215 0002 7047     		bx	lr
 1216              		.cfi_endproc
 1217              	.LFE94:
 1219              		.section	.text.USB_ReadDevAllInEpInterrupt,"ax",%progbits
 1220              		.align	1
 1221              		.global	USB_ReadDevAllInEpInterrupt
 1222              		.syntax unified
 1223              		.thumb
 1224              		.thumb_func
 1225              		.fpu softvfp
 1227              	USB_ReadDevAllInEpInterrupt:
 1228              	.LFB84:
2095:c/stm32f1xx_ll_usb.c **** 
2096:c/stm32f1xx_ll_usb.c **** /**
2097:c/stm32f1xx_ll_usb.c ****   * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
2098:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
2099:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
2100:c/stm32f1xx_ll_usb.c ****   */
2101:c/stm32f1xx_ll_usb.c **** uint32_t USB_ReadDevAllOutEpInterrupt (USB_TypeDef *USBx)
2102:c/stm32f1xx_ll_usb.c **** {
2103:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
2104:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
2105:c/stm32f1xx_ll_usb.c ****   /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
2106:c/stm32f1xx_ll_usb.c ****               only by USB OTG FS peripheral.
2107:c/stm32f1xx_ll_usb.c ****             - This function is added to ensure compatibility across platforms.
2108:c/stm32f1xx_ll_usb.c ****    */
2109:c/stm32f1xx_ll_usb.c ****   return (0);
2110:c/stm32f1xx_ll_usb.c **** }
2111:c/stm32f1xx_ll_usb.c **** 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 60


2112:c/stm32f1xx_ll_usb.c **** /**
2113:c/stm32f1xx_ll_usb.c ****   * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
2114:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
2115:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
2116:c/stm32f1xx_ll_usb.c ****   */
2117:c/stm32f1xx_ll_usb.c **** uint32_t USB_ReadDevAllInEpInterrupt (USB_TypeDef *USBx)
2118:c/stm32f1xx_ll_usb.c **** {
 1229              		.loc 1 2118 0
 1230              		.cfi_startproc
 1231              		@ args = 0, pretend = 0, frame = 0
 1232              		@ frame_needed = 0, uses_anonymous_args = 0
 1233              		@ link register save eliminated.
 1234              	.LVL93:
2119:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
2120:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
2121:c/stm32f1xx_ll_usb.c ****   /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
2122:c/stm32f1xx_ll_usb.c ****               only by USB OTG FS peripheral.
2123:c/stm32f1xx_ll_usb.c ****             - This function is added to ensure compatibility across platforms.
2124:c/stm32f1xx_ll_usb.c ****    */
2125:c/stm32f1xx_ll_usb.c ****   return (0);
2126:c/stm32f1xx_ll_usb.c **** }
 1235              		.loc 1 2126 0
 1236 0000 0020     		movs	r0, #0
 1237              	.LVL94:
 1238 0002 7047     		bx	lr
 1239              		.cfi_endproc
 1240              	.LFE84:
 1242              		.section	.text.USB_ReadDevOutEPInterrupt,"ax",%progbits
 1243              		.align	1
 1244              		.global	USB_ReadDevOutEPInterrupt
 1245              		.syntax unified
 1246              		.thumb
 1247              		.thumb_func
 1248              		.fpu softvfp
 1250              	USB_ReadDevOutEPInterrupt:
 1251              	.LFB100:
 1252              		.cfi_startproc
 1253              		@ args = 0, pretend = 0, frame = 0
 1254              		@ frame_needed = 0, uses_anonymous_args = 0
 1255              		@ link register save eliminated.
 1256 0000 0020     		movs	r0, #0
 1257 0002 7047     		bx	lr
 1258              		.cfi_endproc
 1259              	.LFE100:
 1261              		.section	.text.USB_ReadDevInEPInterrupt,"ax",%progbits
 1262              		.align	1
 1263              		.global	USB_ReadDevInEPInterrupt
 1264              		.syntax unified
 1265              		.thumb
 1266              		.thumb_func
 1267              		.fpu softvfp
 1269              	USB_ReadDevInEPInterrupt:
 1270              	.LFB86:
2127:c/stm32f1xx_ll_usb.c **** 
2128:c/stm32f1xx_ll_usb.c **** /**
2129:c/stm32f1xx_ll_usb.c ****   * @brief  Returns Device OUT EP Interrupt register
2130:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 61


2131:c/stm32f1xx_ll_usb.c ****   * @param  epnum : endpoint number
2132:c/stm32f1xx_ll_usb.c ****   *          This parameter can be a value from 0 to 15
2133:c/stm32f1xx_ll_usb.c ****   * @retval Device OUT EP Interrupt register
2134:c/stm32f1xx_ll_usb.c ****   */
2135:c/stm32f1xx_ll_usb.c **** uint32_t USB_ReadDevOutEPInterrupt (USB_TypeDef *USBx , uint8_t epnum)
2136:c/stm32f1xx_ll_usb.c **** {
2137:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
2138:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
2139:c/stm32f1xx_ll_usb.c ****   UNUSED(epnum);
2140:c/stm32f1xx_ll_usb.c ****   /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
2141:c/stm32f1xx_ll_usb.c ****               only by USB OTG FS peripheral.
2142:c/stm32f1xx_ll_usb.c ****             - This function is added to ensure compatibility across platforms.
2143:c/stm32f1xx_ll_usb.c ****    */
2144:c/stm32f1xx_ll_usb.c ****   return (0);
2145:c/stm32f1xx_ll_usb.c **** }
2146:c/stm32f1xx_ll_usb.c **** 
2147:c/stm32f1xx_ll_usb.c **** /**
2148:c/stm32f1xx_ll_usb.c ****   * @brief  Returns Device IN EP Interrupt register
2149:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
2150:c/stm32f1xx_ll_usb.c ****   * @param  epnum : endpoint number
2151:c/stm32f1xx_ll_usb.c ****   *          This parameter can be a value from 0 to 15
2152:c/stm32f1xx_ll_usb.c ****   * @retval Device IN EP Interrupt register
2153:c/stm32f1xx_ll_usb.c ****   */
2154:c/stm32f1xx_ll_usb.c **** uint32_t USB_ReadDevInEPInterrupt (USB_TypeDef *USBx , uint8_t epnum)
2155:c/stm32f1xx_ll_usb.c **** {
 1271              		.loc 1 2155 0
 1272              		.cfi_startproc
 1273              		@ args = 0, pretend = 0, frame = 0
 1274              		@ frame_needed = 0, uses_anonymous_args = 0
 1275              		@ link register save eliminated.
 1276              	.LVL95:
2156:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
2157:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
2158:c/stm32f1xx_ll_usb.c ****   UNUSED(epnum);
2159:c/stm32f1xx_ll_usb.c ****   /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
2160:c/stm32f1xx_ll_usb.c ****               only by USB OTG FS peripheral.
2161:c/stm32f1xx_ll_usb.c ****             - This function is added to ensure compatibility across platforms.
2162:c/stm32f1xx_ll_usb.c ****    */
2163:c/stm32f1xx_ll_usb.c ****   return (0);
2164:c/stm32f1xx_ll_usb.c **** }
 1277              		.loc 1 2164 0
 1278 0000 0020     		movs	r0, #0
 1279              	.LVL96:
 1280 0002 7047     		bx	lr
 1281              		.cfi_endproc
 1282              	.LFE86:
 1284              		.section	.text.USB_ClearInterrupts,"ax",%progbits
 1285              		.align	1
 1286              		.global	USB_ClearInterrupts
 1287              		.syntax unified
 1288              		.thumb
 1289              		.thumb_func
 1290              		.fpu softvfp
 1292              	USB_ClearInterrupts:
 1293              	.LFB87:
2165:c/stm32f1xx_ll_usb.c **** 
2166:c/stm32f1xx_ll_usb.c **** /**
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 62


2167:c/stm32f1xx_ll_usb.c ****   * @brief  USB_ClearInterrupts: clear a USB interrupt
2168:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
2169:c/stm32f1xx_ll_usb.c ****   * @param  interrupt : interrupt flag
2170:c/stm32f1xx_ll_usb.c ****   * @retval None
2171:c/stm32f1xx_ll_usb.c ****   */
2172:c/stm32f1xx_ll_usb.c **** void  USB_ClearInterrupts (USB_TypeDef *USBx, uint32_t interrupt)
2173:c/stm32f1xx_ll_usb.c **** {
 1294              		.loc 1 2173 0
 1295              		.cfi_startproc
 1296              		@ args = 0, pretend = 0, frame = 0
 1297              		@ frame_needed = 0, uses_anonymous_args = 0
 1298              		@ link register save eliminated.
 1299              	.LVL97:
 1300 0000 7047     		bx	lr
 1301              		.cfi_endproc
 1302              	.LFE87:
 1304              		.section	.text.USB_EP0_OutStart,"ax",%progbits
 1305              		.align	1
 1306              		.global	USB_EP0_OutStart
 1307              		.syntax unified
 1308              		.thumb
 1309              		.thumb_func
 1310              		.fpu softvfp
 1312              	USB_EP0_OutStart:
 1313              	.LFB88:
2174:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
2175:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
2176:c/stm32f1xx_ll_usb.c ****   UNUSED(interrupt);
2177:c/stm32f1xx_ll_usb.c ****   /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
2178:c/stm32f1xx_ll_usb.c ****               only by USB OTG FS peripheral.
2179:c/stm32f1xx_ll_usb.c ****             - This function is added to ensure compatibility across platforms.
2180:c/stm32f1xx_ll_usb.c ****    */
2181:c/stm32f1xx_ll_usb.c **** }
2182:c/stm32f1xx_ll_usb.c **** 
2183:c/stm32f1xx_ll_usb.c **** /**
2184:c/stm32f1xx_ll_usb.c ****   * @brief  Prepare the EP0 to start the first control setup
2185:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
2186:c/stm32f1xx_ll_usb.c ****   * @param  psetup : pointer to setup packet
2187:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
2188:c/stm32f1xx_ll_usb.c ****   */
2189:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
2190:c/stm32f1xx_ll_usb.c **** {
 1314              		.loc 1 2190 0
 1315              		.cfi_startproc
 1316              		@ args = 0, pretend = 0, frame = 0
 1317              		@ frame_needed = 0, uses_anonymous_args = 0
 1318              		@ link register save eliminated.
 1319              	.LVL98:
2191:c/stm32f1xx_ll_usb.c ****   /* Prevent unused argument(s) compilation warning */
2192:c/stm32f1xx_ll_usb.c ****   UNUSED(USBx);
2193:c/stm32f1xx_ll_usb.c ****   UNUSED(psetup);
2194:c/stm32f1xx_ll_usb.c ****   /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
2195:c/stm32f1xx_ll_usb.c ****               only by USB OTG FS peripheral.
2196:c/stm32f1xx_ll_usb.c ****             - This function is added to ensure compatibility across platforms.
2197:c/stm32f1xx_ll_usb.c ****    */
2198:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
2199:c/stm32f1xx_ll_usb.c **** }
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 63


 1320              		.loc 1 2199 0
 1321 0000 0020     		movs	r0, #0
 1322              	.LVL99:
 1323 0002 7047     		bx	lr
 1324              		.cfi_endproc
 1325              	.LFE88:
 1327              		.section	.text.USB_ActivateRemoteWakeup,"ax",%progbits
 1328              		.align	1
 1329              		.global	USB_ActivateRemoteWakeup
 1330              		.syntax unified
 1331              		.thumb
 1332              		.thumb_func
 1333              		.fpu softvfp
 1335              	USB_ActivateRemoteWakeup:
 1336              	.LFB89:
2200:c/stm32f1xx_ll_usb.c **** 
2201:c/stm32f1xx_ll_usb.c **** /**
2202:c/stm32f1xx_ll_usb.c ****   * @brief  USB_ActivateRemoteWakeup : active remote wakeup signalling
2203:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
2204:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
2205:c/stm32f1xx_ll_usb.c ****   */
2206:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_ActivateRemoteWakeup(USB_TypeDef *USBx)
2207:c/stm32f1xx_ll_usb.c **** {
 1337              		.loc 1 2207 0
 1338              		.cfi_startproc
 1339              		@ args = 0, pretend = 0, frame = 0
 1340              		@ frame_needed = 0, uses_anonymous_args = 0
 1341              		@ link register save eliminated.
 1342              	.LVL100:
2208:c/stm32f1xx_ll_usb.c ****   USBx->CNTR |= USB_CNTR_RESUME;
 1343              		.loc 1 2208 0
 1344 0000 B0F84030 		ldrh	r3, [r0, #64]
 1345 0004 9BB2     		uxth	r3, r3
 1346 0006 43F01003 		orr	r3, r3, #16
 1347 000a A0F84030 		strh	r3, [r0, #64]	@ movhi
2209:c/stm32f1xx_ll_usb.c ****   
2210:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
2211:c/stm32f1xx_ll_usb.c **** }
 1348              		.loc 1 2211 0
 1349 000e 0020     		movs	r0, #0
 1350              	.LVL101:
 1351 0010 7047     		bx	lr
 1352              		.cfi_endproc
 1353              	.LFE89:
 1355              		.section	.text.USB_DeActivateRemoteWakeup,"ax",%progbits
 1356              		.align	1
 1357              		.global	USB_DeActivateRemoteWakeup
 1358              		.syntax unified
 1359              		.thumb
 1360              		.thumb_func
 1361              		.fpu softvfp
 1363              	USB_DeActivateRemoteWakeup:
 1364              	.LFB90:
2212:c/stm32f1xx_ll_usb.c **** 
2213:c/stm32f1xx_ll_usb.c **** /**
2214:c/stm32f1xx_ll_usb.c ****   * @brief  USB_DeActivateRemoteWakeup : de-active remote wakeup signalling
2215:c/stm32f1xx_ll_usb.c ****   * @param  USBx : Selected device
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 64


2216:c/stm32f1xx_ll_usb.c ****   * @retval HAL status
2217:c/stm32f1xx_ll_usb.c ****   */
2218:c/stm32f1xx_ll_usb.c **** HAL_StatusTypeDef USB_DeActivateRemoteWakeup(USB_TypeDef *USBx)
2219:c/stm32f1xx_ll_usb.c **** {
 1365              		.loc 1 2219 0
 1366              		.cfi_startproc
 1367              		@ args = 0, pretend = 0, frame = 0
 1368              		@ frame_needed = 0, uses_anonymous_args = 0
 1369              		@ link register save eliminated.
 1370              	.LVL102:
2220:c/stm32f1xx_ll_usb.c ****   USBx->CNTR &= ~(USB_CNTR_RESUME);
 1371              		.loc 1 2220 0
 1372 0000 B0F84030 		ldrh	r3, [r0, #64]
 1373 0004 23F01003 		bic	r3, r3, #16
 1374 0008 1B04     		lsls	r3, r3, #16
 1375 000a 1B0C     		lsrs	r3, r3, #16
 1376 000c A0F84030 		strh	r3, [r0, #64]	@ movhi
2221:c/stm32f1xx_ll_usb.c ****   return HAL_OK;
2222:c/stm32f1xx_ll_usb.c **** }
 1377              		.loc 1 2222 0
 1378 0010 0020     		movs	r0, #0
 1379              	.LVL103:
 1380 0012 7047     		bx	lr
 1381              		.cfi_endproc
 1382              	.LFE90:
 1384              		.section	.text.USB_WritePMA,"ax",%progbits
 1385              		.align	1
 1386              		.global	USB_WritePMA
 1387              		.syntax unified
 1388              		.thumb
 1389              		.thumb_func
 1390              		.fpu softvfp
 1392              	USB_WritePMA:
 1393              	.LFB91:
2223:c/stm32f1xx_ll_usb.c **** 
2224:c/stm32f1xx_ll_usb.c **** /**
2225:c/stm32f1xx_ll_usb.c ****   * @brief  Copy a buffer from user memory area to packet memory area (PMA)
2226:c/stm32f1xx_ll_usb.c ****   * @param  USBx : pointer to USB register.
2227:c/stm32f1xx_ll_usb.c ****   * @param  pbUsrBuf : pointer to user memory area.
2228:c/stm32f1xx_ll_usb.c ****   * @param  wPMABufAddr : address into PMA.
2229:c/stm32f1xx_ll_usb.c ****   * @param  wNBytes : number of bytes to be copied.
2230:c/stm32f1xx_ll_usb.c ****   * @retval None
2231:c/stm32f1xx_ll_usb.c ****   */
2232:c/stm32f1xx_ll_usb.c **** void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
2233:c/stm32f1xx_ll_usb.c **** {
 1394              		.loc 1 2233 0
 1395              		.cfi_startproc
 1396              		@ args = 0, pretend = 0, frame = 0
 1397              		@ frame_needed = 0, uses_anonymous_args = 0
 1398              	.LVL104:
 1399 0000 10B5     		push	{r4, lr}
 1400              		.cfi_def_cfa_offset 8
 1401              		.cfi_offset 4, -8
 1402              		.cfi_offset 14, -4
2234:c/stm32f1xx_ll_usb.c ****   uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
2235:c/stm32f1xx_ll_usb.c ****   uint32_t index = 0, temp1 = 0, temp2 = 0;
2236:c/stm32f1xx_ll_usb.c ****   uint16_t *pdwVal = NULL;
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 65


2237:c/stm32f1xx_ll_usb.c ****   
2238:c/stm32f1xx_ll_usb.c ****   pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
2239:c/stm32f1xx_ll_usb.c ****   for (index = nbytes; index != 0; index--)
 1403              		.loc 1 2239 0
 1404 0002 0024     		movs	r4, #0
2234:c/stm32f1xx_ll_usb.c ****   uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 1405              		.loc 1 2234 0
 1406 0004 0133     		adds	r3, r3, #1
 1407              	.LVL105:
2238:c/stm32f1xx_ll_usb.c ****   for (index = nbytes; index != 0; index--)
 1408              		.loc 1 2238 0
 1409 0006 00F58060 		add	r0, r0, #1024
 1410              	.LVL106:
2234:c/stm32f1xx_ll_usb.c ****   uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 1411              		.loc 1 2234 0
 1412 000a 5B10     		asrs	r3, r3, #1
 1413              	.LVL107:
2238:c/stm32f1xx_ll_usb.c ****   for (index = nbytes; index != 0; index--)
 1414              		.loc 1 2238 0
 1415 000c 00EB4202 		add	r2, r0, r2, lsl #1
 1416              	.LVL108:
 1417              	.L121:
 1418              		.loc 1 2239 0 discriminator 1
 1419 0010 A342     		cmp	r3, r4
 1420 0012 00D1     		bne	.L122
2240:c/stm32f1xx_ll_usb.c ****   {
2241:c/stm32f1xx_ll_usb.c ****     temp1 = (uint16_t) * pbUsrBuf;
2242:c/stm32f1xx_ll_usb.c ****     pbUsrBuf++;
2243:c/stm32f1xx_ll_usb.c ****     temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
2244:c/stm32f1xx_ll_usb.c ****     *pdwVal++ = temp2;
2245:c/stm32f1xx_ll_usb.c ****     pdwVal++;
2246:c/stm32f1xx_ll_usb.c ****     pbUsrBuf++;
2247:c/stm32f1xx_ll_usb.c ****   }
2248:c/stm32f1xx_ll_usb.c **** }
 1421              		.loc 1 2248 0
 1422 0014 10BD     		pop	{r4, pc}
 1423              	.LVL109:
 1424              	.L122:
 1425 0016 31F8020B 		ldrh	r0, [r1], #2	@ unaligned
 1426              	.LVL110:
2244:c/stm32f1xx_ll_usb.c ****     pdwVal++;
 1427              		.loc 1 2244 0 discriminator 3
 1428 001a 22F82400 		strh	r0, [r2, r4, lsl #2]	@ movhi
 1429              	.LVL111:
 1430 001e 0134     		adds	r4, r4, #1
 1431              	.LVL112:
 1432 0020 F6E7     		b	.L121
 1433              		.cfi_endproc
 1434              	.LFE91:
 1436              		.section	.text.USB_EPStartXfer,"ax",%progbits
 1437              		.align	1
 1438              		.global	USB_EPStartXfer
 1439              		.syntax unified
 1440              		.thumb
 1441              		.thumb_func
 1442              		.fpu softvfp
 1444              	USB_EPStartXfer:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 66


 1445              	.LFB73:
1844:c/stm32f1xx_ll_usb.c ****   uint16_t pmabuffer = 0;
 1446              		.loc 1 1844 0
 1447              		.cfi_startproc
 1448              		@ args = 0, pretend = 0, frame = 0
 1449              		@ frame_needed = 0, uses_anonymous_args = 0
 1450              	.LVL113:
 1451 0000 70B5     		push	{r4, r5, r6, lr}
 1452              		.cfi_def_cfa_offset 16
 1453              		.cfi_offset 4, -16
 1454              		.cfi_offset 5, -12
 1455              		.cfi_offset 6, -8
 1456              		.cfi_offset 14, -4
1844:c/stm32f1xx_ll_usb.c ****   uint16_t pmabuffer = 0;
 1457              		.loc 1 1844 0
 1458 0002 0E46     		mov	r6, r1
1846:c/stm32f1xx_ll_usb.c ****   
 1459              		.loc 1 1846 0
 1460 0004 8A69     		ldr	r2, [r1, #24]
 1461              	.LVL114:
1849:c/stm32f1xx_ll_usb.c ****   {
 1462              		.loc 1 1849 0
 1463 0006 4978     		ldrb	r1, [r1, #1]	@ zero_extendqisi2
 1464              	.LVL115:
1844:c/stm32f1xx_ll_usb.c ****   uint16_t pmabuffer = 0;
 1465              		.loc 1 1844 0
 1466 0008 0546     		mov	r5, r0
1849:c/stm32f1xx_ll_usb.c ****   {
 1467              		.loc 1 1849 0
 1468 000a 0129     		cmp	r1, #1
 1469 000c 3369     		ldr	r3, [r6, #16]
 1470 000e B07A     		ldrb	r0, [r6, #10]	@ zero_extendqisi2
 1471              	.LVL116:
 1472 0010 66D1     		bne	.L124
1852:c/stm32f1xx_ll_usb.c ****     {
 1473              		.loc 1 1852 0
 1474 0012 9A42     		cmp	r2, r3
 1475              	.LVL117:
 1476 0014 1C46     		mov	r4, r3
1860:c/stm32f1xx_ll_usb.c ****     }
 1477              		.loc 1 1860 0
 1478 0016 9BBF     		ittet	ls
 1479 0018 0023     		movls	r3, #0
 1480              	.LVL118:
 1481 001a 1446     		movls	r4, r2
 1482              	.LVL119:
1855:c/stm32f1xx_ll_usb.c ****     }
 1483              		.loc 1 1855 0
 1484 001c D21A     		subhi	r2, r2, r3
1860:c/stm32f1xx_ll_usb.c ****     }
 1485              		.loc 1 1860 0
 1486 001e B361     		strls	r3, [r6, #24]
1855:c/stm32f1xx_ll_usb.c ****     }
 1487              		.loc 1 1855 0
 1488 0020 88BF     		it	hi
 1489 0022 B261     		strhi	r2, [r6, #24]
 1490              	.LVL120:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 67


 1491 0024 A3B2     		uxth	r3, r4
1864:c/stm32f1xx_ll_usb.c ****     {
 1492              		.loc 1 1864 0
 1493 0026 10BB     		cbnz	r0, .L127
1866:c/stm32f1xx_ll_usb.c ****       PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 1494              		.loc 1 1866 0
 1495 0028 B288     		ldrh	r2, [r6, #4]
 1496 002a 7169     		ldr	r1, [r6, #20]
 1497 002c 2846     		mov	r0, r5
 1498 002e FFF7FEFF 		bl	USB_WritePMA
 1499              	.LVL121:
1867:c/stm32f1xx_ll_usb.c ****     }
 1500              		.loc 1 1867 0
 1501 0032 B5F85030 		ldrh	r3, [r5, #80]
 1502 0036 3278     		ldrb	r2, [r6]	@ zero_extendqisi2
 1503 0038 9BB2     		uxth	r3, r3
 1504 003a 0233     		adds	r3, r3, #2
 1505 003c 03EBC203 		add	r3, r3, r2, lsl #3
 1506 0040 05EB4303 		add	r3, r5, r3, lsl #1
 1507 0044 C3F80044 		str	r4, [r3, #1024]
 1508              	.LVL122:
 1509              	.L128:
 1510              	.LBB36:
1888:c/stm32f1xx_ll_usb.c ****   }
 1511              		.loc 1 1888 0
 1512 0048 3278     		ldrb	r2, [r6]	@ zero_extendqisi2
 1513 004a 35F82230 		ldrh	r3, [r5, r2, lsl #2]
 1514 004e 23F4E043 		bic	r3, r3, #28672
 1515 0052 23F04003 		bic	r3, r3, #64
 1516 0056 1B04     		lsls	r3, r3, #16
 1517 0058 1B0C     		lsrs	r3, r3, #16
 1518              	.LVL123:
 1519 005a 83F03003 		eor	r3, r3, #48
 1520              	.LVL124:
 1521              	.L159:
 1522              	.LBE36:
 1523              	.LBB37:
1916:c/stm32f1xx_ll_usb.c ****   }
 1524              		.loc 1 1916 0
 1525 005e 43F40043 		orr	r3, r3, #32768
 1526 0062 43F08003 		orr	r3, r3, #128
 1527 0066 25F82230 		strh	r3, [r5, r2, lsl #2]	@ movhi
 1528              	.LBE37:
1920:c/stm32f1xx_ll_usb.c **** 
 1529              		.loc 1 1920 0
 1530 006a 0020     		movs	r0, #0
 1531 006c 70BD     		pop	{r4, r5, r6, pc}
 1532              	.LVL125:
 1533              	.L127:
1872:c/stm32f1xx_ll_usb.c ****       {
 1534              		.loc 1 1872 0
 1535 006e 3278     		ldrb	r2, [r6]	@ zero_extendqisi2
 1536 0070 35F82210 		ldrh	r1, [r5, r2, lsl #2]
 1537 0074 D200     		lsls	r2, r2, #3
 1538 0076 11F0400F 		tst	r1, #64
1875:c/stm32f1xx_ll_usb.c ****         pmabuffer = ep->pmaaddr1;
 1539              		.loc 1 1875 0
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 68


 1540 007a B5F85010 		ldrh	r1, [r5, #80]
 1541 007e 89B2     		uxth	r1, r1
1872:c/stm32f1xx_ll_usb.c ****       {
 1542              		.loc 1 1872 0
 1543 0080 1AD0     		beq	.L129
1875:c/stm32f1xx_ll_usb.c ****         pmabuffer = ep->pmaaddr1;
 1544              		.loc 1 1875 0 discriminator 11
 1545 0082 0231     		adds	r1, r1, #2
 1546 0084 0A44     		add	r2, r2, r1
 1547 0086 05EB4202 		add	r2, r5, r2, lsl #1
 1548 008a C2F80044 		str	r4, [r2, #1024]
1876:c/stm32f1xx_ll_usb.c ****       }
 1549              		.loc 1 1876 0 discriminator 11
 1550 008e 3289     		ldrh	r2, [r6, #8]
 1551              	.LVL126:
 1552              	.L130:
1884:c/stm32f1xx_ll_usb.c ****       PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 1553              		.loc 1 1884 0
 1554 0090 7169     		ldr	r1, [r6, #20]
 1555 0092 2846     		mov	r0, r5
 1556 0094 FFF7FEFF 		bl	USB_WritePMA
 1557              	.LVL127:
1885:c/stm32f1xx_ll_usb.c ****     }
 1558              		.loc 1 1885 0
 1559 0098 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
 1560 009a 3278     		ldrb	r2, [r6]	@ zero_extendqisi2
 1561 009c 9BB9     		cbnz	r3, .L131
1885:c/stm32f1xx_ll_usb.c ****     }
 1562              		.loc 1 1885 0 is_stmt 0 discriminator 1
 1563 009e 35F82230 		ldrh	r3, [r5, r2, lsl #2]
 1564 00a2 23F0F003 		bic	r3, r3, #240
 1565 00a6 1B05     		lsls	r3, r3, #20
 1566 00a8 1B0D     		lsrs	r3, r3, #20
 1567 00aa 43F40043 		orr	r3, r3, #32768
 1568 00ae 43F0C003 		orr	r3, r3, #192
 1569              	.L157:
1885:c/stm32f1xx_ll_usb.c ****     }
 1570              		.loc 1 1885 0 discriminator 3
 1571 00b2 25F82230 		strh	r3, [r5, r2, lsl #2]	@ movhi
 1572 00b6 C7E7     		b	.L128
 1573              	.LVL128:
 1574              	.L129:
1881:c/stm32f1xx_ll_usb.c ****         pmabuffer = ep->pmaaddr0;
 1575              		.loc 1 1881 0 is_stmt 1 discriminator 11
 1576 00b8 0A44     		add	r2, r2, r1
 1577 00ba 05EB4202 		add	r2, r5, r2, lsl #1
 1578 00be C2F80444 		str	r4, [r2, #1028]
1882:c/stm32f1xx_ll_usb.c ****       }
 1579              		.loc 1 1882 0 discriminator 11
 1580 00c2 F288     		ldrh	r2, [r6, #6]
 1581              	.LVL129:
 1582 00c4 E4E7     		b	.L130
 1583              	.LVL130:
 1584              	.L131:
1885:c/stm32f1xx_ll_usb.c ****     }
 1585              		.loc 1 1885 0 discriminator 2
 1586 00c6 012B     		cmp	r3, #1
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 69


 1587 00c8 BED1     		bne	.L128
1885:c/stm32f1xx_ll_usb.c ****     }
 1588              		.loc 1 1885 0 is_stmt 0 discriminator 3
 1589 00ca 35F82230 		ldrh	r3, [r5, r2, lsl #2]
 1590 00ce 23F0F003 		bic	r3, r3, #240
 1591 00d2 1B05     		lsls	r3, r3, #20
 1592 00d4 1B0D     		lsrs	r3, r3, #20
 1593 00d6 43F44043 		orr	r3, r3, #49152
 1594 00da 43F08003 		orr	r3, r3, #128
 1595 00de E8E7     		b	.L157
 1596              	.LVL131:
 1597              	.L124:
1893:c/stm32f1xx_ll_usb.c ****     {
 1598              		.loc 1 1893 0 is_stmt 1
 1599 00e0 9A42     		cmp	r2, r3
 1600              	.LVL132:
1901:c/stm32f1xx_ll_usb.c ****     }
 1601              		.loc 1 1901 0
 1602 00e2 93BF     		iteet	ls
 1603 00e4 0023     		movls	r3, #0
 1604              	.LVL133:
1896:c/stm32f1xx_ll_usb.c ****     }
 1605              		.loc 1 1896 0
 1606 00e6 D21A     		subhi	r2, r2, r3
 1607 00e8 B261     		strhi	r2, [r6, #24]
 1608              	.LVL134:
1901:c/stm32f1xx_ll_usb.c ****     }
 1609              		.loc 1 1901 0
 1610 00ea B361     		strls	r3, [r6, #24]
 1611 00ec 98BF     		it	ls
 1612 00ee 1346     		movls	r3, r2
 1613              	.LVL135:
 1614 00f0 3278     		ldrb	r2, [r6]	@ zero_extendqisi2
1905:c/stm32f1xx_ll_usb.c ****     {
 1615              		.loc 1 1905 0
 1616 00f2 70BB     		cbnz	r0, .L135
 1617              	.LBB38:
1908:c/stm32f1xx_ll_usb.c ****     }
 1618              		.loc 1 1908 0
 1619 00f4 B5F85010 		ldrh	r1, [r5, #80]
 1620              	.LBB39:
 1621 00f8 3E2B     		cmp	r3, #62
 1622              	.LBE39:
 1623 00fa 89B2     		uxth	r1, r1
 1624 00fc 01F10601 		add	r1, r1, #6
 1625 0100 01EBC201 		add	r1, r1, r2, lsl #3
 1626 0104 05F58060 		add	r0, r5, #1024
 1627              	.LVL136:
 1628              	.LBB40:
 1629 0108 18D9     		bls	.L136
1908:c/stm32f1xx_ll_usb.c ****     }
 1630              		.loc 1 1908 0 is_stmt 0 discriminator 1
 1631 010a C3F34F12 		ubfx	r2, r3, #5, #16
 1632              	.LVL137:
 1633 010e DB06     		lsls	r3, r3, #27
 1634              	.LVL138:
 1635 0110 04BF     		itt	eq
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 70


 1636 0112 02F1FF33 		addeq	r3, r2, #-1
 1637 0116 9AB2     		uxtheq	r2, r3
 1638              	.LVL139:
 1639 0118 384B     		ldr	r3, .L160
 1640 011a 43EA8223 		orr	r3, r3, r2, lsl #10
 1641 011e 9BB2     		uxth	r3, r3
 1642 0120 40F81130 		str	r3, [r0, r1, lsl #1]
 1643              	.LVL140:
 1644              	.L138:
 1645              	.LBE40:
 1646              	.LBE38:
 1647              	.LBB42:
1916:c/stm32f1xx_ll_usb.c ****   }
 1648              		.loc 1 1916 0 is_stmt 1
 1649 0124 3278     		ldrb	r2, [r6]	@ zero_extendqisi2
 1650 0126 35F82230 		ldrh	r3, [r5, r2, lsl #2]
 1651 012a 23F48043 		bic	r3, r3, #16384
 1652 012e 23F07003 		bic	r3, r3, #112
 1653 0132 1B04     		lsls	r3, r3, #16
 1654 0134 1B0C     		lsrs	r3, r3, #16
 1655              	.LVL141:
 1656 0136 83F44053 		eor	r3, r3, #12288
 1657              	.LVL142:
 1658 013a 90E7     		b	.L159
 1659              	.LVL143:
 1660              	.L136:
 1661              	.LBE42:
 1662              	.LBB43:
 1663              	.LBB41:
1908:c/stm32f1xx_ll_usb.c ****     }
 1664              		.loc 1 1908 0 discriminator 2
 1665 013c C3F34F02 		ubfx	r2, r3, #1, #16
 1666              	.LVL144:
 1667 0140 DC07     		lsls	r4, r3, #31
 1668 0142 44BF     		itt	mi
 1669 0144 0132     		addmi	r2, r2, #1
 1670              	.LVL145:
 1671 0146 92B2     		uxthmi	r2, r2
 1672              	.LVL146:
 1673 0148 9202     		lsls	r2, r2, #10
 1674              	.LVL147:
 1675 014a 92B2     		uxth	r2, r2
 1676 014c 40F81120 		str	r2, [r0, r1, lsl #1]
 1677 0150 E8E7     		b	.L138
 1678              	.LVL148:
 1679              	.L135:
 1680              	.LBE41:
 1681              	.LBE43:
1913:c/stm32f1xx_ll_usb.c ****     }
 1682              		.loc 1 1913 0
 1683 0152 B9B9     		cbnz	r1, .L140
 1684              	.LBB44:
1913:c/stm32f1xx_ll_usb.c ****     }
 1685              		.loc 1 1913 0 is_stmt 0 discriminator 1
 1686 0154 B5F85010 		ldrh	r1, [r5, #80]
 1687              	.LBB45:
 1688 0158 3E2B     		cmp	r3, #62
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 71


 1689              	.LBE45:
 1690 015a 89B2     		uxth	r1, r1
 1691 015c 01F10201 		add	r1, r1, #2
 1692 0160 01EBC201 		add	r1, r1, r2, lsl #3
 1693 0164 05F58064 		add	r4, r5, #1024
 1694              	.LVL149:
 1695              	.LBB46:
 1696 0168 28D9     		bls	.L141
1913:c/stm32f1xx_ll_usb.c ****     }
 1697              		.loc 1 1913 0 discriminator 3
 1698 016a C3F34F10 		ubfx	r0, r3, #5, #16
 1699              	.LVL150:
 1700 016e DA06     		lsls	r2, r3, #27
 1701 0170 04BF     		itt	eq
 1702 0172 00F1FF32 		addeq	r2, r0, #-1
 1703 0176 90B2     		uxtheq	r0, r2
 1704              	.LVL151:
 1705 0178 204A     		ldr	r2, .L160
 1706 017a 42EA8022 		orr	r2, r2, r0, lsl #10
 1707              	.LVL152:
 1708              	.L158:
1913:c/stm32f1xx_ll_usb.c ****     }
 1709              		.loc 1 1913 0 discriminator 10
 1710 017e 92B2     		uxth	r2, r2
 1711 0180 44F81120 		str	r2, [r4, r1, lsl #1]
 1712              	.LVL153:
 1713              	.L140:
 1714              	.LBE46:
 1715              	.LBE44:
1913:c/stm32f1xx_ll_usb.c ****     }
 1716              		.loc 1 1913 0 discriminator 13
 1717 0184 7278     		ldrb	r2, [r6, #1]	@ zero_extendqisi2
 1718 0186 3178     		ldrb	r1, [r6]	@ zero_extendqisi2
 1719 0188 5ABB     		cbnz	r2, .L144
 1720              	.LBB48:
1913:c/stm32f1xx_ll_usb.c ****     }
 1721              		.loc 1 1913 0 discriminator 14
 1722 018a B5F85020 		ldrh	r2, [r5, #80]
 1723              	.LBB49:
 1724 018e 3E2B     		cmp	r3, #62
 1725              	.LBE49:
 1726 0190 92B2     		uxth	r2, r2
 1727 0192 02F10602 		add	r2, r2, #6
 1728 0196 02EBC102 		add	r2, r2, r1, lsl #3
 1729 019a 05F58060 		add	r0, r5, #1024
 1730              	.LVL154:
 1731              	.LBB50:
 1732 019e 15D9     		bls	.L145
1913:c/stm32f1xx_ll_usb.c ****     }
 1733              		.loc 1 1913 0 discriminator 16
 1734 01a0 C3F34F11 		ubfx	r1, r3, #5, #16
 1735              	.LVL155:
 1736 01a4 DC06     		lsls	r4, r3, #27
 1737 01a6 04BF     		itt	eq
 1738 01a8 01F1FF33 		addeq	r3, r1, #-1
 1739              	.LVL156:
 1740 01ac 99B2     		uxtheq	r1, r3
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 72


 1741              	.LVL157:
 1742 01ae 134B     		ldr	r3, .L160
 1743 01b0 43EA8123 		orr	r3, r3, r1, lsl #10
 1744 01b4 9BB2     		uxth	r3, r3
 1745 01b6 40F81230 		str	r3, [r0, r2, lsl #1]
 1746 01ba B3E7     		b	.L138
 1747              	.LVL158:
 1748              	.L141:
 1749              	.LBE50:
 1750              	.LBE48:
 1751              	.LBB52:
 1752              	.LBB47:
1913:c/stm32f1xx_ll_usb.c ****     }
 1753              		.loc 1 1913 0 discriminator 4
 1754 01bc C3F34F02 		ubfx	r2, r3, #1, #16
 1755              	.LVL159:
 1756 01c0 D807     		lsls	r0, r3, #31
 1757 01c2 44BF     		itt	mi
 1758 01c4 0132     		addmi	r2, r2, #1
 1759              	.LVL160:
 1760 01c6 92B2     		uxthmi	r2, r2
 1761              	.LVL161:
 1762 01c8 9202     		lsls	r2, r2, #10
 1763              	.LVL162:
 1764 01ca D8E7     		b	.L158
 1765              	.LVL163:
 1766              	.L145:
 1767              	.LBE47:
 1768              	.LBE52:
 1769              	.LBB53:
 1770              	.LBB51:
1913:c/stm32f1xx_ll_usb.c ****     }
 1771              		.loc 1 1913 0 discriminator 17
 1772 01cc C3F34F01 		ubfx	r1, r3, #1, #16
 1773              	.LVL164:
 1774 01d0 DB07     		lsls	r3, r3, #31
 1775              	.LVL165:
 1776 01d2 44BF     		itt	mi
 1777 01d4 0131     		addmi	r1, r1, #1
 1778              	.LVL166:
 1779 01d6 89B2     		uxthmi	r1, r1
 1780              	.LVL167:
 1781 01d8 8902     		lsls	r1, r1, #10
 1782              	.LVL168:
 1783 01da 89B2     		uxth	r1, r1
 1784 01dc 40F81210 		str	r1, [r0, r2, lsl #1]
 1785 01e0 A0E7     		b	.L138
 1786              	.LVL169:
 1787              	.L144:
 1788              	.LBE51:
 1789              	.LBE53:
1913:c/stm32f1xx_ll_usb.c ****     }
 1790              		.loc 1 1913 0 discriminator 15
 1791 01e2 012A     		cmp	r2, #1
 1792 01e4 9ED1     		bne	.L138
1913:c/stm32f1xx_ll_usb.c ****     }
 1793              		.loc 1 1913 0 discriminator 24
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 73


 1794 01e6 B5F85020 		ldrh	r2, [r5, #80]
 1795 01ea 92B2     		uxth	r2, r2
 1796 01ec 0232     		adds	r2, r2, #2
 1797 01ee 02EBC102 		add	r2, r2, r1, lsl #3
 1798 01f2 05EB4202 		add	r2, r5, r2, lsl #1
 1799 01f6 C2F80034 		str	r3, [r2, #1024]
 1800 01fa 93E7     		b	.L138
 1801              	.L161:
 1802              		.align	2
 1803              	.L160:
 1804 01fc 0080FFFF 		.word	-32768
 1805              		.cfi_endproc
 1806              	.LFE73:
 1808              		.section	.text.USB_ReadPMA,"ax",%progbits
 1809              		.align	1
 1810              		.global	USB_ReadPMA
 1811              		.syntax unified
 1812              		.thumb
 1813              		.thumb_func
 1814              		.fpu softvfp
 1816              	USB_ReadPMA:
 1817              	.LFB92:
2249:c/stm32f1xx_ll_usb.c **** 
2250:c/stm32f1xx_ll_usb.c **** /**
2251:c/stm32f1xx_ll_usb.c ****   * @brief  Copy a buffer from user memory area to packet memory area (PMA)
2252:c/stm32f1xx_ll_usb.c ****   * @param  USBx : pointer to USB register.
2253:c/stm32f1xx_ll_usb.c **** * @param  pbUsrBuf : pointer to user memory area.
2254:c/stm32f1xx_ll_usb.c ****   * @param  wPMABufAddr : address into PMA.
2255:c/stm32f1xx_ll_usb.c ****   * @param  wNBytes : number of bytes to be copied.
2256:c/stm32f1xx_ll_usb.c ****   * @retval None
2257:c/stm32f1xx_ll_usb.c ****   */
2258:c/stm32f1xx_ll_usb.c **** void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
2259:c/stm32f1xx_ll_usb.c **** {
 1818              		.loc 1 2259 0 is_stmt 1
 1819              		.cfi_startproc
 1820              		@ args = 0, pretend = 0, frame = 0
 1821              		@ frame_needed = 0, uses_anonymous_args = 0
 1822              	.LVL170:
 1823 0000 10B5     		push	{r4, lr}
 1824              		.cfi_def_cfa_offset 8
 1825              		.cfi_offset 4, -8
 1826              		.cfi_offset 14, -4
2260:c/stm32f1xx_ll_usb.c ****   uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
2261:c/stm32f1xx_ll_usb.c ****   uint32_t index = 0;
2262:c/stm32f1xx_ll_usb.c ****   uint32_t *pdwVal = NULL;
2263:c/stm32f1xx_ll_usb.c ****   
2264:c/stm32f1xx_ll_usb.c ****   pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
2265:c/stm32f1xx_ll_usb.c ****   for (index = nbytes; index != 0; index--)
 1827              		.loc 1 2265 0
 1828 0002 0024     		movs	r4, #0
2260:c/stm32f1xx_ll_usb.c ****   uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 1829              		.loc 1 2260 0
 1830 0004 0133     		adds	r3, r3, #1
 1831              	.LVL171:
2264:c/stm32f1xx_ll_usb.c ****   for (index = nbytes; index != 0; index--)
 1832              		.loc 1 2264 0
 1833 0006 00F58060 		add	r0, r0, #1024
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 74


 1834              	.LVL172:
2260:c/stm32f1xx_ll_usb.c ****   uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 1835              		.loc 1 2260 0
 1836 000a 5B10     		asrs	r3, r3, #1
 1837              	.LVL173:
2264:c/stm32f1xx_ll_usb.c ****   for (index = nbytes; index != 0; index--)
 1838              		.loc 1 2264 0
 1839 000c 00EB4202 		add	r2, r0, r2, lsl #1
 1840              	.LVL174:
 1841              	.L163:
 1842              		.loc 1 2265 0 discriminator 1
 1843 0010 A342     		cmp	r3, r4
 1844 0012 00D1     		bne	.L164
2266:c/stm32f1xx_ll_usb.c ****   {
2267:c/stm32f1xx_ll_usb.c ****     *(uint16_t*)pbUsrBuf++ = *pdwVal++;
2268:c/stm32f1xx_ll_usb.c ****     pbUsrBuf++;
2269:c/stm32f1xx_ll_usb.c ****   }
2270:c/stm32f1xx_ll_usb.c **** }
 1845              		.loc 1 2270 0
 1846 0014 10BD     		pop	{r4, pc}
 1847              	.LVL175:
 1848              	.L164:
2267:c/stm32f1xx_ll_usb.c ****     pbUsrBuf++;
 1849              		.loc 1 2267 0 discriminator 3
 1850 0016 52F82400 		ldr	r0, [r2, r4, lsl #2]
 1851 001a 21F81400 		strh	r0, [r1, r4, lsl #1]	@ movhi
 1852              	.LVL176:
 1853 001e 0134     		adds	r4, r4, #1
 1854              	.LVL177:
 1855 0020 F6E7     		b	.L163
 1856              		.cfi_endproc
 1857              	.LFE92:
 1859              		.text
 1860              	.Letext0:
 1861              		.file 2 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/machine/_
 1862              		.file 3 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_stdi
 1863              		.file 4 "c/core_cm3.h"
 1864              		.file 5 "c/system_stm32f1xx.h"
 1865              		.file 6 "c/stm32f103xb.h"
 1866              		.file 7 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/lock.
 1867              		.file 8 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_type
 1868              		.file 9 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/lib/gcc/arm-none-eabi/6.3.1/inc
 1869              		.file 10 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/reen
 1870              		.file 11 "c/stm32f1xx_hal_def.h"
 1871              		.file 12 "c/stm32f1xx_ll_usb.h"
 1872              		.file 13 "c/stm32f1xx_hal_pcd.h"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 75


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_ll_usb.c
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:16     .text.USB_CoreInit:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:23     .text.USB_CoreInit:0000000000000000 USB_CoreInit
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:47     .text.USB_EnableGlobalInt:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:54     .text.USB_EnableGlobalInt:0000000000000000 USB_EnableGlobalInt
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:75     .text.USB_DisableGlobalInt:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:82     .text.USB_DisableGlobalInt:0000000000000000 USB_DisableGlobalInt
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:104    .text.USB_SetCurrentMode:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:111    .text.USB_SetCurrentMode:0000000000000000 USB_SetCurrentMode
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:127    .text.USB_DevInit:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:134    .text.USB_DevInit:0000000000000000 USB_DevInit
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:193    .text.USB_FlushTxFifo:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:200    .text.USB_FlushTxFifo:0000000000000000 USB_FlushTxFifo
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:216    .text.USB_FlushRxFifo:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:223    .text.USB_FlushRxFifo:0000000000000000 USB_FlushRxFifo
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:235    .text.USB_ActivateEndpoint:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:242    .text.USB_ActivateEndpoint:0000000000000000 USB_ActivateEndpoint
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:263    .text.USB_ActivateEndpoint:000000000000000e $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:267    .text.USB_ActivateEndpoint:0000000000000012 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:626    .text.USB_ActivateEndpoint:00000000000002e0 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:632    .text.USB_DeactivateEndpoint:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:639    .text.USB_DeactivateEndpoint:0000000000000000 USB_DeactivateEndpoint
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:859    .text.USB_WritePacket:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:866    .text.USB_WritePacket:0000000000000000 USB_WritePacket
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:882    .text.USB_ReadPacket:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:889    .text.USB_ReadPacket:0000000000000000 USB_ReadPacket
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:905    .text.USB_EPSetStall:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:912    .text.USB_EPSetStall:0000000000000000 USB_EPSetStall
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:981    .text.USB_EPClearStall:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:988    .text.USB_EPClearStall:0000000000000000 USB_EPClearStall
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:1068   .text.USB_StopDevice:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:1075   .text.USB_StopDevice:0000000000000000 USB_StopDevice
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:1104   .text.USB_SetDevAddress:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:1111   .text.USB_SetDevAddress:0000000000000000 USB_SetDevAddress
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:1133   .text.USB_DevConnect:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:1140   .text.USB_DevConnect:0000000000000000 USB_DevConnect
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:1152   .text.USB_DevDisconnect:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:1159   .text.USB_DevDisconnect:0000000000000000 USB_DevDisconnect
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:1175   .text.USB_ReadInterrupts:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:1182   .text.USB_ReadInterrupts:0000000000000000 USB_ReadInterrupts
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:1201   .text.USB_ReadDevAllOutEpInterrupt:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:1208   .text.USB_ReadDevAllOutEpInterrupt:0000000000000000 USB_ReadDevAllOutEpInterrupt
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:1220   .text.USB_ReadDevAllInEpInterrupt:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:1227   .text.USB_ReadDevAllInEpInterrupt:0000000000000000 USB_ReadDevAllInEpInterrupt
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:1243   .text.USB_ReadDevOutEPInterrupt:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:1250   .text.USB_ReadDevOutEPInterrupt:0000000000000000 USB_ReadDevOutEPInterrupt
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:1262   .text.USB_ReadDevInEPInterrupt:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:1269   .text.USB_ReadDevInEPInterrupt:0000000000000000 USB_ReadDevInEPInterrupt
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:1285   .text.USB_ClearInterrupts:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:1292   .text.USB_ClearInterrupts:0000000000000000 USB_ClearInterrupts
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:1305   .text.USB_EP0_OutStart:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:1312   .text.USB_EP0_OutStart:0000000000000000 USB_EP0_OutStart
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:1328   .text.USB_ActivateRemoteWakeup:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:1335   .text.USB_ActivateRemoteWakeup:0000000000000000 USB_ActivateRemoteWakeup
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:1356   .text.USB_DeActivateRemoteWakeup:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:1363   .text.USB_DeActivateRemoteWakeup:0000000000000000 USB_DeActivateRemoteWakeup
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s 			page 76


/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:1385   .text.USB_WritePMA:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:1392   .text.USB_WritePMA:0000000000000000 USB_WritePMA
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:1437   .text.USB_EPStartXfer:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:1444   .text.USB_EPStartXfer:0000000000000000 USB_EPStartXfer
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:1804   .text.USB_EPStartXfer:00000000000001fc $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:1809   .text.USB_ReadPMA:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccS9p27h.s:1816   .text.USB_ReadPMA:0000000000000000 USB_ReadPMA
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
exit code: 0
OPT_LEVEL = Some("s")
HOST = Some("x86_64-apple-darwin")
CFLAGS_arm-none-eabi = None
CFLAGS_arm_none_eabi = None
TARGET_CFLAGS = None
CFLAGS = None
DEBUG = Some("true")
running: "arm-none-eabi-gcc" "-Os" "-ffunction-sections" "-fdata-sections" "-g" "-DSTM32F103xB" "-DUSE_HAL_DRIVER" "-mcpu=cortex-m3" "-mthumb" "-Wall" "-fdata-sections" "-ffunction-sections" "-Wa,-a,-ad" "-g" "-Wall" "-Wextra" "-o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/system_stm32f1xx.o" "-c" "c/system_stm32f1xx.c"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccvvISXX.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"system_stm32f1xx.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.SystemInit,"ax",%progbits
  16              		.align	1
  17              		.global	SystemInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	SystemInit:
  24              	.LFB64:
  25              		.file 1 "c/system_stm32f1xx.c"
   1:c/system_stm32f1xx.c **** /**
   2:c/system_stm32f1xx.c ****   ******************************************************************************
   3:c/system_stm32f1xx.c ****   * @file    system_stm32f1xx.c
   4:c/system_stm32f1xx.c ****   * @author  MCD Application Team
   5:c/system_stm32f1xx.c ****   * @version V4.2.0
   6:c/system_stm32f1xx.c ****   * @date    31-March-2017
   7:c/system_stm32f1xx.c ****   * @brief   CMSIS Cortex-M3 Device Peripheral Access Layer System Source File.
   8:c/system_stm32f1xx.c ****   * 
   9:c/system_stm32f1xx.c ****   * 1.  This file provides two functions and one global variable to be called from 
  10:c/system_stm32f1xx.c ****   *     user application:
  11:c/system_stm32f1xx.c ****   *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
  12:c/system_stm32f1xx.c ****   *                      factors, AHB/APBx prescalers and Flash settings). 
  13:c/system_stm32f1xx.c ****   *                      This function is called at startup just after reset and 
  14:c/system_stm32f1xx.c ****   *                      before branch to main program. This call is made inside
  15:c/system_stm32f1xx.c ****   *                      the "startup_stm32f1xx_xx.s" file.
  16:c/system_stm32f1xx.c ****   *
  17:c/system_stm32f1xx.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  18:c/system_stm32f1xx.c ****   *                                  by the user application to setup the SysTick 
  19:c/system_stm32f1xx.c ****   *                                  timer or configure other parameters.
  20:c/system_stm32f1xx.c ****   *                                     
  21:c/system_stm32f1xx.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  22:c/system_stm32f1xx.c ****   *                                 be called whenever the core clock is changed
  23:c/system_stm32f1xx.c ****   *                                 during program execution.
  24:c/system_stm32f1xx.c ****   *
  25:c/system_stm32f1xx.c ****   * 2. After each device reset the HSI (8 MHz) is used as system clock source.
  26:c/system_stm32f1xx.c ****   *    Then SystemInit() function is called, in "startup_stm32f1xx_xx.s" file, to
  27:c/system_stm32f1xx.c ****   *    configure the system clock before to branch to main program.
  28:c/system_stm32f1xx.c ****   *
  29:c/system_stm32f1xx.c ****   * 4. The default value of HSE crystal is set to 8 MHz (or 25 MHz, depending on
  30:c/system_stm32f1xx.c ****   *    the product used), refer to "HSE_VALUE". 
  31:c/system_stm32f1xx.c ****   *    When HSE is used as system clock source, directly or through PLL, and you
  32:c/system_stm32f1xx.c ****   *    are using different crystal you have to adapt the HSE value to your own
  33:c/system_stm32f1xx.c ****   *    configuration.
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccvvISXX.s 			page 2


  34:c/system_stm32f1xx.c ****   *        
  35:c/system_stm32f1xx.c ****   ******************************************************************************
  36:c/system_stm32f1xx.c ****   * @attention
  37:c/system_stm32f1xx.c ****   *
  38:c/system_stm32f1xx.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  39:c/system_stm32f1xx.c ****   *
  40:c/system_stm32f1xx.c ****   * Redistribution and use in source and binary forms, with or without modification,
  41:c/system_stm32f1xx.c ****   * are permitted provided that the following conditions are met:
  42:c/system_stm32f1xx.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  43:c/system_stm32f1xx.c ****   *      this list of conditions and the following disclaimer.
  44:c/system_stm32f1xx.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  45:c/system_stm32f1xx.c ****   *      this list of conditions and the following disclaimer in the documentation
  46:c/system_stm32f1xx.c ****   *      and/or other materials provided with the distribution.
  47:c/system_stm32f1xx.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  48:c/system_stm32f1xx.c ****   *      may be used to endorse or promote products derived from this software
  49:c/system_stm32f1xx.c ****   *      without specific prior written permission.
  50:c/system_stm32f1xx.c ****   *
  51:c/system_stm32f1xx.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  52:c/system_stm32f1xx.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  53:c/system_stm32f1xx.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  54:c/system_stm32f1xx.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  55:c/system_stm32f1xx.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  56:c/system_stm32f1xx.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  57:c/system_stm32f1xx.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  58:c/system_stm32f1xx.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  59:c/system_stm32f1xx.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  60:c/system_stm32f1xx.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  61:c/system_stm32f1xx.c ****   *
  62:c/system_stm32f1xx.c ****   ******************************************************************************
  63:c/system_stm32f1xx.c ****   */
  64:c/system_stm32f1xx.c **** 
  65:c/system_stm32f1xx.c **** /** @addtogroup CMSIS
  66:c/system_stm32f1xx.c ****   * @{
  67:c/system_stm32f1xx.c ****   */
  68:c/system_stm32f1xx.c **** 
  69:c/system_stm32f1xx.c **** /** @addtogroup stm32f1xx_system
  70:c/system_stm32f1xx.c ****   * @{
  71:c/system_stm32f1xx.c ****   */  
  72:c/system_stm32f1xx.c ****   
  73:c/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_Includes
  74:c/system_stm32f1xx.c ****   * @{
  75:c/system_stm32f1xx.c ****   */
  76:c/system_stm32f1xx.c **** 
  77:c/system_stm32f1xx.c **** #include "stm32f1xx.h"
  78:c/system_stm32f1xx.c **** 
  79:c/system_stm32f1xx.c **** /**
  80:c/system_stm32f1xx.c ****   * @}
  81:c/system_stm32f1xx.c ****   */
  82:c/system_stm32f1xx.c **** 
  83:c/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_TypesDefinitions
  84:c/system_stm32f1xx.c ****   * @{
  85:c/system_stm32f1xx.c ****   */
  86:c/system_stm32f1xx.c **** 
  87:c/system_stm32f1xx.c **** /**
  88:c/system_stm32f1xx.c ****   * @}
  89:c/system_stm32f1xx.c ****   */
  90:c/system_stm32f1xx.c **** 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccvvISXX.s 			page 3


  91:c/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_Defines
  92:c/system_stm32f1xx.c ****   * @{
  93:c/system_stm32f1xx.c ****   */
  94:c/system_stm32f1xx.c **** 
  95:c/system_stm32f1xx.c **** #if !defined  (HSE_VALUE) 
  96:c/system_stm32f1xx.c ****   #define HSE_VALUE               8000000U /*!< Default value of the External oscillator in Hz.
  97:c/system_stm32f1xx.c ****                                                 This value can be provided and adapted by the user 
  98:c/system_stm32f1xx.c **** #endif /* HSE_VALUE */
  99:c/system_stm32f1xx.c **** 
 100:c/system_stm32f1xx.c **** #if !defined  (HSI_VALUE)
 101:c/system_stm32f1xx.c ****   #define HSI_VALUE               8000000U /*!< Default value of the Internal oscillator in Hz.
 102:c/system_stm32f1xx.c ****                                                 This value can be provided and adapted by the user 
 103:c/system_stm32f1xx.c **** #endif /* HSI_VALUE */
 104:c/system_stm32f1xx.c **** 
 105:c/system_stm32f1xx.c **** /*!< Uncomment the following line if you need to use external SRAM  */ 
 106:c/system_stm32f1xx.c **** #if defined(STM32F100xE) || defined(STM32F101xE) || defined(STM32F101xG) || defined(STM32F103xE) ||
 107:c/system_stm32f1xx.c **** /* #define DATA_IN_ExtSRAM */
 108:c/system_stm32f1xx.c **** #endif /* STM32F100xE || STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG */
 109:c/system_stm32f1xx.c **** 
 110:c/system_stm32f1xx.c **** /*!< Uncomment the following line if you need to relocate your vector Table in
 111:c/system_stm32f1xx.c ****      Internal SRAM. */ 
 112:c/system_stm32f1xx.c **** /* #define VECT_TAB_SRAM */
 113:c/system_stm32f1xx.c **** #define VECT_TAB_OFFSET  0x00000000U /*!< Vector Table base offset field. 
 114:c/system_stm32f1xx.c ****                                   This value must be a multiple of 0x200. */
 115:c/system_stm32f1xx.c **** 
 116:c/system_stm32f1xx.c **** 
 117:c/system_stm32f1xx.c **** /**
 118:c/system_stm32f1xx.c ****   * @}
 119:c/system_stm32f1xx.c ****   */
 120:c/system_stm32f1xx.c **** 
 121:c/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_Macros
 122:c/system_stm32f1xx.c ****   * @{
 123:c/system_stm32f1xx.c ****   */
 124:c/system_stm32f1xx.c **** 
 125:c/system_stm32f1xx.c **** /**
 126:c/system_stm32f1xx.c ****   * @}
 127:c/system_stm32f1xx.c ****   */
 128:c/system_stm32f1xx.c **** 
 129:c/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_Variables
 130:c/system_stm32f1xx.c ****   * @{
 131:c/system_stm32f1xx.c ****   */
 132:c/system_stm32f1xx.c **** 
 133:c/system_stm32f1xx.c **** /*******************************************************************************
 134:c/system_stm32f1xx.c **** *  Clock Definitions
 135:c/system_stm32f1xx.c **** *******************************************************************************/
 136:c/system_stm32f1xx.c **** #if defined(STM32F100xB) ||defined(STM32F100xE)
 137:c/system_stm32f1xx.c ****   uint32_t SystemCoreClock         = 24000000U;        /*!< System Clock Frequency (Core Clock) */
 138:c/system_stm32f1xx.c **** #else /*!< HSI Selected as System Clock source */
 139:c/system_stm32f1xx.c ****   uint32_t SystemCoreClock         = 72000000U;        /*!< System Clock Frequency (Core Clock) */
 140:c/system_stm32f1xx.c **** #endif
 141:c/system_stm32f1xx.c **** 
 142:c/system_stm32f1xx.c **** const uint8_t AHBPrescTable[16U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 143:c/system_stm32f1xx.c **** const uint8_t APBPrescTable[8U] =  {0, 0, 0, 0, 1, 2, 3, 4};
 144:c/system_stm32f1xx.c **** 
 145:c/system_stm32f1xx.c **** /**
 146:c/system_stm32f1xx.c ****   * @}
 147:c/system_stm32f1xx.c ****   */
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccvvISXX.s 			page 4


 148:c/system_stm32f1xx.c **** 
 149:c/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_FunctionPrototypes
 150:c/system_stm32f1xx.c ****   * @{
 151:c/system_stm32f1xx.c ****   */
 152:c/system_stm32f1xx.c **** 
 153:c/system_stm32f1xx.c **** #if defined(STM32F100xE) || defined(STM32F101xE) || defined(STM32F101xG) || defined(STM32F103xE) ||
 154:c/system_stm32f1xx.c **** #ifdef DATA_IN_ExtSRAM
 155:c/system_stm32f1xx.c ****   static void SystemInit_ExtMemCtl(void); 
 156:c/system_stm32f1xx.c **** #endif /* DATA_IN_ExtSRAM */
 157:c/system_stm32f1xx.c **** #endif /* STM32F100xE || STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG */
 158:c/system_stm32f1xx.c **** 
 159:c/system_stm32f1xx.c **** /**
 160:c/system_stm32f1xx.c ****   * @}
 161:c/system_stm32f1xx.c ****   */
 162:c/system_stm32f1xx.c **** 
 163:c/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_Functions
 164:c/system_stm32f1xx.c ****   * @{
 165:c/system_stm32f1xx.c ****   */
 166:c/system_stm32f1xx.c **** 
 167:c/system_stm32f1xx.c **** /**
 168:c/system_stm32f1xx.c ****   * @brief  Setup the microcontroller system
 169:c/system_stm32f1xx.c ****   *         Initialize the Embedded Flash Interface, the PLL and update the 
 170:c/system_stm32f1xx.c ****   *         SystemCoreClock variable.
 171:c/system_stm32f1xx.c ****   * @note   This function should be used only after reset.
 172:c/system_stm32f1xx.c ****   * @param  None
 173:c/system_stm32f1xx.c ****   * @retval None
 174:c/system_stm32f1xx.c ****   */
 175:c/system_stm32f1xx.c **** void SystemInit (void)
 176:c/system_stm32f1xx.c **** {
  26              		.loc 1 176 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
 177:c/system_stm32f1xx.c ****   /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
 178:c/system_stm32f1xx.c ****   /* Set HSION bit */
 179:c/system_stm32f1xx.c ****   RCC->CR |= 0x00000001U;
  31              		.loc 1 179 0
  32 0000 0F4B     		ldr	r3, .L2
  33 0002 1A68     		ldr	r2, [r3]
  34 0004 42F00102 		orr	r2, r2, #1
  35 0008 1A60     		str	r2, [r3]
 180:c/system_stm32f1xx.c **** 
 181:c/system_stm32f1xx.c ****   /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
 182:c/system_stm32f1xx.c **** #if !defined(STM32F105xC) && !defined(STM32F107xC)
 183:c/system_stm32f1xx.c ****   RCC->CFGR &= 0xF8FF0000U;
  36              		.loc 1 183 0
  37 000a 5968     		ldr	r1, [r3, #4]
  38 000c 0D4A     		ldr	r2, .L2+4
  39 000e 0A40     		ands	r2, r2, r1
  40 0010 5A60     		str	r2, [r3, #4]
 184:c/system_stm32f1xx.c **** #else
 185:c/system_stm32f1xx.c ****   RCC->CFGR &= 0xF0FF0000U;
 186:c/system_stm32f1xx.c **** #endif /* STM32F105xC */   
 187:c/system_stm32f1xx.c ****   
 188:c/system_stm32f1xx.c ****   /* Reset HSEON, CSSON and PLLON bits */
 189:c/system_stm32f1xx.c ****   RCC->CR &= 0xFEF6FFFFU;
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccvvISXX.s 			page 5


  41              		.loc 1 189 0
  42 0012 1A68     		ldr	r2, [r3]
  43 0014 22F08472 		bic	r2, r2, #17301504
  44 0018 22F48032 		bic	r2, r2, #65536
  45 001c 1A60     		str	r2, [r3]
 190:c/system_stm32f1xx.c **** 
 191:c/system_stm32f1xx.c ****   /* Reset HSEBYP bit */
 192:c/system_stm32f1xx.c ****   RCC->CR &= 0xFFFBFFFFU;
  46              		.loc 1 192 0
  47 001e 1A68     		ldr	r2, [r3]
  48 0020 22F48022 		bic	r2, r2, #262144
  49 0024 1A60     		str	r2, [r3]
 193:c/system_stm32f1xx.c **** 
 194:c/system_stm32f1xx.c ****   /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
 195:c/system_stm32f1xx.c ****   RCC->CFGR &= 0xFF80FFFFU;
  50              		.loc 1 195 0
  51 0026 5A68     		ldr	r2, [r3, #4]
  52 0028 22F4FE02 		bic	r2, r2, #8323072
  53 002c 5A60     		str	r2, [r3, #4]
 196:c/system_stm32f1xx.c **** 
 197:c/system_stm32f1xx.c **** #if defined(STM32F105xC) || defined(STM32F107xC)
 198:c/system_stm32f1xx.c ****   /* Reset PLL2ON and PLL3ON bits */
 199:c/system_stm32f1xx.c ****   RCC->CR &= 0xEBFFFFFFU;
 200:c/system_stm32f1xx.c **** 
 201:c/system_stm32f1xx.c ****   /* Disable all interrupts and clear pending bits  */
 202:c/system_stm32f1xx.c ****   RCC->CIR = 0x00FF0000U;
 203:c/system_stm32f1xx.c **** 
 204:c/system_stm32f1xx.c ****   /* Reset CFGR2 register */
 205:c/system_stm32f1xx.c ****   RCC->CFGR2 = 0x00000000U;
 206:c/system_stm32f1xx.c **** #elif defined(STM32F100xB) || defined(STM32F100xE)
 207:c/system_stm32f1xx.c ****   /* Disable all interrupts and clear pending bits  */
 208:c/system_stm32f1xx.c ****   RCC->CIR = 0x009F0000U;
 209:c/system_stm32f1xx.c **** 
 210:c/system_stm32f1xx.c ****   /* Reset CFGR2 register */
 211:c/system_stm32f1xx.c ****   RCC->CFGR2 = 0x00000000U;      
 212:c/system_stm32f1xx.c **** #else
 213:c/system_stm32f1xx.c ****   /* Disable all interrupts and clear pending bits  */
 214:c/system_stm32f1xx.c ****   RCC->CIR = 0x009F0000U;
  54              		.loc 1 214 0
  55 002e 4FF41F02 		mov	r2, #10420224
  56 0032 9A60     		str	r2, [r3, #8]
 215:c/system_stm32f1xx.c **** #endif /* STM32F105xC */
 216:c/system_stm32f1xx.c ****     
 217:c/system_stm32f1xx.c **** #if defined(STM32F100xE) || defined(STM32F101xE) || defined(STM32F101xG) || defined(STM32F103xE) ||
 218:c/system_stm32f1xx.c ****   #ifdef DATA_IN_ExtSRAM
 219:c/system_stm32f1xx.c ****     SystemInit_ExtMemCtl(); 
 220:c/system_stm32f1xx.c ****   #endif /* DATA_IN_ExtSRAM */
 221:c/system_stm32f1xx.c **** #endif 
 222:c/system_stm32f1xx.c **** 
 223:c/system_stm32f1xx.c **** #ifdef VECT_TAB_SRAM
 224:c/system_stm32f1xx.c ****   SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 225:c/system_stm32f1xx.c **** #else
 226:c/system_stm32f1xx.c ****   SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
  57              		.loc 1 226 0
  58 0034 4FF00062 		mov	r2, #134217728
  59 0038 034B     		ldr	r3, .L2+8
  60 003a 9A60     		str	r2, [r3, #8]
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccvvISXX.s 			page 6


  61 003c 7047     		bx	lr
  62              	.L3:
  63 003e 00BF     		.align	2
  64              	.L2:
  65 0040 00100240 		.word	1073876992
  66 0044 0000FFF8 		.word	-117506048
  67 0048 00ED00E0 		.word	-536810240
  68              		.cfi_endproc
  69              	.LFE64:
  71              		.section	.text.SystemCoreClockUpdate,"ax",%progbits
  72              		.align	1
  73              		.global	SystemCoreClockUpdate
  74              		.syntax unified
  75              		.thumb
  76              		.thumb_func
  77              		.fpu softvfp
  79              	SystemCoreClockUpdate:
  80              	.LFB65:
 227:c/system_stm32f1xx.c **** #endif 
 228:c/system_stm32f1xx.c **** }
 229:c/system_stm32f1xx.c **** 
 230:c/system_stm32f1xx.c **** /**
 231:c/system_stm32f1xx.c ****   * @brief  Update SystemCoreClock variable according to Clock Register Values.
 232:c/system_stm32f1xx.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 233:c/system_stm32f1xx.c ****   *         be used by the user application to setup the SysTick timer or configure
 234:c/system_stm32f1xx.c ****   *         other parameters.
 235:c/system_stm32f1xx.c ****   *           
 236:c/system_stm32f1xx.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 237:c/system_stm32f1xx.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 238:c/system_stm32f1xx.c ****   *         based on this variable will be incorrect.         
 239:c/system_stm32f1xx.c ****   *     
 240:c/system_stm32f1xx.c ****   * @note   - The system frequency computed by this function is not the real 
 241:c/system_stm32f1xx.c ****   *           frequency in the chip. It is calculated based on the predefined 
 242:c/system_stm32f1xx.c ****   *           constant and the selected clock source:
 243:c/system_stm32f1xx.c ****   *             
 244:c/system_stm32f1xx.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 245:c/system_stm32f1xx.c ****   *                                              
 246:c/system_stm32f1xx.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 247:c/system_stm32f1xx.c ****   *                          
 248:c/system_stm32f1xx.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**) 
 249:c/system_stm32f1xx.c ****   *             or HSI_VALUE(*) multiplied by the PLL factors.
 250:c/system_stm32f1xx.c ****   *         
 251:c/system_stm32f1xx.c ****   *         (*) HSI_VALUE is a constant defined in stm32f1xx.h file (default value
 252:c/system_stm32f1xx.c ****   *             8 MHz) but the real value may vary depending on the variations
 253:c/system_stm32f1xx.c ****   *             in voltage and temperature.   
 254:c/system_stm32f1xx.c ****   *    
 255:c/system_stm32f1xx.c ****   *         (**) HSE_VALUE is a constant defined in stm32f1xx.h file (default value
 256:c/system_stm32f1xx.c ****   *              8 MHz or 25 MHz, depending on the product used), user has to ensure
 257:c/system_stm32f1xx.c ****   *              that HSE_VALUE is same as the real frequency of the crystal used.
 258:c/system_stm32f1xx.c ****   *              Otherwise, this function may have wrong result.
 259:c/system_stm32f1xx.c ****   *                
 260:c/system_stm32f1xx.c ****   *         - The result of this function could be not correct when using fractional
 261:c/system_stm32f1xx.c ****   *           value for HSE crystal.
 262:c/system_stm32f1xx.c ****   * @param  None
 263:c/system_stm32f1xx.c ****   * @retval None
 264:c/system_stm32f1xx.c ****   */
 265:c/system_stm32f1xx.c **** void SystemCoreClockUpdate (void)
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccvvISXX.s 			page 7


 266:c/system_stm32f1xx.c **** {
  81              		.loc 1 266 0
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 0
  84              		@ frame_needed = 0, uses_anonymous_args = 0
  85              		@ link register save eliminated.
  86              	.LVL0:
 267:c/system_stm32f1xx.c ****   uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 268:c/system_stm32f1xx.c **** 
 269:c/system_stm32f1xx.c **** #if defined(STM32F105xC) || defined(STM32F107xC)
 270:c/system_stm32f1xx.c ****   uint32_t prediv1source = 0U, prediv1factor = 0U, prediv2factor = 0U, pll2mull = 0U;
 271:c/system_stm32f1xx.c **** #endif /* STM32F105xC */
 272:c/system_stm32f1xx.c **** 
 273:c/system_stm32f1xx.c **** #if defined(STM32F100xB) || defined(STM32F100xE)
 274:c/system_stm32f1xx.c ****   uint32_t prediv1factor = 0U;
 275:c/system_stm32f1xx.c **** #endif /* STM32F100xB or STM32F100xE */
 276:c/system_stm32f1xx.c ****     
 277:c/system_stm32f1xx.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 278:c/system_stm32f1xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
  87              		.loc 1 278 0
  88 0000 114A     		ldr	r2, .L15
  89 0002 124B     		ldr	r3, .L15+4
  90 0004 5168     		ldr	r1, [r2, #4]
  91              	.LVL1:
  92 0006 01F00C01 		and	r1, r1, #12
  93              	.LVL2:
 279:c/system_stm32f1xx.c ****   
 280:c/system_stm32f1xx.c ****   switch (tmp)
  94              		.loc 1 280 0
  95 000a 0429     		cmp	r1, #4
  96 000c 01D0     		beq	.L6
  97 000e 0829     		cmp	r1, #8
  98 0010 0AD0     		beq	.L7
  99              	.L6:
 281:c/system_stm32f1xx.c ****   {
 282:c/system_stm32f1xx.c ****     case 0x00U:  /* HSI used as system clock */
 283:c/system_stm32f1xx.c ****       SystemCoreClock = HSI_VALUE;
 284:c/system_stm32f1xx.c ****       break;
 285:c/system_stm32f1xx.c ****     case 0x04U:  /* HSE used as system clock */
 286:c/system_stm32f1xx.c ****       SystemCoreClock = HSE_VALUE;
 100              		.loc 1 286 0
 101 0012 0F49     		ldr	r1, .L15+8
 102              	.LVL3:
 103              	.L12:
 287:c/system_stm32f1xx.c ****       break;
 288:c/system_stm32f1xx.c ****     case 0x08U:  /* PLL used as system clock */
 289:c/system_stm32f1xx.c **** 
 290:c/system_stm32f1xx.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 291:c/system_stm32f1xx.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 292:c/system_stm32f1xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 293:c/system_stm32f1xx.c ****       
 294:c/system_stm32f1xx.c **** #if !defined(STM32F105xC) && !defined(STM32F107xC)      
 295:c/system_stm32f1xx.c ****       pllmull = ( pllmull >> 18U) + 2U;
 296:c/system_stm32f1xx.c ****       
 297:c/system_stm32f1xx.c ****       if (pllsource == 0x00U)
 298:c/system_stm32f1xx.c ****       {
 299:c/system_stm32f1xx.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccvvISXX.s 			page 8


 300:c/system_stm32f1xx.c ****         SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 301:c/system_stm32f1xx.c ****       }
 302:c/system_stm32f1xx.c ****       else
 303:c/system_stm32f1xx.c ****       {
 304:c/system_stm32f1xx.c ****  #if defined(STM32F100xB) || defined(STM32F100xE)
 305:c/system_stm32f1xx.c ****        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
 306:c/system_stm32f1xx.c ****        /* HSE oscillator clock selected as PREDIV1 clock entry */
 307:c/system_stm32f1xx.c ****        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 308:c/system_stm32f1xx.c ****  #else
 309:c/system_stm32f1xx.c ****         /* HSE selected as PLL clock entry */
 310:c/system_stm32f1xx.c ****         if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 311:c/system_stm32f1xx.c ****         {/* HSE oscillator clock divided by 2 */
 312:c/system_stm32f1xx.c ****           SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 313:c/system_stm32f1xx.c ****         }
 314:c/system_stm32f1xx.c ****         else
 315:c/system_stm32f1xx.c ****         {
 316:c/system_stm32f1xx.c ****           SystemCoreClock = HSE_VALUE * pllmull;
 104              		.loc 1 316 0
 105 0014 1960     		str	r1, [r3]
 317:c/system_stm32f1xx.c ****         }
 318:c/system_stm32f1xx.c ****  #endif
 319:c/system_stm32f1xx.c ****       }
 320:c/system_stm32f1xx.c **** #else
 321:c/system_stm32f1xx.c ****       pllmull = pllmull >> 18U;
 322:c/system_stm32f1xx.c ****       
 323:c/system_stm32f1xx.c ****       if (pllmull != 0x0DU)
 324:c/system_stm32f1xx.c ****       {
 325:c/system_stm32f1xx.c ****          pllmull += 2U;
 326:c/system_stm32f1xx.c ****       }
 327:c/system_stm32f1xx.c ****       else
 328:c/system_stm32f1xx.c ****       { /* PLL multiplication factor = PLL input clock * 6.5 */
 329:c/system_stm32f1xx.c ****         pllmull = 13U / 2U; 
 330:c/system_stm32f1xx.c ****       }
 331:c/system_stm32f1xx.c ****             
 332:c/system_stm32f1xx.c ****       if (pllsource == 0x00U)
 333:c/system_stm32f1xx.c ****       {
 334:c/system_stm32f1xx.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
 335:c/system_stm32f1xx.c ****         SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 336:c/system_stm32f1xx.c ****       }
 337:c/system_stm32f1xx.c ****       else
 338:c/system_stm32f1xx.c ****       {/* PREDIV1 selected as PLL clock entry */
 339:c/system_stm32f1xx.c ****         
 340:c/system_stm32f1xx.c ****         /* Get PREDIV1 clock source and division factor */
 341:c/system_stm32f1xx.c ****         prediv1source = RCC->CFGR2 & RCC_CFGR2_PREDIV1SRC;
 342:c/system_stm32f1xx.c ****         prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
 343:c/system_stm32f1xx.c ****         
 344:c/system_stm32f1xx.c ****         if (prediv1source == 0U)
 345:c/system_stm32f1xx.c ****         { 
 346:c/system_stm32f1xx.c ****           /* HSE oscillator clock selected as PREDIV1 clock entry */
 347:c/system_stm32f1xx.c ****           SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;          
 348:c/system_stm32f1xx.c ****         }
 349:c/system_stm32f1xx.c ****         else
 350:c/system_stm32f1xx.c ****         {/* PLL2 clock selected as PREDIV1 clock entry */
 351:c/system_stm32f1xx.c ****           
 352:c/system_stm32f1xx.c ****           /* Get PREDIV2 division factor and PLL2 multiplication factor */
 353:c/system_stm32f1xx.c ****           prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4U) + 1U;
 354:c/system_stm32f1xx.c ****           pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccvvISXX.s 			page 9


 355:c/system_stm32f1xx.c ****           SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;  
 356:c/system_stm32f1xx.c ****         }
 357:c/system_stm32f1xx.c ****       }
 358:c/system_stm32f1xx.c **** #endif /* STM32F105xC */ 
 359:c/system_stm32f1xx.c ****       break;
 360:c/system_stm32f1xx.c **** 
 361:c/system_stm32f1xx.c ****     default:
 362:c/system_stm32f1xx.c ****       SystemCoreClock = HSI_VALUE;
 363:c/system_stm32f1xx.c ****       break;
 364:c/system_stm32f1xx.c ****   }
 365:c/system_stm32f1xx.c ****   
 366:c/system_stm32f1xx.c ****   /* Compute HCLK clock frequency ----------------*/
 367:c/system_stm32f1xx.c ****   /* Get HCLK prescaler */
 368:c/system_stm32f1xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 106              		.loc 1 368 0
 107 0016 5268     		ldr	r2, [r2, #4]
 108              	.LVL4:
 109 0018 0E49     		ldr	r1, .L15+12
 110 001a C2F30312 		ubfx	r2, r2, #4, #4
 111              	.LVL5:
 112 001e 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 369:c/system_stm32f1xx.c ****   /* HCLK clock frequency */
 370:c/system_stm32f1xx.c ****   SystemCoreClock >>= tmp;  
 113              		.loc 1 370 0
 114 0020 1A68     		ldr	r2, [r3]
 115 0022 CA40     		lsrs	r2, r2, r1
 116 0024 1A60     		str	r2, [r3]
 117 0026 7047     		bx	lr
 118              	.LVL6:
 119              	.L7:
 291:c/system_stm32f1xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 120              		.loc 1 291 0
 121 0028 5168     		ldr	r1, [r2, #4]
 122              	.LVL7:
 292:c/system_stm32f1xx.c ****       
 123              		.loc 1 292 0
 124 002a 5068     		ldr	r0, [r2, #4]
 125              	.LVL8:
 295:c/system_stm32f1xx.c ****       
 126              		.loc 1 295 0
 127 002c C1F38341 		ubfx	r1, r1, #18, #4
 128              	.LVL9:
 297:c/system_stm32f1xx.c ****       {
 129              		.loc 1 297 0
 130 0030 C003     		lsls	r0, r0, #15
 131              	.LVL10:
 295:c/system_stm32f1xx.c ****       
 132              		.loc 1 295 0
 133 0032 01F10201 		add	r1, r1, #2
 134              	.LVL11:
 297:c/system_stm32f1xx.c ****       {
 135              		.loc 1 297 0
 136 0036 02D4     		bmi	.L10
 137              	.L14:
 312:c/system_stm32f1xx.c ****         }
 138              		.loc 1 312 0
 139 0038 0748     		ldr	r0, .L15+16
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccvvISXX.s 			page 10


 140              	.L13:
 316:c/system_stm32f1xx.c ****         }
 141              		.loc 1 316 0
 142 003a 4143     		muls	r1, r0, r1
 143              	.LVL12:
 144 003c EAE7     		b	.L12
 145              	.LVL13:
 146              	.L10:
 310:c/system_stm32f1xx.c ****         {/* HSE oscillator clock divided by 2 */
 147              		.loc 1 310 0
 148 003e 5068     		ldr	r0, [r2, #4]
 149 0040 8003     		lsls	r0, r0, #14
 150 0042 F9D4     		bmi	.L14
 316:c/system_stm32f1xx.c ****         }
 151              		.loc 1 316 0
 152 0044 0248     		ldr	r0, .L15+8
 153 0046 F8E7     		b	.L13
 154              	.L16:
 155              		.align	2
 156              	.L15:
 157 0048 00100240 		.word	1073876992
 158 004c 00000000 		.word	.LANCHOR0
 159 0050 00127A00 		.word	8000000
 160 0054 00000000 		.word	.LANCHOR1
 161 0058 00093D00 		.word	4000000
 162              		.cfi_endproc
 163              	.LFE65:
 165              		.global	APBPrescTable
 166              		.global	AHBPrescTable
 167              		.global	SystemCoreClock
 168              		.section	.data.SystemCoreClock,"aw",%progbits
 169              		.align	2
 170              		.set	.LANCHOR0,. + 0
 173              	SystemCoreClock:
 174 0000 00A24A04 		.word	72000000
 175              		.section	.rodata.AHBPrescTable,"a",%progbits
 176              		.set	.LANCHOR1,. + 0
 179              	AHBPrescTable:
 180 0000 00       		.byte	0
 181 0001 00       		.byte	0
 182 0002 00       		.byte	0
 183 0003 00       		.byte	0
 184 0004 00       		.byte	0
 185 0005 00       		.byte	0
 186 0006 00       		.byte	0
 187 0007 00       		.byte	0
 188 0008 01       		.byte	1
 189 0009 02       		.byte	2
 190 000a 03       		.byte	3
 191 000b 04       		.byte	4
 192 000c 06       		.byte	6
 193 000d 07       		.byte	7
 194 000e 08       		.byte	8
 195 000f 09       		.byte	9
 196              		.section	.rodata.APBPrescTable,"a",%progbits
 199              	APBPrescTable:
 200 0000 00       		.byte	0
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccvvISXX.s 			page 11


 201 0001 00       		.byte	0
 202 0002 00       		.byte	0
 203 0003 00       		.byte	0
 204 0004 01       		.byte	1
 205 0005 02       		.byte	2
 206 0006 03       		.byte	3
 207 0007 04       		.byte	4
 208              		.text
 209              	.Letext0:
 210              		.file 2 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/machine/_
 211              		.file 3 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_stdi
 212              		.file 4 "c/core_cm3.h"
 213              		.file 5 "c/system_stm32f1xx.h"
 214              		.file 6 "c/stm32f103xb.h"
 215              		.file 7 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/lock.
 216              		.file 8 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_type
 217              		.file 9 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/lib/gcc/arm-none-eabi/6.3.1/inc
 218              		.file 10 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/reen
 219              		.file 11 "c/stm32f1xx.h"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccvvISXX.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 system_stm32f1xx.c
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccvvISXX.s:16     .text.SystemInit:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccvvISXX.s:23     .text.SystemInit:0000000000000000 SystemInit
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccvvISXX.s:65     .text.SystemInit:0000000000000040 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccvvISXX.s:72     .text.SystemCoreClockUpdate:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccvvISXX.s:79     .text.SystemCoreClockUpdate:0000000000000000 SystemCoreClockUpdate
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccvvISXX.s:157    .text.SystemCoreClockUpdate:0000000000000048 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccvvISXX.s:199    .rodata.APBPrescTable:0000000000000000 APBPrescTable
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccvvISXX.s:179    .rodata.AHBPrescTable:0000000000000000 AHBPrescTable
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccvvISXX.s:173    .data.SystemCoreClock:0000000000000000 SystemCoreClock
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccvvISXX.s:169    .data.SystemCoreClock:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
exit code: 0
OPT_LEVEL = Some("s")
HOST = Some("x86_64-apple-darwin")
CFLAGS_arm-none-eabi = None
CFLAGS_arm_none_eabi = None
TARGET_CFLAGS = None
CFLAGS = None
DEBUG = Some("true")
running: "arm-none-eabi-gcc" "-Os" "-ffunction-sections" "-fdata-sections" "-g" "-DSTM32F103xB" "-DUSE_HAL_DRIVER" "-mcpu=cortex-m3" "-mthumb" "-Wall" "-fdata-sections" "-ffunction-sections" "-Wa,-a,-ad" "-g" "-Wall" "-Wextra" "-o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/usbd_conf.o" "-c" "c/usbd_conf.c"
cargo:warning=c/usbd_conf.c: In function 'USBD_static_malloc':
cargo:warning=c/usbd_conf.c:716:35: warning: unused parameter 'size' [-Wunused-parameter]
cargo:warning= void *USBD_static_malloc(uint32_t size)
cargo:warning=                                   ^~~~
cargo:warning=c/usbd_conf.c: In function 'USBD_static_free':
cargo:warning=c/usbd_conf.c:727:29: warning: unused parameter 'p' [-Wunused-parameter]
cargo:warning= void USBD_static_free(void *p)
cargo:warning=                             ^
cargo:warning=c/usbd_conf.c: In function 'HAL_PCDEx_SetConnectionState':
cargo:warning=c/usbd_conf.c:738:54: warning: unused parameter 'hpcd' [-Wunused-parameter]
cargo:warning= void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
cargo:warning=                                                      ^~~~
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"usbd_conf.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_PCD_MspInit,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_PCD_MspInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_PCD_MspInit:
  24              	.LFB64:
  25              		.file 1 "c/usbd_conf.c"
   1:c/usbd_conf.c **** /**
   2:c/usbd_conf.c ****   ******************************************************************************
   3:c/usbd_conf.c ****   * @file           : usbd_conf.c
   4:c/usbd_conf.c ****   * @version        : v2.0_Cube
   5:c/usbd_conf.c ****   * @brief          : This file implements the board support package for the USB device library
   6:c/usbd_conf.c ****   ******************************************************************************
   7:c/usbd_conf.c ****   * This notice applies to any and all portions of this file
   8:c/usbd_conf.c ****   * that are not between comment pairs USER CODE BEGIN and
   9:c/usbd_conf.c ****   * USER CODE END. Other portions of this file, whether 
  10:c/usbd_conf.c ****   * inserted by the user or by software development tools
  11:c/usbd_conf.c ****   * are owned by their respective copyright owners.
  12:c/usbd_conf.c ****   *
  13:c/usbd_conf.c ****   * Copyright (c) 2017 STMicroelectronics International N.V. 
  14:c/usbd_conf.c ****   * All rights reserved.
  15:c/usbd_conf.c ****   *
  16:c/usbd_conf.c ****   * Redistribution and use in source and binary forms, with or without 
  17:c/usbd_conf.c ****   * modification, are permitted, provided that the following conditions are met:
  18:c/usbd_conf.c ****   *
  19:c/usbd_conf.c ****   * 1. Redistribution of source code must retain the above copyright notice, 
  20:c/usbd_conf.c ****   *    this list of conditions and the following disclaimer.
  21:c/usbd_conf.c ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:c/usbd_conf.c ****   *    this list of conditions and the following disclaimer in the documentation
  23:c/usbd_conf.c ****   *    and/or other materials provided with the distribution.
  24:c/usbd_conf.c ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  25:c/usbd_conf.c ****   *    contributors to this software may be used to endorse or promote products 
  26:c/usbd_conf.c ****   *    derived from this software without specific written permission.
  27:c/usbd_conf.c ****   * 4. This software, including modifications and/or derivative works of this 
  28:c/usbd_conf.c ****   *    software, must execute solely and exclusively on microcontroller or
  29:c/usbd_conf.c ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:c/usbd_conf.c ****   * 5. Redistribution and use of this software other than as permitted under 
  31:c/usbd_conf.c ****   *    this license is void and will automatically terminate your rights under 
  32:c/usbd_conf.c ****   *    this license. 
  33:c/usbd_conf.c ****   *
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 2


  34:c/usbd_conf.c ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  35:c/usbd_conf.c ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  36:c/usbd_conf.c ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  37:c/usbd_conf.c ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  38:c/usbd_conf.c ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  39:c/usbd_conf.c ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:c/usbd_conf.c ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:c/usbd_conf.c ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  42:c/usbd_conf.c ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  43:c/usbd_conf.c ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  44:c/usbd_conf.c ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:c/usbd_conf.c ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:c/usbd_conf.c ****   *
  47:c/usbd_conf.c ****   ******************************************************************************
  48:c/usbd_conf.c **** */
  49:c/usbd_conf.c **** /* Includes ------------------------------------------------------------------*/
  50:c/usbd_conf.c **** #include "stm32f1xx.h"
  51:c/usbd_conf.c **** #include "stm32f1xx_hal.h"
  52:c/usbd_conf.c **** #include "usbd_def.h"
  53:c/usbd_conf.c **** #include "usbd_core.h"
  54:c/usbd_conf.c **** #include "usbd_customhid.h"
  55:c/usbd_conf.c **** /* Private typedef -----------------------------------------------------------*/
  56:c/usbd_conf.c **** /* Private define ------------------------------------------------------------*/
  57:c/usbd_conf.c **** /* Private macro -------------------------------------------------------------*/
  58:c/usbd_conf.c **** /* Private variables ---------------------------------------------------------*/
  59:c/usbd_conf.c **** PCD_HandleTypeDef hpcd_USB_FS;
  60:c/usbd_conf.c **** void _Error_Handler(char * file, int line);
  61:c/usbd_conf.c **** 
  62:c/usbd_conf.c **** /* USER CODE BEGIN 0 */
  63:c/usbd_conf.c **** /* USER CODE END 0 */
  64:c/usbd_conf.c **** 
  65:c/usbd_conf.c **** /* Private function prototypes -----------------------------------------------*/
  66:c/usbd_conf.c **** /* Private functions ---------------------------------------------------------*/
  67:c/usbd_conf.c **** /* USER CODE BEGIN 1 */
  68:c/usbd_conf.c **** /* USER CODE END 1 */
  69:c/usbd_conf.c **** void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state);
  70:c/usbd_conf.c **** 
  71:c/usbd_conf.c **** /*******************************************************************************
  72:c/usbd_conf.c ****                        LL Driver Callbacks (PCD -> USB Device Library)
  73:c/usbd_conf.c **** *******************************************************************************/
  74:c/usbd_conf.c **** /* MSP Init */
  75:c/usbd_conf.c **** 
  76:c/usbd_conf.c **** void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
  77:c/usbd_conf.c **** {
  26              		.loc 1 77 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 07B5     		push	{r0, r1, r2, lr}
  32              		.cfi_def_cfa_offset 16
  33              		.cfi_offset 14, -4
  78:c/usbd_conf.c ****   if(pcdHandle->Instance==USB)
  34              		.loc 1 78 0
  35 0002 0D4B     		ldr	r3, .L3
  36 0004 0268     		ldr	r2, [r0]
  37 0006 9A42     		cmp	r2, r3
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 3


  38 0008 12D1     		bne	.L1
  39              	.LBB2:
  79:c/usbd_conf.c ****   {
  80:c/usbd_conf.c ****   /* USER CODE BEGIN USB_MspInit 0 */
  81:c/usbd_conf.c **** 
  82:c/usbd_conf.c ****   /* USER CODE END USB_MspInit 0 */
  83:c/usbd_conf.c ****     /* Peripheral clock enable */
  84:c/usbd_conf.c ****     __HAL_RCC_USB_CLK_ENABLE();
  40              		.loc 1 84 0
  41 000a 03F5DA33 		add	r3, r3, #111616
  42 000e DA69     		ldr	r2, [r3, #28]
  43              	.LBE2:
  85:c/usbd_conf.c **** 
  86:c/usbd_conf.c ****     /* Peripheral interrupt init */
  87:c/usbd_conf.c ****     HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
  44              		.loc 1 87 0
  45 0010 1420     		movs	r0, #20
  46              	.LVL1:
  47              	.LBB3:
  84:c/usbd_conf.c **** 
  48              		.loc 1 84 0
  49 0012 42F40002 		orr	r2, r2, #8388608
  50 0016 DA61     		str	r2, [r3, #28]
  51              	.LBE3:
  52              		.loc 1 87 0
  53 0018 0022     		movs	r2, #0
  54              	.LBB4:
  84:c/usbd_conf.c **** 
  55              		.loc 1 84 0
  56 001a DB69     		ldr	r3, [r3, #28]
  57              	.LBE4:
  58              		.loc 1 87 0
  59 001c 1146     		mov	r1, r2
  60              	.LBB5:
  84:c/usbd_conf.c **** 
  61              		.loc 1 84 0
  62 001e 03F40003 		and	r3, r3, #8388608
  63 0022 0193     		str	r3, [sp, #4]
  64 0024 019B     		ldr	r3, [sp, #4]
  65              	.LBE5:
  66              		.loc 1 87 0
  67 0026 FFF7FEFF 		bl	HAL_NVIC_SetPriority
  68              	.LVL2:
  88:c/usbd_conf.c ****     HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
  69              		.loc 1 88 0
  70 002a 1420     		movs	r0, #20
  71 002c FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
  72              	.LVL3:
  73              	.L1:
  89:c/usbd_conf.c ****   /* USER CODE BEGIN USB_MspInit 1 */
  90:c/usbd_conf.c **** 
  91:c/usbd_conf.c ****   /* USER CODE END USB_MspInit 1 */
  92:c/usbd_conf.c ****   }
  93:c/usbd_conf.c **** }
  74              		.loc 1 93 0
  75 0030 03B0     		add	sp, sp, #12
  76              		.cfi_def_cfa_offset 4
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 4


  77              		@ sp needed
  78 0032 5DF804FB 		ldr	pc, [sp], #4
  79              	.L4:
  80 0036 00BF     		.align	2
  81              	.L3:
  82 0038 005C0040 		.word	1073765376
  83              		.cfi_endproc
  84              	.LFE64:
  86              		.section	.text.HAL_PCD_MspDeInit,"ax",%progbits
  87              		.align	1
  88              		.global	HAL_PCD_MspDeInit
  89              		.syntax unified
  90              		.thumb
  91              		.thumb_func
  92              		.fpu softvfp
  94              	HAL_PCD_MspDeInit:
  95              	.LFB65:
  94:c/usbd_conf.c **** 
  95:c/usbd_conf.c **** void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
  96:c/usbd_conf.c **** {
  96              		.loc 1 96 0
  97              		.cfi_startproc
  98              		@ args = 0, pretend = 0, frame = 0
  99              		@ frame_needed = 0, uses_anonymous_args = 0
 100              		@ link register save eliminated.
 101              	.LVL4:
  97:c/usbd_conf.c ****   if(pcdHandle->Instance==USB)
 102              		.loc 1 97 0
 103 0000 0268     		ldr	r2, [r0]
 104 0002 064B     		ldr	r3, .L7
 105 0004 9A42     		cmp	r2, r3
 106 0006 07D1     		bne	.L5
  98:c/usbd_conf.c ****   {
  99:c/usbd_conf.c ****   /* USER CODE BEGIN USB_MspDeInit 0 */
 100:c/usbd_conf.c **** 
 101:c/usbd_conf.c ****   /* USER CODE END USB_MspDeInit 0 */
 102:c/usbd_conf.c ****     /* Peripheral clock disable */
 103:c/usbd_conf.c ****     __HAL_RCC_USB_CLK_DISABLE();
 107              		.loc 1 103 0
 108 0008 054A     		ldr	r2, .L7+4
 104:c/usbd_conf.c **** 
 105:c/usbd_conf.c ****     /* Peripheral interrupt Deinit*/
 106:c/usbd_conf.c ****     HAL_NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn);
 109              		.loc 1 106 0
 110 000a 1420     		movs	r0, #20
 111              	.LVL5:
 103:c/usbd_conf.c **** 
 112              		.loc 1 103 0
 113 000c D369     		ldr	r3, [r2, #28]
 114 000e 23F40003 		bic	r3, r3, #8388608
 115 0012 D361     		str	r3, [r2, #28]
 116              		.loc 1 106 0
 117 0014 FFF7FEBF 		b	HAL_NVIC_DisableIRQ
 118              	.LVL6:
 119              	.L5:
 120 0018 7047     		bx	lr
 121              	.L8:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 5


 122 001a 00BF     		.align	2
 123              	.L7:
 124 001c 005C0040 		.word	1073765376
 125 0020 00100240 		.word	1073876992
 126              		.cfi_endproc
 127              	.LFE65:
 129              		.section	.text.HAL_PCD_SetupStageCallback,"ax",%progbits
 130              		.align	1
 131              		.global	HAL_PCD_SetupStageCallback
 132              		.syntax unified
 133              		.thumb
 134              		.thumb_func
 135              		.fpu softvfp
 137              	HAL_PCD_SetupStageCallback:
 138              	.LFB66:
 107:c/usbd_conf.c **** 
 108:c/usbd_conf.c ****   /* USER CODE BEGIN USB_MspDeInit 1 */
 109:c/usbd_conf.c **** 
 110:c/usbd_conf.c ****   /* USER CODE END USB_MspDeInit 1 */
 111:c/usbd_conf.c ****   }
 112:c/usbd_conf.c **** }
 113:c/usbd_conf.c **** 
 114:c/usbd_conf.c **** /**
 115:c/usbd_conf.c ****   * @brief  Setup Stage callback
 116:c/usbd_conf.c ****   * @param  hpcd: PCD handle
 117:c/usbd_conf.c ****   * @retval None
 118:c/usbd_conf.c ****   */
 119:c/usbd_conf.c **** void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
 120:c/usbd_conf.c **** {
 139              		.loc 1 120 0
 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 0
 142              		@ frame_needed = 0, uses_anonymous_args = 0
 143              		@ link register save eliminated.
 144              	.LVL7:
 121:c/usbd_conf.c ****   USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 145              		.loc 1 121 0
 146 0000 00F22C41 		addw	r1, r0, #1068
 147 0004 D0F85C04 		ldr	r0, [r0, #1116]
 148              	.LVL8:
 149 0008 FFF7FEBF 		b	USBD_LL_SetupStage
 150              	.LVL9:
 151              		.cfi_endproc
 152              	.LFE66:
 154              		.section	.text.HAL_PCD_DataOutStageCallback,"ax",%progbits
 155              		.align	1
 156              		.global	HAL_PCD_DataOutStageCallback
 157              		.syntax unified
 158              		.thumb
 159              		.thumb_func
 160              		.fpu softvfp
 162              	HAL_PCD_DataOutStageCallback:
 163              	.LFB67:
 122:c/usbd_conf.c **** }
 123:c/usbd_conf.c **** 
 124:c/usbd_conf.c **** /**
 125:c/usbd_conf.c ****   * @brief  Data Out Stage callback.
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 6


 126:c/usbd_conf.c ****   * @param  hpcd: PCD handle
 127:c/usbd_conf.c ****   * @param  epnum: Endpoint Number
 128:c/usbd_conf.c ****   * @retval None
 129:c/usbd_conf.c ****   */
 130:c/usbd_conf.c **** void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
 131:c/usbd_conf.c **** {
 164              		.loc 1 131 0
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 0
 167              		@ frame_needed = 0, uses_anonymous_args = 0
 168              		@ link register save eliminated.
 169              	.LVL10:
 132:c/usbd_conf.c ****   USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 170              		.loc 1 132 0
 171 0000 00EB4113 		add	r3, r0, r1, lsl #5
 172 0004 D3F83C22 		ldr	r2, [r3, #572]
 173 0008 D0F85C04 		ldr	r0, [r0, #1116]
 174              	.LVL11:
 175 000c FFF7FEBF 		b	USBD_LL_DataOutStage
 176              	.LVL12:
 177              		.cfi_endproc
 178              	.LFE67:
 180              		.section	.text.HAL_PCD_DataInStageCallback,"ax",%progbits
 181              		.align	1
 182              		.global	HAL_PCD_DataInStageCallback
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 186              		.fpu softvfp
 188              	HAL_PCD_DataInStageCallback:
 189              	.LFB68:
 133:c/usbd_conf.c **** }
 134:c/usbd_conf.c **** 
 135:c/usbd_conf.c **** /**
 136:c/usbd_conf.c ****   * @brief  Data In Stage callback..
 137:c/usbd_conf.c ****   * @param  hpcd: PCD handle
 138:c/usbd_conf.c ****   * @param  epnum: Endpoint Number
 139:c/usbd_conf.c ****   * @retval None
 140:c/usbd_conf.c ****   */
 141:c/usbd_conf.c **** void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
 142:c/usbd_conf.c **** {
 190              		.loc 1 142 0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              		@ link register save eliminated.
 195              	.LVL13:
 143:c/usbd_conf.c ****   USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 196              		.loc 1 143 0
 197 0000 00EB4113 		add	r3, r0, r1, lsl #5
 198 0004 DA6B     		ldr	r2, [r3, #60]
 199 0006 D0F85C04 		ldr	r0, [r0, #1116]
 200              	.LVL14:
 201 000a FFF7FEBF 		b	USBD_LL_DataInStage
 202              	.LVL15:
 203              		.cfi_endproc
 204              	.LFE68:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 7


 206              		.section	.text.HAL_PCD_SOFCallback,"ax",%progbits
 207              		.align	1
 208              		.global	HAL_PCD_SOFCallback
 209              		.syntax unified
 210              		.thumb
 211              		.thumb_func
 212              		.fpu softvfp
 214              	HAL_PCD_SOFCallback:
 215              	.LFB69:
 144:c/usbd_conf.c **** }
 145:c/usbd_conf.c **** 
 146:c/usbd_conf.c **** /**
 147:c/usbd_conf.c ****   * @brief  SOF callback.
 148:c/usbd_conf.c ****   * @param  hpcd: PCD handle
 149:c/usbd_conf.c ****   * @retval None
 150:c/usbd_conf.c ****   */
 151:c/usbd_conf.c **** void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
 152:c/usbd_conf.c **** {
 216              		.loc 1 152 0
 217              		.cfi_startproc
 218              		@ args = 0, pretend = 0, frame = 0
 219              		@ frame_needed = 0, uses_anonymous_args = 0
 220              		@ link register save eliminated.
 221              	.LVL16:
 153:c/usbd_conf.c ****   USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 222              		.loc 1 153 0
 223 0000 D0F85C04 		ldr	r0, [r0, #1116]
 224              	.LVL17:
 225 0004 FFF7FEBF 		b	USBD_LL_SOF
 226              	.LVL18:
 227              		.cfi_endproc
 228              	.LFE69:
 230              		.section	.text.HAL_PCD_ResetCallback,"ax",%progbits
 231              		.align	1
 232              		.global	HAL_PCD_ResetCallback
 233              		.syntax unified
 234              		.thumb
 235              		.thumb_func
 236              		.fpu softvfp
 238              	HAL_PCD_ResetCallback:
 239              	.LFB70:
 154:c/usbd_conf.c **** }
 155:c/usbd_conf.c **** 
 156:c/usbd_conf.c **** /**
 157:c/usbd_conf.c ****   * @brief  Reset callback.
 158:c/usbd_conf.c ****   * @param  hpcd: PCD handle
 159:c/usbd_conf.c ****   * @retval None
 160:c/usbd_conf.c ****   */
 161:c/usbd_conf.c **** void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
 162:c/usbd_conf.c **** { 
 240              		.loc 1 162 0
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 0
 243              		@ frame_needed = 0, uses_anonymous_args = 0
 244              	.LVL19:
 245 0000 10B5     		push	{r4, lr}
 246              		.cfi_def_cfa_offset 8
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 8


 247              		.cfi_offset 4, -8
 248              		.cfi_offset 14, -4
 249              		.loc 1 162 0
 250 0002 0446     		mov	r4, r0
 163:c/usbd_conf.c ****   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 164:c/usbd_conf.c **** 
 165:c/usbd_conf.c ****   /*Set USB Current Speed*/
 166:c/usbd_conf.c ****   switch (hpcd->Init.speed)
 167:c/usbd_conf.c ****   {
 168:c/usbd_conf.c ****   case PCD_SPEED_FULL:
 169:c/usbd_conf.c ****     speed = USBD_SPEED_FULL;    
 170:c/usbd_conf.c ****     break;
 171:c/usbd_conf.c **** 	
 172:c/usbd_conf.c ****   default:
 173:c/usbd_conf.c ****     speed = USBD_SPEED_FULL;    
 174:c/usbd_conf.c ****     break;    
 175:c/usbd_conf.c ****   }
 176:c/usbd_conf.c ****   USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 251              		.loc 1 176 0
 252 0004 0121     		movs	r1, #1
 253 0006 D0F85C04 		ldr	r0, [r0, #1116]
 254              	.LVL20:
 255 000a FFF7FEFF 		bl	USBD_LL_SetSpeed
 256              	.LVL21:
 177:c/usbd_conf.c ****   
 178:c/usbd_conf.c ****   /*Reset Device*/
 179:c/usbd_conf.c ****   USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 257              		.loc 1 179 0
 258 000e D4F85C04 		ldr	r0, [r4, #1116]
 180:c/usbd_conf.c **** }
 259              		.loc 1 180 0
 260 0012 BDE81040 		pop	{r4, lr}
 261              		.cfi_restore 14
 262              		.cfi_restore 4
 263              		.cfi_def_cfa_offset 0
 264              	.LVL22:
 179:c/usbd_conf.c **** }
 265              		.loc 1 179 0
 266 0016 FFF7FEBF 		b	USBD_LL_Reset
 267              	.LVL23:
 268              		.cfi_endproc
 269              	.LFE70:
 271              		.section	.text.HAL_PCD_SuspendCallback,"ax",%progbits
 272              		.align	1
 273              		.global	HAL_PCD_SuspendCallback
 274              		.syntax unified
 275              		.thumb
 276              		.thumb_func
 277              		.fpu softvfp
 279              	HAL_PCD_SuspendCallback:
 280              	.LFB71:
 181:c/usbd_conf.c **** 
 182:c/usbd_conf.c **** /**
 183:c/usbd_conf.c ****   * @brief  Suspend callback.
 184:c/usbd_conf.c ****   * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
 185:c/usbd_conf.c ****   * @param  hpcd: PCD handle
 186:c/usbd_conf.c ****   * @retval None
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 9


 187:c/usbd_conf.c ****   */
 188:c/usbd_conf.c **** void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
 189:c/usbd_conf.c **** {
 281              		.loc 1 189 0
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 0
 284              		@ frame_needed = 0, uses_anonymous_args = 0
 285              	.LVL24:
 286 0000 10B5     		push	{r4, lr}
 287              		.cfi_def_cfa_offset 8
 288              		.cfi_offset 4, -8
 289              		.cfi_offset 14, -4
 290              		.loc 1 189 0
 291 0002 0446     		mov	r4, r0
 190:c/usbd_conf.c ****   /* Inform USB library that core enters in suspend Mode */
 191:c/usbd_conf.c ****   USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 292              		.loc 1 191 0
 293 0004 D0F85C04 		ldr	r0, [r0, #1116]
 294              	.LVL25:
 295 0008 FFF7FEFF 		bl	USBD_LL_Suspend
 296              	.LVL26:
 192:c/usbd_conf.c ****   /*Enter in STOP mode */
 193:c/usbd_conf.c ****   /* USER CODE BEGIN 2 */  
 194:c/usbd_conf.c ****   if (hpcd->Init.low_power_enable)
 297              		.loc 1 194 0
 298 000c A369     		ldr	r3, [r4, #24]
 299 000e 23B1     		cbz	r3, .L14
 195:c/usbd_conf.c ****   {
 196:c/usbd_conf.c ****     /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
 197:c/usbd_conf.c ****     SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 300              		.loc 1 197 0
 301 0010 024A     		ldr	r2, .L19
 302 0012 1369     		ldr	r3, [r2, #16]
 303 0014 43F00603 		orr	r3, r3, #6
 304 0018 1361     		str	r3, [r2, #16]
 305              	.L14:
 306 001a 10BD     		pop	{r4, pc}
 307              	.LVL27:
 308              	.L20:
 309              		.align	2
 310              	.L19:
 311 001c 00ED00E0 		.word	-536810240
 312              		.cfi_endproc
 313              	.LFE71:
 315              		.section	.text.HAL_PCD_ResumeCallback,"ax",%progbits
 316              		.align	1
 317              		.global	HAL_PCD_ResumeCallback
 318              		.syntax unified
 319              		.thumb
 320              		.thumb_func
 321              		.fpu softvfp
 323              	HAL_PCD_ResumeCallback:
 324              	.LFB72:
 198:c/usbd_conf.c ****   }
 199:c/usbd_conf.c ****   /* USER CODE END 2 */
 200:c/usbd_conf.c **** }
 201:c/usbd_conf.c **** 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 10


 202:c/usbd_conf.c **** /**
 203:c/usbd_conf.c ****   * @brief  Resume callback.
 204:c/usbd_conf.c ****   * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
 205:c/usbd_conf.c ****   * @param  hpcd: PCD handle
 206:c/usbd_conf.c ****   * @retval None
 207:c/usbd_conf.c ****   */
 208:c/usbd_conf.c **** void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
 209:c/usbd_conf.c **** {
 325              		.loc 1 209 0
 326              		.cfi_startproc
 327              		@ args = 0, pretend = 0, frame = 0
 328              		@ frame_needed = 0, uses_anonymous_args = 0
 329              		@ link register save eliminated.
 330              	.LVL28:
 210:c/usbd_conf.c ****   /* USER CODE BEGIN 3 */
 211:c/usbd_conf.c ****   /* USER CODE END 3 */
 212:c/usbd_conf.c ****   USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 331              		.loc 1 212 0
 332 0000 D0F85C04 		ldr	r0, [r0, #1116]
 333              	.LVL29:
 334 0004 FFF7FEBF 		b	USBD_LL_Resume
 335              	.LVL30:
 336              		.cfi_endproc
 337              	.LFE72:
 339              		.section	.text.HAL_PCD_ISOOUTIncompleteCallback,"ax",%progbits
 340              		.align	1
 341              		.global	HAL_PCD_ISOOUTIncompleteCallback
 342              		.syntax unified
 343              		.thumb
 344              		.thumb_func
 345              		.fpu softvfp
 347              	HAL_PCD_ISOOUTIncompleteCallback:
 348              	.LFB73:
 213:c/usbd_conf.c ****   
 214:c/usbd_conf.c **** }
 215:c/usbd_conf.c **** 
 216:c/usbd_conf.c **** /**
 217:c/usbd_conf.c ****   * @brief  ISOOUTIncomplete callback.
 218:c/usbd_conf.c ****   * @param  hpcd: PCD handle
 219:c/usbd_conf.c ****   * @param  epnum: Endpoint Number
 220:c/usbd_conf.c ****   * @retval None
 221:c/usbd_conf.c ****   */
 222:c/usbd_conf.c **** void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
 223:c/usbd_conf.c **** {
 349              		.loc 1 223 0
 350              		.cfi_startproc
 351              		@ args = 0, pretend = 0, frame = 0
 352              		@ frame_needed = 0, uses_anonymous_args = 0
 353              		@ link register save eliminated.
 354              	.LVL31:
 224:c/usbd_conf.c ****   USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 355              		.loc 1 224 0
 356 0000 D0F85C04 		ldr	r0, [r0, #1116]
 357              	.LVL32:
 358 0004 FFF7FEBF 		b	USBD_LL_IsoOUTIncomplete
 359              	.LVL33:
 360              		.cfi_endproc
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 11


 361              	.LFE73:
 363              		.section	.text.HAL_PCD_ISOINIncompleteCallback,"ax",%progbits
 364              		.align	1
 365              		.global	HAL_PCD_ISOINIncompleteCallback
 366              		.syntax unified
 367              		.thumb
 368              		.thumb_func
 369              		.fpu softvfp
 371              	HAL_PCD_ISOINIncompleteCallback:
 372              	.LFB74:
 225:c/usbd_conf.c **** }
 226:c/usbd_conf.c **** 
 227:c/usbd_conf.c **** /**
 228:c/usbd_conf.c ****   * @brief  ISOINIncomplete callback.
 229:c/usbd_conf.c ****   * @param  hpcd: PCD handle
 230:c/usbd_conf.c ****   * @param  epnum: Endpoint Number
 231:c/usbd_conf.c ****   * @retval None
 232:c/usbd_conf.c ****   */
 233:c/usbd_conf.c **** void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
 234:c/usbd_conf.c **** {
 373              		.loc 1 234 0
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 0
 376              		@ frame_needed = 0, uses_anonymous_args = 0
 377              		@ link register save eliminated.
 378              	.LVL34:
 235:c/usbd_conf.c ****   USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 379              		.loc 1 235 0
 380 0000 D0F85C04 		ldr	r0, [r0, #1116]
 381              	.LVL35:
 382 0004 FFF7FEBF 		b	USBD_LL_IsoINIncomplete
 383              	.LVL36:
 384              		.cfi_endproc
 385              	.LFE74:
 387              		.section	.text.HAL_PCD_ConnectCallback,"ax",%progbits
 388              		.align	1
 389              		.global	HAL_PCD_ConnectCallback
 390              		.syntax unified
 391              		.thumb
 392              		.thumb_func
 393              		.fpu softvfp
 395              	HAL_PCD_ConnectCallback:
 396              	.LFB75:
 236:c/usbd_conf.c **** }
 237:c/usbd_conf.c **** 
 238:c/usbd_conf.c **** /**
 239:c/usbd_conf.c ****   * @brief  ConnectCallback callback.
 240:c/usbd_conf.c ****   * @param  hpcd: PCD handle
 241:c/usbd_conf.c ****   * @retval None
 242:c/usbd_conf.c ****   */
 243:c/usbd_conf.c **** void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
 244:c/usbd_conf.c **** {
 397              		.loc 1 244 0
 398              		.cfi_startproc
 399              		@ args = 0, pretend = 0, frame = 0
 400              		@ frame_needed = 0, uses_anonymous_args = 0
 401              		@ link register save eliminated.
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 12


 402              	.LVL37:
 245:c/usbd_conf.c ****   USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 403              		.loc 1 245 0
 404 0000 D0F85C04 		ldr	r0, [r0, #1116]
 405              	.LVL38:
 406 0004 FFF7FEBF 		b	USBD_LL_DevConnected
 407              	.LVL39:
 408              		.cfi_endproc
 409              	.LFE75:
 411              		.section	.text.HAL_PCD_DisconnectCallback,"ax",%progbits
 412              		.align	1
 413              		.global	HAL_PCD_DisconnectCallback
 414              		.syntax unified
 415              		.thumb
 416              		.thumb_func
 417              		.fpu softvfp
 419              	HAL_PCD_DisconnectCallback:
 420              	.LFB76:
 246:c/usbd_conf.c **** }
 247:c/usbd_conf.c **** 
 248:c/usbd_conf.c **** /**
 249:c/usbd_conf.c ****   * @brief  Disconnect callback.
 250:c/usbd_conf.c ****   * @param  hpcd: PCD handle
 251:c/usbd_conf.c ****   * @retval None
 252:c/usbd_conf.c ****   */
 253:c/usbd_conf.c **** void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
 254:c/usbd_conf.c **** {
 421              		.loc 1 254 0
 422              		.cfi_startproc
 423              		@ args = 0, pretend = 0, frame = 0
 424              		@ frame_needed = 0, uses_anonymous_args = 0
 425              		@ link register save eliminated.
 426              	.LVL40:
 255:c/usbd_conf.c ****   USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 427              		.loc 1 255 0
 428 0000 D0F85C04 		ldr	r0, [r0, #1116]
 429              	.LVL41:
 430 0004 FFF7FEBF 		b	USBD_LL_DevDisconnected
 431              	.LVL42:
 432              		.cfi_endproc
 433              	.LFE76:
 435              		.section	.text.USBD_LL_Init,"ax",%progbits
 436              		.align	1
 437              		.global	USBD_LL_Init
 438              		.syntax unified
 439              		.thumb
 440              		.thumb_func
 441              		.fpu softvfp
 443              	USBD_LL_Init:
 444              	.LFB77:
 256:c/usbd_conf.c **** }
 257:c/usbd_conf.c **** 
 258:c/usbd_conf.c **** /*******************************************************************************
 259:c/usbd_conf.c ****                        LL Driver Interface (USB Device Library --> PCD)
 260:c/usbd_conf.c **** *******************************************************************************/
 261:c/usbd_conf.c **** /**
 262:c/usbd_conf.c ****   * @brief  Initializes the Low Level portion of the Device driver.
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 13


 263:c/usbd_conf.c ****   * @param  pdev: Device handle
 264:c/usbd_conf.c ****   * @retval USBD Status
 265:c/usbd_conf.c ****   */
 266:c/usbd_conf.c **** USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
 267:c/usbd_conf.c **** { 
 445              		.loc 1 267 0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 0
 448              		@ frame_needed = 0, uses_anonymous_args = 0
 449              	.LVL43:
 450 0000 10B5     		push	{r4, lr}
 451              		.cfi_def_cfa_offset 8
 452              		.cfi_offset 4, -8
 453              		.cfi_offset 14, -4
 268:c/usbd_conf.c ****   /* Init USB_IP */
 269:c/usbd_conf.c ****   /* Link The driver to the stack */
 270:c/usbd_conf.c ****   hpcd_USB_FS.pData = pdev;
 271:c/usbd_conf.c ****   pdev->pData = &hpcd_USB_FS;
 272:c/usbd_conf.c **** 
 273:c/usbd_conf.c ****   hpcd_USB_FS.Instance = USB;
 274:c/usbd_conf.c ****   hpcd_USB_FS.Init.dev_endpoints = 8;
 275:c/usbd_conf.c ****   hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 276:c/usbd_conf.c ****   hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 454              		.loc 1 276 0
 455 0002 0223     		movs	r3, #2
 456 0004 0822     		movs	r2, #8
 457 0006 4FF0030E 		mov	lr, #3
 267:c/usbd_conf.c ****   /* Init USB_IP */
 458              		.loc 1 267 0
 459 000a 0446     		mov	r4, r0
 460              		.loc 1 276 0
 461 000c 1849     		ldr	r1, .L31
 270:c/usbd_conf.c ****   pdev->pData = &hpcd_USB_FS;
 462              		.loc 1 270 0
 463 000e 1948     		ldr	r0, .L31+4
 464              	.LVL44:
 465              		.loc 1 276 0
 466 0010 80E80E40 		stm	r0, {r1, r2, r3, lr}
 277:c/usbd_conf.c ****   hpcd_USB_FS.Init.low_power_enable = DISABLE;
 467              		.loc 1 277 0
 468 0014 0023     		movs	r3, #0
 270:c/usbd_conf.c ****   pdev->pData = &hpcd_USB_FS;
 469              		.loc 1 270 0
 470 0016 C0F85C44 		str	r4, [r0, #1116]
 271:c/usbd_conf.c **** 
 471              		.loc 1 271 0
 472 001a C4F82002 		str	r0, [r4, #544]
 473              		.loc 1 277 0
 474 001e 8361     		str	r3, [r0, #24]
 278:c/usbd_conf.c ****   hpcd_USB_FS.Init.lpm_enable = DISABLE;
 475              		.loc 1 278 0
 476 0020 C361     		str	r3, [r0, #28]
 279:c/usbd_conf.c ****   hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 477              		.loc 1 279 0
 478 0022 0362     		str	r3, [r0, #32]
 280:c/usbd_conf.c ****   if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 479              		.loc 1 280 0
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 14


 480 0024 FFF7FEFF 		bl	HAL_PCD_Init
 481              	.LVL45:
 482 0028 20B1     		cbz	r0, .L27
 281:c/usbd_conf.c ****   {
 282:c/usbd_conf.c ****     _Error_Handler(__FILE__, __LINE__);
 483              		.loc 1 282 0
 484 002a 4FF48D71 		mov	r1, #282
 485 002e 1248     		ldr	r0, .L31+8
 486 0030 FFF7FEFF 		bl	_Error_Handler
 487              	.LVL46:
 488              	.L27:
 283:c/usbd_conf.c ****   }
 284:c/usbd_conf.c **** 
 285:c/usbd_conf.c ****   HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 489              		.loc 1 285 0
 490 0034 0022     		movs	r2, #0
 491 0036 1823     		movs	r3, #24
 492 0038 1146     		mov	r1, r2
 493 003a D4F82002 		ldr	r0, [r4, #544]
 494 003e FFF7FEFF 		bl	HAL_PCDEx_PMAConfig
 495              	.LVL47:
 286:c/usbd_conf.c ****   HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 496              		.loc 1 286 0
 497 0042 5823     		movs	r3, #88
 498 0044 0022     		movs	r2, #0
 499 0046 8021     		movs	r1, #128
 500 0048 D4F82002 		ldr	r0, [r4, #544]
 501 004c FFF7FEFF 		bl	HAL_PCDEx_PMAConfig
 502              	.LVL48:
 287:c/usbd_conf.c ****   HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98); 
 503              		.loc 1 287 0
 504 0050 9823     		movs	r3, #152
 505 0052 0022     		movs	r2, #0
 506 0054 8121     		movs	r1, #129
 507 0056 D4F82002 		ldr	r0, [r4, #544]
 508 005a FFF7FEFF 		bl	HAL_PCDEx_PMAConfig
 509              	.LVL49:
 288:c/usbd_conf.c ****   HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 510              		.loc 1 288 0
 511 005e D823     		movs	r3, #216
 512 0060 0022     		movs	r2, #0
 513 0062 0121     		movs	r1, #1
 514 0064 D4F82002 		ldr	r0, [r4, #544]
 515 0068 FFF7FEFF 		bl	HAL_PCDEx_PMAConfig
 516              	.LVL50:
 289:c/usbd_conf.c ****   return USBD_OK;
 290:c/usbd_conf.c **** }
 517              		.loc 1 290 0
 518 006c 0020     		movs	r0, #0
 519 006e 10BD     		pop	{r4, pc}
 520              	.LVL51:
 521              	.L32:
 522              		.align	2
 523              	.L31:
 524 0070 005C0040 		.word	1073765376
 525 0074 00000000 		.word	hpcd_USB_FS
 526 0078 00000000 		.word	.LC0
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 15


 527              		.cfi_endproc
 528              	.LFE77:
 530              		.section	.text.USBD_LL_DeInit,"ax",%progbits
 531              		.align	1
 532              		.global	USBD_LL_DeInit
 533              		.syntax unified
 534              		.thumb
 535              		.thumb_func
 536              		.fpu softvfp
 538              	USBD_LL_DeInit:
 539              	.LFB78:
 291:c/usbd_conf.c **** 
 292:c/usbd_conf.c **** /**
 293:c/usbd_conf.c ****   * @brief  De-Initializes the Low Level portion of the Device driver.
 294:c/usbd_conf.c ****   * @param  pdev: Device handle
 295:c/usbd_conf.c ****   * @retval USBD Status
 296:c/usbd_conf.c ****   */
 297:c/usbd_conf.c **** USBD_StatusTypeDef  USBD_LL_DeInit (USBD_HandleTypeDef *pdev)
 298:c/usbd_conf.c **** {
 540              		.loc 1 298 0
 541              		.cfi_startproc
 542              		@ args = 0, pretend = 0, frame = 0
 543              		@ frame_needed = 0, uses_anonymous_args = 0
 544              	.LVL52:
 545 0000 08B5     		push	{r3, lr}
 546              		.cfi_def_cfa_offset 8
 547              		.cfi_offset 3, -8
 548              		.cfi_offset 14, -4
 299:c/usbd_conf.c ****   HAL_StatusTypeDef hal_status = HAL_OK;
 300:c/usbd_conf.c ****   USBD_StatusTypeDef usb_status = USBD_OK;
 301:c/usbd_conf.c ****  
 302:c/usbd_conf.c ****   hal_status = HAL_PCD_DeInit(pdev->pData);
 549              		.loc 1 302 0
 550 0002 D0F82002 		ldr	r0, [r0, #544]
 551              	.LVL53:
 552 0006 FFF7FEFF 		bl	HAL_PCD_DeInit
 553              	.LVL54:
 554 000a 0328     		cmp	r0, #3
 555 000c 9ABF     		itte	ls
 556 000e 024B     		ldrls	r3, .L36
 557 0010 185C     		ldrbls	r0, [r3, r0]	@ zero_extendqisi2
 558              	.LVL55:
 559 0012 0220     		movhi	r0, #2
 560              	.LVL56:
 303:c/usbd_conf.c ****      
 304:c/usbd_conf.c ****   switch (hal_status) {
 305:c/usbd_conf.c ****     case HAL_OK :
 306:c/usbd_conf.c ****       usb_status = USBD_OK;
 307:c/usbd_conf.c ****     break;
 308:c/usbd_conf.c ****     case HAL_ERROR :
 309:c/usbd_conf.c ****       usb_status = USBD_FAIL;
 310:c/usbd_conf.c ****     break;
 311:c/usbd_conf.c ****     case HAL_BUSY :
 312:c/usbd_conf.c ****       usb_status = USBD_BUSY;
 313:c/usbd_conf.c ****     break;
 314:c/usbd_conf.c ****     case HAL_TIMEOUT :
 315:c/usbd_conf.c ****       usb_status = USBD_FAIL;
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 16


 316:c/usbd_conf.c ****     break;
 317:c/usbd_conf.c ****     default :
 318:c/usbd_conf.c ****       usb_status = USBD_FAIL;
 319:c/usbd_conf.c ****     break;
 320:c/usbd_conf.c ****   }
 321:c/usbd_conf.c ****   return usb_status; 
 322:c/usbd_conf.c **** }
 561              		.loc 1 322 0
 562 0014 08BD     		pop	{r3, pc}
 563              	.L37:
 564 0016 00BF     		.align	2
 565              	.L36:
 566 0018 00000000 		.word	CSWTCH.18
 567              		.cfi_endproc
 568              	.LFE78:
 570              		.section	.text.USBD_LL_Start,"ax",%progbits
 571              		.align	1
 572              		.global	USBD_LL_Start
 573              		.syntax unified
 574              		.thumb
 575              		.thumb_func
 576              		.fpu softvfp
 578              	USBD_LL_Start:
 579              	.LFB79:
 323:c/usbd_conf.c **** 
 324:c/usbd_conf.c **** /**
 325:c/usbd_conf.c ****   * @brief  Starts the Low Level portion of the Device driver. 
 326:c/usbd_conf.c ****   * @param  pdev: Device handle
 327:c/usbd_conf.c ****   * @retval USBD Status
 328:c/usbd_conf.c ****   */
 329:c/usbd_conf.c **** USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
 330:c/usbd_conf.c **** {
 580              		.loc 1 330 0
 581              		.cfi_startproc
 582              		@ args = 0, pretend = 0, frame = 0
 583              		@ frame_needed = 0, uses_anonymous_args = 0
 584              	.LVL57:
 585 0000 08B5     		push	{r3, lr}
 586              		.cfi_def_cfa_offset 8
 587              		.cfi_offset 3, -8
 588              		.cfi_offset 14, -4
 331:c/usbd_conf.c ****   HAL_StatusTypeDef hal_status = HAL_OK;
 332:c/usbd_conf.c ****   USBD_StatusTypeDef usb_status = USBD_OK;
 333:c/usbd_conf.c ****  
 334:c/usbd_conf.c ****   hal_status = HAL_PCD_Start(pdev->pData);
 589              		.loc 1 334 0
 590 0002 D0F82002 		ldr	r0, [r0, #544]
 591              	.LVL58:
 592 0006 FFF7FEFF 		bl	HAL_PCD_Start
 593              	.LVL59:
 594 000a 0328     		cmp	r0, #3
 595 000c 9ABF     		itte	ls
 596 000e 024B     		ldrls	r3, .L41
 597 0010 185C     		ldrbls	r0, [r3, r0]	@ zero_extendqisi2
 598              	.LVL60:
 599 0012 0220     		movhi	r0, #2
 600              	.LVL61:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 17


 335:c/usbd_conf.c ****      
 336:c/usbd_conf.c ****   switch (hal_status) {
 337:c/usbd_conf.c ****     case HAL_OK :
 338:c/usbd_conf.c ****       usb_status = USBD_OK;
 339:c/usbd_conf.c ****     break;
 340:c/usbd_conf.c ****     case HAL_ERROR :
 341:c/usbd_conf.c ****       usb_status = USBD_FAIL;
 342:c/usbd_conf.c ****     break;
 343:c/usbd_conf.c ****     case HAL_BUSY :
 344:c/usbd_conf.c ****       usb_status = USBD_BUSY;
 345:c/usbd_conf.c ****     break;
 346:c/usbd_conf.c ****     case HAL_TIMEOUT :
 347:c/usbd_conf.c ****       usb_status = USBD_FAIL;
 348:c/usbd_conf.c ****     break;
 349:c/usbd_conf.c ****     default :
 350:c/usbd_conf.c ****       usb_status = USBD_FAIL;
 351:c/usbd_conf.c ****     break;
 352:c/usbd_conf.c ****   }
 353:c/usbd_conf.c ****   return usb_status;  
 354:c/usbd_conf.c **** }
 601              		.loc 1 354 0
 602 0014 08BD     		pop	{r3, pc}
 603              	.L42:
 604 0016 00BF     		.align	2
 605              	.L41:
 606 0018 00000000 		.word	CSWTCH.20
 607              		.cfi_endproc
 608              	.LFE79:
 610              		.section	.text.USBD_LL_Stop,"ax",%progbits
 611              		.align	1
 612              		.global	USBD_LL_Stop
 613              		.syntax unified
 614              		.thumb
 615              		.thumb_func
 616              		.fpu softvfp
 618              	USBD_LL_Stop:
 619              	.LFB80:
 355:c/usbd_conf.c **** 
 356:c/usbd_conf.c **** /**
 357:c/usbd_conf.c ****   * @brief  Stops the Low Level portion of the Device driver.
 358:c/usbd_conf.c ****   * @param  pdev: Device handle
 359:c/usbd_conf.c ****   * @retval USBD Status
 360:c/usbd_conf.c ****   */
 361:c/usbd_conf.c **** USBD_StatusTypeDef  USBD_LL_Stop (USBD_HandleTypeDef *pdev)
 362:c/usbd_conf.c **** {
 620              		.loc 1 362 0
 621              		.cfi_startproc
 622              		@ args = 0, pretend = 0, frame = 0
 623              		@ frame_needed = 0, uses_anonymous_args = 0
 624              	.LVL62:
 625 0000 08B5     		push	{r3, lr}
 626              		.cfi_def_cfa_offset 8
 627              		.cfi_offset 3, -8
 628              		.cfi_offset 14, -4
 363:c/usbd_conf.c ****   HAL_StatusTypeDef hal_status = HAL_OK;
 364:c/usbd_conf.c ****   USBD_StatusTypeDef usb_status = USBD_OK;
 365:c/usbd_conf.c ****  
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 18


 366:c/usbd_conf.c ****   hal_status = HAL_PCD_Stop(pdev->pData);
 629              		.loc 1 366 0
 630 0002 D0F82002 		ldr	r0, [r0, #544]
 631              	.LVL63:
 632 0006 FFF7FEFF 		bl	HAL_PCD_Stop
 633              	.LVL64:
 634 000a 0328     		cmp	r0, #3
 635 000c 9ABF     		itte	ls
 636 000e 024B     		ldrls	r3, .L46
 637 0010 185C     		ldrbls	r0, [r3, r0]	@ zero_extendqisi2
 638              	.LVL65:
 639 0012 0220     		movhi	r0, #2
 640              	.LVL66:
 367:c/usbd_conf.c ****      
 368:c/usbd_conf.c ****   switch (hal_status) {
 369:c/usbd_conf.c ****     case HAL_OK :
 370:c/usbd_conf.c ****       usb_status = USBD_OK;
 371:c/usbd_conf.c ****     break;
 372:c/usbd_conf.c ****     case HAL_ERROR :
 373:c/usbd_conf.c ****       usb_status = USBD_FAIL;
 374:c/usbd_conf.c ****     break;
 375:c/usbd_conf.c ****     case HAL_BUSY :
 376:c/usbd_conf.c ****       usb_status = USBD_BUSY;
 377:c/usbd_conf.c ****     break;
 378:c/usbd_conf.c ****     case HAL_TIMEOUT :
 379:c/usbd_conf.c ****       usb_status = USBD_FAIL;
 380:c/usbd_conf.c ****     break;
 381:c/usbd_conf.c ****     default :
 382:c/usbd_conf.c ****       usb_status = USBD_FAIL;
 383:c/usbd_conf.c ****     break;
 384:c/usbd_conf.c ****   }
 385:c/usbd_conf.c ****   return usb_status; 
 386:c/usbd_conf.c **** }
 641              		.loc 1 386 0
 642 0014 08BD     		pop	{r3, pc}
 643              	.L47:
 644 0016 00BF     		.align	2
 645              	.L46:
 646 0018 00000000 		.word	CSWTCH.22
 647              		.cfi_endproc
 648              	.LFE80:
 650              		.section	.text.USBD_LL_OpenEP,"ax",%progbits
 651              		.align	1
 652              		.global	USBD_LL_OpenEP
 653              		.syntax unified
 654              		.thumb
 655              		.thumb_func
 656              		.fpu softvfp
 658              	USBD_LL_OpenEP:
 659              	.LFB81:
 387:c/usbd_conf.c **** 
 388:c/usbd_conf.c **** /**
 389:c/usbd_conf.c ****   * @brief  Opens an endpoint of the Low Level Driver.
 390:c/usbd_conf.c ****   * @param  pdev: Device handle
 391:c/usbd_conf.c ****   * @param  ep_addr: Endpoint Number
 392:c/usbd_conf.c ****   * @param  ep_type: Endpoint Type
 393:c/usbd_conf.c ****   * @param  ep_mps: Endpoint Max Packet Size
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 19


 394:c/usbd_conf.c ****   * @retval USBD Status
 395:c/usbd_conf.c ****   */
 396:c/usbd_conf.c **** USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
 397:c/usbd_conf.c ****                                       uint8_t  ep_addr,                                      
 398:c/usbd_conf.c ****                                       uint8_t  ep_type,
 399:c/usbd_conf.c ****                                       uint16_t ep_mps)
 400:c/usbd_conf.c **** {
 660              		.loc 1 400 0
 661              		.cfi_startproc
 662              		@ args = 0, pretend = 0, frame = 0
 663              		@ frame_needed = 0, uses_anonymous_args = 0
 664              	.LVL67:
 665 0000 10B5     		push	{r4, lr}
 666              		.cfi_def_cfa_offset 8
 667              		.cfi_offset 4, -8
 668              		.cfi_offset 14, -4
 669              		.loc 1 400 0
 670 0002 1C46     		mov	r4, r3
 401:c/usbd_conf.c ****   HAL_StatusTypeDef hal_status = HAL_OK;
 402:c/usbd_conf.c ****   USBD_StatusTypeDef usb_status = USBD_OK;
 403:c/usbd_conf.c **** 
 404:c/usbd_conf.c ****   hal_status = HAL_PCD_EP_Open(pdev->pData, 
 671              		.loc 1 404 0
 672 0004 D0F82002 		ldr	r0, [r0, #544]
 673              	.LVL68:
 674 0008 1346     		mov	r3, r2
 675              	.LVL69:
 676 000a 2246     		mov	r2, r4
 677              	.LVL70:
 678 000c FFF7FEFF 		bl	HAL_PCD_EP_Open
 679              	.LVL71:
 680 0010 0328     		cmp	r0, #3
 681 0012 9ABF     		itte	ls
 682 0014 014B     		ldrls	r3, .L51
 683 0016 185C     		ldrbls	r0, [r3, r0]	@ zero_extendqisi2
 684              	.LVL72:
 685 0018 0220     		movhi	r0, #2
 686              	.LVL73:
 405:c/usbd_conf.c ****                                ep_addr, 
 406:c/usbd_conf.c ****                                ep_mps, 
 407:c/usbd_conf.c ****                                ep_type);
 408:c/usbd_conf.c ****   
 409:c/usbd_conf.c ****      
 410:c/usbd_conf.c ****   switch (hal_status) {
 411:c/usbd_conf.c ****     case HAL_OK :
 412:c/usbd_conf.c ****       usb_status = USBD_OK;
 413:c/usbd_conf.c ****     break;
 414:c/usbd_conf.c ****     case HAL_ERROR :
 415:c/usbd_conf.c ****       usb_status = USBD_FAIL;
 416:c/usbd_conf.c ****     break;
 417:c/usbd_conf.c ****     case HAL_BUSY :
 418:c/usbd_conf.c ****       usb_status = USBD_BUSY;
 419:c/usbd_conf.c ****     break;
 420:c/usbd_conf.c ****     case HAL_TIMEOUT :
 421:c/usbd_conf.c ****       usb_status = USBD_FAIL;
 422:c/usbd_conf.c ****     break;
 423:c/usbd_conf.c ****     default :
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 20


 424:c/usbd_conf.c ****       usb_status = USBD_FAIL;
 425:c/usbd_conf.c ****     break;
 426:c/usbd_conf.c ****   }
 427:c/usbd_conf.c ****   return usb_status; 
 428:c/usbd_conf.c **** }
 687              		.loc 1 428 0
 688 001a 10BD     		pop	{r4, pc}
 689              	.L52:
 690              		.align	2
 691              	.L51:
 692 001c 00000000 		.word	CSWTCH.24
 693              		.cfi_endproc
 694              	.LFE81:
 696              		.section	.text.USBD_LL_CloseEP,"ax",%progbits
 697              		.align	1
 698              		.global	USBD_LL_CloseEP
 699              		.syntax unified
 700              		.thumb
 701              		.thumb_func
 702              		.fpu softvfp
 704              	USBD_LL_CloseEP:
 705              	.LFB82:
 429:c/usbd_conf.c **** 
 430:c/usbd_conf.c **** /**
 431:c/usbd_conf.c ****   * @brief  Closes an endpoint of the Low Level Driver.
 432:c/usbd_conf.c ****   * @param  pdev: Device handle
 433:c/usbd_conf.c ****   * @param  ep_addr: Endpoint Number
 434:c/usbd_conf.c ****   * @retval USBD Status
 435:c/usbd_conf.c ****   */
 436:c/usbd_conf.c **** USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
 437:c/usbd_conf.c **** {
 706              		.loc 1 437 0
 707              		.cfi_startproc
 708              		@ args = 0, pretend = 0, frame = 0
 709              		@ frame_needed = 0, uses_anonymous_args = 0
 710              	.LVL74:
 711 0000 08B5     		push	{r3, lr}
 712              		.cfi_def_cfa_offset 8
 713              		.cfi_offset 3, -8
 714              		.cfi_offset 14, -4
 438:c/usbd_conf.c ****   HAL_StatusTypeDef hal_status = HAL_OK;
 439:c/usbd_conf.c ****   USBD_StatusTypeDef usb_status = USBD_OK;
 440:c/usbd_conf.c ****   
 441:c/usbd_conf.c ****   hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 715              		.loc 1 441 0
 716 0002 D0F82002 		ldr	r0, [r0, #544]
 717              	.LVL75:
 718 0006 FFF7FEFF 		bl	HAL_PCD_EP_Close
 719              	.LVL76:
 720 000a 0328     		cmp	r0, #3
 721 000c 9ABF     		itte	ls
 722 000e 024B     		ldrls	r3, .L56
 723 0010 185C     		ldrbls	r0, [r3, r0]	@ zero_extendqisi2
 724              	.LVL77:
 725 0012 0220     		movhi	r0, #2
 726              	.LVL78:
 442:c/usbd_conf.c ****       
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 21


 443:c/usbd_conf.c ****   switch (hal_status) {
 444:c/usbd_conf.c ****     case HAL_OK :
 445:c/usbd_conf.c ****       usb_status = USBD_OK;
 446:c/usbd_conf.c ****     break;
 447:c/usbd_conf.c ****     case HAL_ERROR :
 448:c/usbd_conf.c ****       usb_status = USBD_FAIL;
 449:c/usbd_conf.c ****     break;
 450:c/usbd_conf.c ****     case HAL_BUSY :
 451:c/usbd_conf.c ****       usb_status = USBD_BUSY;
 452:c/usbd_conf.c ****     break;
 453:c/usbd_conf.c ****     case HAL_TIMEOUT :
 454:c/usbd_conf.c ****       usb_status = USBD_FAIL;
 455:c/usbd_conf.c ****     break;
 456:c/usbd_conf.c ****     default :
 457:c/usbd_conf.c ****       usb_status = USBD_FAIL;
 458:c/usbd_conf.c ****     break;
 459:c/usbd_conf.c ****   }
 460:c/usbd_conf.c ****   return usb_status;  
 461:c/usbd_conf.c **** }
 727              		.loc 1 461 0
 728 0014 08BD     		pop	{r3, pc}
 729              	.L57:
 730 0016 00BF     		.align	2
 731              	.L56:
 732 0018 00000000 		.word	CSWTCH.26
 733              		.cfi_endproc
 734              	.LFE82:
 736              		.section	.text.USBD_LL_FlushEP,"ax",%progbits
 737              		.align	1
 738              		.global	USBD_LL_FlushEP
 739              		.syntax unified
 740              		.thumb
 741              		.thumb_func
 742              		.fpu softvfp
 744              	USBD_LL_FlushEP:
 745              	.LFB83:
 462:c/usbd_conf.c **** 
 463:c/usbd_conf.c **** /**
 464:c/usbd_conf.c ****   * @brief  Flushes an endpoint of the Low Level Driver.
 465:c/usbd_conf.c ****   * @param  pdev: Device handle
 466:c/usbd_conf.c ****   * @param  ep_addr: Endpoint Number
 467:c/usbd_conf.c ****   * @retval USBD Status
 468:c/usbd_conf.c ****   */
 469:c/usbd_conf.c **** USBD_StatusTypeDef  USBD_LL_FlushEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
 470:c/usbd_conf.c **** {
 746              		.loc 1 470 0
 747              		.cfi_startproc
 748              		@ args = 0, pretend = 0, frame = 0
 749              		@ frame_needed = 0, uses_anonymous_args = 0
 750              	.LVL79:
 751 0000 08B5     		push	{r3, lr}
 752              		.cfi_def_cfa_offset 8
 753              		.cfi_offset 3, -8
 754              		.cfi_offset 14, -4
 471:c/usbd_conf.c ****   HAL_StatusTypeDef hal_status = HAL_OK;
 472:c/usbd_conf.c ****   USBD_StatusTypeDef usb_status = USBD_OK;
 473:c/usbd_conf.c ****   
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 22


 474:c/usbd_conf.c ****   hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 755              		.loc 1 474 0
 756 0002 D0F82002 		ldr	r0, [r0, #544]
 757              	.LVL80:
 758 0006 FFF7FEFF 		bl	HAL_PCD_EP_Flush
 759              	.LVL81:
 760 000a 0328     		cmp	r0, #3
 761 000c 9ABF     		itte	ls
 762 000e 024B     		ldrls	r3, .L61
 763 0010 185C     		ldrbls	r0, [r3, r0]	@ zero_extendqisi2
 764              	.LVL82:
 765 0012 0220     		movhi	r0, #2
 766              	.LVL83:
 475:c/usbd_conf.c ****       
 476:c/usbd_conf.c ****   switch (hal_status) {
 477:c/usbd_conf.c ****     case HAL_OK :
 478:c/usbd_conf.c ****       usb_status = USBD_OK;
 479:c/usbd_conf.c ****     break;
 480:c/usbd_conf.c ****     case HAL_ERROR :
 481:c/usbd_conf.c ****       usb_status = USBD_FAIL;
 482:c/usbd_conf.c ****     break;
 483:c/usbd_conf.c ****     case HAL_BUSY :
 484:c/usbd_conf.c ****       usb_status = USBD_BUSY;
 485:c/usbd_conf.c ****     break;
 486:c/usbd_conf.c ****     case HAL_TIMEOUT :
 487:c/usbd_conf.c ****       usb_status = USBD_FAIL;
 488:c/usbd_conf.c ****     break;
 489:c/usbd_conf.c ****     default :
 490:c/usbd_conf.c ****       usb_status = USBD_FAIL;
 491:c/usbd_conf.c ****     break;
 492:c/usbd_conf.c ****   }
 493:c/usbd_conf.c ****   return usb_status;  
 494:c/usbd_conf.c **** }
 767              		.loc 1 494 0
 768 0014 08BD     		pop	{r3, pc}
 769              	.L62:
 770 0016 00BF     		.align	2
 771              	.L61:
 772 0018 00000000 		.word	CSWTCH.28
 773              		.cfi_endproc
 774              	.LFE83:
 776              		.section	.text.USBD_LL_StallEP,"ax",%progbits
 777              		.align	1
 778              		.global	USBD_LL_StallEP
 779              		.syntax unified
 780              		.thumb
 781              		.thumb_func
 782              		.fpu softvfp
 784              	USBD_LL_StallEP:
 785              	.LFB84:
 495:c/usbd_conf.c **** 
 496:c/usbd_conf.c **** /**
 497:c/usbd_conf.c ****   * @brief  Sets a Stall condition on an endpoint of the Low Level Driver.
 498:c/usbd_conf.c ****   * @param  pdev: Device handle
 499:c/usbd_conf.c ****   * @param  ep_addr: Endpoint Number
 500:c/usbd_conf.c ****   * @retval USBD Status
 501:c/usbd_conf.c ****   */
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 23


 502:c/usbd_conf.c **** USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
 503:c/usbd_conf.c **** {
 786              		.loc 1 503 0
 787              		.cfi_startproc
 788              		@ args = 0, pretend = 0, frame = 0
 789              		@ frame_needed = 0, uses_anonymous_args = 0
 790              	.LVL84:
 791 0000 08B5     		push	{r3, lr}
 792              		.cfi_def_cfa_offset 8
 793              		.cfi_offset 3, -8
 794              		.cfi_offset 14, -4
 504:c/usbd_conf.c ****   HAL_StatusTypeDef hal_status = HAL_OK;
 505:c/usbd_conf.c ****   USBD_StatusTypeDef usb_status = USBD_OK;
 506:c/usbd_conf.c ****   
 507:c/usbd_conf.c ****   hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 795              		.loc 1 507 0
 796 0002 D0F82002 		ldr	r0, [r0, #544]
 797              	.LVL85:
 798 0006 FFF7FEFF 		bl	HAL_PCD_EP_SetStall
 799              	.LVL86:
 800 000a 0328     		cmp	r0, #3
 801 000c 9ABF     		itte	ls
 802 000e 024B     		ldrls	r3, .L66
 803 0010 185C     		ldrbls	r0, [r3, r0]	@ zero_extendqisi2
 804              	.LVL87:
 805 0012 0220     		movhi	r0, #2
 806              	.LVL88:
 508:c/usbd_conf.c ****       
 509:c/usbd_conf.c ****   switch (hal_status) {
 510:c/usbd_conf.c ****     case HAL_OK :
 511:c/usbd_conf.c ****       usb_status = USBD_OK;
 512:c/usbd_conf.c ****     break;
 513:c/usbd_conf.c ****     case HAL_ERROR :
 514:c/usbd_conf.c ****       usb_status = USBD_FAIL;
 515:c/usbd_conf.c ****     break;
 516:c/usbd_conf.c ****     case HAL_BUSY :
 517:c/usbd_conf.c ****       usb_status = USBD_BUSY;
 518:c/usbd_conf.c ****     break;
 519:c/usbd_conf.c ****     case HAL_TIMEOUT :
 520:c/usbd_conf.c ****       usb_status = USBD_FAIL;
 521:c/usbd_conf.c ****     break;
 522:c/usbd_conf.c ****     default :
 523:c/usbd_conf.c ****       usb_status = USBD_FAIL;
 524:c/usbd_conf.c ****     break;
 525:c/usbd_conf.c ****   }
 526:c/usbd_conf.c ****   return usb_status;  
 527:c/usbd_conf.c **** }
 807              		.loc 1 527 0
 808 0014 08BD     		pop	{r3, pc}
 809              	.L67:
 810 0016 00BF     		.align	2
 811              	.L66:
 812 0018 00000000 		.word	CSWTCH.30
 813              		.cfi_endproc
 814              	.LFE84:
 816              		.section	.text.USBD_LL_ClearStallEP,"ax",%progbits
 817              		.align	1
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 24


 818              		.global	USBD_LL_ClearStallEP
 819              		.syntax unified
 820              		.thumb
 821              		.thumb_func
 822              		.fpu softvfp
 824              	USBD_LL_ClearStallEP:
 825              	.LFB85:
 528:c/usbd_conf.c **** 
 529:c/usbd_conf.c **** /**
 530:c/usbd_conf.c ****   * @brief  Clears a Stall condition on an endpoint of the Low Level Driver.
 531:c/usbd_conf.c ****   * @param  pdev: Device handle
 532:c/usbd_conf.c ****   * @param  ep_addr: Endpoint Number
 533:c/usbd_conf.c ****   * @retval USBD Status
 534:c/usbd_conf.c ****   */
 535:c/usbd_conf.c **** USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
 536:c/usbd_conf.c **** {
 826              		.loc 1 536 0
 827              		.cfi_startproc
 828              		@ args = 0, pretend = 0, frame = 0
 829              		@ frame_needed = 0, uses_anonymous_args = 0
 830              	.LVL89:
 831 0000 08B5     		push	{r3, lr}
 832              		.cfi_def_cfa_offset 8
 833              		.cfi_offset 3, -8
 834              		.cfi_offset 14, -4
 537:c/usbd_conf.c ****   HAL_StatusTypeDef hal_status = HAL_OK;
 538:c/usbd_conf.c ****   USBD_StatusTypeDef usb_status = USBD_OK;
 539:c/usbd_conf.c ****   
 540:c/usbd_conf.c ****   hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 835              		.loc 1 540 0
 836 0002 D0F82002 		ldr	r0, [r0, #544]
 837              	.LVL90:
 838 0006 FFF7FEFF 		bl	HAL_PCD_EP_ClrStall
 839              	.LVL91:
 840 000a 0328     		cmp	r0, #3
 841 000c 9ABF     		itte	ls
 842 000e 024B     		ldrls	r3, .L71
 843 0010 185C     		ldrbls	r0, [r3, r0]	@ zero_extendqisi2
 844              	.LVL92:
 845 0012 0220     		movhi	r0, #2
 846              	.LVL93:
 541:c/usbd_conf.c ****      
 542:c/usbd_conf.c ****   switch (hal_status) {
 543:c/usbd_conf.c ****     case HAL_OK :
 544:c/usbd_conf.c ****       usb_status = USBD_OK;
 545:c/usbd_conf.c ****     break;
 546:c/usbd_conf.c ****     case HAL_ERROR :
 547:c/usbd_conf.c ****       usb_status = USBD_FAIL;
 548:c/usbd_conf.c ****     break;
 549:c/usbd_conf.c ****     case HAL_BUSY :
 550:c/usbd_conf.c ****       usb_status = USBD_BUSY;
 551:c/usbd_conf.c ****     break;
 552:c/usbd_conf.c ****     case HAL_TIMEOUT :
 553:c/usbd_conf.c ****       usb_status = USBD_FAIL;
 554:c/usbd_conf.c ****     break;
 555:c/usbd_conf.c ****     default :
 556:c/usbd_conf.c ****       usb_status = USBD_FAIL;
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 25


 557:c/usbd_conf.c ****     break;
 558:c/usbd_conf.c ****   }
 559:c/usbd_conf.c ****   return usb_status; 
 560:c/usbd_conf.c **** }
 847              		.loc 1 560 0
 848 0014 08BD     		pop	{r3, pc}
 849              	.L72:
 850 0016 00BF     		.align	2
 851              	.L71:
 852 0018 00000000 		.word	CSWTCH.32
 853              		.cfi_endproc
 854              	.LFE85:
 856              		.section	.text.USBD_LL_IsStallEP,"ax",%progbits
 857              		.align	1
 858              		.global	USBD_LL_IsStallEP
 859              		.syntax unified
 860              		.thumb
 861              		.thumb_func
 862              		.fpu softvfp
 864              	USBD_LL_IsStallEP:
 865              	.LFB86:
 561:c/usbd_conf.c **** 
 562:c/usbd_conf.c **** /**
 563:c/usbd_conf.c ****   * @brief  Returns Stall condition.
 564:c/usbd_conf.c ****   * @param  pdev: Device handle
 565:c/usbd_conf.c ****   * @param  ep_addr: Endpoint Number
 566:c/usbd_conf.c ****   * @retval Stall (1: Yes, 0: No)
 567:c/usbd_conf.c ****   */
 568:c/usbd_conf.c **** uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
 569:c/usbd_conf.c **** {
 866              		.loc 1 569 0
 867              		.cfi_startproc
 868              		@ args = 0, pretend = 0, frame = 0
 869              		@ frame_needed = 0, uses_anonymous_args = 0
 870              		@ link register save eliminated.
 871              	.LVL94:
 570:c/usbd_conf.c ****   PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 571:c/usbd_conf.c ****   
 572:c/usbd_conf.c ****   if((ep_addr & 0x80) == 0x80)
 872              		.loc 1 572 0
 873 0000 0A06     		lsls	r2, r1, #24
 570:c/usbd_conf.c ****   PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 874              		.loc 1 570 0
 875 0002 D0F82032 		ldr	r3, [r0, #544]
 876              	.LVL95:
 573:c/usbd_conf.c ****   {
 574:c/usbd_conf.c ****     return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 877              		.loc 1 574 0
 878 0006 45BF     		ittet	mi
 879 0008 01F07F01 		andmi	r1, r1, #127
 880              	.LVL96:
 881 000c 03EB4113 		addmi	r3, r3, r1, lsl #5
 882              	.LVL97:
 575:c/usbd_conf.c ****   }
 576:c/usbd_conf.c ****   else
 577:c/usbd_conf.c ****   {
 578:c/usbd_conf.c ****     return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 26


 883              		.loc 1 578 0
 884 0010 03EB4113 		addpl	r3, r3, r1, lsl #5
 574:c/usbd_conf.c ****   }
 885              		.loc 1 574 0
 886 0014 93F82A00 		ldrbmi	r0, [r3, #42]	@ zero_extendqisi2
 887              	.LVL98:
 888              		.loc 1 578 0
 889 0018 58BF     		it	pl
 890 001a 93F82A02 		ldrbpl	r0, [r3, #554]	@ zero_extendqisi2
 579:c/usbd_conf.c ****   }
 580:c/usbd_conf.c **** }
 891              		.loc 1 580 0
 892 001e 7047     		bx	lr
 893              		.cfi_endproc
 894              	.LFE86:
 896              		.section	.text.USBD_LL_SetUSBAddress,"ax",%progbits
 897              		.align	1
 898              		.global	USBD_LL_SetUSBAddress
 899              		.syntax unified
 900              		.thumb
 901              		.thumb_func
 902              		.fpu softvfp
 904              	USBD_LL_SetUSBAddress:
 905              	.LFB87:
 581:c/usbd_conf.c **** /**
 582:c/usbd_conf.c ****   * @brief  Assigns a USB address to the device.
 583:c/usbd_conf.c ****   * @param  pdev: Device handle
 584:c/usbd_conf.c ****   * @param  ep_addr: Endpoint Number
 585:c/usbd_conf.c ****   * @retval USBD Status
 586:c/usbd_conf.c ****   */
 587:c/usbd_conf.c **** USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
 588:c/usbd_conf.c **** {
 906              		.loc 1 588 0
 907              		.cfi_startproc
 908              		@ args = 0, pretend = 0, frame = 0
 909              		@ frame_needed = 0, uses_anonymous_args = 0
 910              	.LVL99:
 911 0000 08B5     		push	{r3, lr}
 912              		.cfi_def_cfa_offset 8
 913              		.cfi_offset 3, -8
 914              		.cfi_offset 14, -4
 589:c/usbd_conf.c ****   HAL_StatusTypeDef hal_status = HAL_OK;
 590:c/usbd_conf.c ****   USBD_StatusTypeDef usb_status = USBD_OK;
 591:c/usbd_conf.c ****   
 592:c/usbd_conf.c ****   hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 915              		.loc 1 592 0
 916 0002 D0F82002 		ldr	r0, [r0, #544]
 917              	.LVL100:
 918 0006 FFF7FEFF 		bl	HAL_PCD_SetAddress
 919              	.LVL101:
 920 000a 0328     		cmp	r0, #3
 921 000c 9ABF     		itte	ls
 922 000e 024B     		ldrls	r3, .L79
 923 0010 185C     		ldrbls	r0, [r3, r0]	@ zero_extendqisi2
 924              	.LVL102:
 925 0012 0220     		movhi	r0, #2
 926              	.LVL103:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 27


 593:c/usbd_conf.c ****      
 594:c/usbd_conf.c ****   switch (hal_status) {
 595:c/usbd_conf.c ****     case HAL_OK :
 596:c/usbd_conf.c ****       usb_status = USBD_OK;
 597:c/usbd_conf.c ****     break;
 598:c/usbd_conf.c ****     case HAL_ERROR :
 599:c/usbd_conf.c ****       usb_status = USBD_FAIL;
 600:c/usbd_conf.c ****     break;
 601:c/usbd_conf.c ****     case HAL_BUSY :
 602:c/usbd_conf.c ****       usb_status = USBD_BUSY;
 603:c/usbd_conf.c ****     break;
 604:c/usbd_conf.c ****     case HAL_TIMEOUT :
 605:c/usbd_conf.c ****       usb_status = USBD_FAIL;
 606:c/usbd_conf.c ****     break;
 607:c/usbd_conf.c ****     default :
 608:c/usbd_conf.c ****       usb_status = USBD_FAIL;
 609:c/usbd_conf.c ****     break;
 610:c/usbd_conf.c ****   }
 611:c/usbd_conf.c ****   return usb_status;  
 612:c/usbd_conf.c **** }
 927              		.loc 1 612 0
 928 0014 08BD     		pop	{r3, pc}
 929              	.L80:
 930 0016 00BF     		.align	2
 931              	.L79:
 932 0018 00000000 		.word	CSWTCH.35
 933              		.cfi_endproc
 934              	.LFE87:
 936              		.section	.text.USBD_LL_Transmit,"ax",%progbits
 937              		.align	1
 938              		.global	USBD_LL_Transmit
 939              		.syntax unified
 940              		.thumb
 941              		.thumb_func
 942              		.fpu softvfp
 944              	USBD_LL_Transmit:
 945              	.LFB88:
 613:c/usbd_conf.c **** 
 614:c/usbd_conf.c **** /**
 615:c/usbd_conf.c ****   * @brief  Transmits data over an endpoint.
 616:c/usbd_conf.c ****   * @param  pdev: Device handle
 617:c/usbd_conf.c ****   * @param  ep_addr: Endpoint Number
 618:c/usbd_conf.c ****   * @param  pbuf: Pointer to data to be sent
 619:c/usbd_conf.c ****   * @param  size: Data size    
 620:c/usbd_conf.c ****   * @retval USBD Status
 621:c/usbd_conf.c ****   */
 622:c/usbd_conf.c **** USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
 623:c/usbd_conf.c ****                                       uint8_t  ep_addr,                                      
 624:c/usbd_conf.c ****                                       uint8_t  *pbuf,
 625:c/usbd_conf.c ****                                       uint16_t  size)
 626:c/usbd_conf.c **** {
 946              		.loc 1 626 0
 947              		.cfi_startproc
 948              		@ args = 0, pretend = 0, frame = 0
 949              		@ frame_needed = 0, uses_anonymous_args = 0
 950              	.LVL104:
 951 0000 08B5     		push	{r3, lr}
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 28


 952              		.cfi_def_cfa_offset 8
 953              		.cfi_offset 3, -8
 954              		.cfi_offset 14, -4
 627:c/usbd_conf.c ****   HAL_StatusTypeDef hal_status = HAL_OK;
 628:c/usbd_conf.c ****   USBD_StatusTypeDef usb_status = USBD_OK;
 629:c/usbd_conf.c **** 
 630:c/usbd_conf.c ****   hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 955              		.loc 1 630 0
 956 0002 D0F82002 		ldr	r0, [r0, #544]
 957              	.LVL105:
 958 0006 FFF7FEFF 		bl	HAL_PCD_EP_Transmit
 959              	.LVL106:
 960 000a 0328     		cmp	r0, #3
 961 000c 9ABF     		itte	ls
 962 000e 024B     		ldrls	r3, .L84
 963 0010 185C     		ldrbls	r0, [r3, r0]	@ zero_extendqisi2
 964              	.LVL107:
 965 0012 0220     		movhi	r0, #2
 966              	.LVL108:
 631:c/usbd_conf.c ****      
 632:c/usbd_conf.c ****   switch (hal_status) {
 633:c/usbd_conf.c ****     case HAL_OK :
 634:c/usbd_conf.c ****       usb_status = USBD_OK;
 635:c/usbd_conf.c ****     break;
 636:c/usbd_conf.c ****     case HAL_ERROR :
 637:c/usbd_conf.c ****       usb_status = USBD_FAIL;
 638:c/usbd_conf.c ****     break;
 639:c/usbd_conf.c ****     case HAL_BUSY :
 640:c/usbd_conf.c ****       usb_status = USBD_BUSY;
 641:c/usbd_conf.c ****     break;
 642:c/usbd_conf.c ****     case HAL_TIMEOUT :
 643:c/usbd_conf.c ****       usb_status = USBD_FAIL;
 644:c/usbd_conf.c ****     break;
 645:c/usbd_conf.c ****     default :
 646:c/usbd_conf.c ****       usb_status = USBD_FAIL;
 647:c/usbd_conf.c ****     break;
 648:c/usbd_conf.c ****   }
 649:c/usbd_conf.c ****   return usb_status;    
 650:c/usbd_conf.c **** }
 967              		.loc 1 650 0
 968 0014 08BD     		pop	{r3, pc}
 969              	.L85:
 970 0016 00BF     		.align	2
 971              	.L84:
 972 0018 00000000 		.word	CSWTCH.37
 973              		.cfi_endproc
 974              	.LFE88:
 976              		.section	.text.USBD_LL_PrepareReceive,"ax",%progbits
 977              		.align	1
 978              		.global	USBD_LL_PrepareReceive
 979              		.syntax unified
 980              		.thumb
 981              		.thumb_func
 982              		.fpu softvfp
 984              	USBD_LL_PrepareReceive:
 985              	.LFB89:
 651:c/usbd_conf.c **** 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 29


 652:c/usbd_conf.c **** /**
 653:c/usbd_conf.c ****   * @brief  Prepares an endpoint for reception.
 654:c/usbd_conf.c ****   * @param  pdev: Device handle
 655:c/usbd_conf.c ****   * @param  ep_addr: Endpoint Number
 656:c/usbd_conf.c ****   * @param  pbuf: Pointer to data to be received
 657:c/usbd_conf.c ****   * @param  size: Data size
 658:c/usbd_conf.c ****   * @retval USBD Status
 659:c/usbd_conf.c ****   */
 660:c/usbd_conf.c **** USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
 661:c/usbd_conf.c ****                                            uint8_t  ep_addr,                                      
 662:c/usbd_conf.c ****                                            uint8_t  *pbuf,
 663:c/usbd_conf.c ****                                            uint16_t  size)
 664:c/usbd_conf.c **** {
 986              		.loc 1 664 0
 987              		.cfi_startproc
 988              		@ args = 0, pretend = 0, frame = 0
 989              		@ frame_needed = 0, uses_anonymous_args = 0
 990              	.LVL109:
 991 0000 08B5     		push	{r3, lr}
 992              		.cfi_def_cfa_offset 8
 993              		.cfi_offset 3, -8
 994              		.cfi_offset 14, -4
 665:c/usbd_conf.c ****   HAL_StatusTypeDef hal_status = HAL_OK;
 666:c/usbd_conf.c ****   USBD_StatusTypeDef usb_status = USBD_OK;
 667:c/usbd_conf.c **** 
 668:c/usbd_conf.c ****   hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 995              		.loc 1 668 0
 996 0002 D0F82002 		ldr	r0, [r0, #544]
 997              	.LVL110:
 998 0006 FFF7FEFF 		bl	HAL_PCD_EP_Receive
 999              	.LVL111:
 1000 000a 0328     		cmp	r0, #3
 1001 000c 9ABF     		itte	ls
 1002 000e 024B     		ldrls	r3, .L89
 1003 0010 185C     		ldrbls	r0, [r3, r0]	@ zero_extendqisi2
 1004              	.LVL112:
 1005 0012 0220     		movhi	r0, #2
 1006              	.LVL113:
 669:c/usbd_conf.c ****      
 670:c/usbd_conf.c ****   switch (hal_status) {
 671:c/usbd_conf.c ****     case HAL_OK :
 672:c/usbd_conf.c ****       usb_status = USBD_OK;
 673:c/usbd_conf.c ****     break;
 674:c/usbd_conf.c ****     case HAL_ERROR :
 675:c/usbd_conf.c ****       usb_status = USBD_FAIL;
 676:c/usbd_conf.c ****     break;
 677:c/usbd_conf.c ****     case HAL_BUSY :
 678:c/usbd_conf.c ****       usb_status = USBD_BUSY;
 679:c/usbd_conf.c ****     break;
 680:c/usbd_conf.c ****     case HAL_TIMEOUT :
 681:c/usbd_conf.c ****       usb_status = USBD_FAIL;
 682:c/usbd_conf.c ****     break;
 683:c/usbd_conf.c ****     default :
 684:c/usbd_conf.c ****       usb_status = USBD_FAIL;
 685:c/usbd_conf.c ****     break;
 686:c/usbd_conf.c ****   }
 687:c/usbd_conf.c ****   return usb_status; 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 30


 688:c/usbd_conf.c **** }
 1007              		.loc 1 688 0
 1008 0014 08BD     		pop	{r3, pc}
 1009              	.L90:
 1010 0016 00BF     		.align	2
 1011              	.L89:
 1012 0018 00000000 		.word	.LANCHOR0
 1013              		.cfi_endproc
 1014              	.LFE89:
 1016              		.section	.text.USBD_LL_GetRxDataSize,"ax",%progbits
 1017              		.align	1
 1018              		.global	USBD_LL_GetRxDataSize
 1019              		.syntax unified
 1020              		.thumb
 1021              		.thumb_func
 1022              		.fpu softvfp
 1024              	USBD_LL_GetRxDataSize:
 1025              	.LFB90:
 689:c/usbd_conf.c **** 
 690:c/usbd_conf.c **** /**
 691:c/usbd_conf.c ****   * @brief  Returns the last transfered packet size.
 692:c/usbd_conf.c ****   * @param  pdev: Device handle
 693:c/usbd_conf.c ****   * @param  ep_addr: Endpoint Number
 694:c/usbd_conf.c ****   * @retval Recived Data Size
 695:c/usbd_conf.c ****   */
 696:c/usbd_conf.c **** uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
 697:c/usbd_conf.c **** {
 1026              		.loc 1 697 0
 1027              		.cfi_startproc
 1028              		@ args = 0, pretend = 0, frame = 0
 1029              		@ frame_needed = 0, uses_anonymous_args = 0
 1030              	.LVL114:
 1031 0000 08B5     		push	{r3, lr}
 1032              		.cfi_def_cfa_offset 8
 1033              		.cfi_offset 3, -8
 1034              		.cfi_offset 14, -4
 698:c/usbd_conf.c ****   return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 1035              		.loc 1 698 0
 1036 0002 D0F82002 		ldr	r0, [r0, #544]
 1037              	.LVL115:
 1038 0006 FFF7FEFF 		bl	HAL_PCD_EP_GetRxCount
 1039              	.LVL116:
 699:c/usbd_conf.c **** }
 1040              		.loc 1 699 0
 1041 000a 08BD     		pop	{r3, pc}
 1042              		.cfi_endproc
 1043              	.LFE90:
 1045              		.section	.text.USBD_LL_Delay,"ax",%progbits
 1046              		.align	1
 1047              		.global	USBD_LL_Delay
 1048              		.syntax unified
 1049              		.thumb
 1050              		.thumb_func
 1051              		.fpu softvfp
 1053              	USBD_LL_Delay:
 1054              	.LFB91:
 700:c/usbd_conf.c **** 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 31


 701:c/usbd_conf.c **** /**
 702:c/usbd_conf.c ****   * @brief  Delays routine for the USB Device Library.
 703:c/usbd_conf.c ****   * @param  Delay: Delay in ms
 704:c/usbd_conf.c ****   * @retval None
 705:c/usbd_conf.c ****   */
 706:c/usbd_conf.c **** void  USBD_LL_Delay (uint32_t Delay)
 707:c/usbd_conf.c **** {
 1055              		.loc 1 707 0
 1056              		.cfi_startproc
 1057              		@ args = 0, pretend = 0, frame = 0
 1058              		@ frame_needed = 0, uses_anonymous_args = 0
 1059              		@ link register save eliminated.
 1060              	.LVL117:
 708:c/usbd_conf.c ****   HAL_Delay(Delay);  
 1061              		.loc 1 708 0
 1062 0000 FFF7FEBF 		b	HAL_Delay
 1063              	.LVL118:
 1064              		.cfi_endproc
 1065              	.LFE91:
 1067              		.section	.text.USBD_static_malloc,"ax",%progbits
 1068              		.align	1
 1069              		.global	USBD_static_malloc
 1070              		.syntax unified
 1071              		.thumb
 1072              		.thumb_func
 1073              		.fpu softvfp
 1075              	USBD_static_malloc:
 1076              	.LFB92:
 709:c/usbd_conf.c **** }
 710:c/usbd_conf.c **** 
 711:c/usbd_conf.c **** /**
 712:c/usbd_conf.c ****   * @brief  static single allocation.
 713:c/usbd_conf.c ****   * @param  size: size of allocated memory
 714:c/usbd_conf.c ****   * @retval None
 715:c/usbd_conf.c ****   */
 716:c/usbd_conf.c **** void *USBD_static_malloc(uint32_t size)
 717:c/usbd_conf.c **** {
 1077              		.loc 1 717 0
 1078              		.cfi_startproc
 1079              		@ args = 0, pretend = 0, frame = 0
 1080              		@ frame_needed = 0, uses_anonymous_args = 0
 1081              		@ link register save eliminated.
 1082              	.LVL119:
 718:c/usbd_conf.c ****   static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
 719:c/usbd_conf.c ****   return mem;
 720:c/usbd_conf.c **** }
 1083              		.loc 1 720 0
 1084 0000 0048     		ldr	r0, .L94
 1085              	.LVL120:
 1086 0002 7047     		bx	lr
 1087              	.L95:
 1088              		.align	2
 1089              	.L94:
 1090 0004 00000000 		.word	.LANCHOR1
 1091              		.cfi_endproc
 1092              	.LFE92:
 1094              		.section	.text.USBD_static_free,"ax",%progbits
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 32


 1095              		.align	1
 1096              		.global	USBD_static_free
 1097              		.syntax unified
 1098              		.thumb
 1099              		.thumb_func
 1100              		.fpu softvfp
 1102              	USBD_static_free:
 1103              	.LFB93:
 721:c/usbd_conf.c **** 
 722:c/usbd_conf.c **** /**
 723:c/usbd_conf.c ****   * @brief  Dummy memory free
 724:c/usbd_conf.c ****   * @param  *p pointer to allocated  memory address
 725:c/usbd_conf.c ****   * @retval None
 726:c/usbd_conf.c ****   */
 727:c/usbd_conf.c **** void USBD_static_free(void *p)
 728:c/usbd_conf.c **** {
 1104              		.loc 1 728 0
 1105              		.cfi_startproc
 1106              		@ args = 0, pretend = 0, frame = 0
 1107              		@ frame_needed = 0, uses_anonymous_args = 0
 1108              		@ link register save eliminated.
 1109              	.LVL121:
 1110 0000 7047     		bx	lr
 1111              		.cfi_endproc
 1112              	.LFE93:
 1114              		.section	.text.HAL_PCDEx_SetConnectionState,"ax",%progbits
 1115              		.align	1
 1116              		.global	HAL_PCDEx_SetConnectionState
 1117              		.syntax unified
 1118              		.thumb
 1119              		.thumb_func
 1120              		.fpu softvfp
 1122              	HAL_PCDEx_SetConnectionState:
 1123              	.LFB94:
 729:c/usbd_conf.c **** 
 730:c/usbd_conf.c **** }
 731:c/usbd_conf.c **** 
 732:c/usbd_conf.c **** /**
 733:c/usbd_conf.c **** * @brief Software Device Connection
 734:c/usbd_conf.c **** * @param hpcd: PCD handle
 735:c/usbd_conf.c **** * @param state: connection state (0 : disconnected / 1: connected) 
 736:c/usbd_conf.c **** * @retval None
 737:c/usbd_conf.c **** */
 738:c/usbd_conf.c **** void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
 739:c/usbd_conf.c **** {
 1124              		.loc 1 739 0
 1125              		.cfi_startproc
 1126              		@ args = 0, pretend = 0, frame = 0
 1127              		@ frame_needed = 0, uses_anonymous_args = 0
 1128              		@ link register save eliminated.
 1129              	.LVL122:
 1130 0000 7047     		bx	lr
 1131              		.cfi_endproc
 1132              	.LFE94:
 1134              		.set	CSWTCH.18,CSWTCH.39
 1135              		.set	CSWTCH.20,CSWTCH.39
 1136              		.set	CSWTCH.22,CSWTCH.39
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 33


 1137              		.set	CSWTCH.24,CSWTCH.39
 1138              		.set	CSWTCH.26,CSWTCH.39
 1139              		.set	CSWTCH.28,CSWTCH.39
 1140              		.set	CSWTCH.30,CSWTCH.39
 1141              		.set	CSWTCH.32,CSWTCH.39
 1142              		.set	CSWTCH.35,CSWTCH.39
 1143              		.set	CSWTCH.37,CSWTCH.39
 1144              		.comm	hpcd_USB_FS,1120,4
 1145              		.section	.bss.mem.7049,"aw",%nobits
 1146              		.align	2
 1147              		.set	.LANCHOR1,. + 0
 1150              	mem.7049:
 1151 0000 00000000 		.space	88
 1151      00000000 
 1151      00000000 
 1151      00000000 
 1151      00000000 
 1152              		.section	.rodata.CSWTCH.39,"a",%progbits
 1153              		.set	.LANCHOR0,. + 0
 1156              	CSWTCH.39:
 1157 0000 00       		.byte	0
 1158 0001 02       		.byte	2
 1159 0002 01       		.byte	1
 1160 0003 02       		.byte	2
 1161              		.section	.rodata.USBD_LL_Init.str1.1,"aMS",%progbits,1
 1162              	.LC0:
 1163 0000 632F7573 		.ascii	"c/usbd_conf.c\000"
 1163      62645F63 
 1163      6F6E662E 
 1163      6300
 1164              		.text
 1165              	.Letext0:
 1166              		.file 2 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/machine/_
 1167              		.file 3 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_stdi
 1168              		.file 4 "c/core_cm3.h"
 1169              		.file 5 "c/system_stm32f1xx.h"
 1170              		.file 6 "c/stm32f103xb.h"
 1171              		.file 7 "c/stm32f1xx.h"
 1172              		.file 8 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/lock.
 1173              		.file 9 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_type
 1174              		.file 10 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/lib/gcc/arm-none-eabi/6.3.1/in
 1175              		.file 11 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/reen
 1176              		.file 12 "c/stm32f1xx_hal_def.h"
 1177              		.file 13 "c/stm32f1xx_ll_usb.h"
 1178              		.file 14 "c/stm32f1xx_hal_pcd.h"
 1179              		.file 15 "c/usbd_def.h"
 1180              		.file 16 "c/usbd_customhid.h"
 1181              		.file 17 "c/stm32f1xx_hal.h"
 1182              		.file 18 "c/stm32f1xx_hal_pcd_ex.h"
 1183              		.file 19 "c/usbd_core.h"
 1184              		.file 20 "c/stm32f1xx_hal_cortex.h"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 34


DEFINED SYMBOLS
                            *ABS*:0000000000000000 usbd_conf.c
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:16     .text.HAL_PCD_MspInit:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:23     .text.HAL_PCD_MspInit:0000000000000000 HAL_PCD_MspInit
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:82     .text.HAL_PCD_MspInit:0000000000000038 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:87     .text.HAL_PCD_MspDeInit:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:94     .text.HAL_PCD_MspDeInit:0000000000000000 HAL_PCD_MspDeInit
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:124    .text.HAL_PCD_MspDeInit:000000000000001c $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:130    .text.HAL_PCD_SetupStageCallback:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:137    .text.HAL_PCD_SetupStageCallback:0000000000000000 HAL_PCD_SetupStageCallback
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:155    .text.HAL_PCD_DataOutStageCallback:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:162    .text.HAL_PCD_DataOutStageCallback:0000000000000000 HAL_PCD_DataOutStageCallback
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:181    .text.HAL_PCD_DataInStageCallback:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:188    .text.HAL_PCD_DataInStageCallback:0000000000000000 HAL_PCD_DataInStageCallback
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:207    .text.HAL_PCD_SOFCallback:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:214    .text.HAL_PCD_SOFCallback:0000000000000000 HAL_PCD_SOFCallback
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:231    .text.HAL_PCD_ResetCallback:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:238    .text.HAL_PCD_ResetCallback:0000000000000000 HAL_PCD_ResetCallback
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:272    .text.HAL_PCD_SuspendCallback:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:279    .text.HAL_PCD_SuspendCallback:0000000000000000 HAL_PCD_SuspendCallback
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:311    .text.HAL_PCD_SuspendCallback:000000000000001c $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:316    .text.HAL_PCD_ResumeCallback:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:323    .text.HAL_PCD_ResumeCallback:0000000000000000 HAL_PCD_ResumeCallback
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:340    .text.HAL_PCD_ISOOUTIncompleteCallback:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:347    .text.HAL_PCD_ISOOUTIncompleteCallback:0000000000000000 HAL_PCD_ISOOUTIncompleteCallback
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:364    .text.HAL_PCD_ISOINIncompleteCallback:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:371    .text.HAL_PCD_ISOINIncompleteCallback:0000000000000000 HAL_PCD_ISOINIncompleteCallback
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:388    .text.HAL_PCD_ConnectCallback:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:395    .text.HAL_PCD_ConnectCallback:0000000000000000 HAL_PCD_ConnectCallback
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:412    .text.HAL_PCD_DisconnectCallback:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:419    .text.HAL_PCD_DisconnectCallback:0000000000000000 HAL_PCD_DisconnectCallback
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:436    .text.USBD_LL_Init:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:443    .text.USBD_LL_Init:0000000000000000 USBD_LL_Init
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:524    .text.USBD_LL_Init:0000000000000070 $d
                            *COM*:0000000000000460 hpcd_USB_FS
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:531    .text.USBD_LL_DeInit:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:538    .text.USBD_LL_DeInit:0000000000000000 USBD_LL_DeInit
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:566    .text.USBD_LL_DeInit:0000000000000018 $d
                .rodata.CSWTCH.39:0000000000000000 CSWTCH.18
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:571    .text.USBD_LL_Start:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:578    .text.USBD_LL_Start:0000000000000000 USBD_LL_Start
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:606    .text.USBD_LL_Start:0000000000000018 $d
                .rodata.CSWTCH.39:0000000000000000 CSWTCH.20
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:611    .text.USBD_LL_Stop:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:618    .text.USBD_LL_Stop:0000000000000000 USBD_LL_Stop
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:646    .text.USBD_LL_Stop:0000000000000018 $d
                .rodata.CSWTCH.39:0000000000000000 CSWTCH.22
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:651    .text.USBD_LL_OpenEP:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:658    .text.USBD_LL_OpenEP:0000000000000000 USBD_LL_OpenEP
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:692    .text.USBD_LL_OpenEP:000000000000001c $d
                .rodata.CSWTCH.39:0000000000000000 CSWTCH.24
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:697    .text.USBD_LL_CloseEP:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:704    .text.USBD_LL_CloseEP:0000000000000000 USBD_LL_CloseEP
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:732    .text.USBD_LL_CloseEP:0000000000000018 $d
                .rodata.CSWTCH.39:0000000000000000 CSWTCH.26
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:737    .text.USBD_LL_FlushEP:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:744    .text.USBD_LL_FlushEP:0000000000000000 USBD_LL_FlushEP
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 35


/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:772    .text.USBD_LL_FlushEP:0000000000000018 $d
                .rodata.CSWTCH.39:0000000000000000 CSWTCH.28
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:777    .text.USBD_LL_StallEP:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:784    .text.USBD_LL_StallEP:0000000000000000 USBD_LL_StallEP
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:812    .text.USBD_LL_StallEP:0000000000000018 $d
                .rodata.CSWTCH.39:0000000000000000 CSWTCH.30
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:817    .text.USBD_LL_ClearStallEP:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:824    .text.USBD_LL_ClearStallEP:0000000000000000 USBD_LL_ClearStallEP
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:852    .text.USBD_LL_ClearStallEP:0000000000000018 $d
                .rodata.CSWTCH.39:0000000000000000 CSWTCH.32
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:857    .text.USBD_LL_IsStallEP:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:864    .text.USBD_LL_IsStallEP:0000000000000000 USBD_LL_IsStallEP
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:897    .text.USBD_LL_SetUSBAddress:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:904    .text.USBD_LL_SetUSBAddress:0000000000000000 USBD_LL_SetUSBAddress
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:932    .text.USBD_LL_SetUSBAddress:0000000000000018 $d
                .rodata.CSWTCH.39:0000000000000000 CSWTCH.35
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:937    .text.USBD_LL_Transmit:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:944    .text.USBD_LL_Transmit:0000000000000000 USBD_LL_Transmit
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:972    .text.USBD_LL_Transmit:0000000000000018 $d
                .rodata.CSWTCH.39:0000000000000000 CSWTCH.37
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:977    .text.USBD_LL_PrepareReceive:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:984    .text.USBD_LL_PrepareReceive:0000000000000000 USBD_LL_PrepareReceive
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:1012   .text.USBD_LL_PrepareReceive:0000000000000018 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:1017   .text.USBD_LL_GetRxDataSize:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:1024   .text.USBD_LL_GetRxDataSize:0000000000000000 USBD_LL_GetRxDataSize
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:1046   .text.USBD_LL_Delay:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:1053   .text.USBD_LL_Delay:0000000000000000 USBD_LL_Delay
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:1068   .text.USBD_static_malloc:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:1075   .text.USBD_static_malloc:0000000000000000 USBD_static_malloc
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:1090   .text.USBD_static_malloc:0000000000000004 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:1095   .text.USBD_static_free:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:1102   .text.USBD_static_free:0000000000000000 USBD_static_free
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:1115   .text.HAL_PCDEx_SetConnectionState:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:1122   .text.HAL_PCDEx_SetConnectionState:0000000000000000 HAL_PCDEx_SetConnectionState
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:1156   .rodata.CSWTCH.39:0000000000000000 CSWTCH.39
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:1146   .bss.mem.7049:0000000000000000 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s:1150   .bss.mem.7049:0000000000000000 mem.7049
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_NVIC_DisableIRQ
USBD_LL_SetupStage
USBD_LL_DataOutStage
USBD_LL_DataInStage
USBD_LL_SOF
USBD_LL_SetSpeed
USBD_LL_Reset
USBD_LL_Suspend
USBD_LL_Resume
USBD_LL_IsoOUTIncomplete
USBD_LL_IsoINIncomplete
USBD_LL_DevConnected
USBD_LL_DevDisconnected
HAL_PCD_Init
_Error_Handler
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccxnEPS5.s 			page 36


HAL_PCDEx_PMAConfig
HAL_PCD_DeInit
HAL_PCD_Start
HAL_PCD_Stop
HAL_PCD_EP_Open
HAL_PCD_EP_Close
HAL_PCD_EP_Flush
HAL_PCD_EP_SetStall
HAL_PCD_EP_ClrStall
HAL_PCD_SetAddress
HAL_PCD_EP_Transmit
HAL_PCD_EP_Receive
HAL_PCD_EP_GetRxCount
HAL_Delay
exit code: 0
OPT_LEVEL = Some("s")
HOST = Some("x86_64-apple-darwin")
CFLAGS_arm-none-eabi = None
CFLAGS_arm_none_eabi = None
TARGET_CFLAGS = None
CFLAGS = None
DEBUG = Some("true")
running: "arm-none-eabi-gcc" "-Os" "-ffunction-sections" "-fdata-sections" "-g" "-DSTM32F103xB" "-DUSE_HAL_DRIVER" "-mcpu=cortex-m3" "-mthumb" "-Wall" "-fdata-sections" "-ffunction-sections" "-Wa,-a,-ad" "-g" "-Wall" "-Wextra" "-o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/usbd_core.o" "-c" "c/usbd_core.c"
cargo:warning=c/usbd_core.c: In function 'USBD_RunTestMode':
cargo:warning=c/usbd_core.c:213:60: warning: unused parameter 'pdev' [-Wunused-parameter]
cargo:warning= USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
cargo:warning=                                                            ^~~~
cargo:warning=c/usbd_core.c: In function 'USBD_LL_IsoINIncomplete':
cargo:warning=c/usbd_core.c:509:65: warning: unused parameter 'pdev' [-Wunused-parameter]
cargo:warning= USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
cargo:warning=                                                                 ^~~~
cargo:warning=c/usbd_core.c:509:79: warning: unused parameter 'epnum' [-Wunused-parameter]
cargo:warning= USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
cargo:warning=                                                                               ^~~~~
cargo:warning=c/usbd_core.c: In function 'USBD_LL_IsoOUTIncomplete':
cargo:warning=c/usbd_core.c:520:66: warning: unused parameter 'pdev' [-Wunused-parameter]
cargo:warning= USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
cargo:warning=                                                                  ^~~~
cargo:warning=c/usbd_core.c:520:80: warning: unused parameter 'epnum' [-Wunused-parameter]
cargo:warning= USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
cargo:warning=                                                                                ^~~~~
cargo:warning=c/usbd_core.c: In function 'USBD_LL_DevConnected':
cargo:warning=c/usbd_core.c:531:62: warning: unused parameter 'pdev' [-Wunused-parameter]
cargo:warning= USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
cargo:warning=                                                              ^~~~
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"usbd_core.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.USBD_Init,"ax",%progbits
  16              		.align	1
  17              		.global	USBD_Init
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	USBD_Init:
  24              	.LFB64:
  25              		.file 1 "c/usbd_core.c"
   1:c/usbd_core.c **** /**
   2:c/usbd_core.c ****   ******************************************************************************
   3:c/usbd_core.c ****   * @file    usbd_core.c
   4:c/usbd_core.c ****   * @author  MCD Application Team
   5:c/usbd_core.c ****   * @version V2.4.2
   6:c/usbd_core.c ****   * @date    11-December-2015
   7:c/usbd_core.c ****   * @brief   This file provides all the USBD core functions.
   8:c/usbd_core.c ****   ******************************************************************************
   9:c/usbd_core.c ****   * @attention
  10:c/usbd_core.c ****   *
  11:c/usbd_core.c ****   * <h2><center>&copy; COPYRIGHT 2015 STMicroelectronics</center></h2>
  12:c/usbd_core.c ****   *
  13:c/usbd_core.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  14:c/usbd_core.c ****   * You may not use this file except in compliance with the License.
  15:c/usbd_core.c ****   * You may obtain a copy of the License at:
  16:c/usbd_core.c ****   *
  17:c/usbd_core.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  18:c/usbd_core.c ****   *
  19:c/usbd_core.c ****   * Unless required by applicable law or agreed to in writing, software 
  20:c/usbd_core.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  21:c/usbd_core.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  22:c/usbd_core.c ****   * See the License for the specific language governing permissions and
  23:c/usbd_core.c ****   * limitations under the License.
  24:c/usbd_core.c ****   *
  25:c/usbd_core.c ****   ******************************************************************************
  26:c/usbd_core.c ****   */ 
  27:c/usbd_core.c **** 
  28:c/usbd_core.c **** /* Includes ------------------------------------------------------------------*/
  29:c/usbd_core.c **** #include "usbd_core.h"
  30:c/usbd_core.c **** 
  31:c/usbd_core.c **** /** @addtogroup STM32_USBD_DEVICE_LIBRARY
  32:c/usbd_core.c **** * @{
  33:c/usbd_core.c **** */
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s 			page 2


  34:c/usbd_core.c **** 
  35:c/usbd_core.c **** 
  36:c/usbd_core.c **** /** @defgroup USBD_CORE 
  37:c/usbd_core.c **** * @brief usbd core module
  38:c/usbd_core.c **** * @{
  39:c/usbd_core.c **** */ 
  40:c/usbd_core.c **** 
  41:c/usbd_core.c **** /** @defgroup USBD_CORE_Private_TypesDefinitions
  42:c/usbd_core.c **** * @{
  43:c/usbd_core.c **** */ 
  44:c/usbd_core.c **** /**
  45:c/usbd_core.c **** * @}
  46:c/usbd_core.c **** */ 
  47:c/usbd_core.c **** 
  48:c/usbd_core.c **** 
  49:c/usbd_core.c **** /** @defgroup USBD_CORE_Private_Defines
  50:c/usbd_core.c **** * @{
  51:c/usbd_core.c **** */ 
  52:c/usbd_core.c **** 
  53:c/usbd_core.c **** /**
  54:c/usbd_core.c **** * @}
  55:c/usbd_core.c **** */ 
  56:c/usbd_core.c **** 
  57:c/usbd_core.c **** 
  58:c/usbd_core.c **** /** @defgroup USBD_CORE_Private_Macros
  59:c/usbd_core.c **** * @{
  60:c/usbd_core.c **** */ 
  61:c/usbd_core.c **** /**
  62:c/usbd_core.c **** * @}
  63:c/usbd_core.c **** */ 
  64:c/usbd_core.c **** 
  65:c/usbd_core.c **** 
  66:c/usbd_core.c **** 
  67:c/usbd_core.c **** 
  68:c/usbd_core.c **** /** @defgroup USBD_CORE_Private_FunctionPrototypes
  69:c/usbd_core.c **** * @{
  70:c/usbd_core.c **** */ 
  71:c/usbd_core.c **** 
  72:c/usbd_core.c **** /**
  73:c/usbd_core.c **** * @}
  74:c/usbd_core.c **** */ 
  75:c/usbd_core.c **** 
  76:c/usbd_core.c **** /** @defgroup USBD_CORE_Private_Variables
  77:c/usbd_core.c **** * @{
  78:c/usbd_core.c **** */ 
  79:c/usbd_core.c **** 
  80:c/usbd_core.c **** /**
  81:c/usbd_core.c **** * @}
  82:c/usbd_core.c **** */ 
  83:c/usbd_core.c **** 
  84:c/usbd_core.c **** /** @defgroup USBD_CORE_Private_Functions
  85:c/usbd_core.c **** * @{
  86:c/usbd_core.c **** */ 
  87:c/usbd_core.c **** 
  88:c/usbd_core.c **** /**
  89:c/usbd_core.c **** * @brief  USBD_Init
  90:c/usbd_core.c **** *         Initializes the device stack and load the class driver
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s 			page 3


  91:c/usbd_core.c **** * @param  pdev: device instance
  92:c/usbd_core.c **** * @param  pdesc: Descriptor structure address
  93:c/usbd_core.c **** * @param  id: Low level core index
  94:c/usbd_core.c **** * @retval None
  95:c/usbd_core.c **** */
  96:c/usbd_core.c **** USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
  97:c/usbd_core.c **** {
  26              		.loc 1 97 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 08B5     		push	{r3, lr}
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 3, -8
  34              		.cfi_offset 14, -4
  98:c/usbd_core.c ****   /* Check whether the USB Host handle is valid */
  99:c/usbd_core.c ****   if(pdev == NULL)
  35              		.loc 1 99 0
  36 0002 80B1     		cbz	r0, .L5
 100:c/usbd_core.c ****   {
 101:c/usbd_core.c ****     USBD_ErrLog("Invalid Device handle");
 102:c/usbd_core.c ****     return USBD_FAIL; 
 103:c/usbd_core.c ****   }
 104:c/usbd_core.c ****   
 105:c/usbd_core.c ****   /* Unlink previous class*/
 106:c/usbd_core.c ****   if(pdev->pClass != NULL)
  37              		.loc 1 106 0
  38 0004 D0F81432 		ldr	r3, [r0, #532]
  39 0008 13B1     		cbz	r3, .L3
 107:c/usbd_core.c ****   {
 108:c/usbd_core.c ****     pdev->pClass = NULL;
  40              		.loc 1 108 0
  41 000a 0023     		movs	r3, #0
  42 000c C0F81432 		str	r3, [r0, #532]
  43              	.L3:
 109:c/usbd_core.c ****   }
 110:c/usbd_core.c ****   
 111:c/usbd_core.c ****   /* Assign USBD Descriptors */
 112:c/usbd_core.c ****   if(pdesc != NULL)
  44              		.loc 1 112 0
  45 0010 09B1     		cbz	r1, .L4
 113:c/usbd_core.c ****   {
 114:c/usbd_core.c ****     pdev->pDesc = pdesc;
  46              		.loc 1 114 0
  47 0012 C0F81012 		str	r1, [r0, #528]
  48              	.L4:
 115:c/usbd_core.c ****   }
 116:c/usbd_core.c ****   
 117:c/usbd_core.c ****   /* Set Device initial State */
 118:c/usbd_core.c ****   pdev->dev_state  = USBD_STATE_DEFAULT;
  49              		.loc 1 118 0
  50 0016 0123     		movs	r3, #1
 119:c/usbd_core.c ****   pdev->id = id;
  51              		.loc 1 119 0
  52 0018 0270     		strb	r2, [r0]
 118:c/usbd_core.c ****   pdev->id = id;
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s 			page 4


  53              		.loc 1 118 0
  54 001a 80F8FC31 		strb	r3, [r0, #508]
 120:c/usbd_core.c ****   /* Initialize low level driver */
 121:c/usbd_core.c ****   USBD_LL_Init(pdev);
  55              		.loc 1 121 0
  56 001e FFF7FEFF 		bl	USBD_LL_Init
  57              	.LVL1:
 122:c/usbd_core.c ****   
 123:c/usbd_core.c ****   return USBD_OK; 
  58              		.loc 1 123 0
  59 0022 0020     		movs	r0, #0
  60 0024 08BD     		pop	{r3, pc}
  61              	.LVL2:
  62              	.L5:
 102:c/usbd_core.c ****   }
  63              		.loc 1 102 0
  64 0026 0220     		movs	r0, #2
  65              	.LVL3:
 124:c/usbd_core.c **** }
  66              		.loc 1 124 0
  67 0028 08BD     		pop	{r3, pc}
  68              		.cfi_endproc
  69              	.LFE64:
  71              		.section	.text.USBD_DeInit,"ax",%progbits
  72              		.align	1
  73              		.global	USBD_DeInit
  74              		.syntax unified
  75              		.thumb
  76              		.thumb_func
  77              		.fpu softvfp
  79              	USBD_DeInit:
  80              	.LFB65:
 125:c/usbd_core.c **** 
 126:c/usbd_core.c **** /**
 127:c/usbd_core.c **** * @brief  USBD_DeInit 
 128:c/usbd_core.c **** *         Re-Initialize th device library
 129:c/usbd_core.c **** * @param  pdev: device instance
 130:c/usbd_core.c **** * @retval status: status
 131:c/usbd_core.c **** */
 132:c/usbd_core.c **** USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
 133:c/usbd_core.c **** {
  81              		.loc 1 133 0
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 0
  84              		@ frame_needed = 0, uses_anonymous_args = 0
  85              	.LVL4:
 134:c/usbd_core.c ****   /* Set Default State */
 135:c/usbd_core.c ****   pdev->dev_state  = USBD_STATE_DEFAULT;
  86              		.loc 1 135 0
  87 0000 0123     		movs	r3, #1
 133:c/usbd_core.c ****   /* Set Default State */
  88              		.loc 1 133 0
  89 0002 10B5     		push	{r4, lr}
  90              		.cfi_def_cfa_offset 8
  91              		.cfi_offset 4, -8
  92              		.cfi_offset 14, -4
 133:c/usbd_core.c ****   /* Set Default State */
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s 			page 5


  93              		.loc 1 133 0
  94 0004 0446     		mov	r4, r0
  95              		.loc 1 135 0
  96 0006 80F8FC31 		strb	r3, [r0, #508]
 136:c/usbd_core.c ****   
 137:c/usbd_core.c ****   /* Free Class Resources */
 138:c/usbd_core.c ****   pdev->pClass->DeInit(pdev, pdev->dev_config);  
  97              		.loc 1 138 0
  98 000a D0F81432 		ldr	r3, [r0, #532]
  99 000e 0179     		ldrb	r1, [r0, #4]	@ zero_extendqisi2
 100 0010 5B68     		ldr	r3, [r3, #4]
 101 0012 9847     		blx	r3
 102              	.LVL5:
 139:c/usbd_core.c ****   
 140:c/usbd_core.c ****     /* Stop the low level driver  */
 141:c/usbd_core.c ****   USBD_LL_Stop(pdev); 
 103              		.loc 1 141 0
 104 0014 2046     		mov	r0, r4
 105 0016 FFF7FEFF 		bl	USBD_LL_Stop
 106              	.LVL6:
 142:c/usbd_core.c ****   
 143:c/usbd_core.c ****   /* Initialize low level driver */
 144:c/usbd_core.c ****   USBD_LL_DeInit(pdev);
 107              		.loc 1 144 0
 108 001a 2046     		mov	r0, r4
 109 001c FFF7FEFF 		bl	USBD_LL_DeInit
 110              	.LVL7:
 145:c/usbd_core.c ****   
 146:c/usbd_core.c ****   return USBD_OK;
 147:c/usbd_core.c **** }
 111              		.loc 1 147 0
 112 0020 0020     		movs	r0, #0
 113 0022 10BD     		pop	{r4, pc}
 114              		.cfi_endproc
 115              	.LFE65:
 117              		.section	.text.USBD_RegisterClass,"ax",%progbits
 118              		.align	1
 119              		.global	USBD_RegisterClass
 120              		.syntax unified
 121              		.thumb
 122              		.thumb_func
 123              		.fpu softvfp
 125              	USBD_RegisterClass:
 126              	.LFB66:
 148:c/usbd_core.c **** 
 149:c/usbd_core.c **** 
 150:c/usbd_core.c **** /**
 151:c/usbd_core.c ****   * @brief  USBD_RegisterClass 
 152:c/usbd_core.c ****   *         Link class driver to Device Core.
 153:c/usbd_core.c ****   * @param  pDevice : Device Handle
 154:c/usbd_core.c ****   * @param  pclass: Class handle
 155:c/usbd_core.c ****   * @retval USBD Status
 156:c/usbd_core.c ****   */
 157:c/usbd_core.c **** USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
 158:c/usbd_core.c **** {
 127              		.loc 1 158 0
 128              		.cfi_startproc
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s 			page 6


 129              		@ args = 0, pretend = 0, frame = 0
 130              		@ frame_needed = 0, uses_anonymous_args = 0
 131              		@ link register save eliminated.
 132              	.LVL8:
 159:c/usbd_core.c ****   USBD_StatusTypeDef   status = USBD_OK;
 160:c/usbd_core.c ****   if(pclass != 0)
 133              		.loc 1 160 0
 134 0000 19B1     		cbz	r1, .L15
 161:c/usbd_core.c ****   {
 162:c/usbd_core.c ****     /* link the class to the USB Device handle */
 163:c/usbd_core.c ****     pdev->pClass = pclass;
 135              		.loc 1 163 0
 136 0002 C0F81412 		str	r1, [r0, #532]
 164:c/usbd_core.c ****     status = USBD_OK;
 137              		.loc 1 164 0
 138 0006 0020     		movs	r0, #0
 139              	.LVL9:
 140 0008 7047     		bx	lr
 141              	.LVL10:
 142              	.L15:
 165:c/usbd_core.c ****   }
 166:c/usbd_core.c ****   else
 167:c/usbd_core.c ****   {
 168:c/usbd_core.c ****     USBD_ErrLog("Invalid Class handle");
 169:c/usbd_core.c ****     status = USBD_FAIL; 
 143              		.loc 1 169 0
 144 000a 0220     		movs	r0, #2
 145              	.LVL11:
 170:c/usbd_core.c ****   }
 171:c/usbd_core.c ****   
 172:c/usbd_core.c ****   return status;
 173:c/usbd_core.c **** }
 146              		.loc 1 173 0
 147 000c 7047     		bx	lr
 148              		.cfi_endproc
 149              	.LFE66:
 151              		.section	.text.USBD_Start,"ax",%progbits
 152              		.align	1
 153              		.global	USBD_Start
 154              		.syntax unified
 155              		.thumb
 156              		.thumb_func
 157              		.fpu softvfp
 159              	USBD_Start:
 160              	.LFB67:
 174:c/usbd_core.c **** 
 175:c/usbd_core.c **** /**
 176:c/usbd_core.c ****   * @brief  USBD_Start 
 177:c/usbd_core.c ****   *         Start the USB Device Core.
 178:c/usbd_core.c ****   * @param  pdev: Device Handle
 179:c/usbd_core.c ****   * @retval USBD Status
 180:c/usbd_core.c ****   */
 181:c/usbd_core.c **** USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
 182:c/usbd_core.c **** {
 161              		.loc 1 182 0
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s 			page 7


 164              		@ frame_needed = 0, uses_anonymous_args = 0
 165              	.LVL12:
 166 0000 08B5     		push	{r3, lr}
 167              		.cfi_def_cfa_offset 8
 168              		.cfi_offset 3, -8
 169              		.cfi_offset 14, -4
 183:c/usbd_core.c ****   
 184:c/usbd_core.c ****   /* Start the low level driver  */
 185:c/usbd_core.c ****   USBD_LL_Start(pdev); 
 170              		.loc 1 185 0
 171 0002 FFF7FEFF 		bl	USBD_LL_Start
 172              	.LVL13:
 186:c/usbd_core.c ****   
 187:c/usbd_core.c ****   return USBD_OK;  
 188:c/usbd_core.c **** }
 173              		.loc 1 188 0
 174 0006 0020     		movs	r0, #0
 175 0008 08BD     		pop	{r3, pc}
 176              		.cfi_endproc
 177              	.LFE67:
 179              		.section	.text.USBD_Stop,"ax",%progbits
 180              		.align	1
 181              		.global	USBD_Stop
 182              		.syntax unified
 183              		.thumb
 184              		.thumb_func
 185              		.fpu softvfp
 187              	USBD_Stop:
 188              	.LFB68:
 189:c/usbd_core.c **** 
 190:c/usbd_core.c **** /**
 191:c/usbd_core.c ****   * @brief  USBD_Stop 
 192:c/usbd_core.c ****   *         Stop the USB Device Core.
 193:c/usbd_core.c ****   * @param  pdev: Device Handle
 194:c/usbd_core.c ****   * @retval USBD Status
 195:c/usbd_core.c ****   */
 196:c/usbd_core.c **** USBD_StatusTypeDef  USBD_Stop   (USBD_HandleTypeDef *pdev)
 197:c/usbd_core.c **** {
 189              		.loc 1 197 0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 0
 192              		@ frame_needed = 0, uses_anonymous_args = 0
 193              	.LVL14:
 194 0000 10B5     		push	{r4, lr}
 195              		.cfi_def_cfa_offset 8
 196              		.cfi_offset 4, -8
 197              		.cfi_offset 14, -4
 198              		.loc 1 197 0
 199 0002 0446     		mov	r4, r0
 198:c/usbd_core.c ****   /* Free Class Resources */
 199:c/usbd_core.c ****   pdev->pClass->DeInit(pdev, pdev->dev_config);  
 200              		.loc 1 199 0
 201 0004 D0F81432 		ldr	r3, [r0, #532]
 202 0008 0179     		ldrb	r1, [r0, #4]	@ zero_extendqisi2
 203 000a 5B68     		ldr	r3, [r3, #4]
 204 000c 9847     		blx	r3
 205              	.LVL15:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s 			page 8


 200:c/usbd_core.c **** 
 201:c/usbd_core.c ****   /* Stop the low level driver  */
 202:c/usbd_core.c ****   USBD_LL_Stop(pdev); 
 206              		.loc 1 202 0
 207 000e 2046     		mov	r0, r4
 208 0010 FFF7FEFF 		bl	USBD_LL_Stop
 209              	.LVL16:
 203:c/usbd_core.c ****   
 204:c/usbd_core.c ****   return USBD_OK;  
 205:c/usbd_core.c **** }
 210              		.loc 1 205 0
 211 0014 0020     		movs	r0, #0
 212 0016 10BD     		pop	{r4, pc}
 213              		.cfi_endproc
 214              	.LFE68:
 216              		.section	.text.USBD_RunTestMode,"ax",%progbits
 217              		.align	1
 218              		.global	USBD_RunTestMode
 219              		.syntax unified
 220              		.thumb
 221              		.thumb_func
 222              		.fpu softvfp
 224              	USBD_RunTestMode:
 225              	.LFB85:
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 0, uses_anonymous_args = 0
 229              		@ link register save eliminated.
 230 0000 0020     		movs	r0, #0
 231 0002 7047     		bx	lr
 232              		.cfi_endproc
 233              	.LFE85:
 235              		.section	.text.USBD_SetClassConfig,"ax",%progbits
 236              		.align	1
 237              		.global	USBD_SetClassConfig
 238              		.syntax unified
 239              		.thumb
 240              		.thumb_func
 241              		.fpu softvfp
 243              	USBD_SetClassConfig:
 244              	.LFB70:
 206:c/usbd_core.c **** 
 207:c/usbd_core.c **** /**
 208:c/usbd_core.c **** * @brief  USBD_RunTestMode 
 209:c/usbd_core.c **** *         Launch test mode process
 210:c/usbd_core.c **** * @param  pdev: device instance
 211:c/usbd_core.c **** * @retval status
 212:c/usbd_core.c **** */
 213:c/usbd_core.c **** USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
 214:c/usbd_core.c **** {
 215:c/usbd_core.c ****   return USBD_OK;
 216:c/usbd_core.c **** }
 217:c/usbd_core.c **** 
 218:c/usbd_core.c **** 
 219:c/usbd_core.c **** /**
 220:c/usbd_core.c **** * @brief  USBD_SetClassConfig 
 221:c/usbd_core.c **** *        Configure device and start the interface
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s 			page 9


 222:c/usbd_core.c **** * @param  pdev: device instance
 223:c/usbd_core.c **** * @param  cfgidx: configuration index
 224:c/usbd_core.c **** * @retval status
 225:c/usbd_core.c **** */
 226:c/usbd_core.c **** 
 227:c/usbd_core.c **** USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
 228:c/usbd_core.c **** {
 245              		.loc 1 228 0
 246              		.cfi_startproc
 247              		@ args = 0, pretend = 0, frame = 0
 248              		@ frame_needed = 0, uses_anonymous_args = 0
 249              	.LVL17:
 250              		.loc 1 228 0
 251 0000 08B5     		push	{r3, lr}
 252              		.cfi_def_cfa_offset 8
 253              		.cfi_offset 3, -8
 254              		.cfi_offset 14, -4
 229:c/usbd_core.c ****   USBD_StatusTypeDef   ret = USBD_FAIL;
 230:c/usbd_core.c ****   
 231:c/usbd_core.c ****   if(pdev->pClass != NULL)
 255              		.loc 1 231 0
 256 0002 D0F81432 		ldr	r3, [r0, #532]
 257 0006 0BB9     		cbnz	r3, .L20
 258              	.LVL18:
 259              	.L22:
 229:c/usbd_core.c ****   USBD_StatusTypeDef   ret = USBD_FAIL;
 260              		.loc 1 229 0
 261 0008 0220     		movs	r0, #2
 262 000a 08BD     		pop	{r3, pc}
 263              	.LVL19:
 264              	.L20:
 232:c/usbd_core.c ****   {
 233:c/usbd_core.c ****     /* Set configuration  and Start the Class*/
 234:c/usbd_core.c ****     if(pdev->pClass->Init(pdev, cfgidx) == 0)
 265              		.loc 1 234 0
 266 000c 1B68     		ldr	r3, [r3]
 267 000e 9847     		blx	r3
 268              	.LVL20:
 269 0010 0028     		cmp	r0, #0
 270 0012 F9D1     		bne	.L22
 271              	.LVL21:
 235:c/usbd_core.c ****     {
 236:c/usbd_core.c ****       ret = USBD_OK;
 237:c/usbd_core.c ****     }
 238:c/usbd_core.c ****   }
 239:c/usbd_core.c ****   return ret; 
 240:c/usbd_core.c **** }
 272              		.loc 1 240 0
 273 0014 08BD     		pop	{r3, pc}
 274              		.cfi_endproc
 275              	.LFE70:
 277              		.section	.text.USBD_ClrClassConfig,"ax",%progbits
 278              		.align	1
 279              		.global	USBD_ClrClassConfig
 280              		.syntax unified
 281              		.thumb
 282              		.thumb_func
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s 			page 10


 283              		.fpu softvfp
 285              	USBD_ClrClassConfig:
 286              	.LFB71:
 241:c/usbd_core.c **** 
 242:c/usbd_core.c **** /**
 243:c/usbd_core.c **** * @brief  USBD_ClrClassConfig 
 244:c/usbd_core.c **** *         Clear current configuration
 245:c/usbd_core.c **** * @param  pdev: device instance
 246:c/usbd_core.c **** * @param  cfgidx: configuration index
 247:c/usbd_core.c **** * @retval status: USBD_StatusTypeDef
 248:c/usbd_core.c **** */
 249:c/usbd_core.c **** USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
 250:c/usbd_core.c **** {
 287              		.loc 1 250 0
 288              		.cfi_startproc
 289              		@ args = 0, pretend = 0, frame = 0
 290              		@ frame_needed = 0, uses_anonymous_args = 0
 291              	.LVL22:
 292 0000 08B5     		push	{r3, lr}
 293              		.cfi_def_cfa_offset 8
 294              		.cfi_offset 3, -8
 295              		.cfi_offset 14, -4
 251:c/usbd_core.c ****   /* Clear configuration  and De-initialize the Class process*/
 252:c/usbd_core.c ****   pdev->pClass->DeInit(pdev, cfgidx);  
 296              		.loc 1 252 0
 297 0002 D0F81432 		ldr	r3, [r0, #532]
 298 0006 5B68     		ldr	r3, [r3, #4]
 299 0008 9847     		blx	r3
 300              	.LVL23:
 253:c/usbd_core.c ****   return USBD_OK;
 254:c/usbd_core.c **** }
 301              		.loc 1 254 0
 302 000a 0020     		movs	r0, #0
 303 000c 08BD     		pop	{r3, pc}
 304              		.cfi_endproc
 305              	.LFE71:
 307              		.section	.text.USBD_LL_SetupStage,"ax",%progbits
 308              		.align	1
 309              		.global	USBD_LL_SetupStage
 310              		.syntax unified
 311              		.thumb
 312              		.thumb_func
 313              		.fpu softvfp
 315              	USBD_LL_SetupStage:
 316              	.LFB72:
 255:c/usbd_core.c **** 
 256:c/usbd_core.c **** 
 257:c/usbd_core.c **** /**
 258:c/usbd_core.c **** * @brief  USBD_SetupStage 
 259:c/usbd_core.c **** *         Handle the setup stage
 260:c/usbd_core.c **** * @param  pdev: device instance
 261:c/usbd_core.c **** * @retval status
 262:c/usbd_core.c **** */
 263:c/usbd_core.c **** USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
 264:c/usbd_core.c **** {
 317              		.loc 1 264 0
 318              		.cfi_startproc
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s 			page 11


 319              		@ args = 0, pretend = 0, frame = 0
 320              		@ frame_needed = 0, uses_anonymous_args = 0
 321              	.LVL24:
 322 0000 38B5     		push	{r3, r4, r5, lr}
 323              		.cfi_def_cfa_offset 16
 324              		.cfi_offset 3, -16
 325              		.cfi_offset 4, -12
 326              		.cfi_offset 5, -8
 327              		.cfi_offset 14, -4
 265:c/usbd_core.c **** 
 266:c/usbd_core.c ****   USBD_ParseSetupRequest(&pdev->request, psetup);
 328              		.loc 1 266 0
 329 0002 00F50275 		add	r5, r0, #520
 264:c/usbd_core.c **** 
 330              		.loc 1 264 0
 331 0006 0446     		mov	r4, r0
 332              		.loc 1 266 0
 333 0008 2846     		mov	r0, r5
 334              	.LVL25:
 335 000a FFF7FEFF 		bl	USBD_ParseSetupRequest
 336              	.LVL26:
 267:c/usbd_core.c ****   
 268:c/usbd_core.c ****   pdev->ep0_state = USBD_EP0_SETUP;
 337              		.loc 1 268 0
 338 000e 0123     		movs	r3, #1
 269:c/usbd_core.c ****   pdev->ep0_data_len = pdev->request.wLength;
 270:c/usbd_core.c ****   
 271:c/usbd_core.c ****   switch (pdev->request.bmRequest & 0x1F) 
 339              		.loc 1 271 0
 340 0010 94F80812 		ldrb	r1, [r4, #520]	@ zero_extendqisi2
 268:c/usbd_core.c ****   pdev->ep0_data_len = pdev->request.wLength;
 341              		.loc 1 268 0
 342 0014 C4F8F431 		str	r3, [r4, #500]
 269:c/usbd_core.c ****   pdev->ep0_data_len = pdev->request.wLength;
 343              		.loc 1 269 0
 344 0018 B4F80E32 		ldrh	r3, [r4, #526]
 345 001c C4F8F831 		str	r3, [r4, #504]
 346              		.loc 1 271 0
 347 0020 01F01F03 		and	r3, r1, #31
 348 0024 012B     		cmp	r3, #1
 349 0026 0ED0     		beq	.L26
 350 0028 07D3     		bcc	.L27
 351 002a 022B     		cmp	r3, #2
 352 002c 10D0     		beq	.L28
 272:c/usbd_core.c ****   {
 273:c/usbd_core.c ****   case USB_REQ_RECIPIENT_DEVICE:   
 274:c/usbd_core.c ****     USBD_StdDevReq (pdev, &pdev->request);
 275:c/usbd_core.c ****     break;
 276:c/usbd_core.c ****     
 277:c/usbd_core.c ****   case USB_REQ_RECIPIENT_INTERFACE:     
 278:c/usbd_core.c ****     USBD_StdItfReq(pdev, &pdev->request);
 279:c/usbd_core.c ****     break;
 280:c/usbd_core.c ****     
 281:c/usbd_core.c ****   case USB_REQ_RECIPIENT_ENDPOINT:        
 282:c/usbd_core.c ****     USBD_StdEPReq(pdev, &pdev->request);   
 283:c/usbd_core.c ****     break;
 284:c/usbd_core.c ****     
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s 			page 12


 285:c/usbd_core.c ****   default:           
 286:c/usbd_core.c ****     USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 353              		.loc 1 286 0
 354 002e 01F08001 		and	r1, r1, #128
 355 0032 2046     		mov	r0, r4
 356 0034 FFF7FEFF 		bl	USBD_LL_StallEP
 357              	.LVL27:
 287:c/usbd_core.c ****     break;
 358              		.loc 1 287 0
 359 0038 03E0     		b	.L29
 360              	.L27:
 274:c/usbd_core.c ****     break;
 361              		.loc 1 274 0
 362 003a 2946     		mov	r1, r5
 363 003c 2046     		mov	r0, r4
 364 003e FFF7FEFF 		bl	USBD_StdDevReq
 365              	.LVL28:
 366              	.L29:
 288:c/usbd_core.c ****   }  
 289:c/usbd_core.c ****   return USBD_OK;  
 290:c/usbd_core.c **** }
 367              		.loc 1 290 0
 368 0042 0020     		movs	r0, #0
 369 0044 38BD     		pop	{r3, r4, r5, pc}
 370              	.LVL29:
 371              	.L26:
 278:c/usbd_core.c ****     break;
 372              		.loc 1 278 0
 373 0046 2946     		mov	r1, r5
 374 0048 2046     		mov	r0, r4
 375 004a FFF7FEFF 		bl	USBD_StdItfReq
 376              	.LVL30:
 279:c/usbd_core.c ****     
 377              		.loc 1 279 0
 378 004e F8E7     		b	.L29
 379              	.L28:
 282:c/usbd_core.c ****     break;
 380              		.loc 1 282 0
 381 0050 2946     		mov	r1, r5
 382 0052 2046     		mov	r0, r4
 383 0054 FFF7FEFF 		bl	USBD_StdEPReq
 384              	.LVL31:
 283:c/usbd_core.c ****     
 385              		.loc 1 283 0
 386 0058 F3E7     		b	.L29
 387              		.cfi_endproc
 388              	.LFE72:
 390              		.section	.text.USBD_LL_DataOutStage,"ax",%progbits
 391              		.align	1
 392              		.global	USBD_LL_DataOutStage
 393              		.syntax unified
 394              		.thumb
 395              		.thumb_func
 396              		.fpu softvfp
 398              	USBD_LL_DataOutStage:
 399              	.LFB73:
 291:c/usbd_core.c **** 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s 			page 13


 292:c/usbd_core.c **** /**
 293:c/usbd_core.c **** * @brief  USBD_DataOutStage 
 294:c/usbd_core.c **** *         Handle data OUT stage
 295:c/usbd_core.c **** * @param  pdev: device instance
 296:c/usbd_core.c **** * @param  epnum: endpoint index
 297:c/usbd_core.c **** * @retval status
 298:c/usbd_core.c **** */
 299:c/usbd_core.c **** USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
 300:c/usbd_core.c **** {
 400              		.loc 1 300 0
 401              		.cfi_startproc
 402              		@ args = 0, pretend = 0, frame = 0
 403              		@ frame_needed = 0, uses_anonymous_args = 0
 404              	.LVL32:
 405 0000 38B5     		push	{r3, r4, r5, lr}
 406              		.cfi_def_cfa_offset 16
 407              		.cfi_offset 3, -16
 408              		.cfi_offset 4, -12
 409              		.cfi_offset 5, -8
 410              		.cfi_offset 14, -4
 411              		.loc 1 300 0
 412 0002 0446     		mov	r4, r0
 413 0004 1546     		mov	r5, r2
 301:c/usbd_core.c ****   USBD_EndpointTypeDef    *pep;
 302:c/usbd_core.c ****   
 303:c/usbd_core.c ****   if(epnum == 0) 
 414              		.loc 1 303 0
 415 0006 11BB     		cbnz	r1, .L32
 416              	.LVL33:
 304:c/usbd_core.c ****   {
 305:c/usbd_core.c ****     pep = &pdev->ep_out[0];
 306:c/usbd_core.c ****     
 307:c/usbd_core.c ****     if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 417              		.loc 1 307 0
 418 0008 D0F8F431 		ldr	r3, [r0, #500]
 419 000c 032B     		cmp	r3, #3
 420 000e 0FD1     		bne	.L33
 308:c/usbd_core.c ****     {
 309:c/usbd_core.c ****       if(pep->rem_length > pep->maxpacket)
 421              		.loc 1 309 0
 422 0010 D0F80C31 		ldr	r3, [r0, #268]
 423 0014 D0F81021 		ldr	r2, [r0, #272]
 424              	.LVL34:
 425 0018 9342     		cmp	r3, r2
 426 001a 0BD9     		bls	.L34
 310:c/usbd_core.c ****       {
 311:c/usbd_core.c ****         pep->rem_length -=  pep->maxpacket;
 427              		.loc 1 311 0
 428 001c 9B1A     		subs	r3, r3, r2
 312:c/usbd_core.c ****        
 313:c/usbd_core.c ****         USBD_CtlContinueRx (pdev, 
 314:c/usbd_core.c ****                             pdata,
 315:c/usbd_core.c ****                             MIN(pep->rem_length ,pep->maxpacket));
 429              		.loc 1 315 0
 430 001e 9A42     		cmp	r2, r3
 431 0020 28BF     		it	cs
 432 0022 1A46     		movcs	r2, r3
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s 			page 14


 311:c/usbd_core.c ****        
 433              		.loc 1 311 0
 434 0024 C0F80C31 		str	r3, [r0, #268]
 313:c/usbd_core.c ****                             pdata,
 435              		.loc 1 313 0
 436 0028 92B2     		uxth	r2, r2
 437 002a 2946     		mov	r1, r5
 438              	.LVL35:
 439 002c FFF7FEFF 		bl	USBD_CtlContinueRx
 440              	.LVL36:
 441              	.L33:
 316:c/usbd_core.c ****       }
 317:c/usbd_core.c ****       else
 318:c/usbd_core.c ****       {
 319:c/usbd_core.c ****         if((pdev->pClass->EP0_RxReady != NULL)&&
 320:c/usbd_core.c ****            (pdev->dev_state == USBD_STATE_CONFIGURED))
 321:c/usbd_core.c ****         {
 322:c/usbd_core.c ****           pdev->pClass->EP0_RxReady(pdev); 
 323:c/usbd_core.c ****         }
 324:c/usbd_core.c ****         USBD_CtlSendStatus(pdev);
 325:c/usbd_core.c ****       }
 326:c/usbd_core.c ****     }
 327:c/usbd_core.c ****   }
 328:c/usbd_core.c ****   else if((pdev->pClass->DataOut != NULL)&&
 329:c/usbd_core.c ****           (pdev->dev_state == USBD_STATE_CONFIGURED))
 330:c/usbd_core.c ****   {
 331:c/usbd_core.c ****     pdev->pClass->DataOut(pdev, epnum); 
 332:c/usbd_core.c ****   }  
 333:c/usbd_core.c ****   return USBD_OK;
 334:c/usbd_core.c **** }
 442              		.loc 1 334 0
 443 0030 0020     		movs	r0, #0
 444 0032 38BD     		pop	{r3, r4, r5, pc}
 445              	.LVL37:
 446              	.L34:
 319:c/usbd_core.c ****            (pdev->dev_state == USBD_STATE_CONFIGURED))
 447              		.loc 1 319 0
 448 0034 D0F81432 		ldr	r3, [r0, #532]
 449 0038 1B69     		ldr	r3, [r3, #16]
 450 003a 23B1     		cbz	r3, .L35
 319:c/usbd_core.c ****            (pdev->dev_state == USBD_STATE_CONFIGURED))
 451              		.loc 1 319 0 is_stmt 0 discriminator 1
 452 003c 90F8FC21 		ldrb	r2, [r0, #508]	@ zero_extendqisi2
 453 0040 032A     		cmp	r2, #3
 454 0042 00D1     		bne	.L35
 322:c/usbd_core.c ****         }
 455              		.loc 1 322 0 is_stmt 1
 456 0044 9847     		blx	r3
 457              	.LVL38:
 458              	.L35:
 324:c/usbd_core.c ****       }
 459              		.loc 1 324 0
 460 0046 2046     		mov	r0, r4
 461 0048 FFF7FEFF 		bl	USBD_CtlSendStatus
 462              	.LVL39:
 463 004c F0E7     		b	.L33
 464              	.LVL40:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s 			page 15


 465              	.L32:
 328:c/usbd_core.c ****           (pdev->dev_state == USBD_STATE_CONFIGURED))
 466              		.loc 1 328 0
 467 004e D0F81432 		ldr	r3, [r0, #532]
 468 0052 9B69     		ldr	r3, [r3, #24]
 469 0054 002B     		cmp	r3, #0
 470 0056 EBD0     		beq	.L33
 328:c/usbd_core.c ****           (pdev->dev_state == USBD_STATE_CONFIGURED))
 471              		.loc 1 328 0 is_stmt 0 discriminator 1
 472 0058 90F8FC21 		ldrb	r2, [r0, #508]	@ zero_extendqisi2
 473              	.LVL41:
 474 005c 032A     		cmp	r2, #3
 475 005e E7D1     		bne	.L33
 331:c/usbd_core.c ****   }  
 476              		.loc 1 331 0 is_stmt 1
 477 0060 9847     		blx	r3
 478              	.LVL42:
 479 0062 E5E7     		b	.L33
 480              		.cfi_endproc
 481              	.LFE73:
 483              		.section	.text.USBD_LL_DataInStage,"ax",%progbits
 484              		.align	1
 485              		.global	USBD_LL_DataInStage
 486              		.syntax unified
 487              		.thumb
 488              		.thumb_func
 489              		.fpu softvfp
 491              	USBD_LL_DataInStage:
 492              	.LFB74:
 335:c/usbd_core.c **** 
 336:c/usbd_core.c **** /**
 337:c/usbd_core.c **** * @brief  USBD_DataInStage 
 338:c/usbd_core.c **** *         Handle data in stage
 339:c/usbd_core.c **** * @param  pdev: device instance
 340:c/usbd_core.c **** * @param  epnum: endpoint index
 341:c/usbd_core.c **** * @retval status
 342:c/usbd_core.c **** */
 343:c/usbd_core.c **** USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
 344:c/usbd_core.c **** {
 493              		.loc 1 344 0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 0
 496              		@ frame_needed = 0, uses_anonymous_args = 0
 497              	.LVL43:
 498 0000 70B5     		push	{r4, r5, r6, lr}
 499              		.cfi_def_cfa_offset 16
 500              		.cfi_offset 4, -16
 501              		.cfi_offset 5, -12
 502              		.cfi_offset 6, -8
 503              		.cfi_offset 14, -4
 504              		.loc 1 344 0
 505 0002 1346     		mov	r3, r2
 506 0004 0446     		mov	r4, r0
 345:c/usbd_core.c ****   USBD_EndpointTypeDef    *pep;
 346:c/usbd_core.c ****     
 347:c/usbd_core.c ****   if(epnum == 0) 
 507              		.loc 1 347 0
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s 			page 16


 508 0006 0E46     		mov	r6, r1
 509 0008 0029     		cmp	r1, #0
 510 000a 3DD1     		bne	.L43
 511              	.LVL44:
 348:c/usbd_core.c ****   {
 349:c/usbd_core.c ****     pep = &pdev->ep_in[0];
 350:c/usbd_core.c ****     
 351:c/usbd_core.c ****     if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 512              		.loc 1 351 0
 513 000c D0F8F421 		ldr	r2, [r0, #500]
 514              	.LVL45:
 515 0010 022A     		cmp	r2, #2
 516 0012 0FD1     		bne	.L44
 352:c/usbd_core.c ****     {
 353:c/usbd_core.c ****       if(pep->rem_length > pep->maxpacket)
 517              		.loc 1 353 0
 518 0014 C569     		ldr	r5, [r0, #28]
 519 0016 026A     		ldr	r2, [r0, #32]
 520 0018 9542     		cmp	r5, r2
 521 001a 14D9     		bls	.L45
 354:c/usbd_core.c ****       {
 355:c/usbd_core.c ****         pep->rem_length -=  pep->maxpacket;
 522              		.loc 1 355 0
 523 001c AA1A     		subs	r2, r5, r2
 524 001e C261     		str	r2, [r0, #28]
 356:c/usbd_core.c ****         
 357:c/usbd_core.c ****         USBD_CtlContinueSendData (pdev, 
 525              		.loc 1 357 0
 526 0020 1946     		mov	r1, r3
 527              	.LVL46:
 528 0022 92B2     		uxth	r2, r2
 529 0024 FFF7FEFF 		bl	USBD_CtlContinueSendData
 530              	.LVL47:
 358:c/usbd_core.c ****                                   pdata, 
 359:c/usbd_core.c ****                                   pep->rem_length);
 360:c/usbd_core.c ****         
 361:c/usbd_core.c ****         /* Prepare endpoint for premature end of transfer */
 362:c/usbd_core.c ****         USBD_LL_PrepareReceive (pdev,
 531              		.loc 1 362 0
 532 0028 3346     		mov	r3, r6
 533              	.L57:
 363:c/usbd_core.c ****                                 0,
 364:c/usbd_core.c ****                                 NULL,
 365:c/usbd_core.c ****                                 0);  
 366:c/usbd_core.c ****       }
 367:c/usbd_core.c ****       else
 368:c/usbd_core.c ****       { /* last packet is MPS multiple, so send ZLP packet */
 369:c/usbd_core.c ****         if((pep->total_length % pep->maxpacket == 0) &&
 370:c/usbd_core.c ****            (pep->total_length >= pep->maxpacket) &&
 371:c/usbd_core.c ****              (pep->total_length < pdev->ep0_data_len ))
 372:c/usbd_core.c ****         {
 373:c/usbd_core.c ****           
 374:c/usbd_core.c ****           USBD_CtlContinueSendData(pdev , NULL, 0);
 375:c/usbd_core.c ****           pdev->ep0_data_len = 0;
 376:c/usbd_core.c ****           
 377:c/usbd_core.c ****         /* Prepare endpoint for premature end of transfer */
 378:c/usbd_core.c ****         USBD_LL_PrepareReceive (pdev,
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s 			page 17


 534              		.loc 1 378 0
 535 002a 1A46     		mov	r2, r3
 536 002c 1946     		mov	r1, r3
 537 002e 2046     		mov	r0, r4
 538 0030 FFF7FEFF 		bl	USBD_LL_PrepareReceive
 539              	.LVL48:
 540              	.L44:
 379:c/usbd_core.c ****                                 0,
 380:c/usbd_core.c ****                                 NULL,
 381:c/usbd_core.c ****                                 0);
 382:c/usbd_core.c ****         }
 383:c/usbd_core.c ****         else
 384:c/usbd_core.c ****         {
 385:c/usbd_core.c ****           if((pdev->pClass->EP0_TxSent != NULL)&&
 386:c/usbd_core.c ****              (pdev->dev_state == USBD_STATE_CONFIGURED))
 387:c/usbd_core.c ****           {
 388:c/usbd_core.c ****             pdev->pClass->EP0_TxSent(pdev); 
 389:c/usbd_core.c ****           }          
 390:c/usbd_core.c ****           USBD_CtlReceiveStatus(pdev);
 391:c/usbd_core.c ****         }
 392:c/usbd_core.c ****       }
 393:c/usbd_core.c ****     }
 394:c/usbd_core.c ****     if (pdev->dev_test_mode == 1)
 541              		.loc 1 394 0
 542 0034 94F80032 		ldrb	r3, [r4, #512]	@ zero_extendqisi2
 543 0038 012B     		cmp	r3, #1
 544 003a 02D1     		bne	.L49
 395:c/usbd_core.c ****     {
 396:c/usbd_core.c ****       USBD_RunTestMode(pdev); 
 397:c/usbd_core.c ****       pdev->dev_test_mode = 0;
 545              		.loc 1 397 0
 546 003c 0023     		movs	r3, #0
 547 003e 84F80032 		strb	r3, [r4, #512]
 548              	.LVL49:
 549              	.L49:
 398:c/usbd_core.c ****     }
 399:c/usbd_core.c ****   }
 400:c/usbd_core.c ****   else if((pdev->pClass->DataIn != NULL)&& 
 401:c/usbd_core.c ****           (pdev->dev_state == USBD_STATE_CONFIGURED))
 402:c/usbd_core.c ****   {
 403:c/usbd_core.c ****     pdev->pClass->DataIn(pdev, epnum); 
 404:c/usbd_core.c ****   }  
 405:c/usbd_core.c ****   return USBD_OK;
 406:c/usbd_core.c **** }
 550              		.loc 1 406 0
 551 0042 0020     		movs	r0, #0
 552 0044 70BD     		pop	{r4, r5, r6, pc}
 553              	.LVL50:
 554              	.L45:
 369:c/usbd_core.c ****            (pep->total_length >= pep->maxpacket) &&
 555              		.loc 1 369 0
 556 0046 8369     		ldr	r3, [r0, #24]
 557              	.LVL51:
 558 0048 B3FBF2F5 		udiv	r5, r3, r2
 559 004c 02FB1535 		mls	r5, r2, r5, r3
 560 0050 65B9     		cbnz	r5, .L46
 369:c/usbd_core.c ****            (pep->total_length >= pep->maxpacket) &&
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s 			page 18


 561              		.loc 1 369 0 is_stmt 0 discriminator 1
 562 0052 9A42     		cmp	r2, r3
 563 0054 0AD8     		bhi	.L46
 370:c/usbd_core.c ****              (pep->total_length < pdev->ep0_data_len ))
 564              		.loc 1 370 0 is_stmt 1
 565 0056 D0F8F821 		ldr	r2, [r0, #504]
 566 005a 9342     		cmp	r3, r2
 567 005c 06D2     		bcs	.L46
 374:c/usbd_core.c ****           pdev->ep0_data_len = 0;
 568              		.loc 1 374 0
 569 005e 2A46     		mov	r2, r5
 570 0060 FFF7FEFF 		bl	USBD_CtlContinueSendData
 571              	.LVL52:
 375:c/usbd_core.c ****           
 572              		.loc 1 375 0
 573 0064 C4F8F851 		str	r5, [r4, #504]
 378:c/usbd_core.c ****                                 0,
 574              		.loc 1 378 0
 575 0068 2B46     		mov	r3, r5
 576 006a DEE7     		b	.L57
 577              	.LVL53:
 578              	.L46:
 385:c/usbd_core.c ****              (pdev->dev_state == USBD_STATE_CONFIGURED))
 579              		.loc 1 385 0
 580 006c D4F81432 		ldr	r3, [r4, #532]
 581 0070 DB68     		ldr	r3, [r3, #12]
 582 0072 2BB1     		cbz	r3, .L47
 385:c/usbd_core.c ****              (pdev->dev_state == USBD_STATE_CONFIGURED))
 583              		.loc 1 385 0 is_stmt 0 discriminator 1
 584 0074 94F8FC21 		ldrb	r2, [r4, #508]	@ zero_extendqisi2
 585 0078 032A     		cmp	r2, #3
 586 007a 01D1     		bne	.L47
 388:c/usbd_core.c ****           }          
 587              		.loc 1 388 0 is_stmt 1
 588 007c 2046     		mov	r0, r4
 589              	.LVL54:
 590 007e 9847     		blx	r3
 591              	.LVL55:
 592              	.L47:
 390:c/usbd_core.c ****         }
 593              		.loc 1 390 0
 594 0080 2046     		mov	r0, r4
 595 0082 FFF7FEFF 		bl	USBD_CtlReceiveStatus
 596              	.LVL56:
 597 0086 D5E7     		b	.L44
 598              	.LVL57:
 599              	.L43:
 400:c/usbd_core.c ****           (pdev->dev_state == USBD_STATE_CONFIGURED))
 600              		.loc 1 400 0
 601 0088 D0F81432 		ldr	r3, [r0, #532]
 602 008c 5B69     		ldr	r3, [r3, #20]
 603 008e 002B     		cmp	r3, #0
 604 0090 D7D0     		beq	.L49
 400:c/usbd_core.c ****           (pdev->dev_state == USBD_STATE_CONFIGURED))
 605              		.loc 1 400 0 is_stmt 0 discriminator 1
 606 0092 90F8FC21 		ldrb	r2, [r0, #508]	@ zero_extendqisi2
 607              	.LVL58:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s 			page 19


 608 0096 032A     		cmp	r2, #3
 609 0098 D3D1     		bne	.L49
 403:c/usbd_core.c ****   }  
 610              		.loc 1 403 0 is_stmt 1
 611 009a 9847     		blx	r3
 612              	.LVL59:
 613 009c D1E7     		b	.L49
 614              		.cfi_endproc
 615              	.LFE74:
 617              		.section	.text.USBD_LL_Reset,"ax",%progbits
 618              		.align	1
 619              		.global	USBD_LL_Reset
 620              		.syntax unified
 621              		.thumb
 622              		.thumb_func
 623              		.fpu softvfp
 625              	USBD_LL_Reset:
 626              	.LFB75:
 407:c/usbd_core.c **** 
 408:c/usbd_core.c **** /**
 409:c/usbd_core.c **** * @brief  USBD_LL_Reset 
 410:c/usbd_core.c **** *         Handle Reset event
 411:c/usbd_core.c **** * @param  pdev: device instance
 412:c/usbd_core.c **** * @retval status
 413:c/usbd_core.c **** */
 414:c/usbd_core.c **** 
 415:c/usbd_core.c **** USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
 416:c/usbd_core.c **** {
 627              		.loc 1 416 0
 628              		.cfi_startproc
 629              		@ args = 0, pretend = 0, frame = 0
 630              		@ frame_needed = 0, uses_anonymous_args = 0
 631              	.LVL60:
 417:c/usbd_core.c ****   /* Open EP0 OUT */
 418:c/usbd_core.c ****   USBD_LL_OpenEP(pdev,
 632              		.loc 1 418 0
 633 0000 0022     		movs	r2, #0
 416:c/usbd_core.c ****   /* Open EP0 OUT */
 634              		.loc 1 416 0
 635 0002 38B5     		push	{r3, r4, r5, lr}
 636              		.cfi_def_cfa_offset 16
 637              		.cfi_offset 3, -16
 638              		.cfi_offset 4, -12
 639              		.cfi_offset 5, -8
 640              		.cfi_offset 14, -4
 416:c/usbd_core.c ****   /* Open EP0 OUT */
 641              		.loc 1 416 0
 642 0004 0446     		mov	r4, r0
 419:c/usbd_core.c ****               0x00,
 420:c/usbd_core.c ****               USBD_EP_TYPE_CTRL,
 421:c/usbd_core.c ****               USB_MAX_EP0_SIZE);
 422:c/usbd_core.c ****   
 423:c/usbd_core.c ****   pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 643              		.loc 1 423 0
 644 0006 4025     		movs	r5, #64
 418:c/usbd_core.c ****               0x00,
 645              		.loc 1 418 0
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s 			page 20


 646 0008 1146     		mov	r1, r2
 647 000a 4023     		movs	r3, #64
 648 000c FFF7FEFF 		bl	USBD_LL_OpenEP
 649              	.LVL61:
 424:c/usbd_core.c ****   
 425:c/usbd_core.c ****   /* Open EP0 IN */
 426:c/usbd_core.c ****   USBD_LL_OpenEP(pdev,
 650              		.loc 1 426 0
 651 0010 2B46     		mov	r3, r5
 423:c/usbd_core.c ****   
 652              		.loc 1 423 0
 653 0012 C4F81051 		str	r5, [r4, #272]
 654              		.loc 1 426 0
 655 0016 0022     		movs	r2, #0
 656 0018 8021     		movs	r1, #128
 657 001a 2046     		mov	r0, r4
 658 001c FFF7FEFF 		bl	USBD_LL_OpenEP
 659              	.LVL62:
 427:c/usbd_core.c ****               0x80,
 428:c/usbd_core.c ****               USBD_EP_TYPE_CTRL,
 429:c/usbd_core.c ****               USB_MAX_EP0_SIZE);
 430:c/usbd_core.c ****   
 431:c/usbd_core.c ****   pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 432:c/usbd_core.c ****   /* Upon Reset call user call back */
 433:c/usbd_core.c ****   pdev->dev_state = USBD_STATE_DEFAULT;
 660              		.loc 1 433 0
 661 0020 0123     		movs	r3, #1
 662 0022 84F8FC31 		strb	r3, [r4, #508]
 434:c/usbd_core.c ****   
 435:c/usbd_core.c ****   if (pdev->pClassData) 
 663              		.loc 1 435 0
 664 0026 D4F81832 		ldr	r3, [r4, #536]
 431:c/usbd_core.c ****   /* Upon Reset call user call back */
 665              		.loc 1 431 0
 666 002a 2562     		str	r5, [r4, #32]
 667              		.loc 1 435 0
 668 002c 2BB1     		cbz	r3, .L59
 436:c/usbd_core.c ****     pdev->pClass->DeInit(pdev, pdev->dev_config);  
 669              		.loc 1 436 0
 670 002e D4F81432 		ldr	r3, [r4, #532]
 671 0032 2179     		ldrb	r1, [r4, #4]	@ zero_extendqisi2
 672 0034 5B68     		ldr	r3, [r3, #4]
 673 0036 2046     		mov	r0, r4
 674 0038 9847     		blx	r3
 675              	.LVL63:
 676              	.L59:
 437:c/usbd_core.c ****  
 438:c/usbd_core.c ****   
 439:c/usbd_core.c ****   return USBD_OK;
 440:c/usbd_core.c **** }
 677              		.loc 1 440 0
 678 003a 0020     		movs	r0, #0
 679 003c 38BD     		pop	{r3, r4, r5, pc}
 680              		.cfi_endproc
 681              	.LFE75:
 683              		.section	.text.USBD_LL_SetSpeed,"ax",%progbits
 684              		.align	1
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s 			page 21


 685              		.global	USBD_LL_SetSpeed
 686              		.syntax unified
 687              		.thumb
 688              		.thumb_func
 689              		.fpu softvfp
 691              	USBD_LL_SetSpeed:
 692              	.LFB76:
 441:c/usbd_core.c **** 
 442:c/usbd_core.c **** 
 443:c/usbd_core.c **** 
 444:c/usbd_core.c **** 
 445:c/usbd_core.c **** /**
 446:c/usbd_core.c **** * @brief  USBD_LL_Reset 
 447:c/usbd_core.c **** *         Handle Reset event
 448:c/usbd_core.c **** * @param  pdev: device instance
 449:c/usbd_core.c **** * @retval status
 450:c/usbd_core.c **** */
 451:c/usbd_core.c **** USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
 452:c/usbd_core.c **** {
 693              		.loc 1 452 0
 694              		.cfi_startproc
 695              		@ args = 0, pretend = 0, frame = 0
 696              		@ frame_needed = 0, uses_anonymous_args = 0
 697              		@ link register save eliminated.
 698              	.LVL64:
 453:c/usbd_core.c ****   pdev->dev_speed = speed;
 699              		.loc 1 453 0
 700 0000 0174     		strb	r1, [r0, #16]
 454:c/usbd_core.c ****   return USBD_OK;
 455:c/usbd_core.c **** }
 701              		.loc 1 455 0
 702 0002 0020     		movs	r0, #0
 703              	.LVL65:
 704 0004 7047     		bx	lr
 705              		.cfi_endproc
 706              	.LFE76:
 708              		.section	.text.USBD_LL_Suspend,"ax",%progbits
 709              		.align	1
 710              		.global	USBD_LL_Suspend
 711              		.syntax unified
 712              		.thumb
 713              		.thumb_func
 714              		.fpu softvfp
 716              	USBD_LL_Suspend:
 717              	.LFB77:
 456:c/usbd_core.c **** 
 457:c/usbd_core.c **** /**
 458:c/usbd_core.c **** * @brief  USBD_Suspend 
 459:c/usbd_core.c **** *         Handle Suspend event
 460:c/usbd_core.c **** * @param  pdev: device instance
 461:c/usbd_core.c **** * @retval status
 462:c/usbd_core.c **** */
 463:c/usbd_core.c **** 
 464:c/usbd_core.c **** USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
 465:c/usbd_core.c **** {
 718              		.loc 1 465 0
 719              		.cfi_startproc
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s 			page 22


 720              		@ args = 0, pretend = 0, frame = 0
 721              		@ frame_needed = 0, uses_anonymous_args = 0
 722              		@ link register save eliminated.
 723              	.LVL66:
 466:c/usbd_core.c ****   pdev->dev_old_state =  pdev->dev_state;
 724              		.loc 1 466 0
 725 0000 90F8FC31 		ldrb	r3, [r0, #508]	@ zero_extendqisi2
 726 0004 80F8FD31 		strb	r3, [r0, #509]
 467:c/usbd_core.c ****   pdev->dev_state  = USBD_STATE_SUSPENDED;
 727              		.loc 1 467 0
 728 0008 0423     		movs	r3, #4
 729 000a 80F8FC31 		strb	r3, [r0, #508]
 468:c/usbd_core.c ****   return USBD_OK;
 469:c/usbd_core.c **** }
 730              		.loc 1 469 0
 731 000e 0020     		movs	r0, #0
 732              	.LVL67:
 733 0010 7047     		bx	lr
 734              		.cfi_endproc
 735              	.LFE77:
 737              		.section	.text.USBD_LL_Resume,"ax",%progbits
 738              		.align	1
 739              		.global	USBD_LL_Resume
 740              		.syntax unified
 741              		.thumb
 742              		.thumb_func
 743              		.fpu softvfp
 745              	USBD_LL_Resume:
 746              	.LFB78:
 470:c/usbd_core.c **** 
 471:c/usbd_core.c **** /**
 472:c/usbd_core.c **** * @brief  USBD_Resume 
 473:c/usbd_core.c **** *         Handle Resume event
 474:c/usbd_core.c **** * @param  pdev: device instance
 475:c/usbd_core.c **** * @retval status
 476:c/usbd_core.c **** */
 477:c/usbd_core.c **** 
 478:c/usbd_core.c **** USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
 479:c/usbd_core.c **** {
 747              		.loc 1 479 0
 748              		.cfi_startproc
 749              		@ args = 0, pretend = 0, frame = 0
 750              		@ frame_needed = 0, uses_anonymous_args = 0
 751              		@ link register save eliminated.
 752              	.LVL68:
 480:c/usbd_core.c ****   pdev->dev_state = pdev->dev_old_state;  
 753              		.loc 1 480 0
 754 0000 90F8FD31 		ldrb	r3, [r0, #509]	@ zero_extendqisi2
 755 0004 80F8FC31 		strb	r3, [r0, #508]
 481:c/usbd_core.c ****   return USBD_OK;
 482:c/usbd_core.c **** }
 756              		.loc 1 482 0
 757 0008 0020     		movs	r0, #0
 758              	.LVL69:
 759 000a 7047     		bx	lr
 760              		.cfi_endproc
 761              	.LFE78:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s 			page 23


 763              		.section	.text.USBD_LL_SOF,"ax",%progbits
 764              		.align	1
 765              		.global	USBD_LL_SOF
 766              		.syntax unified
 767              		.thumb
 768              		.thumb_func
 769              		.fpu softvfp
 771              	USBD_LL_SOF:
 772              	.LFB79:
 483:c/usbd_core.c **** 
 484:c/usbd_core.c **** /**
 485:c/usbd_core.c **** * @brief  USBD_SOF 
 486:c/usbd_core.c **** *         Handle SOF event
 487:c/usbd_core.c **** * @param  pdev: device instance
 488:c/usbd_core.c **** * @retval status
 489:c/usbd_core.c **** */
 490:c/usbd_core.c **** 
 491:c/usbd_core.c **** USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
 492:c/usbd_core.c **** {
 773              		.loc 1 492 0
 774              		.cfi_startproc
 775              		@ args = 0, pretend = 0, frame = 0
 776              		@ frame_needed = 0, uses_anonymous_args = 0
 777              	.LVL70:
 778 0000 08B5     		push	{r3, lr}
 779              		.cfi_def_cfa_offset 8
 780              		.cfi_offset 3, -8
 781              		.cfi_offset 14, -4
 493:c/usbd_core.c ****   if(pdev->dev_state == USBD_STATE_CONFIGURED)
 782              		.loc 1 493 0
 783 0002 90F8FC21 		ldrb	r2, [r0, #508]	@ zero_extendqisi2
 784 0006 032A     		cmp	r2, #3
 785 0008 04D1     		bne	.L67
 494:c/usbd_core.c ****   {
 495:c/usbd_core.c ****     if(pdev->pClass->SOF != NULL)
 786              		.loc 1 495 0
 787 000a D0F81432 		ldr	r3, [r0, #532]
 788 000e DB69     		ldr	r3, [r3, #28]
 789 0010 03B1     		cbz	r3, .L67
 496:c/usbd_core.c ****     {
 497:c/usbd_core.c ****       pdev->pClass->SOF(pdev);
 790              		.loc 1 497 0
 791 0012 9847     		blx	r3
 792              	.LVL71:
 793              	.L67:
 498:c/usbd_core.c ****     }
 499:c/usbd_core.c ****   }
 500:c/usbd_core.c ****   return USBD_OK;
 501:c/usbd_core.c **** }
 794              		.loc 1 501 0
 795 0014 0020     		movs	r0, #0
 796 0016 08BD     		pop	{r3, pc}
 797              		.cfi_endproc
 798              	.LFE79:
 800              		.section	.text.USBD_LL_IsoINIncomplete,"ax",%progbits
 801              		.align	1
 802              		.global	USBD_LL_IsoINIncomplete
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s 			page 24


 803              		.syntax unified
 804              		.thumb
 805              		.thumb_func
 806              		.fpu softvfp
 808              	USBD_LL_IsoINIncomplete:
 809              	.LFB87:
 810              		.cfi_startproc
 811              		@ args = 0, pretend = 0, frame = 0
 812              		@ frame_needed = 0, uses_anonymous_args = 0
 813              		@ link register save eliminated.
 814 0000 0020     		movs	r0, #0
 815 0002 7047     		bx	lr
 816              		.cfi_endproc
 817              	.LFE87:
 819              		.section	.text.USBD_LL_IsoOUTIncomplete,"ax",%progbits
 820              		.align	1
 821              		.global	USBD_LL_IsoOUTIncomplete
 822              		.syntax unified
 823              		.thumb
 824              		.thumb_func
 825              		.fpu softvfp
 827              	USBD_LL_IsoOUTIncomplete:
 828              	.LFB81:
 502:c/usbd_core.c **** 
 503:c/usbd_core.c **** /**
 504:c/usbd_core.c **** * @brief  USBD_IsoINIncomplete 
 505:c/usbd_core.c **** *         Handle iso in incomplete event
 506:c/usbd_core.c **** * @param  pdev: device instance
 507:c/usbd_core.c **** * @retval status
 508:c/usbd_core.c **** */
 509:c/usbd_core.c **** USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
 510:c/usbd_core.c **** {
 511:c/usbd_core.c ****   return USBD_OK;
 512:c/usbd_core.c **** }
 513:c/usbd_core.c **** 
 514:c/usbd_core.c **** /**
 515:c/usbd_core.c **** * @brief  USBD_IsoOUTIncomplete 
 516:c/usbd_core.c **** *         Handle iso out incomplete event
 517:c/usbd_core.c **** * @param  pdev: device instance
 518:c/usbd_core.c **** * @retval status
 519:c/usbd_core.c **** */
 520:c/usbd_core.c **** USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
 521:c/usbd_core.c **** {
 829              		.loc 1 521 0
 830              		.cfi_startproc
 831              		@ args = 0, pretend = 0, frame = 0
 832              		@ frame_needed = 0, uses_anonymous_args = 0
 833              		@ link register save eliminated.
 834              	.LVL72:
 522:c/usbd_core.c ****   return USBD_OK;
 523:c/usbd_core.c **** }
 835              		.loc 1 523 0
 836 0000 0020     		movs	r0, #0
 837              	.LVL73:
 838 0002 7047     		bx	lr
 839              		.cfi_endproc
 840              	.LFE81:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s 			page 25


 842              		.section	.text.USBD_LL_DevConnected,"ax",%progbits
 843              		.align	1
 844              		.global	USBD_LL_DevConnected
 845              		.syntax unified
 846              		.thumb
 847              		.thumb_func
 848              		.fpu softvfp
 850              	USBD_LL_DevConnected:
 851              	.LFB82:
 524:c/usbd_core.c **** 
 525:c/usbd_core.c **** /**
 526:c/usbd_core.c **** * @brief  USBD_DevConnected 
 527:c/usbd_core.c **** *         Handle device connection event
 528:c/usbd_core.c **** * @param  pdev: device instance
 529:c/usbd_core.c **** * @retval status
 530:c/usbd_core.c **** */
 531:c/usbd_core.c **** USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
 532:c/usbd_core.c **** {
 852              		.loc 1 532 0
 853              		.cfi_startproc
 854              		@ args = 0, pretend = 0, frame = 0
 855              		@ frame_needed = 0, uses_anonymous_args = 0
 856              		@ link register save eliminated.
 857              	.LVL74:
 533:c/usbd_core.c ****   return USBD_OK;
 534:c/usbd_core.c **** }
 858              		.loc 1 534 0
 859 0000 0020     		movs	r0, #0
 860              	.LVL75:
 861 0002 7047     		bx	lr
 862              		.cfi_endproc
 863              	.LFE82:
 865              		.section	.text.USBD_LL_DevDisconnected,"ax",%progbits
 866              		.align	1
 867              		.global	USBD_LL_DevDisconnected
 868              		.syntax unified
 869              		.thumb
 870              		.thumb_func
 871              		.fpu softvfp
 873              	USBD_LL_DevDisconnected:
 874              	.LFB83:
 535:c/usbd_core.c **** 
 536:c/usbd_core.c **** /**
 537:c/usbd_core.c **** * @brief  USBD_DevDisconnected 
 538:c/usbd_core.c **** *         Handle device disconnection event
 539:c/usbd_core.c **** * @param  pdev: device instance
 540:c/usbd_core.c **** * @retval status
 541:c/usbd_core.c **** */
 542:c/usbd_core.c **** USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
 543:c/usbd_core.c **** {
 875              		.loc 1 543 0
 876              		.cfi_startproc
 877              		@ args = 0, pretend = 0, frame = 0
 878              		@ frame_needed = 0, uses_anonymous_args = 0
 879              	.LVL76:
 544:c/usbd_core.c ****   /* Free Class Resources */
 545:c/usbd_core.c ****   pdev->dev_state = USBD_STATE_DEFAULT;
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s 			page 26


 880              		.loc 1 545 0
 881 0000 0122     		movs	r2, #1
 543:c/usbd_core.c ****   /* Free Class Resources */
 882              		.loc 1 543 0
 883 0002 08B5     		push	{r3, lr}
 884              		.cfi_def_cfa_offset 8
 885              		.cfi_offset 3, -8
 886              		.cfi_offset 14, -4
 887              		.loc 1 545 0
 888 0004 80F8FC21 		strb	r2, [r0, #508]
 546:c/usbd_core.c ****   pdev->pClass->DeInit(pdev, pdev->dev_config);  
 889              		.loc 1 546 0
 890 0008 D0F81422 		ldr	r2, [r0, #532]
 891 000c 0179     		ldrb	r1, [r0, #4]	@ zero_extendqisi2
 892 000e 5268     		ldr	r2, [r2, #4]
 893 0010 9047     		blx	r2
 894              	.LVL77:
 547:c/usbd_core.c ****    
 548:c/usbd_core.c ****   return USBD_OK;
 549:c/usbd_core.c **** }
 895              		.loc 1 549 0
 896 0012 0020     		movs	r0, #0
 897 0014 08BD     		pop	{r3, pc}
 898              		.cfi_endproc
 899              	.LFE83:
 901              		.text
 902              	.Letext0:
 903              		.file 2 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/machine/_
 904              		.file 3 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_stdi
 905              		.file 4 "c/core_cm3.h"
 906              		.file 5 "c/system_stm32f1xx.h"
 907              		.file 6 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/lock.
 908              		.file 7 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_type
 909              		.file 8 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/lib/gcc/arm-none-eabi/6.3.1/inc
 910              		.file 9 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/reent
 911              		.file 10 "c/usbd_def.h"
 912              		.file 11 "c/usbd_core.h"
 913              		.file 12 "c/usbd_ioreq.h"
 914              		.file 13 "c/usbd_ctlreq.h"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s 			page 27


DEFINED SYMBOLS
                            *ABS*:0000000000000000 usbd_core.c
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:16     .text.USBD_Init:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:23     .text.USBD_Init:0000000000000000 USBD_Init
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:72     .text.USBD_DeInit:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:79     .text.USBD_DeInit:0000000000000000 USBD_DeInit
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:118    .text.USBD_RegisterClass:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:125    .text.USBD_RegisterClass:0000000000000000 USBD_RegisterClass
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:152    .text.USBD_Start:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:159    .text.USBD_Start:0000000000000000 USBD_Start
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:180    .text.USBD_Stop:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:187    .text.USBD_Stop:0000000000000000 USBD_Stop
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:217    .text.USBD_RunTestMode:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:224    .text.USBD_RunTestMode:0000000000000000 USBD_RunTestMode
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:236    .text.USBD_SetClassConfig:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:243    .text.USBD_SetClassConfig:0000000000000000 USBD_SetClassConfig
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:278    .text.USBD_ClrClassConfig:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:285    .text.USBD_ClrClassConfig:0000000000000000 USBD_ClrClassConfig
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:308    .text.USBD_LL_SetupStage:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:315    .text.USBD_LL_SetupStage:0000000000000000 USBD_LL_SetupStage
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:391    .text.USBD_LL_DataOutStage:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:398    .text.USBD_LL_DataOutStage:0000000000000000 USBD_LL_DataOutStage
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:484    .text.USBD_LL_DataInStage:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:491    .text.USBD_LL_DataInStage:0000000000000000 USBD_LL_DataInStage
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:618    .text.USBD_LL_Reset:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:625    .text.USBD_LL_Reset:0000000000000000 USBD_LL_Reset
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:684    .text.USBD_LL_SetSpeed:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:691    .text.USBD_LL_SetSpeed:0000000000000000 USBD_LL_SetSpeed
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:709    .text.USBD_LL_Suspend:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:716    .text.USBD_LL_Suspend:0000000000000000 USBD_LL_Suspend
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:738    .text.USBD_LL_Resume:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:745    .text.USBD_LL_Resume:0000000000000000 USBD_LL_Resume
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:764    .text.USBD_LL_SOF:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:771    .text.USBD_LL_SOF:0000000000000000 USBD_LL_SOF
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:801    .text.USBD_LL_IsoINIncomplete:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:808    .text.USBD_LL_IsoINIncomplete:0000000000000000 USBD_LL_IsoINIncomplete
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:820    .text.USBD_LL_IsoOUTIncomplete:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:827    .text.USBD_LL_IsoOUTIncomplete:0000000000000000 USBD_LL_IsoOUTIncomplete
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:843    .text.USBD_LL_DevConnected:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:850    .text.USBD_LL_DevConnected:0000000000000000 USBD_LL_DevConnected
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:866    .text.USBD_LL_DevDisconnected:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s:873    .text.USBD_LL_DevDisconnected:0000000000000000 USBD_LL_DevDisconnected
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
USBD_LL_Init
USBD_LL_Stop
USBD_LL_DeInit
USBD_LL_Start
USBD_ParseSetupRequest
USBD_LL_StallEP
USBD_StdDevReq
USBD_StdItfReq
USBD_StdEPReq
USBD_CtlContinueRx
USBD_CtlSendStatus
USBD_CtlContinueSendData
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccCLrARu.s 			page 28


USBD_LL_PrepareReceive
USBD_CtlReceiveStatus
USBD_LL_OpenEP
exit code: 0
OPT_LEVEL = Some("s")
HOST = Some("x86_64-apple-darwin")
CFLAGS_arm-none-eabi = None
CFLAGS_arm_none_eabi = None
TARGET_CFLAGS = None
CFLAGS = None
DEBUG = Some("true")
running: "arm-none-eabi-gcc" "-Os" "-ffunction-sections" "-fdata-sections" "-g" "-DSTM32F103xB" "-DUSE_HAL_DRIVER" "-mcpu=cortex-m3" "-mthumb" "-Wall" "-fdata-sections" "-ffunction-sections" "-Wa,-a,-ad" "-g" "-Wall" "-Wextra" "-o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/usbd_ctlreq.o" "-c" "c/usbd_ctlreq.c"
cargo:warning=c/usbd_ctlreq.c: In function 'USBD_CtlError':
cargo:warning=c/usbd_ctlreq.c:717:51: warning: unused parameter 'req' [-Wunused-parameter]
cargo:warning=                             USBD_SetupReqTypedef *req)
cargo:warning=                                                   ^~~
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"usbd_ctlreq.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.USBD_CtlError.constprop.0,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	USBD_CtlError.constprop.0:
  23              	.LFB78:
  24              		.file 1 "c/usbd_ctlreq.c"
   1:c/usbd_ctlreq.c **** /**
   2:c/usbd_ctlreq.c ****   ******************************************************************************
   3:c/usbd_ctlreq.c ****   * @file    usbd_req.c
   4:c/usbd_ctlreq.c ****   * @author  MCD Application Team
   5:c/usbd_ctlreq.c ****   * @version V2.4.2
   6:c/usbd_ctlreq.c ****   * @date    11-December-2015 
   7:c/usbd_ctlreq.c ****   * @brief   This file provides the standard USB requests following chapter 9.
   8:c/usbd_ctlreq.c ****   ******************************************************************************
   9:c/usbd_ctlreq.c ****   * @attention
  10:c/usbd_ctlreq.c ****   *
  11:c/usbd_ctlreq.c ****   * <h2><center>&copy; COPYRIGHT 2015 STMicroelectronics</center></h2>
  12:c/usbd_ctlreq.c ****   *
  13:c/usbd_ctlreq.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  14:c/usbd_ctlreq.c ****   * You may not use this file except in compliance with the License.
  15:c/usbd_ctlreq.c ****   * You may obtain a copy of the License at:
  16:c/usbd_ctlreq.c ****   *
  17:c/usbd_ctlreq.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  18:c/usbd_ctlreq.c ****   *
  19:c/usbd_ctlreq.c ****   * Unless required by applicable law or agreed to in writing, software 
  20:c/usbd_ctlreq.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  21:c/usbd_ctlreq.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  22:c/usbd_ctlreq.c ****   * See the License for the specific language governing permissions and
  23:c/usbd_ctlreq.c ****   * limitations under the License.
  24:c/usbd_ctlreq.c ****   *
  25:c/usbd_ctlreq.c ****   ******************************************************************************
  26:c/usbd_ctlreq.c ****   */ 
  27:c/usbd_ctlreq.c **** 
  28:c/usbd_ctlreq.c **** /* Includes ------------------------------------------------------------------*/
  29:c/usbd_ctlreq.c **** #include "usbd_ctlreq.h"
  30:c/usbd_ctlreq.c **** #include "usbd_ioreq.h"
  31:c/usbd_ctlreq.c **** 
  32:c/usbd_ctlreq.c **** 
  33:c/usbd_ctlreq.c **** /** @addtogroup STM32_USBD_STATE_DEVICE_LIBRARY
  34:c/usbd_ctlreq.c ****   * @{
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 2


  35:c/usbd_ctlreq.c ****   */
  36:c/usbd_ctlreq.c **** 
  37:c/usbd_ctlreq.c **** 
  38:c/usbd_ctlreq.c **** /** @defgroup USBD_REQ 
  39:c/usbd_ctlreq.c ****   * @brief USB standard requests module
  40:c/usbd_ctlreq.c ****   * @{
  41:c/usbd_ctlreq.c ****   */ 
  42:c/usbd_ctlreq.c **** 
  43:c/usbd_ctlreq.c **** /** @defgroup USBD_REQ_Private_TypesDefinitions
  44:c/usbd_ctlreq.c ****   * @{
  45:c/usbd_ctlreq.c ****   */ 
  46:c/usbd_ctlreq.c **** /**
  47:c/usbd_ctlreq.c ****   * @}
  48:c/usbd_ctlreq.c ****   */ 
  49:c/usbd_ctlreq.c **** 
  50:c/usbd_ctlreq.c **** 
  51:c/usbd_ctlreq.c **** /** @defgroup USBD_REQ_Private_Defines
  52:c/usbd_ctlreq.c ****   * @{
  53:c/usbd_ctlreq.c ****   */ 
  54:c/usbd_ctlreq.c **** 
  55:c/usbd_ctlreq.c **** /**
  56:c/usbd_ctlreq.c ****   * @}
  57:c/usbd_ctlreq.c ****   */ 
  58:c/usbd_ctlreq.c **** 
  59:c/usbd_ctlreq.c **** 
  60:c/usbd_ctlreq.c **** /** @defgroup USBD_REQ_Private_Macros
  61:c/usbd_ctlreq.c ****   * @{
  62:c/usbd_ctlreq.c ****   */ 
  63:c/usbd_ctlreq.c **** /**
  64:c/usbd_ctlreq.c ****   * @}
  65:c/usbd_ctlreq.c ****   */ 
  66:c/usbd_ctlreq.c **** 
  67:c/usbd_ctlreq.c **** 
  68:c/usbd_ctlreq.c **** /** @defgroup USBD_REQ_Private_Variables
  69:c/usbd_ctlreq.c ****   * @{
  70:c/usbd_ctlreq.c ****   */ 
  71:c/usbd_ctlreq.c **** /**
  72:c/usbd_ctlreq.c ****   * @}
  73:c/usbd_ctlreq.c ****   */ 
  74:c/usbd_ctlreq.c **** 
  75:c/usbd_ctlreq.c **** 
  76:c/usbd_ctlreq.c **** /** @defgroup USBD_REQ_Private_FunctionPrototypes
  77:c/usbd_ctlreq.c ****   * @{
  78:c/usbd_ctlreq.c ****   */ 
  79:c/usbd_ctlreq.c **** static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
  80:c/usbd_ctlreq.c ****                                USBD_SetupReqTypedef *req);
  81:c/usbd_ctlreq.c **** 
  82:c/usbd_ctlreq.c **** static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
  83:c/usbd_ctlreq.c ****                             USBD_SetupReqTypedef *req);
  84:c/usbd_ctlreq.c **** 
  85:c/usbd_ctlreq.c **** static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
  86:c/usbd_ctlreq.c ****                            USBD_SetupReqTypedef *req);
  87:c/usbd_ctlreq.c **** 
  88:c/usbd_ctlreq.c **** static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
  89:c/usbd_ctlreq.c ****                            USBD_SetupReqTypedef *req);
  90:c/usbd_ctlreq.c **** 
  91:c/usbd_ctlreq.c **** static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 3


  92:c/usbd_ctlreq.c ****                            USBD_SetupReqTypedef *req);
  93:c/usbd_ctlreq.c **** 
  94:c/usbd_ctlreq.c **** static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
  95:c/usbd_ctlreq.c ****                             USBD_SetupReqTypedef *req);
  96:c/usbd_ctlreq.c **** 
  97:c/usbd_ctlreq.c **** static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
  98:c/usbd_ctlreq.c ****                             USBD_SetupReqTypedef *req);
  99:c/usbd_ctlreq.c **** 
 100:c/usbd_ctlreq.c **** static uint8_t USBD_GetLen(uint8_t *buf);
 101:c/usbd_ctlreq.c **** 
 102:c/usbd_ctlreq.c **** /**
 103:c/usbd_ctlreq.c ****   * @}
 104:c/usbd_ctlreq.c ****   */ 
 105:c/usbd_ctlreq.c **** 
 106:c/usbd_ctlreq.c **** 
 107:c/usbd_ctlreq.c **** /** @defgroup USBD_REQ_Private_Functions
 108:c/usbd_ctlreq.c ****   * @{
 109:c/usbd_ctlreq.c ****   */ 
 110:c/usbd_ctlreq.c **** 
 111:c/usbd_ctlreq.c **** 
 112:c/usbd_ctlreq.c **** /**
 113:c/usbd_ctlreq.c **** * @brief  USBD_StdDevReq
 114:c/usbd_ctlreq.c **** *         Handle standard usb device requests
 115:c/usbd_ctlreq.c **** * @param  pdev: device instance
 116:c/usbd_ctlreq.c **** * @param  req: usb request
 117:c/usbd_ctlreq.c **** * @retval status
 118:c/usbd_ctlreq.c **** */
 119:c/usbd_ctlreq.c **** USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
 120:c/usbd_ctlreq.c **** {
 121:c/usbd_ctlreq.c ****   USBD_StatusTypeDef ret = USBD_OK;  
 122:c/usbd_ctlreq.c ****   
 123:c/usbd_ctlreq.c ****   switch (req->bRequest) 
 124:c/usbd_ctlreq.c ****   {
 125:c/usbd_ctlreq.c ****   case USB_REQ_GET_DESCRIPTOR: 
 126:c/usbd_ctlreq.c ****     
 127:c/usbd_ctlreq.c ****     USBD_GetDescriptor (pdev, req) ;
 128:c/usbd_ctlreq.c ****     break;
 129:c/usbd_ctlreq.c ****     
 130:c/usbd_ctlreq.c ****   case USB_REQ_SET_ADDRESS:                      
 131:c/usbd_ctlreq.c ****     USBD_SetAddress(pdev, req);
 132:c/usbd_ctlreq.c ****     break;
 133:c/usbd_ctlreq.c ****     
 134:c/usbd_ctlreq.c ****   case USB_REQ_SET_CONFIGURATION:                    
 135:c/usbd_ctlreq.c ****     USBD_SetConfig (pdev , req);
 136:c/usbd_ctlreq.c ****     break;
 137:c/usbd_ctlreq.c ****     
 138:c/usbd_ctlreq.c ****   case USB_REQ_GET_CONFIGURATION:                 
 139:c/usbd_ctlreq.c ****     USBD_GetConfig (pdev , req);
 140:c/usbd_ctlreq.c ****     break;
 141:c/usbd_ctlreq.c ****     
 142:c/usbd_ctlreq.c ****   case USB_REQ_GET_STATUS:                                  
 143:c/usbd_ctlreq.c ****     USBD_GetStatus (pdev , req);
 144:c/usbd_ctlreq.c ****     break;
 145:c/usbd_ctlreq.c ****     
 146:c/usbd_ctlreq.c ****     
 147:c/usbd_ctlreq.c ****   case USB_REQ_SET_FEATURE:   
 148:c/usbd_ctlreq.c ****     USBD_SetFeature (pdev , req);    
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 4


 149:c/usbd_ctlreq.c ****     break;
 150:c/usbd_ctlreq.c ****     
 151:c/usbd_ctlreq.c ****   case USB_REQ_CLEAR_FEATURE:                                   
 152:c/usbd_ctlreq.c ****     USBD_ClrFeature (pdev , req);
 153:c/usbd_ctlreq.c ****     break;
 154:c/usbd_ctlreq.c ****     
 155:c/usbd_ctlreq.c ****   default:  
 156:c/usbd_ctlreq.c ****     USBD_CtlError(pdev , req);
 157:c/usbd_ctlreq.c ****     break;
 158:c/usbd_ctlreq.c ****   }
 159:c/usbd_ctlreq.c ****   
 160:c/usbd_ctlreq.c ****   return ret;
 161:c/usbd_ctlreq.c **** }
 162:c/usbd_ctlreq.c **** 
 163:c/usbd_ctlreq.c **** /**
 164:c/usbd_ctlreq.c **** * @brief  USBD_StdItfReq
 165:c/usbd_ctlreq.c **** *         Handle standard usb interface requests
 166:c/usbd_ctlreq.c **** * @param  pdev: device instance
 167:c/usbd_ctlreq.c **** * @param  req: usb request
 168:c/usbd_ctlreq.c **** * @retval status
 169:c/usbd_ctlreq.c **** */
 170:c/usbd_ctlreq.c **** USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
 171:c/usbd_ctlreq.c **** {
 172:c/usbd_ctlreq.c ****   USBD_StatusTypeDef ret = USBD_OK; 
 173:c/usbd_ctlreq.c ****   
 174:c/usbd_ctlreq.c ****   switch (pdev->dev_state) 
 175:c/usbd_ctlreq.c ****   {
 176:c/usbd_ctlreq.c ****   case USBD_STATE_CONFIGURED:
 177:c/usbd_ctlreq.c ****     
 178:c/usbd_ctlreq.c ****     if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 179:c/usbd_ctlreq.c ****     {
 180:c/usbd_ctlreq.c ****       pdev->pClass->Setup (pdev, req); 
 181:c/usbd_ctlreq.c ****       
 182:c/usbd_ctlreq.c ****       if((req->wLength == 0)&& (ret == USBD_OK))
 183:c/usbd_ctlreq.c ****       {
 184:c/usbd_ctlreq.c ****          USBD_CtlSendStatus(pdev);
 185:c/usbd_ctlreq.c ****       }
 186:c/usbd_ctlreq.c ****     } 
 187:c/usbd_ctlreq.c ****     else 
 188:c/usbd_ctlreq.c ****     {                                               
 189:c/usbd_ctlreq.c ****        USBD_CtlError(pdev , req);
 190:c/usbd_ctlreq.c ****     }
 191:c/usbd_ctlreq.c ****     break;
 192:c/usbd_ctlreq.c ****     
 193:c/usbd_ctlreq.c ****   default:
 194:c/usbd_ctlreq.c ****      USBD_CtlError(pdev , req);
 195:c/usbd_ctlreq.c ****     break;
 196:c/usbd_ctlreq.c ****   }
 197:c/usbd_ctlreq.c ****   return USBD_OK;
 198:c/usbd_ctlreq.c **** }
 199:c/usbd_ctlreq.c **** 
 200:c/usbd_ctlreq.c **** /**
 201:c/usbd_ctlreq.c **** * @brief  USBD_StdEPReq
 202:c/usbd_ctlreq.c **** *         Handle standard usb endpoint requests
 203:c/usbd_ctlreq.c **** * @param  pdev: device instance
 204:c/usbd_ctlreq.c **** * @param  req: usb request
 205:c/usbd_ctlreq.c **** * @retval status
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 5


 206:c/usbd_ctlreq.c **** */
 207:c/usbd_ctlreq.c **** USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
 208:c/usbd_ctlreq.c **** {
 209:c/usbd_ctlreq.c ****   
 210:c/usbd_ctlreq.c ****   uint8_t   ep_addr;
 211:c/usbd_ctlreq.c ****   USBD_StatusTypeDef ret = USBD_OK; 
 212:c/usbd_ctlreq.c ****   USBD_EndpointTypeDef   *pep;
 213:c/usbd_ctlreq.c ****   ep_addr  = LOBYTE(req->wIndex);   
 214:c/usbd_ctlreq.c ****   
 215:c/usbd_ctlreq.c ****   /* Check if it is a class request */
 216:c/usbd_ctlreq.c ****   if ((req->bmRequest & 0x60) == 0x20)
 217:c/usbd_ctlreq.c ****   {
 218:c/usbd_ctlreq.c ****     pdev->pClass->Setup (pdev, req);
 219:c/usbd_ctlreq.c ****     
 220:c/usbd_ctlreq.c ****     return USBD_OK;
 221:c/usbd_ctlreq.c ****   }
 222:c/usbd_ctlreq.c ****   
 223:c/usbd_ctlreq.c ****   switch (req->bRequest) 
 224:c/usbd_ctlreq.c ****   {
 225:c/usbd_ctlreq.c ****     
 226:c/usbd_ctlreq.c ****   case USB_REQ_SET_FEATURE :
 227:c/usbd_ctlreq.c ****     
 228:c/usbd_ctlreq.c ****     switch (pdev->dev_state) 
 229:c/usbd_ctlreq.c ****     {
 230:c/usbd_ctlreq.c ****     case USBD_STATE_ADDRESSED:          
 231:c/usbd_ctlreq.c ****       if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 232:c/usbd_ctlreq.c ****       {
 233:c/usbd_ctlreq.c ****         USBD_LL_StallEP(pdev , ep_addr);
 234:c/usbd_ctlreq.c ****       }
 235:c/usbd_ctlreq.c ****       break;	
 236:c/usbd_ctlreq.c ****       
 237:c/usbd_ctlreq.c ****     case USBD_STATE_CONFIGURED:   
 238:c/usbd_ctlreq.c ****       if (req->wValue == USB_FEATURE_EP_HALT)
 239:c/usbd_ctlreq.c ****       {
 240:c/usbd_ctlreq.c ****         if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 241:c/usbd_ctlreq.c ****         { 
 242:c/usbd_ctlreq.c ****           USBD_LL_StallEP(pdev , ep_addr);
 243:c/usbd_ctlreq.c ****           
 244:c/usbd_ctlreq.c ****         }
 245:c/usbd_ctlreq.c ****       }
 246:c/usbd_ctlreq.c ****       pdev->pClass->Setup (pdev, req);   
 247:c/usbd_ctlreq.c ****       USBD_CtlSendStatus(pdev);
 248:c/usbd_ctlreq.c ****       
 249:c/usbd_ctlreq.c ****       break;
 250:c/usbd_ctlreq.c ****       
 251:c/usbd_ctlreq.c ****     default:                         
 252:c/usbd_ctlreq.c ****       USBD_CtlError(pdev , req);
 253:c/usbd_ctlreq.c ****       break;    
 254:c/usbd_ctlreq.c ****     }
 255:c/usbd_ctlreq.c ****     break;
 256:c/usbd_ctlreq.c ****     
 257:c/usbd_ctlreq.c ****   case USB_REQ_CLEAR_FEATURE :
 258:c/usbd_ctlreq.c ****     
 259:c/usbd_ctlreq.c ****     switch (pdev->dev_state) 
 260:c/usbd_ctlreq.c ****     {
 261:c/usbd_ctlreq.c ****     case USBD_STATE_ADDRESSED:          
 262:c/usbd_ctlreq.c ****       if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 6


 263:c/usbd_ctlreq.c ****       {
 264:c/usbd_ctlreq.c ****         USBD_LL_StallEP(pdev , ep_addr);
 265:c/usbd_ctlreq.c ****       }
 266:c/usbd_ctlreq.c ****       break;	
 267:c/usbd_ctlreq.c ****       
 268:c/usbd_ctlreq.c ****     case USBD_STATE_CONFIGURED:   
 269:c/usbd_ctlreq.c ****       if (req->wValue == USB_FEATURE_EP_HALT)
 270:c/usbd_ctlreq.c ****       {
 271:c/usbd_ctlreq.c ****         if ((ep_addr & 0x7F) != 0x00) 
 272:c/usbd_ctlreq.c ****         {        
 273:c/usbd_ctlreq.c ****           USBD_LL_ClearStallEP(pdev , ep_addr);
 274:c/usbd_ctlreq.c ****           pdev->pClass->Setup (pdev, req);
 275:c/usbd_ctlreq.c ****         }
 276:c/usbd_ctlreq.c ****         USBD_CtlSendStatus(pdev);
 277:c/usbd_ctlreq.c ****       }
 278:c/usbd_ctlreq.c ****       break;
 279:c/usbd_ctlreq.c ****       
 280:c/usbd_ctlreq.c ****     default:                         
 281:c/usbd_ctlreq.c ****       USBD_CtlError(pdev , req);
 282:c/usbd_ctlreq.c ****       break;    
 283:c/usbd_ctlreq.c ****     }
 284:c/usbd_ctlreq.c ****     break;
 285:c/usbd_ctlreq.c ****     
 286:c/usbd_ctlreq.c ****   case USB_REQ_GET_STATUS:                  
 287:c/usbd_ctlreq.c ****     switch (pdev->dev_state) 
 288:c/usbd_ctlreq.c ****     {
 289:c/usbd_ctlreq.c ****     case USBD_STATE_ADDRESSED:          
 290:c/usbd_ctlreq.c ****       if ((ep_addr & 0x7F) != 0x00) 
 291:c/usbd_ctlreq.c ****       {
 292:c/usbd_ctlreq.c ****         USBD_LL_StallEP(pdev , ep_addr);
 293:c/usbd_ctlreq.c ****       }
 294:c/usbd_ctlreq.c ****       break;	
 295:c/usbd_ctlreq.c ****       
 296:c/usbd_ctlreq.c ****     case USBD_STATE_CONFIGURED:
 297:c/usbd_ctlreq.c ****       pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 298:c/usbd_ctlreq.c ****                                          &pdev->ep_out[ep_addr & 0x7F];
 299:c/usbd_ctlreq.c ****       if(USBD_LL_IsStallEP(pdev, ep_addr))
 300:c/usbd_ctlreq.c ****       {
 301:c/usbd_ctlreq.c ****         pep->status = 0x0001;     
 302:c/usbd_ctlreq.c ****       }
 303:c/usbd_ctlreq.c ****       else
 304:c/usbd_ctlreq.c ****       {
 305:c/usbd_ctlreq.c ****         pep->status = 0x0000;  
 306:c/usbd_ctlreq.c ****       }
 307:c/usbd_ctlreq.c ****       
 308:c/usbd_ctlreq.c ****       USBD_CtlSendData (pdev,
 309:c/usbd_ctlreq.c ****                         (uint8_t *)&pep->status,
 310:c/usbd_ctlreq.c ****                         2);
 311:c/usbd_ctlreq.c ****       break;
 312:c/usbd_ctlreq.c ****       
 313:c/usbd_ctlreq.c ****     default:                         
 314:c/usbd_ctlreq.c ****       USBD_CtlError(pdev , req);
 315:c/usbd_ctlreq.c ****       break;
 316:c/usbd_ctlreq.c ****     }
 317:c/usbd_ctlreq.c ****     break;
 318:c/usbd_ctlreq.c ****     
 319:c/usbd_ctlreq.c ****   default:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 7


 320:c/usbd_ctlreq.c ****     break;
 321:c/usbd_ctlreq.c ****   }
 322:c/usbd_ctlreq.c ****   return ret;
 323:c/usbd_ctlreq.c **** }
 324:c/usbd_ctlreq.c **** /**
 325:c/usbd_ctlreq.c **** * @brief  USBD_GetDescriptor
 326:c/usbd_ctlreq.c **** *         Handle Get Descriptor requests
 327:c/usbd_ctlreq.c **** * @param  pdev: device instance
 328:c/usbd_ctlreq.c **** * @param  req: usb request
 329:c/usbd_ctlreq.c **** * @retval status
 330:c/usbd_ctlreq.c **** */
 331:c/usbd_ctlreq.c **** static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
 332:c/usbd_ctlreq.c ****                                USBD_SetupReqTypedef *req)
 333:c/usbd_ctlreq.c **** {
 334:c/usbd_ctlreq.c ****   uint16_t len;
 335:c/usbd_ctlreq.c ****   uint8_t *pbuf;
 336:c/usbd_ctlreq.c ****   
 337:c/usbd_ctlreq.c ****     
 338:c/usbd_ctlreq.c ****   switch (req->wValue >> 8)
 339:c/usbd_ctlreq.c ****   { 
 340:c/usbd_ctlreq.c **** #if (USBD_LPM_ENABLED == 1)
 341:c/usbd_ctlreq.c ****   case USB_DESC_TYPE_BOS:
 342:c/usbd_ctlreq.c ****     pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 343:c/usbd_ctlreq.c ****     break;
 344:c/usbd_ctlreq.c **** #endif    
 345:c/usbd_ctlreq.c ****   case USB_DESC_TYPE_DEVICE:
 346:c/usbd_ctlreq.c ****     pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 347:c/usbd_ctlreq.c ****     break;
 348:c/usbd_ctlreq.c ****     
 349:c/usbd_ctlreq.c ****   case USB_DESC_TYPE_CONFIGURATION:     
 350:c/usbd_ctlreq.c ****     if(pdev->dev_speed == USBD_SPEED_HIGH )   
 351:c/usbd_ctlreq.c ****     {
 352:c/usbd_ctlreq.c ****       pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 353:c/usbd_ctlreq.c ****       pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 354:c/usbd_ctlreq.c ****     }
 355:c/usbd_ctlreq.c ****     else
 356:c/usbd_ctlreq.c ****     {
 357:c/usbd_ctlreq.c ****       pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 358:c/usbd_ctlreq.c ****       pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 359:c/usbd_ctlreq.c ****     }
 360:c/usbd_ctlreq.c ****     break;
 361:c/usbd_ctlreq.c ****     
 362:c/usbd_ctlreq.c ****   case USB_DESC_TYPE_STRING:
 363:c/usbd_ctlreq.c ****     switch ((uint8_t)(req->wValue))
 364:c/usbd_ctlreq.c ****     {
 365:c/usbd_ctlreq.c ****     case USBD_IDX_LANGID_STR:
 366:c/usbd_ctlreq.c ****      pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 367:c/usbd_ctlreq.c ****       break;
 368:c/usbd_ctlreq.c ****       
 369:c/usbd_ctlreq.c ****     case USBD_IDX_MFC_STR:
 370:c/usbd_ctlreq.c ****       pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 371:c/usbd_ctlreq.c ****       break;
 372:c/usbd_ctlreq.c ****       
 373:c/usbd_ctlreq.c ****     case USBD_IDX_PRODUCT_STR:
 374:c/usbd_ctlreq.c ****       pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 375:c/usbd_ctlreq.c ****       break;
 376:c/usbd_ctlreq.c ****       
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 8


 377:c/usbd_ctlreq.c ****     case USBD_IDX_SERIAL_STR:
 378:c/usbd_ctlreq.c ****       pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 379:c/usbd_ctlreq.c ****       break;
 380:c/usbd_ctlreq.c ****       
 381:c/usbd_ctlreq.c ****     case USBD_IDX_CONFIG_STR:
 382:c/usbd_ctlreq.c ****       pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 383:c/usbd_ctlreq.c ****       break;
 384:c/usbd_ctlreq.c ****       
 385:c/usbd_ctlreq.c ****     case USBD_IDX_INTERFACE_STR:
 386:c/usbd_ctlreq.c ****       pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 387:c/usbd_ctlreq.c ****       break;
 388:c/usbd_ctlreq.c ****       
 389:c/usbd_ctlreq.c ****     default:
 390:c/usbd_ctlreq.c **** #if (USBD_SUPPORT_USER_STRING == 1)
 391:c/usbd_ctlreq.c ****       pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
 392:c/usbd_ctlreq.c ****       break;
 393:c/usbd_ctlreq.c **** #else      
 394:c/usbd_ctlreq.c ****        USBD_CtlError(pdev , req);
 395:c/usbd_ctlreq.c ****       return;
 396:c/usbd_ctlreq.c **** #endif   
 397:c/usbd_ctlreq.c ****     }
 398:c/usbd_ctlreq.c ****     break;
 399:c/usbd_ctlreq.c ****   case USB_DESC_TYPE_DEVICE_QUALIFIER:                   
 400:c/usbd_ctlreq.c **** 
 401:c/usbd_ctlreq.c ****     if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 402:c/usbd_ctlreq.c ****     {
 403:c/usbd_ctlreq.c ****       pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 404:c/usbd_ctlreq.c ****       break;
 405:c/usbd_ctlreq.c ****     }
 406:c/usbd_ctlreq.c ****     else
 407:c/usbd_ctlreq.c ****     {
 408:c/usbd_ctlreq.c ****       USBD_CtlError(pdev , req);
 409:c/usbd_ctlreq.c ****       return;
 410:c/usbd_ctlreq.c ****     } 
 411:c/usbd_ctlreq.c **** 
 412:c/usbd_ctlreq.c ****   case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
 413:c/usbd_ctlreq.c ****     if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 414:c/usbd_ctlreq.c ****     {
 415:c/usbd_ctlreq.c ****       pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 416:c/usbd_ctlreq.c ****       pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 417:c/usbd_ctlreq.c ****       break; 
 418:c/usbd_ctlreq.c ****     }
 419:c/usbd_ctlreq.c ****     else
 420:c/usbd_ctlreq.c ****     {
 421:c/usbd_ctlreq.c ****       USBD_CtlError(pdev , req);
 422:c/usbd_ctlreq.c ****       return;
 423:c/usbd_ctlreq.c ****     }
 424:c/usbd_ctlreq.c **** 
 425:c/usbd_ctlreq.c ****   default: 
 426:c/usbd_ctlreq.c ****      USBD_CtlError(pdev , req);
 427:c/usbd_ctlreq.c ****     return;
 428:c/usbd_ctlreq.c ****   }
 429:c/usbd_ctlreq.c ****   
 430:c/usbd_ctlreq.c ****   if((len != 0)&& (req->wLength != 0))
 431:c/usbd_ctlreq.c ****   {
 432:c/usbd_ctlreq.c ****     
 433:c/usbd_ctlreq.c ****     len = MIN(len , req->wLength);
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 9


 434:c/usbd_ctlreq.c ****     
 435:c/usbd_ctlreq.c ****     USBD_CtlSendData (pdev, 
 436:c/usbd_ctlreq.c ****                       pbuf,
 437:c/usbd_ctlreq.c ****                       len);
 438:c/usbd_ctlreq.c ****   }
 439:c/usbd_ctlreq.c ****   
 440:c/usbd_ctlreq.c **** }
 441:c/usbd_ctlreq.c **** 
 442:c/usbd_ctlreq.c **** /**
 443:c/usbd_ctlreq.c **** * @brief  USBD_SetAddress
 444:c/usbd_ctlreq.c **** *         Set device address
 445:c/usbd_ctlreq.c **** * @param  pdev: device instance
 446:c/usbd_ctlreq.c **** * @param  req: usb request
 447:c/usbd_ctlreq.c **** * @retval status
 448:c/usbd_ctlreq.c **** */
 449:c/usbd_ctlreq.c **** static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
 450:c/usbd_ctlreq.c ****                             USBD_SetupReqTypedef *req)
 451:c/usbd_ctlreq.c **** {
 452:c/usbd_ctlreq.c ****   uint8_t  dev_addr; 
 453:c/usbd_ctlreq.c ****   
 454:c/usbd_ctlreq.c ****   if ((req->wIndex == 0) && (req->wLength == 0)) 
 455:c/usbd_ctlreq.c ****   {
 456:c/usbd_ctlreq.c ****     dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 457:c/usbd_ctlreq.c ****     
 458:c/usbd_ctlreq.c ****     if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 459:c/usbd_ctlreq.c ****     {
 460:c/usbd_ctlreq.c ****       USBD_CtlError(pdev , req);
 461:c/usbd_ctlreq.c ****     } 
 462:c/usbd_ctlreq.c ****     else 
 463:c/usbd_ctlreq.c ****     {
 464:c/usbd_ctlreq.c ****       pdev->dev_address = dev_addr;
 465:c/usbd_ctlreq.c ****       USBD_LL_SetUSBAddress(pdev, dev_addr);               
 466:c/usbd_ctlreq.c ****       USBD_CtlSendStatus(pdev);                         
 467:c/usbd_ctlreq.c ****       
 468:c/usbd_ctlreq.c ****       if (dev_addr != 0) 
 469:c/usbd_ctlreq.c ****       {
 470:c/usbd_ctlreq.c ****         pdev->dev_state  = USBD_STATE_ADDRESSED;
 471:c/usbd_ctlreq.c ****       } 
 472:c/usbd_ctlreq.c ****       else 
 473:c/usbd_ctlreq.c ****       {
 474:c/usbd_ctlreq.c ****         pdev->dev_state  = USBD_STATE_DEFAULT; 
 475:c/usbd_ctlreq.c ****       }
 476:c/usbd_ctlreq.c ****     }
 477:c/usbd_ctlreq.c ****   } 
 478:c/usbd_ctlreq.c ****   else 
 479:c/usbd_ctlreq.c ****   {
 480:c/usbd_ctlreq.c ****      USBD_CtlError(pdev , req);                        
 481:c/usbd_ctlreq.c ****   } 
 482:c/usbd_ctlreq.c **** }
 483:c/usbd_ctlreq.c **** 
 484:c/usbd_ctlreq.c **** /**
 485:c/usbd_ctlreq.c **** * @brief  USBD_SetConfig
 486:c/usbd_ctlreq.c **** *         Handle Set device configuration request
 487:c/usbd_ctlreq.c **** * @param  pdev: device instance
 488:c/usbd_ctlreq.c **** * @param  req: usb request
 489:c/usbd_ctlreq.c **** * @retval status
 490:c/usbd_ctlreq.c **** */
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 10


 491:c/usbd_ctlreq.c **** static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
 492:c/usbd_ctlreq.c ****                            USBD_SetupReqTypedef *req)
 493:c/usbd_ctlreq.c **** {
 494:c/usbd_ctlreq.c ****   
 495:c/usbd_ctlreq.c ****   static uint8_t  cfgidx;
 496:c/usbd_ctlreq.c ****   
 497:c/usbd_ctlreq.c ****   cfgidx = (uint8_t)(req->wValue);                 
 498:c/usbd_ctlreq.c ****   
 499:c/usbd_ctlreq.c ****   if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 500:c/usbd_ctlreq.c ****   {            
 501:c/usbd_ctlreq.c ****      USBD_CtlError(pdev , req);                              
 502:c/usbd_ctlreq.c ****   } 
 503:c/usbd_ctlreq.c ****   else 
 504:c/usbd_ctlreq.c ****   {
 505:c/usbd_ctlreq.c ****     switch (pdev->dev_state) 
 506:c/usbd_ctlreq.c ****     {
 507:c/usbd_ctlreq.c ****     case USBD_STATE_ADDRESSED:
 508:c/usbd_ctlreq.c ****       if (cfgidx) 
 509:c/usbd_ctlreq.c ****       {                                			   							   							   				
 510:c/usbd_ctlreq.c ****         pdev->dev_config = cfgidx;
 511:c/usbd_ctlreq.c ****         pdev->dev_state = USBD_STATE_CONFIGURED;
 512:c/usbd_ctlreq.c ****         if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 513:c/usbd_ctlreq.c ****         {
 514:c/usbd_ctlreq.c ****           USBD_CtlError(pdev , req);  
 515:c/usbd_ctlreq.c ****           return;
 516:c/usbd_ctlreq.c ****         }
 517:c/usbd_ctlreq.c ****         USBD_CtlSendStatus(pdev);
 518:c/usbd_ctlreq.c ****       }
 519:c/usbd_ctlreq.c ****       else 
 520:c/usbd_ctlreq.c ****       {
 521:c/usbd_ctlreq.c ****          USBD_CtlSendStatus(pdev);
 522:c/usbd_ctlreq.c ****       }
 523:c/usbd_ctlreq.c ****       break;
 524:c/usbd_ctlreq.c ****       
 525:c/usbd_ctlreq.c ****     case USBD_STATE_CONFIGURED:
 526:c/usbd_ctlreq.c ****       if (cfgidx == 0) 
 527:c/usbd_ctlreq.c ****       {                           
 528:c/usbd_ctlreq.c ****         pdev->dev_state = USBD_STATE_ADDRESSED;
 529:c/usbd_ctlreq.c ****         pdev->dev_config = cfgidx;          
 530:c/usbd_ctlreq.c ****         USBD_ClrClassConfig(pdev , cfgidx);
 531:c/usbd_ctlreq.c ****         USBD_CtlSendStatus(pdev);
 532:c/usbd_ctlreq.c ****         
 533:c/usbd_ctlreq.c ****       } 
 534:c/usbd_ctlreq.c ****       else  if (cfgidx != pdev->dev_config) 
 535:c/usbd_ctlreq.c ****       {
 536:c/usbd_ctlreq.c ****         /* Clear old configuration */
 537:c/usbd_ctlreq.c ****         USBD_ClrClassConfig(pdev , pdev->dev_config);
 538:c/usbd_ctlreq.c ****         
 539:c/usbd_ctlreq.c ****         /* set new configuration */
 540:c/usbd_ctlreq.c ****         pdev->dev_config = cfgidx;
 541:c/usbd_ctlreq.c ****         if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 542:c/usbd_ctlreq.c ****         {
 543:c/usbd_ctlreq.c ****           USBD_CtlError(pdev , req);  
 544:c/usbd_ctlreq.c ****           return;
 545:c/usbd_ctlreq.c ****         }
 546:c/usbd_ctlreq.c ****         USBD_CtlSendStatus(pdev);
 547:c/usbd_ctlreq.c ****       }
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 11


 548:c/usbd_ctlreq.c ****       else
 549:c/usbd_ctlreq.c ****       {
 550:c/usbd_ctlreq.c ****         USBD_CtlSendStatus(pdev);
 551:c/usbd_ctlreq.c ****       }
 552:c/usbd_ctlreq.c ****       break;
 553:c/usbd_ctlreq.c ****       
 554:c/usbd_ctlreq.c ****     default:					
 555:c/usbd_ctlreq.c ****        USBD_CtlError(pdev , req);                     
 556:c/usbd_ctlreq.c ****       break;
 557:c/usbd_ctlreq.c ****     }
 558:c/usbd_ctlreq.c ****   }
 559:c/usbd_ctlreq.c **** }
 560:c/usbd_ctlreq.c **** 
 561:c/usbd_ctlreq.c **** /**
 562:c/usbd_ctlreq.c **** * @brief  USBD_GetConfig
 563:c/usbd_ctlreq.c **** *         Handle Get device configuration request
 564:c/usbd_ctlreq.c **** * @param  pdev: device instance
 565:c/usbd_ctlreq.c **** * @param  req: usb request
 566:c/usbd_ctlreq.c **** * @retval status
 567:c/usbd_ctlreq.c **** */
 568:c/usbd_ctlreq.c **** static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
 569:c/usbd_ctlreq.c ****                            USBD_SetupReqTypedef *req)
 570:c/usbd_ctlreq.c **** {
 571:c/usbd_ctlreq.c **** 
 572:c/usbd_ctlreq.c ****   if (req->wLength != 1) 
 573:c/usbd_ctlreq.c ****   {                   
 574:c/usbd_ctlreq.c ****      USBD_CtlError(pdev , req);
 575:c/usbd_ctlreq.c ****   }
 576:c/usbd_ctlreq.c ****   else 
 577:c/usbd_ctlreq.c ****   {
 578:c/usbd_ctlreq.c ****     switch (pdev->dev_state )  
 579:c/usbd_ctlreq.c ****     {
 580:c/usbd_ctlreq.c ****     case USBD_STATE_ADDRESSED:                     
 581:c/usbd_ctlreq.c ****       pdev->dev_default_config = 0;
 582:c/usbd_ctlreq.c ****       USBD_CtlSendData (pdev, 
 583:c/usbd_ctlreq.c ****                         (uint8_t *)&pdev->dev_default_config,
 584:c/usbd_ctlreq.c ****                         1);
 585:c/usbd_ctlreq.c ****       break;
 586:c/usbd_ctlreq.c ****       
 587:c/usbd_ctlreq.c ****     case USBD_STATE_CONFIGURED:   
 588:c/usbd_ctlreq.c ****       
 589:c/usbd_ctlreq.c ****       USBD_CtlSendData (pdev, 
 590:c/usbd_ctlreq.c ****                         (uint8_t *)&pdev->dev_config,
 591:c/usbd_ctlreq.c ****                         1);
 592:c/usbd_ctlreq.c ****       break;
 593:c/usbd_ctlreq.c ****       
 594:c/usbd_ctlreq.c ****     default:
 595:c/usbd_ctlreq.c ****        USBD_CtlError(pdev , req);
 596:c/usbd_ctlreq.c ****       break;
 597:c/usbd_ctlreq.c ****     }
 598:c/usbd_ctlreq.c ****   }
 599:c/usbd_ctlreq.c **** }
 600:c/usbd_ctlreq.c **** 
 601:c/usbd_ctlreq.c **** /**
 602:c/usbd_ctlreq.c **** * @brief  USBD_GetStatus
 603:c/usbd_ctlreq.c **** *         Handle Get Status request
 604:c/usbd_ctlreq.c **** * @param  pdev: device instance
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 12


 605:c/usbd_ctlreq.c **** * @param  req: usb request
 606:c/usbd_ctlreq.c **** * @retval status
 607:c/usbd_ctlreq.c **** */
 608:c/usbd_ctlreq.c **** static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
 609:c/usbd_ctlreq.c ****                            USBD_SetupReqTypedef *req)
 610:c/usbd_ctlreq.c **** {
 611:c/usbd_ctlreq.c ****   
 612:c/usbd_ctlreq.c ****     
 613:c/usbd_ctlreq.c ****   switch (pdev->dev_state) 
 614:c/usbd_ctlreq.c ****   {
 615:c/usbd_ctlreq.c ****   case USBD_STATE_ADDRESSED:
 616:c/usbd_ctlreq.c ****   case USBD_STATE_CONFIGURED:
 617:c/usbd_ctlreq.c ****     
 618:c/usbd_ctlreq.c **** #if ( USBD_SELF_POWERED == 1)
 619:c/usbd_ctlreq.c ****     pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 620:c/usbd_ctlreq.c **** #else
 621:c/usbd_ctlreq.c ****     pdev->dev_config_status = 0;                                   
 622:c/usbd_ctlreq.c **** #endif
 623:c/usbd_ctlreq.c ****                       
 624:c/usbd_ctlreq.c ****     if (pdev->dev_remote_wakeup) 
 625:c/usbd_ctlreq.c ****     {
 626:c/usbd_ctlreq.c ****        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 627:c/usbd_ctlreq.c ****     }
 628:c/usbd_ctlreq.c ****     
 629:c/usbd_ctlreq.c ****     USBD_CtlSendData (pdev, 
 630:c/usbd_ctlreq.c ****                       (uint8_t *)& pdev->dev_config_status,
 631:c/usbd_ctlreq.c ****                       2);
 632:c/usbd_ctlreq.c ****     break;
 633:c/usbd_ctlreq.c ****     
 634:c/usbd_ctlreq.c ****   default :
 635:c/usbd_ctlreq.c ****     USBD_CtlError(pdev , req);                        
 636:c/usbd_ctlreq.c ****     break;
 637:c/usbd_ctlreq.c ****   }
 638:c/usbd_ctlreq.c **** }
 639:c/usbd_ctlreq.c **** 
 640:c/usbd_ctlreq.c **** 
 641:c/usbd_ctlreq.c **** /**
 642:c/usbd_ctlreq.c **** * @brief  USBD_SetFeature
 643:c/usbd_ctlreq.c **** *         Handle Set device feature request
 644:c/usbd_ctlreq.c **** * @param  pdev: device instance
 645:c/usbd_ctlreq.c **** * @param  req: usb request
 646:c/usbd_ctlreq.c **** * @retval status
 647:c/usbd_ctlreq.c **** */
 648:c/usbd_ctlreq.c **** static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
 649:c/usbd_ctlreq.c ****                             USBD_SetupReqTypedef *req)
 650:c/usbd_ctlreq.c **** {
 651:c/usbd_ctlreq.c **** 
 652:c/usbd_ctlreq.c ****   if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 653:c/usbd_ctlreq.c ****   {
 654:c/usbd_ctlreq.c ****     pdev->dev_remote_wakeup = 1;  
 655:c/usbd_ctlreq.c ****     pdev->pClass->Setup (pdev, req);   
 656:c/usbd_ctlreq.c ****     USBD_CtlSendStatus(pdev);
 657:c/usbd_ctlreq.c ****   }
 658:c/usbd_ctlreq.c **** 
 659:c/usbd_ctlreq.c **** }
 660:c/usbd_ctlreq.c **** 
 661:c/usbd_ctlreq.c **** 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 13


 662:c/usbd_ctlreq.c **** /**
 663:c/usbd_ctlreq.c **** * @brief  USBD_ClrFeature
 664:c/usbd_ctlreq.c **** *         Handle clear device feature request
 665:c/usbd_ctlreq.c **** * @param  pdev: device instance
 666:c/usbd_ctlreq.c **** * @param  req: usb request
 667:c/usbd_ctlreq.c **** * @retval status
 668:c/usbd_ctlreq.c **** */
 669:c/usbd_ctlreq.c **** static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
 670:c/usbd_ctlreq.c ****                             USBD_SetupReqTypedef *req)
 671:c/usbd_ctlreq.c **** {
 672:c/usbd_ctlreq.c ****   switch (pdev->dev_state)
 673:c/usbd_ctlreq.c ****   {
 674:c/usbd_ctlreq.c ****   case USBD_STATE_ADDRESSED:
 675:c/usbd_ctlreq.c ****   case USBD_STATE_CONFIGURED:
 676:c/usbd_ctlreq.c ****     if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 677:c/usbd_ctlreq.c ****     {
 678:c/usbd_ctlreq.c ****       pdev->dev_remote_wakeup = 0; 
 679:c/usbd_ctlreq.c ****       pdev->pClass->Setup (pdev, req);   
 680:c/usbd_ctlreq.c ****       USBD_CtlSendStatus(pdev);
 681:c/usbd_ctlreq.c ****     }
 682:c/usbd_ctlreq.c ****     break;
 683:c/usbd_ctlreq.c ****     
 684:c/usbd_ctlreq.c ****   default :
 685:c/usbd_ctlreq.c ****      USBD_CtlError(pdev , req);
 686:c/usbd_ctlreq.c ****     break;
 687:c/usbd_ctlreq.c ****   }
 688:c/usbd_ctlreq.c **** }
 689:c/usbd_ctlreq.c **** 
 690:c/usbd_ctlreq.c **** /**
 691:c/usbd_ctlreq.c **** * @brief  USBD_ParseSetupRequest 
 692:c/usbd_ctlreq.c **** *         Copy buffer into setup structure
 693:c/usbd_ctlreq.c **** * @param  pdev: device instance
 694:c/usbd_ctlreq.c **** * @param  req: usb request
 695:c/usbd_ctlreq.c **** * @retval None
 696:c/usbd_ctlreq.c **** */
 697:c/usbd_ctlreq.c **** 
 698:c/usbd_ctlreq.c **** void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
 699:c/usbd_ctlreq.c **** {
 700:c/usbd_ctlreq.c ****   req->bmRequest     = *(uint8_t *)  (pdata);
 701:c/usbd_ctlreq.c ****   req->bRequest      = *(uint8_t *)  (pdata +  1);
 702:c/usbd_ctlreq.c ****   req->wValue        = SWAPBYTE      (pdata +  2);
 703:c/usbd_ctlreq.c ****   req->wIndex        = SWAPBYTE      (pdata +  4);
 704:c/usbd_ctlreq.c ****   req->wLength       = SWAPBYTE      (pdata +  6);
 705:c/usbd_ctlreq.c **** 
 706:c/usbd_ctlreq.c **** }
 707:c/usbd_ctlreq.c **** 
 708:c/usbd_ctlreq.c **** /**
 709:c/usbd_ctlreq.c **** * @brief  USBD_CtlError 
 710:c/usbd_ctlreq.c **** *         Handle USB low level Error
 711:c/usbd_ctlreq.c **** * @param  pdev: device instance
 712:c/usbd_ctlreq.c **** * @param  req: usb request
 713:c/usbd_ctlreq.c **** * @retval None
 714:c/usbd_ctlreq.c **** */
 715:c/usbd_ctlreq.c **** 
 716:c/usbd_ctlreq.c **** void USBD_CtlError( USBD_HandleTypeDef *pdev ,
  25              		.loc 1 716 0
  26              		.cfi_startproc
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 14


  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              	.LVL0:
  30 0000 10B5     		push	{r4, lr}
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 4, -8
  33              		.cfi_offset 14, -4
  34              		.loc 1 716 0
  35 0002 0446     		mov	r4, r0
 717:c/usbd_ctlreq.c ****                             USBD_SetupReqTypedef *req)
 718:c/usbd_ctlreq.c **** {
 719:c/usbd_ctlreq.c ****   USBD_LL_StallEP(pdev , 0x80);
  36              		.loc 1 719 0
  37 0004 8021     		movs	r1, #128
  38 0006 FFF7FEFF 		bl	USBD_LL_StallEP
  39              	.LVL1:
 720:c/usbd_ctlreq.c ****   USBD_LL_StallEP(pdev , 0);
  40              		.loc 1 720 0
  41 000a 2046     		mov	r0, r4
 721:c/usbd_ctlreq.c **** }
  42              		.loc 1 721 0
  43 000c BDE81040 		pop	{r4, lr}
  44              		.cfi_restore 14
  45              		.cfi_restore 4
  46              		.cfi_def_cfa_offset 0
  47              	.LVL2:
 720:c/usbd_ctlreq.c ****   USBD_LL_StallEP(pdev , 0);
  48              		.loc 1 720 0
  49 0010 0021     		movs	r1, #0
  50 0012 FFF7FEBF 		b	USBD_LL_StallEP
  51              	.LVL3:
  52              		.cfi_endproc
  53              	.LFE78:
  55              		.section	.text.USBD_StdDevReq,"ax",%progbits
  56              		.align	1
  57              		.global	USBD_StdDevReq
  58              		.syntax unified
  59              		.thumb
  60              		.thumb_func
  61              		.fpu softvfp
  63              	USBD_StdDevReq:
  64              	.LFB64:
 120:c/usbd_ctlreq.c ****   USBD_StatusTypeDef ret = USBD_OK;  
  65              		.loc 1 120 0
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 8
  68              		@ frame_needed = 0, uses_anonymous_args = 0
  69              	.LVL4:
  70 0000 37B5     		push	{r0, r1, r2, r4, r5, lr}
  71              		.cfi_def_cfa_offset 24
  72              		.cfi_offset 4, -12
  73              		.cfi_offset 5, -8
  74              		.cfi_offset 14, -4
 123:c/usbd_ctlreq.c ****   {
  75              		.loc 1 123 0
  76 0002 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 120:c/usbd_ctlreq.c ****   USBD_StatusTypeDef ret = USBD_OK;  
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 15


  77              		.loc 1 120 0
  78 0004 0446     		mov	r4, r0
  79              	.LVL5:
  80 0006 0D46     		mov	r5, r1
 123:c/usbd_ctlreq.c ****   {
  81              		.loc 1 123 0
  82 0008 092B     		cmp	r3, #9
  83 000a 00F28180 		bhi	.L3
  84 000e DFE813F0 		tbh	[pc, r3, lsl #1]
  85              	.L5:
  86 0012 D000     		.2byte	(.L4-.L5)/2
  87 0014 EC00     		.2byte	(.L6-.L5)/2
  88 0016 7F00     		.2byte	(.L3-.L5)/2
  89 0018 E000     		.2byte	(.L7-.L5)/2
  90 001a 7F00     		.2byte	(.L3-.L5)/2
  91 001c 7400     		.2byte	(.L8-.L5)/2
  92 001e 0A00     		.2byte	(.L9-.L5)/2
  93 0020 7F00     		.2byte	(.L3-.L5)/2
  94 0022 C000     		.2byte	(.L10-.L5)/2
  95 0024 9400     		.2byte	(.L11-.L5)/2
  96              		.p2align 1
  97              	.L9:
  98              	.LVL6:
  99              	.LBB16:
 100              	.LBB17:
 338:c/usbd_ctlreq.c ****   { 
 101              		.loc 1 338 0
 102 0026 4988     		ldrh	r1, [r1, #2]
 103              	.LVL7:
 104 0028 0B0A     		lsrs	r3, r1, #8
 105 002a 013B     		subs	r3, r3, #1
 106 002c 062B     		cmp	r3, #6
 107 002e 6FD8     		bhi	.L3
 108 0030 DFE803F0 		tbb	[pc, r3]
 109              	.L14:
 110 0034 04       		.byte	(.L13-.L14)/2
 111 0035 1C       		.byte	(.L15-.L14)/2
 112 0036 29       		.byte	(.L16-.L14)/2
 113 0037 6E       		.byte	(.L3-.L14)/2
 114 0038 6E       		.byte	(.L3-.L14)/2
 115 0039 50       		.byte	(.L17-.L14)/2
 116 003a 59       		.byte	(.L18-.L14)/2
 117 003b 00       		.p2align 1
 118              	.L13:
 346:c/usbd_ctlreq.c ****     break;
 119              		.loc 1 346 0
 120 003c D0F81032 		ldr	r3, [r0, #528]
 121 0040 1B68     		ldr	r3, [r3]
 122              	.L71:
 366:c/usbd_ctlreq.c ****       break;
 123              		.loc 1 366 0
 124 0042 0DF10601 		add	r1, sp, #6
 125 0046 207C     		ldrb	r0, [r4, #16]	@ zero_extendqisi2
 126              	.LVL8:
 127 0048 9847     		blx	r3
 128              	.LVL9:
 129              	.L19:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 16


 430:c/usbd_ctlreq.c ****   {
 130              		.loc 1 430 0
 131 004a BDF80620 		ldrh	r2, [sp, #6]
 132 004e 002A     		cmp	r2, #0
 133 0050 6ED0     		beq	.L31
 134 0052 EB88     		ldrh	r3, [r5, #6]
 135 0054 002B     		cmp	r3, #0
 136 0056 6BD0     		beq	.L31
 433:c/usbd_ctlreq.c ****     
 137              		.loc 1 433 0
 138 0058 9A42     		cmp	r2, r3
 139 005a 28BF     		it	cs
 140 005c 1A46     		movcs	r2, r3
 435:c/usbd_ctlreq.c ****                       pbuf,
 141              		.loc 1 435 0
 142 005e 0146     		mov	r1, r0
 433:c/usbd_ctlreq.c ****     
 143              		.loc 1 433 0
 144 0060 ADF80620 		strh	r2, [sp, #6]	@ movhi
 145              	.LVL10:
 146              	.L76:
 147              	.LBE17:
 148              	.LBE16:
 149              	.LBB19:
 150              	.LBB20:
 629:c/usbd_ctlreq.c ****                       (uint8_t *)& pdev->dev_config_status,
 151              		.loc 1 629 0
 152 0064 2046     		mov	r0, r4
 153 0066 FFF7FEFF 		bl	USBD_CtlSendData
 154              	.LVL11:
 155 006a 61E0     		b	.L31
 156              	.LVL12:
 157              	.L15:
 158              	.LBE20:
 159              	.LBE19:
 160              	.LBB22:
 161              	.LBB18:
 350:c/usbd_ctlreq.c ****     {
 162              		.loc 1 350 0
 163 006c 027C     		ldrb	r2, [r0, #16]	@ zero_extendqisi2
 164 006e D0F81432 		ldr	r3, [r0, #532]
 165 0072 32B9     		cbnz	r2, .L20
 352:c/usbd_ctlreq.c ****       pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 166              		.loc 1 352 0
 167 0074 9B6A     		ldr	r3, [r3, #40]
 168              	.L78:
 357:c/usbd_ctlreq.c ****       pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 169              		.loc 1 357 0
 170 0076 0DF10600 		add	r0, sp, #6
 171              	.LVL13:
 172 007a 9847     		blx	r3
 173              	.LVL14:
 358:c/usbd_ctlreq.c ****     }
 174              		.loc 1 358 0
 175 007c 0223     		movs	r3, #2
 176              	.L72:
 416:c/usbd_ctlreq.c ****       break; 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 17


 177              		.loc 1 416 0
 178 007e 4370     		strb	r3, [r0, #1]
 179 0080 E3E7     		b	.L19
 180              	.LVL15:
 181              	.L20:
 357:c/usbd_ctlreq.c ****       pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 182              		.loc 1 357 0
 183 0082 DB6A     		ldr	r3, [r3, #44]
 184 0084 F7E7     		b	.L78
 185              	.L16:
 363:c/usbd_ctlreq.c ****     {
 186              		.loc 1 363 0
 187 0086 C9B2     		uxtb	r1, r1
 188 0088 0529     		cmp	r1, #5
 189 008a 1CD8     		bhi	.L21
 190 008c DFE801F0 		tbb	[pc, r1]
 191              	.L23:
 192 0090 03       		.byte	(.L22-.L23)/2
 193 0091 07       		.byte	(.L24-.L23)/2
 194 0092 0B       		.byte	(.L25-.L23)/2
 195 0093 0F       		.byte	(.L26-.L23)/2
 196 0094 13       		.byte	(.L27-.L23)/2
 197 0095 17       		.byte	(.L28-.L23)/2
 198              		.p2align 1
 199              	.L22:
 366:c/usbd_ctlreq.c ****       break;
 200              		.loc 1 366 0
 201 0096 D0F81032 		ldr	r3, [r0, #528]
 202 009a 5B68     		ldr	r3, [r3, #4]
 203 009c D1E7     		b	.L71
 204              	.L24:
 370:c/usbd_ctlreq.c ****       break;
 205              		.loc 1 370 0
 206 009e D0F81032 		ldr	r3, [r0, #528]
 207 00a2 9B68     		ldr	r3, [r3, #8]
 208 00a4 CDE7     		b	.L71
 209              	.L25:
 374:c/usbd_ctlreq.c ****       break;
 210              		.loc 1 374 0
 211 00a6 D0F81032 		ldr	r3, [r0, #528]
 212 00aa DB68     		ldr	r3, [r3, #12]
 213 00ac C9E7     		b	.L71
 214              	.L26:
 378:c/usbd_ctlreq.c ****       break;
 215              		.loc 1 378 0
 216 00ae D0F81032 		ldr	r3, [r0, #528]
 217 00b2 1B69     		ldr	r3, [r3, #16]
 218 00b4 C5E7     		b	.L71
 219              	.L27:
 382:c/usbd_ctlreq.c ****       break;
 220              		.loc 1 382 0
 221 00b6 D0F81032 		ldr	r3, [r0, #528]
 222 00ba 5B69     		ldr	r3, [r3, #20]
 223 00bc C1E7     		b	.L71
 224              	.L28:
 386:c/usbd_ctlreq.c ****       break;
 225              		.loc 1 386 0
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 18


 226 00be D0F81032 		ldr	r3, [r0, #528]
 227 00c2 9B69     		ldr	r3, [r3, #24]
 228 00c4 BDE7     		b	.L71
 229              	.L21:
 391:c/usbd_ctlreq.c ****       break;
 230              		.loc 1 391 0
 231 00c6 D0F81432 		ldr	r3, [r0, #532]
 232 00ca 0DF10602 		add	r2, sp, #6
 233 00ce 9B6B     		ldr	r3, [r3, #56]
 234 00d0 9847     		blx	r3
 235              	.LVL16:
 236 00d2 BAE7     		b	.L19
 237              	.LVL17:
 238              	.L17:
 401:c/usbd_ctlreq.c ****     {
 239              		.loc 1 401 0
 240 00d4 037C     		ldrb	r3, [r0, #16]	@ zero_extendqisi2
 241 00d6 DBB9     		cbnz	r3, .L3
 403:c/usbd_ctlreq.c ****       break;
 242              		.loc 1 403 0
 243 00d8 D0F81432 		ldr	r3, [r0, #532]
 244 00dc 0DF10600 		add	r0, sp, #6
 245              	.LVL18:
 246 00e0 5B6B     		ldr	r3, [r3, #52]
 247 00e2 9847     		blx	r3
 248              	.LVL19:
 249 00e4 B1E7     		b	.L19
 250              	.LVL20:
 251              	.L18:
 413:c/usbd_ctlreq.c ****     {
 252              		.loc 1 413 0
 253 00e6 037C     		ldrb	r3, [r0, #16]	@ zero_extendqisi2
 254 00e8 93B9     		cbnz	r3, .L3
 415:c/usbd_ctlreq.c ****       pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 255              		.loc 1 415 0
 256 00ea D0F81432 		ldr	r3, [r0, #532]
 257 00ee 0DF10600 		add	r0, sp, #6
 258              	.LVL21:
 259 00f2 1B6B     		ldr	r3, [r3, #48]
 260 00f4 9847     		blx	r3
 261              	.LVL22:
 416:c/usbd_ctlreq.c ****       break; 
 262              		.loc 1 416 0
 263 00f6 0723     		movs	r3, #7
 264 00f8 C1E7     		b	.L72
 265              	.LVL23:
 266              	.L8:
 267              	.LBE18:
 268              	.LBE22:
 269              	.LBB23:
 270              	.LBB24:
 454:c/usbd_ctlreq.c ****   {
 271              		.loc 1 454 0
 272 00fa 8B88     		ldrh	r3, [r1, #4]
 273 00fc 43B9     		cbnz	r3, .L3
 274 00fe CB88     		ldrh	r3, [r1, #6]
 275 0100 33B9     		cbnz	r3, .L3
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 19


 458:c/usbd_ctlreq.c ****     {
 276              		.loc 1 458 0
 277 0102 90F8FC31 		ldrb	r3, [r0, #508]	@ zero_extendqisi2
 456:c/usbd_ctlreq.c ****     
 278              		.loc 1 456 0
 279 0106 8D78     		ldrb	r5, [r1, #2]	@ zero_extendqisi2
 458:c/usbd_ctlreq.c ****     {
 280              		.loc 1 458 0
 281 0108 032B     		cmp	r3, #3
 456:c/usbd_ctlreq.c ****     
 282              		.loc 1 456 0
 283 010a 05F07F05 		and	r5, r5, #127
 284              	.LVL24:
 458:c/usbd_ctlreq.c ****     {
 285              		.loc 1 458 0
 286 010e 03D1     		bne	.L33
 287              	.LVL25:
 288              	.L3:
 289              	.LBE24:
 290              	.LBE23:
 156:c/usbd_ctlreq.c ****     break;
 291              		.loc 1 156 0
 292 0110 2046     		mov	r0, r4
 293 0112 FFF7FEFF 		bl	USBD_CtlError.constprop.0
 294              	.LVL26:
 157:c/usbd_ctlreq.c ****   }
 295              		.loc 1 157 0
 296 0116 0BE0     		b	.L31
 297              	.LVL27:
 298              	.L33:
 299              	.LBB27:
 300              	.LBB25:
 464:c/usbd_ctlreq.c ****       USBD_LL_SetUSBAddress(pdev, dev_addr);               
 301              		.loc 1 464 0
 302 0118 80F8FE51 		strb	r5, [r0, #510]
 465:c/usbd_ctlreq.c ****       USBD_CtlSendStatus(pdev);                         
 303              		.loc 1 465 0
 304 011c 2946     		mov	r1, r5
 305              	.LVL28:
 306 011e FFF7FEFF 		bl	USBD_LL_SetUSBAddress
 307              	.LVL29:
 466:c/usbd_ctlreq.c ****       
 308              		.loc 1 466 0
 309 0122 2046     		mov	r0, r4
 310 0124 FFF7FEFF 		bl	USBD_CtlSendStatus
 311              	.LVL30:
 468:c/usbd_ctlreq.c ****       {
 312              		.loc 1 468 0
 313 0128 2DB1     		cbz	r5, .L34
 470:c/usbd_ctlreq.c ****       } 
 314              		.loc 1 470 0
 315 012a 0223     		movs	r3, #2
 316              	.L77:
 474:c/usbd_ctlreq.c ****       }
 317              		.loc 1 474 0
 318 012c 84F8FC31 		strb	r3, [r4, #508]
 319              	.LVL31:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 20


 320              	.L31:
 321              	.LBE25:
 322              	.LBE27:
 161:c/usbd_ctlreq.c **** 
 323              		.loc 1 161 0
 324 0130 0020     		movs	r0, #0
 325 0132 03B0     		add	sp, sp, #12
 326              		.cfi_remember_state
 327              		.cfi_def_cfa_offset 12
 328              		@ sp needed
 329 0134 30BD     		pop	{r4, r5, pc}
 330              	.LVL32:
 331              	.L34:
 332              		.cfi_restore_state
 333              	.LBB28:
 334              	.LBB26:
 474:c/usbd_ctlreq.c ****       }
 335              		.loc 1 474 0
 336 0136 0123     		movs	r3, #1
 337 0138 F8E7     		b	.L77
 338              	.LVL33:
 339              	.L11:
 340              	.LBE26:
 341              	.LBE28:
 342              	.LBB29:
 343              	.LBB30:
 497:c/usbd_ctlreq.c ****   
 344              		.loc 1 497 0
 345 013a 8978     		ldrb	r1, [r1, #2]	@ zero_extendqisi2
 346              	.LVL34:
 347 013c 304D     		ldr	r5, .L79
 348              	.LVL35:
 499:c/usbd_ctlreq.c ****   {            
 349              		.loc 1 499 0
 350 013e 0129     		cmp	r1, #1
 497:c/usbd_ctlreq.c ****   
 351              		.loc 1 497 0
 352 0140 2970     		strb	r1, [r5]
 499:c/usbd_ctlreq.c ****   {            
 353              		.loc 1 499 0
 354 0142 E5D8     		bhi	.L3
 505:c/usbd_ctlreq.c ****     {
 355              		.loc 1 505 0
 356 0144 90F8FC31 		ldrb	r3, [r0, #508]	@ zero_extendqisi2
 357 0148 022B     		cmp	r3, #2
 358 014a 0CD0     		beq	.L36
 359 014c 032B     		cmp	r3, #3
 360 014e DFD1     		bne	.L3
 526:c/usbd_ctlreq.c ****       {                           
 361              		.loc 1 526 0
 362 0150 B1B9     		cbnz	r1, .L39
 528:c/usbd_ctlreq.c ****         pdev->dev_config = cfgidx;          
 363              		.loc 1 528 0
 364 0152 0223     		movs	r3, #2
 529:c/usbd_ctlreq.c ****         USBD_ClrClassConfig(pdev , cfgidx);
 365              		.loc 1 529 0
 366 0154 4160     		str	r1, [r0, #4]
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 21


 528:c/usbd_ctlreq.c ****         pdev->dev_config = cfgidx;          
 367              		.loc 1 528 0
 368 0156 80F8FC31 		strb	r3, [r0, #508]
 530:c/usbd_ctlreq.c ****         USBD_CtlSendStatus(pdev);
 369              		.loc 1 530 0
 370 015a FFF7FEFF 		bl	USBD_ClrClassConfig
 371              	.LVL36:
 372              	.L74:
 373              	.LBE30:
 374              	.LBE29:
 375              	.LBB32:
 376              	.LBB33:
 680:c/usbd_ctlreq.c ****     }
 377              		.loc 1 680 0
 378 015e 2046     		mov	r0, r4
 379 0160 FFF7FEFF 		bl	USBD_CtlSendStatus
 380              	.LVL37:
 381 0164 E4E7     		b	.L31
 382              	.LVL38:
 383              	.L36:
 384              	.LBE33:
 385              	.LBE32:
 386              	.LBB35:
 387              	.LBB31:
 508:c/usbd_ctlreq.c ****       {                                			   							   							   				
 388              		.loc 1 508 0
 389 0166 0029     		cmp	r1, #0
 390 0168 F9D0     		beq	.L74
 510:c/usbd_ctlreq.c ****         pdev->dev_state = USBD_STATE_CONFIGURED;
 391              		.loc 1 510 0
 392 016a 0121     		movs	r1, #1
 511:c/usbd_ctlreq.c ****         if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 393              		.loc 1 511 0
 394 016c 0323     		movs	r3, #3
 510:c/usbd_ctlreq.c ****         pdev->dev_state = USBD_STATE_CONFIGURED;
 395              		.loc 1 510 0
 396 016e 4160     		str	r1, [r0, #4]
 511:c/usbd_ctlreq.c ****         if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 397              		.loc 1 511 0
 398 0170 80F8FC31 		strb	r3, [r0, #508]
 399              	.LVL39:
 400              	.L73:
 541:c/usbd_ctlreq.c ****         {
 401              		.loc 1 541 0
 402 0174 2046     		mov	r0, r4
 403 0176 FFF7FEFF 		bl	USBD_SetClassConfig
 404              	.LVL40:
 405 017a 0228     		cmp	r0, #2
 406 017c EFD1     		bne	.L74
 407 017e C7E7     		b	.L3
 408              	.LVL41:
 409              	.L39:
 534:c/usbd_ctlreq.c ****       {
 410              		.loc 1 534 0
 411 0180 4168     		ldr	r1, [r0, #4]
 412 0182 0129     		cmp	r1, #1
 413 0184 EBD0     		beq	.L74
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 22


 537:c/usbd_ctlreq.c ****         
 414              		.loc 1 537 0
 415 0186 C9B2     		uxtb	r1, r1
 416 0188 FFF7FEFF 		bl	USBD_ClrClassConfig
 417              	.LVL42:
 540:c/usbd_ctlreq.c ****         if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 418              		.loc 1 540 0
 419 018c 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 420 018e 6160     		str	r1, [r4, #4]
 421 0190 F0E7     		b	.L73
 422              	.LVL43:
 423              	.L10:
 424              	.LBE31:
 425              	.LBE35:
 426              	.LBB36:
 427              	.LBB37:
 572:c/usbd_ctlreq.c ****   {                   
 428              		.loc 1 572 0
 429 0192 CA88     		ldrh	r2, [r1, #6]
 430 0194 012A     		cmp	r2, #1
 431 0196 BBD1     		bne	.L3
 578:c/usbd_ctlreq.c ****     {
 432              		.loc 1 578 0
 433 0198 90F8FC31 		ldrb	r3, [r0, #508]	@ zero_extendqisi2
 434 019c 022B     		cmp	r3, #2
 435 019e 03D0     		beq	.L41
 436 01a0 032B     		cmp	r3, #3
 437 01a2 B5D1     		bne	.L3
 589:c/usbd_ctlreq.c ****                         (uint8_t *)&pdev->dev_config,
 438              		.loc 1 589 0
 439 01a4 011D     		adds	r1, r0, #4
 440              	.LVL44:
 441 01a6 5DE7     		b	.L76
 442              	.LVL45:
 443              	.L41:
 581:c/usbd_ctlreq.c ****       USBD_CtlSendData (pdev, 
 444              		.loc 1 581 0
 445 01a8 0146     		mov	r1, r0
 446              	.LVL46:
 447 01aa 0023     		movs	r3, #0
 448 01ac 41F8083F 		str	r3, [r1, #8]!
 449 01b0 58E7     		b	.L76
 450              	.LVL47:
 451              	.L4:
 452              	.LBE37:
 453              	.LBE36:
 454              	.LBB38:
 455              	.LBB21:
 613:c/usbd_ctlreq.c ****   {
 456              		.loc 1 613 0
 457 01b2 90F8FC31 		ldrb	r3, [r0, #508]	@ zero_extendqisi2
 458 01b6 023B     		subs	r3, r3, #2
 459 01b8 012B     		cmp	r3, #1
 460 01ba A9D8     		bhi	.L3
 619:c/usbd_ctlreq.c **** #else
 461              		.loc 1 619 0
 462 01bc 0123     		movs	r3, #1
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 23


 463 01be C360     		str	r3, [r0, #12]
 624:c/usbd_ctlreq.c ****     {
 464              		.loc 1 624 0
 465 01c0 D0F80432 		ldr	r3, [r0, #516]
 466 01c4 0BB1     		cbz	r3, .L45
 626:c/usbd_ctlreq.c ****     }
 467              		.loc 1 626 0
 468 01c6 0323     		movs	r3, #3
 469 01c8 C360     		str	r3, [r0, #12]
 470              	.L45:
 629:c/usbd_ctlreq.c ****                       (uint8_t *)& pdev->dev_config_status,
 471              		.loc 1 629 0
 472 01ca 0222     		movs	r2, #2
 473 01cc 04F10C01 		add	r1, r4, #12
 474              	.LVL48:
 475 01d0 48E7     		b	.L76
 476              	.LVL49:
 477              	.L7:
 478              	.LBE21:
 479              	.LBE38:
 480              	.LBB39:
 481              	.LBB40:
 652:c/usbd_ctlreq.c ****   {
 482              		.loc 1 652 0
 483 01d2 4B88     		ldrh	r3, [r1, #2]
 484 01d4 012B     		cmp	r3, #1
 485 01d6 ABD1     		bne	.L31
 486              	.LVL50:
 487              	.L75:
 488              	.LBE40:
 489              	.LBE39:
 490              	.LBB41:
 491              	.LBB34:
 678:c/usbd_ctlreq.c ****       pdev->pClass->Setup (pdev, req);   
 492              		.loc 1 678 0
 493 01d8 C4F80432 		str	r3, [r4, #516]
 679:c/usbd_ctlreq.c ****       USBD_CtlSendStatus(pdev);
 494              		.loc 1 679 0
 495 01dc D4F81432 		ldr	r3, [r4, #532]
 496 01e0 2946     		mov	r1, r5
 497              	.LVL51:
 498 01e2 9B68     		ldr	r3, [r3, #8]
 499 01e4 2046     		mov	r0, r4
 500              	.LVL52:
 501 01e6 9847     		blx	r3
 502              	.LVL53:
 503 01e8 B9E7     		b	.L74
 504              	.LVL54:
 505              	.L6:
 672:c/usbd_ctlreq.c ****   {
 506              		.loc 1 672 0
 507 01ea 90F8FC31 		ldrb	r3, [r0, #508]	@ zero_extendqisi2
 508 01ee 023B     		subs	r3, r3, #2
 509 01f0 012B     		cmp	r3, #1
 510 01f2 8DD8     		bhi	.L3
 676:c/usbd_ctlreq.c ****     {
 511              		.loc 1 676 0
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 24


 512 01f4 4B88     		ldrh	r3, [r1, #2]
 513 01f6 012B     		cmp	r3, #1
 514 01f8 9AD1     		bne	.L31
 678:c/usbd_ctlreq.c ****       pdev->pClass->Setup (pdev, req);   
 515              		.loc 1 678 0
 516 01fa 0023     		movs	r3, #0
 517 01fc ECE7     		b	.L75
 518              	.L80:
 519 01fe 00BF     		.align	2
 520              	.L79:
 521 0200 00000000 		.word	.LANCHOR0
 522              	.LBE34:
 523              	.LBE41:
 524              		.cfi_endproc
 525              	.LFE64:
 527              		.section	.text.USBD_StdItfReq,"ax",%progbits
 528              		.align	1
 529              		.global	USBD_StdItfReq
 530              		.syntax unified
 531              		.thumb
 532              		.thumb_func
 533              		.fpu softvfp
 535              	USBD_StdItfReq:
 536              	.LFB65:
 171:c/usbd_ctlreq.c ****   USBD_StatusTypeDef ret = USBD_OK; 
 537              		.loc 1 171 0
 538              		.cfi_startproc
 539              		@ args = 0, pretend = 0, frame = 0
 540              		@ frame_needed = 0, uses_anonymous_args = 0
 541              	.LVL55:
 542 0000 38B5     		push	{r3, r4, r5, lr}
 543              		.cfi_def_cfa_offset 16
 544              		.cfi_offset 3, -16
 545              		.cfi_offset 4, -12
 546              		.cfi_offset 5, -8
 547              		.cfi_offset 14, -4
 174:c/usbd_ctlreq.c ****   {
 548              		.loc 1 174 0
 549 0002 90F8FC31 		ldrb	r3, [r0, #508]	@ zero_extendqisi2
 171:c/usbd_ctlreq.c ****   USBD_StatusTypeDef ret = USBD_OK; 
 550              		.loc 1 171 0
 551 0006 0446     		mov	r4, r0
 552              	.LVL56:
 174:c/usbd_ctlreq.c ****   {
 553              		.loc 1 174 0
 554 0008 032B     		cmp	r3, #3
 171:c/usbd_ctlreq.c ****   USBD_StatusTypeDef ret = USBD_OK; 
 555              		.loc 1 171 0
 556 000a 0D46     		mov	r5, r1
 174:c/usbd_ctlreq.c ****   {
 557              		.loc 1 174 0
 558 000c 0DD1     		bne	.L86
 178:c/usbd_ctlreq.c ****     {
 559              		.loc 1 178 0
 560 000e 0B79     		ldrb	r3, [r1, #4]	@ zero_extendqisi2
 561 0010 012B     		cmp	r3, #1
 562 0012 0AD8     		bhi	.L86
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 25


 180:c/usbd_ctlreq.c ****       
 563              		.loc 1 180 0
 564 0014 D0F81432 		ldr	r3, [r0, #532]
 565 0018 9B68     		ldr	r3, [r3, #8]
 566 001a 9847     		blx	r3
 567              	.LVL57:
 182:c/usbd_ctlreq.c ****       {
 568              		.loc 1 182 0
 569 001c EB88     		ldrh	r3, [r5, #6]
 570 001e 13B9     		cbnz	r3, .L85
 184:c/usbd_ctlreq.c ****       }
 571              		.loc 1 184 0
 572 0020 2046     		mov	r0, r4
 573 0022 FFF7FEFF 		bl	USBD_CtlSendStatus
 574              	.LVL58:
 575              	.L85:
 198:c/usbd_ctlreq.c **** 
 576              		.loc 1 198 0
 577 0026 0020     		movs	r0, #0
 578 0028 38BD     		pop	{r3, r4, r5, pc}
 579              	.LVL59:
 580              	.L86:
 194:c/usbd_ctlreq.c ****     break;
 581              		.loc 1 194 0
 582 002a FFF7FEFF 		bl	USBD_CtlError.constprop.0
 583              	.LVL60:
 195:c/usbd_ctlreq.c ****   }
 584              		.loc 1 195 0
 585 002e FAE7     		b	.L85
 586              		.cfi_endproc
 587              	.LFE65:
 589              		.section	.text.USBD_StdEPReq,"ax",%progbits
 590              		.align	1
 591              		.global	USBD_StdEPReq
 592              		.syntax unified
 593              		.thumb
 594              		.thumb_func
 595              		.fpu softvfp
 597              	USBD_StdEPReq:
 598              	.LFB66:
 208:c/usbd_ctlreq.c ****   
 599              		.loc 1 208 0
 600              		.cfi_startproc
 601              		@ args = 0, pretend = 0, frame = 0
 602              		@ frame_needed = 0, uses_anonymous_args = 0
 603              	.LVL61:
 604 0000 70B5     		push	{r4, r5, r6, lr}
 605              		.cfi_def_cfa_offset 16
 606              		.cfi_offset 4, -16
 607              		.cfi_offset 5, -12
 608              		.cfi_offset 6, -8
 609              		.cfi_offset 14, -4
 216:c/usbd_ctlreq.c ****   {
 610              		.loc 1 216 0
 611 0002 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 213:c/usbd_ctlreq.c ****   
 612              		.loc 1 213 0
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 26


 613 0004 8E88     		ldrh	r6, [r1, #4]
 216:c/usbd_ctlreq.c ****   {
 614              		.loc 1 216 0
 615 0006 02F06002 		and	r2, r2, #96
 616 000a 202A     		cmp	r2, #32
 208:c/usbd_ctlreq.c ****   
 617              		.loc 1 208 0
 618 000c 0446     		mov	r4, r0
 619              	.LVL62:
 620 000e 0D46     		mov	r5, r1
 213:c/usbd_ctlreq.c ****   
 621              		.loc 1 213 0
 622 0010 F3B2     		uxtb	r3, r6
 623              	.LVL63:
 216:c/usbd_ctlreq.c ****   {
 624              		.loc 1 216 0
 625 0012 05D1     		bne	.L88
 218:c/usbd_ctlreq.c ****     
 626              		.loc 1 218 0
 627 0014 D0F81432 		ldr	r3, [r0, #532]
 628              	.LVL64:
 629 0018 9B68     		ldr	r3, [r3, #8]
 630 001a 9847     		blx	r3
 631              	.LVL65:
 632              	.L89:
 323:c/usbd_ctlreq.c **** /**
 633              		.loc 1 323 0
 634 001c 0020     		movs	r0, #0
 635 001e 70BD     		pop	{r4, r5, r6, pc}
 636              	.LVL66:
 637              	.L88:
 223:c/usbd_ctlreq.c ****   {
 638              		.loc 1 223 0
 639 0020 4A78     		ldrb	r2, [r1, #1]	@ zero_extendqisi2
 640 0022 012A     		cmp	r2, #1
 641 0024 1CD0     		beq	.L90
 642 0026 2AD3     		bcc	.L91
 643 0028 032A     		cmp	r2, #3
 644 002a F7D1     		bne	.L89
 228:c/usbd_ctlreq.c ****     {
 645              		.loc 1 228 0
 646 002c 90F8FC21 		ldrb	r2, [r0, #508]	@ zero_extendqisi2
 647 0030 022A     		cmp	r2, #2
 648 0032 40D0     		beq	.L102
 649 0034 032A     		cmp	r2, #3
 650 0036 02D0     		beq	.L95
 651              	.L125:
 314:c/usbd_ctlreq.c ****       break;
 652              		.loc 1 314 0
 653 0038 FFF7FEFF 		bl	USBD_CtlError.constprop.0
 654              	.LVL67:
 315:c/usbd_ctlreq.c ****     }
 655              		.loc 1 315 0
 656 003c EEE7     		b	.L89
 657              	.LVL68:
 658              	.L95:
 238:c/usbd_ctlreq.c ****       {
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 27


 659              		.loc 1 238 0
 660 003e 4A88     		ldrh	r2, [r1, #2]
 661 0040 22B9     		cbnz	r2, .L127
 240:c/usbd_ctlreq.c ****         { 
 662              		.loc 1 240 0
 663 0042 5E06     		lsls	r6, r3, #25
 664 0044 02D0     		beq	.L127
 242:c/usbd_ctlreq.c ****           
 665              		.loc 1 242 0
 666 0046 1946     		mov	r1, r3
 667              	.LVL69:
 668 0048 FFF7FEFF 		bl	USBD_LL_StallEP
 669              	.LVL70:
 670              	.L127:
 274:c/usbd_ctlreq.c ****         }
 671              		.loc 1 274 0
 672 004c D4F81432 		ldr	r3, [r4, #532]
 673 0050 2946     		mov	r1, r5
 674 0052 9B68     		ldr	r3, [r3, #8]
 675 0054 2046     		mov	r0, r4
 676 0056 9847     		blx	r3
 677              	.LVL71:
 678              	.L100:
 276:c/usbd_ctlreq.c ****       }
 679              		.loc 1 276 0
 680 0058 2046     		mov	r0, r4
 681 005a FFF7FEFF 		bl	USBD_CtlSendStatus
 682              	.LVL72:
 683 005e DDE7     		b	.L89
 684              	.LVL73:
 685              	.L90:
 259:c/usbd_ctlreq.c ****     {
 686              		.loc 1 259 0
 687 0060 90F8FC21 		ldrb	r2, [r0, #508]	@ zero_extendqisi2
 688 0064 022A     		cmp	r2, #2
 689 0066 26D0     		beq	.L102
 690 0068 032A     		cmp	r2, #3
 691 006a E5D1     		bne	.L125
 269:c/usbd_ctlreq.c ****       {
 692              		.loc 1 269 0
 693 006c 4A88     		ldrh	r2, [r1, #2]
 694 006e 002A     		cmp	r2, #0
 695 0070 D4D1     		bne	.L89
 271:c/usbd_ctlreq.c ****         {        
 696              		.loc 1 271 0
 697 0072 5906     		lsls	r1, r3, #25
 698              	.LVL74:
 699 0074 F0D0     		beq	.L100
 273:c/usbd_ctlreq.c ****           pdev->pClass->Setup (pdev, req);
 700              		.loc 1 273 0
 701 0076 1946     		mov	r1, r3
 702 0078 FFF7FEFF 		bl	USBD_LL_ClearStallEP
 703              	.LVL75:
 704 007c E6E7     		b	.L127
 705              	.LVL76:
 706              	.L91:
 287:c/usbd_ctlreq.c ****     {
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 28


 707              		.loc 1 287 0
 708 007e 90F8FC21 		ldrb	r2, [r0, #508]	@ zero_extendqisi2
 709 0082 022A     		cmp	r2, #2
 710 0084 17D0     		beq	.L102
 711 0086 032A     		cmp	r2, #3
 712 0088 D6D1     		bne	.L125
 713 008a 03F07F05 		and	r5, r3, #127
 297:c/usbd_ctlreq.c ****                                          &pdev->ep_out[ep_addr & 0x7F];
 714              		.loc 1 297 0
 715 008e 16F0800F 		tst	r6, #128
 716 0092 00EB0515 		add	r5, r0, r5, lsl #4
 299:c/usbd_ctlreq.c ****       {
 717              		.loc 1 299 0
 718 0096 1946     		mov	r1, r3
 719              	.LVL77:
 297:c/usbd_ctlreq.c ****                                          &pdev->ep_out[ep_addr & 0x7F];
 720              		.loc 1 297 0
 721 0098 14BF     		ite	ne
 722 009a 1435     		addne	r5, r5, #20
 723 009c 05F58275 		addeq	r5, r5, #260
 724              	.LVL78:
 299:c/usbd_ctlreq.c ****       {
 725              		.loc 1 299 0
 726 00a0 FFF7FEFF 		bl	USBD_LL_IsStallEP
 727              	.LVL79:
 728 00a4 68B1     		cbz	r0, .L106
 301:c/usbd_ctlreq.c ****       }
 729              		.loc 1 301 0
 730 00a6 0123     		movs	r3, #1
 731 00a8 2B60     		str	r3, [r5]
 732              	.L107:
 308:c/usbd_ctlreq.c ****                         (uint8_t *)&pep->status,
 733              		.loc 1 308 0
 734 00aa 0222     		movs	r2, #2
 735 00ac 2946     		mov	r1, r5
 736 00ae 2046     		mov	r0, r4
 737 00b0 FFF7FEFF 		bl	USBD_CtlSendData
 738              	.LVL80:
 311:c/usbd_ctlreq.c ****       
 739              		.loc 1 311 0
 740 00b4 B2E7     		b	.L89
 741              	.LVL81:
 742              	.L102:
 290:c/usbd_ctlreq.c ****       {
 743              		.loc 1 290 0
 744 00b6 5A06     		lsls	r2, r3, #25
 745 00b8 B0D0     		beq	.L89
 292:c/usbd_ctlreq.c ****       }
 746              		.loc 1 292 0
 747 00ba 1946     		mov	r1, r3
 748              	.LVL82:
 749 00bc FFF7FEFF 		bl	USBD_LL_StallEP
 750              	.LVL83:
 751 00c0 ACE7     		b	.L89
 752              	.LVL84:
 753              	.L106:
 305:c/usbd_ctlreq.c ****       }
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 29


 754              		.loc 1 305 0
 755 00c2 2860     		str	r0, [r5]
 756 00c4 F1E7     		b	.L107
 757              		.cfi_endproc
 758              	.LFE66:
 760              		.section	.text.USBD_ParseSetupRequest,"ax",%progbits
 761              		.align	1
 762              		.global	USBD_ParseSetupRequest
 763              		.syntax unified
 764              		.thumb
 765              		.thumb_func
 766              		.fpu softvfp
 768              	USBD_ParseSetupRequest:
 769              	.LFB74:
 699:c/usbd_ctlreq.c ****   req->bmRequest     = *(uint8_t *)  (pdata);
 770              		.loc 1 699 0
 771              		.cfi_startproc
 772              		@ args = 0, pretend = 0, frame = 0
 773              		@ frame_needed = 0, uses_anonymous_args = 0
 774              		@ link register save eliminated.
 775              	.LVL85:
 700:c/usbd_ctlreq.c ****   req->bRequest      = *(uint8_t *)  (pdata +  1);
 776              		.loc 1 700 0
 777 0000 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 778 0002 0370     		strb	r3, [r0]
 701:c/usbd_ctlreq.c ****   req->wValue        = SWAPBYTE      (pdata +  2);
 779              		.loc 1 701 0
 780 0004 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 781 0006 4370     		strb	r3, [r0, #1]
 702:c/usbd_ctlreq.c ****   req->wIndex        = SWAPBYTE      (pdata +  4);
 782              		.loc 1 702 0
 783 0008 CA78     		ldrb	r2, [r1, #3]	@ zero_extendqisi2
 784 000a 8B78     		ldrb	r3, [r1, #2]	@ zero_extendqisi2
 785 000c 03EB0223 		add	r3, r3, r2, lsl #8
 786 0010 4380     		strh	r3, [r0, #2]	@ movhi
 703:c/usbd_ctlreq.c ****   req->wLength       = SWAPBYTE      (pdata +  6);
 787              		.loc 1 703 0
 788 0012 4A79     		ldrb	r2, [r1, #5]	@ zero_extendqisi2
 789 0014 0B79     		ldrb	r3, [r1, #4]	@ zero_extendqisi2
 790 0016 03EB0223 		add	r3, r3, r2, lsl #8
 791 001a 8380     		strh	r3, [r0, #4]	@ movhi
 704:c/usbd_ctlreq.c **** 
 792              		.loc 1 704 0
 793 001c CA79     		ldrb	r2, [r1, #7]	@ zero_extendqisi2
 794 001e 8B79     		ldrb	r3, [r1, #6]	@ zero_extendqisi2
 795 0020 03EB0223 		add	r3, r3, r2, lsl #8
 796 0024 C380     		strh	r3, [r0, #6]	@ movhi
 797 0026 7047     		bx	lr
 798              		.cfi_endproc
 799              	.LFE74:
 801              		.section	.text.USBD_CtlError,"ax",%progbits
 802              		.align	1
 803              		.global	USBD_CtlError
 804              		.syntax unified
 805              		.thumb
 806              		.thumb_func
 807              		.fpu softvfp
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 30


 809              	USBD_CtlError:
 810              	.LFB75:
 718:c/usbd_ctlreq.c ****   USBD_LL_StallEP(pdev , 0x80);
 811              		.loc 1 718 0
 812              		.cfi_startproc
 813              		@ args = 0, pretend = 0, frame = 0
 814              		@ frame_needed = 0, uses_anonymous_args = 0
 815              	.LVL86:
 816 0000 10B5     		push	{r4, lr}
 817              		.cfi_def_cfa_offset 8
 818              		.cfi_offset 4, -8
 819              		.cfi_offset 14, -4
 718:c/usbd_ctlreq.c ****   USBD_LL_StallEP(pdev , 0x80);
 820              		.loc 1 718 0
 821 0002 0446     		mov	r4, r0
 719:c/usbd_ctlreq.c ****   USBD_LL_StallEP(pdev , 0);
 822              		.loc 1 719 0
 823 0004 8021     		movs	r1, #128
 824              	.LVL87:
 825 0006 FFF7FEFF 		bl	USBD_LL_StallEP
 826              	.LVL88:
 720:c/usbd_ctlreq.c **** }
 827              		.loc 1 720 0
 828 000a 2046     		mov	r0, r4
 829              		.loc 1 721 0
 830 000c BDE81040 		pop	{r4, lr}
 831              		.cfi_restore 14
 832              		.cfi_restore 4
 833              		.cfi_def_cfa_offset 0
 834              	.LVL89:
 720:c/usbd_ctlreq.c **** }
 835              		.loc 1 720 0
 836 0010 0021     		movs	r1, #0
 837 0012 FFF7FEBF 		b	USBD_LL_StallEP
 838              	.LVL90:
 839              		.cfi_endproc
 840              	.LFE75:
 842              		.section	.text.USBD_GetString,"ax",%progbits
 843              		.align	1
 844              		.global	USBD_GetString
 845              		.syntax unified
 846              		.thumb
 847              		.thumb_func
 848              		.fpu softvfp
 850              	USBD_GetString:
 851              	.LFB76:
 722:c/usbd_ctlreq.c **** 
 723:c/usbd_ctlreq.c **** 
 724:c/usbd_ctlreq.c **** /**
 725:c/usbd_ctlreq.c ****   * @brief  USBD_GetString
 726:c/usbd_ctlreq.c ****   *         Convert Ascii string into unicode one
 727:c/usbd_ctlreq.c ****   * @param  desc : descriptor buffer
 728:c/usbd_ctlreq.c ****   * @param  unicode : Formatted string buffer (unicode)
 729:c/usbd_ctlreq.c ****   * @param  len : descriptor length
 730:c/usbd_ctlreq.c ****   * @retval None
 731:c/usbd_ctlreq.c ****   */
 732:c/usbd_ctlreq.c **** void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 31


 733:c/usbd_ctlreq.c **** {
 852              		.loc 1 733 0
 853              		.cfi_startproc
 854              		@ args = 0, pretend = 0, frame = 0
 855              		@ frame_needed = 0, uses_anonymous_args = 0
 856              	.LVL91:
 857 0000 30B5     		push	{r4, r5, lr}
 858              		.cfi_def_cfa_offset 12
 859              		.cfi_offset 4, -12
 860              		.cfi_offset 5, -8
 861              		.cfi_offset 14, -4
 734:c/usbd_ctlreq.c ****   uint8_t idx = 0;
 735:c/usbd_ctlreq.c ****   
 736:c/usbd_ctlreq.c ****   if (desc != NULL) 
 862              		.loc 1 736 0
 863 0002 88B1     		cbz	r0, .L132
 864 0004 0546     		mov	r5, r0
 865              	.L134:
 866 0006 2B1A     		subs	r3, r5, r0
 867              	.LBB44:
 868              	.LBB45:
 737:c/usbd_ctlreq.c ****   {
 738:c/usbd_ctlreq.c ****     *len =  USBD_GetLen(desc) * 2 + 2;    
 739:c/usbd_ctlreq.c ****     unicode[idx++] = *len;
 740:c/usbd_ctlreq.c ****     unicode[idx++] =  USB_DESC_TYPE_STRING;
 741:c/usbd_ctlreq.c ****     
 742:c/usbd_ctlreq.c ****     while (*desc != '\0') 
 743:c/usbd_ctlreq.c ****     {
 744:c/usbd_ctlreq.c ****       unicode[idx++] = *desc++;
 745:c/usbd_ctlreq.c ****       unicode[idx++] =  0x00;
 746:c/usbd_ctlreq.c ****     }
 747:c/usbd_ctlreq.c ****   } 
 748:c/usbd_ctlreq.c **** }
 749:c/usbd_ctlreq.c **** 
 750:c/usbd_ctlreq.c **** /**
 751:c/usbd_ctlreq.c ****   * @brief  USBD_GetLen
 752:c/usbd_ctlreq.c ****   *         return the string length
 753:c/usbd_ctlreq.c ****    * @param  buf : pointer to the ascii string buffer
 754:c/usbd_ctlreq.c ****   * @retval string length
 755:c/usbd_ctlreq.c ****   */
 756:c/usbd_ctlreq.c **** static uint8_t USBD_GetLen(uint8_t *buf)
 757:c/usbd_ctlreq.c **** {
 758:c/usbd_ctlreq.c ****     uint8_t  len = 0;
 759:c/usbd_ctlreq.c **** 
 760:c/usbd_ctlreq.c ****     while (*buf != '\0') 
 869              		.loc 1 760 0
 870 0008 15F8014B 		ldrb	r4, [r5], #1	@ zero_extendqisi2
 871 000c DBB2     		uxtb	r3, r3
 872              	.LVL92:
 873 000e 002C     		cmp	r4, #0
 874 0010 F9D1     		bne	.L134
 875              	.LVL93:
 876              	.LBE45:
 877              	.LBE44:
 738:c/usbd_ctlreq.c ****     unicode[idx++] = *len;
 878              		.loc 1 738 0
 879 0012 5B00     		lsls	r3, r3, #1
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 32


 880 0014 0233     		adds	r3, r3, #2
 881 0016 1380     		strh	r3, [r2]	@ movhi
 882              	.LVL94:
 739:c/usbd_ctlreq.c ****     unicode[idx++] =  USB_DESC_TYPE_STRING;
 883              		.loc 1 739 0
 884 0018 0B70     		strb	r3, [r1]
 885              	.LVL95:
 740:c/usbd_ctlreq.c ****     
 886              		.loc 1 740 0
 887 001a 0323     		movs	r3, #3
 888 001c 4B70     		strb	r3, [r1, #1]
 889 001e 0223     		movs	r3, #2
 890 0020 0138     		subs	r0, r0, #1
 891              	.LVL96:
 892              	.L135:
 742:c/usbd_ctlreq.c ****     {
 893              		.loc 1 742 0
 894 0022 10F8015F 		ldrb	r5, [r0, #1]!	@ zero_extendqisi2
 895              	.LVL97:
 896 0026 05B9     		cbnz	r5, .L136
 897              	.LVL98:
 898              	.L132:
 899 0028 30BD     		pop	{r4, r5, pc}
 900              	.LVL99:
 901              	.L136:
 744:c/usbd_ctlreq.c ****       unicode[idx++] =  0x00;
 902              		.loc 1 744 0
 903 002a 5A1C     		adds	r2, r3, #1
 904 002c CD54     		strb	r5, [r1, r3]
 905 002e D2B2     		uxtb	r2, r2
 906              	.LVL100:
 745:c/usbd_ctlreq.c ****     }
 907              		.loc 1 745 0
 908 0030 0233     		adds	r3, r3, #2
 909 0032 DBB2     		uxtb	r3, r3
 910              	.LVL101:
 911 0034 8C54     		strb	r4, [r1, r2]
 912 0036 F4E7     		b	.L135
 913              		.cfi_endproc
 914              	.LFE76:
 916              		.section	.bss.cfgidx.6911,"aw",%nobits
 917              		.set	.LANCHOR0,. + 0
 920              	cfgidx.6911:
 921 0000 00       		.space	1
 922              		.text
 923              	.Letext0:
 924              		.file 2 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/machine/_
 925              		.file 3 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_stdi
 926              		.file 4 "c/core_cm3.h"
 927              		.file 5 "c/system_stm32f1xx.h"
 928              		.file 6 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/lock.
 929              		.file 7 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_type
 930              		.file 8 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/lib/gcc/arm-none-eabi/6.3.1/inc
 931              		.file 9 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/reent
 932              		.file 10 "c/usbd_def.h"
 933              		.file 11 "c/usbd_core.h"
 934              		.file 12 "c/usbd_ioreq.h"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 33


ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s 			page 34


DEFINED SYMBOLS
                            *ABS*:0000000000000000 usbd_ctlreq.c
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s:16     .text.USBD_CtlError.constprop.0:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s:22     .text.USBD_CtlError.constprop.0:0000000000000000 USBD_CtlError.constprop.0
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s:56     .text.USBD_StdDevReq:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s:63     .text.USBD_StdDevReq:0000000000000000 USBD_StdDevReq
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s:86     .text.USBD_StdDevReq:0000000000000012 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s:96     .text.USBD_StdDevReq:0000000000000026 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s:110    .text.USBD_StdDevReq:0000000000000034 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s:192    .text.USBD_StdDevReq:0000000000000090 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s:198    .text.USBD_StdDevReq:0000000000000096 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s:521    .text.USBD_StdDevReq:0000000000000200 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s:528    .text.USBD_StdItfReq:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s:535    .text.USBD_StdItfReq:0000000000000000 USBD_StdItfReq
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s:590    .text.USBD_StdEPReq:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s:597    .text.USBD_StdEPReq:0000000000000000 USBD_StdEPReq
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s:761    .text.USBD_ParseSetupRequest:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s:768    .text.USBD_ParseSetupRequest:0000000000000000 USBD_ParseSetupRequest
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s:802    .text.USBD_CtlError:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s:809    .text.USBD_CtlError:0000000000000000 USBD_CtlError
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s:843    .text.USBD_GetString:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s:850    .text.USBD_GetString:0000000000000000 USBD_GetString
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s:920    .bss.cfgidx.6911:0000000000000000 cfgidx.6911
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s:921    .bss.cfgidx.6911:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s:117    .text.USBD_StdDevReq:000000000000003b $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccmVJXMz.s:117    .text.USBD_StdDevReq:000000000000003c $t

UNDEFINED SYMBOLS
USBD_LL_StallEP
USBD_CtlSendData
USBD_LL_SetUSBAddress
USBD_CtlSendStatus
USBD_ClrClassConfig
USBD_SetClassConfig
USBD_LL_ClearStallEP
USBD_LL_IsStallEP
exit code: 0
OPT_LEVEL = Some("s")
HOST = Some("x86_64-apple-darwin")
CFLAGS_arm-none-eabi = None
CFLAGS_arm_none_eabi = None
TARGET_CFLAGS = None
CFLAGS = None
DEBUG = Some("true")
running: "arm-none-eabi-gcc" "-Os" "-ffunction-sections" "-fdata-sections" "-g" "-DSTM32F103xB" "-DUSE_HAL_DRIVER" "-mcpu=cortex-m3" "-mthumb" "-Wall" "-fdata-sections" "-ffunction-sections" "-Wa,-a,-ad" "-g" "-Wall" "-Wextra" "-o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/usbd_customhid.o" "-c" "c/usbd_customhid.c"
cargo:warning=c/usbd_customhid.c:133:1: warning: missing initializer for field 'GetUsrStrDescriptor' of 'USBD_ClassTypeDef {aka struct _Device_cb}' [-Wmissing-field-initializers]
cargo:warning= };
cargo:warning= ^
cargo:warning=In file included from c/usbd_ioreq.h:37:0,
cargo:warning=                 from c/usbd_customhid.h:37,
cargo:warning=                 from c/usbd_customhid.c:49:
cargo:warning=c/usbd_def.h:180:15: note: 'GetUsrStrDescriptor' declared here
cargo:warning=   uint8_t  *(*GetUsrStrDescriptor)(struct _USBD_HandleTypeDef *pdev ,uint8_t index,  uint16_t *length);   
cargo:warning=               ^~~~~~~~~~~~~~~~~~~
cargo:warning=c/usbd_customhid.c: In function 'USBD_CUSTOM_HID_Init':
cargo:warning=c/usbd_customhid.c:240:40: warning: unused parameter 'cfgidx' [-Wunused-parameter]
cargo:warning=                                uint8_t cfgidx)
cargo:warning=                                        ^~~~~~
cargo:warning=c/usbd_customhid.c: In function 'USBD_CUSTOM_HID_DeInit':
cargo:warning=c/usbd_customhid.c:284:42: warning: unused parameter 'cfgidx' [-Wunused-parameter]
cargo:warning=                                  uint8_t cfgidx)
cargo:warning=                                          ^~~~~~
cargo:warning=c/usbd_customhid.c: In function 'USBD_CUSTOM_HID_DataIn':
cargo:warning=c/usbd_customhid.c:441:39: warning: unused parameter 'epnum' [-Wunused-parameter]
cargo:warning=                               uint8_t epnum)
cargo:warning=                                       ^~~~~
cargo:warning=c/usbd_customhid.c: In function 'USBD_CUSTOM_HID_DataOut':
cargo:warning=c/usbd_customhid.c:460:39: warning: unused parameter 'epnum' [-Wunused-parameter]
cargo:warning=                               uint8_t epnum)
cargo:warning=                                       ^~~~~
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"usbd_customhid.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.USBD_CUSTOM_HID_GetCfgDesc,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	USBD_CUSTOM_HID_GetCfgDesc:
  23              	.LFB68:
  24              		.file 1 "c/usbd_customhid.c"
   1:c/usbd_customhid.c **** /**
   2:c/usbd_customhid.c ****   ******************************************************************************
   3:c/usbd_customhid.c ****   * @file    usbd_customhid.c
   4:c/usbd_customhid.c ****   * @author  MCD Application Team
   5:c/usbd_customhid.c ****   * @version V2.4.2
   6:c/usbd_customhid.c ****   * @date    11-December-2015
   7:c/usbd_customhid.c ****   * @brief   This file provides the CUSTOM_HID core functions.
   8:c/usbd_customhid.c ****   *
   9:c/usbd_customhid.c ****   * @verbatim
  10:c/usbd_customhid.c ****   *      
  11:c/usbd_customhid.c ****   *          ===================================================================      
  12:c/usbd_customhid.c ****   *                                CUSTOM_HID Class  Description
  13:c/usbd_customhid.c ****   *          =================================================================== 
  14:c/usbd_customhid.c ****   *           This module manages the CUSTOM_HID class V1.11 following the "Device Class Definition
  15:c/usbd_customhid.c ****   *           for Human Interface Devices (CUSTOM_HID) Version 1.11 Jun 27, 2001".
  16:c/usbd_customhid.c ****   *           This driver implements the following aspects of the specification:
  17:c/usbd_customhid.c ****   *             - The Boot Interface Subclass
  18:c/usbd_customhid.c ****   *             - Usage Page : Generic Desktop
  19:c/usbd_customhid.c ****   *             - Usage : Vendor
  20:c/usbd_customhid.c ****   *             - Collection : Application 
  21:c/usbd_customhid.c ****   *      
  22:c/usbd_customhid.c ****   * @note     In HS mode and when the DMA is used, all variables and data structures
  23:c/usbd_customhid.c ****   *           dealing with the DMA during the transaction process should be 32-bit aligned.
  24:c/usbd_customhid.c ****   *           
  25:c/usbd_customhid.c ****   *      
  26:c/usbd_customhid.c ****   *  @endverbatim
  27:c/usbd_customhid.c ****   *
  28:c/usbd_customhid.c ****   ******************************************************************************
  29:c/usbd_customhid.c ****   * @attention
  30:c/usbd_customhid.c ****   *
  31:c/usbd_customhid.c ****   * <h2><center>&copy; COPYRIGHT 2015 STMicroelectronics</center></h2>
  32:c/usbd_customhid.c ****   *
  33:c/usbd_customhid.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  34:c/usbd_customhid.c ****   * You may not use this file except in compliance with the License.
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s 			page 2


  35:c/usbd_customhid.c ****   * You may obtain a copy of the License at:
  36:c/usbd_customhid.c ****   *
  37:c/usbd_customhid.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  38:c/usbd_customhid.c ****   *
  39:c/usbd_customhid.c ****   * Unless required by applicable law or agreed to in writing, software 
  40:c/usbd_customhid.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  41:c/usbd_customhid.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  42:c/usbd_customhid.c ****   * See the License for the specific language governing permissions and
  43:c/usbd_customhid.c ****   * limitations under the License.
  44:c/usbd_customhid.c ****   *
  45:c/usbd_customhid.c ****   ******************************************************************************
  46:c/usbd_customhid.c ****   */ 
  47:c/usbd_customhid.c **** 
  48:c/usbd_customhid.c **** /* Includes ------------------------------------------------------------------*/
  49:c/usbd_customhid.c **** #include "usbd_customhid.h"
  50:c/usbd_customhid.c **** #include "usbd_desc.h"
  51:c/usbd_customhid.c **** #include "usbd_ctlreq.h"
  52:c/usbd_customhid.c **** 
  53:c/usbd_customhid.c **** 
  54:c/usbd_customhid.c **** /** @addtogroup STM32_USB_DEVICE_LIBRARY
  55:c/usbd_customhid.c ****   * @{
  56:c/usbd_customhid.c ****   */
  57:c/usbd_customhid.c **** 
  58:c/usbd_customhid.c **** 
  59:c/usbd_customhid.c **** /** @defgroup USBD_CUSTOM_HID 
  60:c/usbd_customhid.c ****   * @brief usbd core module
  61:c/usbd_customhid.c ****   * @{
  62:c/usbd_customhid.c ****   */ 
  63:c/usbd_customhid.c **** 
  64:c/usbd_customhid.c **** /** @defgroup USBD_CUSTOM_HID_Private_TypesDefinitions
  65:c/usbd_customhid.c ****   * @{
  66:c/usbd_customhid.c ****   */ 
  67:c/usbd_customhid.c **** /**
  68:c/usbd_customhid.c ****   * @}
  69:c/usbd_customhid.c ****   */ 
  70:c/usbd_customhid.c **** 
  71:c/usbd_customhid.c **** 
  72:c/usbd_customhid.c **** /** @defgroup USBD_CUSTOM_HID_Private_Defines
  73:c/usbd_customhid.c ****   * @{
  74:c/usbd_customhid.c ****   */ 
  75:c/usbd_customhid.c **** 
  76:c/usbd_customhid.c **** /**
  77:c/usbd_customhid.c ****   * @}
  78:c/usbd_customhid.c ****   */ 
  79:c/usbd_customhid.c **** 
  80:c/usbd_customhid.c **** 
  81:c/usbd_customhid.c **** /** @defgroup USBD_CUSTOM_HID_Private_Macros
  82:c/usbd_customhid.c ****   * @{
  83:c/usbd_customhid.c ****   */ 
  84:c/usbd_customhid.c **** /**
  85:c/usbd_customhid.c ****   * @}
  86:c/usbd_customhid.c ****   */ 
  87:c/usbd_customhid.c **** /** @defgroup USBD_CUSTOM_HID_Private_FunctionPrototypes
  88:c/usbd_customhid.c ****   * @{
  89:c/usbd_customhid.c ****   */
  90:c/usbd_customhid.c **** 
  91:c/usbd_customhid.c **** 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s 			page 3


  92:c/usbd_customhid.c **** static uint8_t  USBD_CUSTOM_HID_Init (USBD_HandleTypeDef *pdev, 
  93:c/usbd_customhid.c ****                                uint8_t cfgidx);
  94:c/usbd_customhid.c **** 
  95:c/usbd_customhid.c **** static uint8_t  USBD_CUSTOM_HID_DeInit (USBD_HandleTypeDef *pdev, 
  96:c/usbd_customhid.c ****                                  uint8_t cfgidx);
  97:c/usbd_customhid.c **** 
  98:c/usbd_customhid.c **** static uint8_t  USBD_CUSTOM_HID_Setup (USBD_HandleTypeDef *pdev, 
  99:c/usbd_customhid.c ****                                 USBD_SetupReqTypedef *req);
 100:c/usbd_customhid.c **** 
 101:c/usbd_customhid.c **** static uint8_t  *USBD_CUSTOM_HID_GetCfgDesc (uint16_t *length);
 102:c/usbd_customhid.c **** 
 103:c/usbd_customhid.c **** static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length);
 104:c/usbd_customhid.c **** 
 105:c/usbd_customhid.c **** static uint8_t  USBD_CUSTOM_HID_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum);
 106:c/usbd_customhid.c **** 
 107:c/usbd_customhid.c **** static uint8_t  USBD_CUSTOM_HID_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum);
 108:c/usbd_customhid.c **** static uint8_t  USBD_CUSTOM_HID_EP0_RxReady (USBD_HandleTypeDef  *pdev);
 109:c/usbd_customhid.c **** /**
 110:c/usbd_customhid.c ****   * @}
 111:c/usbd_customhid.c ****   */ 
 112:c/usbd_customhid.c **** 
 113:c/usbd_customhid.c **** /** @defgroup USBD_CUSTOM_HID_Private_Variables
 114:c/usbd_customhid.c ****   * @{
 115:c/usbd_customhid.c ****   */ 
 116:c/usbd_customhid.c **** 
 117:c/usbd_customhid.c **** USBD_ClassTypeDef  USBD_CUSTOM_HID = 
 118:c/usbd_customhid.c **** {
 119:c/usbd_customhid.c ****   USBD_CUSTOM_HID_Init,
 120:c/usbd_customhid.c ****   USBD_CUSTOM_HID_DeInit,
 121:c/usbd_customhid.c ****   USBD_CUSTOM_HID_Setup,
 122:c/usbd_customhid.c ****   NULL, /*EP0_TxSent*/  
 123:c/usbd_customhid.c ****   USBD_CUSTOM_HID_EP0_RxReady, /*EP0_RxReady*/ /* STATUS STAGE IN */
 124:c/usbd_customhid.c ****   USBD_CUSTOM_HID_DataIn, /*DataIn*/
 125:c/usbd_customhid.c ****   USBD_CUSTOM_HID_DataOut,
 126:c/usbd_customhid.c ****   NULL, /*SOF */
 127:c/usbd_customhid.c ****   NULL,
 128:c/usbd_customhid.c ****   NULL,      
 129:c/usbd_customhid.c ****   USBD_CUSTOM_HID_GetCfgDesc,
 130:c/usbd_customhid.c ****   USBD_CUSTOM_HID_GetCfgDesc, 
 131:c/usbd_customhid.c ****   USBD_CUSTOM_HID_GetCfgDesc,
 132:c/usbd_customhid.c ****   USBD_CUSTOM_HID_GetDeviceQualifierDesc,
 133:c/usbd_customhid.c **** };
 134:c/usbd_customhid.c **** 
 135:c/usbd_customhid.c **** /* USB CUSTOM_HID device Configuration Descriptor */
 136:c/usbd_customhid.c **** __ALIGN_BEGIN static uint8_t USBD_CUSTOM_HID_CfgDesc[USB_CUSTOM_HID_CONFIG_DESC_SIZ] __ALIGN_END =
 137:c/usbd_customhid.c **** {
 138:c/usbd_customhid.c ****   0x09, /* bLength: Configuration Descriptor size */
 139:c/usbd_customhid.c ****   USB_DESC_TYPE_CONFIGURATION, /* bDescriptorType: Configuration */
 140:c/usbd_customhid.c ****   USB_CUSTOM_HID_CONFIG_DESC_SIZ,
 141:c/usbd_customhid.c ****   /* wTotalLength: Bytes returned */
 142:c/usbd_customhid.c ****   0x00,
 143:c/usbd_customhid.c ****   0x01,         /*bNumInterfaces: 1 interface*/
 144:c/usbd_customhid.c ****   0x01,         /*bConfigurationValue: Configuration value*/
 145:c/usbd_customhid.c ****   0x00,         /*iConfiguration: Index of string descriptor describing
 146:c/usbd_customhid.c ****   the configuration*/
 147:c/usbd_customhid.c ****   0xC0,         /*bmAttributes: bus powered */
 148:c/usbd_customhid.c ****   0x32,         /*MaxPower 100 mA: this current is used for detecting Vbus*/
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s 			page 4


 149:c/usbd_customhid.c ****   
 150:c/usbd_customhid.c ****   /************** Descriptor of CUSTOM HID interface ****************/
 151:c/usbd_customhid.c ****   /* 09 */
 152:c/usbd_customhid.c ****   0x09,         /*bLength: Interface Descriptor size*/
 153:c/usbd_customhid.c ****   USB_DESC_TYPE_INTERFACE,/*bDescriptorType: Interface descriptor type*/
 154:c/usbd_customhid.c ****   0x00,         /*bInterfaceNumber: Number of Interface*/
 155:c/usbd_customhid.c ****   0x00,         /*bAlternateSetting: Alternate setting*/
 156:c/usbd_customhid.c ****   0x02,         /*bNumEndpoints*/
 157:c/usbd_customhid.c ****   0x03,         /*bInterfaceClass: CUSTOM_HID*/
 158:c/usbd_customhid.c ****   0x00,         /*bInterfaceSubClass : 1=BOOT, 0=no boot*/
 159:c/usbd_customhid.c ****   0x00,         /*nInterfaceProtocol : 0=none, 1=keyboard, 2=mouse*/
 160:c/usbd_customhid.c ****   0,            /*iInterface: Index of string descriptor*/
 161:c/usbd_customhid.c ****   /******************** Descriptor of CUSTOM_HID *************************/
 162:c/usbd_customhid.c ****   /* 18 */
 163:c/usbd_customhid.c ****   0x09,         /*bLength: CUSTOM_HID Descriptor size*/
 164:c/usbd_customhid.c ****   CUSTOM_HID_DESCRIPTOR_TYPE, /*bDescriptorType: CUSTOM_HID*/
 165:c/usbd_customhid.c ****   0x11,         /*bCUSTOM_HIDUSTOM_HID: CUSTOM_HID Class Spec release number*/
 166:c/usbd_customhid.c ****   0x01,
 167:c/usbd_customhid.c ****   0x00,         /*bCountryCode: Hardware target country*/
 168:c/usbd_customhid.c ****   0x01,         /*bNumDescriptors: Number of CUSTOM_HID class descriptors to follow*/
 169:c/usbd_customhid.c ****   0x22,         /*bDescriptorType*/
 170:c/usbd_customhid.c ****   USBD_CUSTOM_HID_REPORT_DESC_SIZE,/*wItemLength: Total length of Report descriptor*/
 171:c/usbd_customhid.c ****   0x00,
 172:c/usbd_customhid.c ****   /******************** Descriptor of Custom HID endpoints ********************/
 173:c/usbd_customhid.c ****   /* 27 */
 174:c/usbd_customhid.c ****   0x07,          /*bLength: Endpoint Descriptor size*/
 175:c/usbd_customhid.c ****   USB_DESC_TYPE_ENDPOINT, /*bDescriptorType:*/
 176:c/usbd_customhid.c ****   
 177:c/usbd_customhid.c ****   CUSTOM_HID_EPIN_ADDR,     /*bEndpointAddress: Endpoint Address (IN)*/
 178:c/usbd_customhid.c ****   0x03,          /*bmAttributes: Interrupt endpoint*/
 179:c/usbd_customhid.c ****   CUSTOM_HID_EPIN_SIZE, /*wMaxPacketSize: 2 Byte max */
 180:c/usbd_customhid.c ****   0x00,
 181:c/usbd_customhid.c ****   0x20,          /*bInterval: Polling Interval (20 ms)*/
 182:c/usbd_customhid.c ****   /* 34 */
 183:c/usbd_customhid.c ****   
 184:c/usbd_customhid.c ****   0x07,	         /* bLength: Endpoint Descriptor size */
 185:c/usbd_customhid.c ****   USB_DESC_TYPE_ENDPOINT,	/* bDescriptorType: */
 186:c/usbd_customhid.c ****   CUSTOM_HID_EPOUT_ADDR,  /*bEndpointAddress: Endpoint Address (OUT)*/
 187:c/usbd_customhid.c ****   0x03,	/* bmAttributes: Interrupt endpoint */
 188:c/usbd_customhid.c ****   CUSTOM_HID_EPOUT_SIZE,	/* wMaxPacketSize: 2 Bytes max  */
 189:c/usbd_customhid.c ****   0x00,
 190:c/usbd_customhid.c ****   0x20,	/* bInterval: Polling Interval (20 ms) */
 191:c/usbd_customhid.c ****   /* 41 */
 192:c/usbd_customhid.c **** } ;
 193:c/usbd_customhid.c **** 
 194:c/usbd_customhid.c **** /* USB CUSTOM_HID device Configuration Descriptor */
 195:c/usbd_customhid.c **** __ALIGN_BEGIN static uint8_t USBD_CUSTOM_HID_Desc[USB_CUSTOM_HID_DESC_SIZ] __ALIGN_END =
 196:c/usbd_customhid.c **** {
 197:c/usbd_customhid.c ****   /* 18 */
 198:c/usbd_customhid.c ****   0x09,         /*bLength: CUSTOM_HID Descriptor size*/
 199:c/usbd_customhid.c ****   CUSTOM_HID_DESCRIPTOR_TYPE, /*bDescriptorType: CUSTOM_HID*/
 200:c/usbd_customhid.c ****   0x11,         /*bCUSTOM_HIDUSTOM_HID: CUSTOM_HID Class Spec release number*/
 201:c/usbd_customhid.c ****   0x01,
 202:c/usbd_customhid.c ****   0x00,         /*bCountryCode: Hardware target country*/
 203:c/usbd_customhid.c ****   0x01,         /*bNumDescriptors: Number of CUSTOM_HID class descriptors to follow*/
 204:c/usbd_customhid.c ****   0x22,         /*bDescriptorType*/
 205:c/usbd_customhid.c ****   USBD_CUSTOM_HID_REPORT_DESC_SIZE,/*wItemLength: Total length of Report descriptor*/
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s 			page 5


 206:c/usbd_customhid.c ****   0x00,
 207:c/usbd_customhid.c **** };
 208:c/usbd_customhid.c **** 
 209:c/usbd_customhid.c **** /* USB Standard Device Descriptor */
 210:c/usbd_customhid.c **** __ALIGN_BEGIN static uint8_t USBD_CUSTOM_HID_DeviceQualifierDesc[USB_LEN_DEV_QUALIFIER_DESC] __ALIG
 211:c/usbd_customhid.c **** {
 212:c/usbd_customhid.c ****   USB_LEN_DEV_QUALIFIER_DESC,
 213:c/usbd_customhid.c ****   USB_DESC_TYPE_DEVICE_QUALIFIER,
 214:c/usbd_customhid.c ****   0x00,
 215:c/usbd_customhid.c ****   0x02,
 216:c/usbd_customhid.c ****   0x00,
 217:c/usbd_customhid.c ****   0x00,
 218:c/usbd_customhid.c ****   0x00,
 219:c/usbd_customhid.c ****   0x40,
 220:c/usbd_customhid.c ****   0x01,
 221:c/usbd_customhid.c ****   0x00,
 222:c/usbd_customhid.c **** };
 223:c/usbd_customhid.c **** 
 224:c/usbd_customhid.c **** /**
 225:c/usbd_customhid.c ****   * @}
 226:c/usbd_customhid.c ****   */ 
 227:c/usbd_customhid.c **** 
 228:c/usbd_customhid.c **** /** @defgroup USBD_CUSTOM_HID_Private_Functions
 229:c/usbd_customhid.c ****   * @{
 230:c/usbd_customhid.c ****   */ 
 231:c/usbd_customhid.c **** 
 232:c/usbd_customhid.c **** /**
 233:c/usbd_customhid.c ****   * @brief  USBD_CUSTOM_HID_Init
 234:c/usbd_customhid.c ****   *         Initialize the CUSTOM_HID interface
 235:c/usbd_customhid.c ****   * @param  pdev: device instance
 236:c/usbd_customhid.c ****   * @param  cfgidx: Configuration index
 237:c/usbd_customhid.c ****   * @retval status
 238:c/usbd_customhid.c ****   */
 239:c/usbd_customhid.c **** static uint8_t  USBD_CUSTOM_HID_Init (USBD_HandleTypeDef *pdev, 
 240:c/usbd_customhid.c ****                                uint8_t cfgidx)
 241:c/usbd_customhid.c **** {
 242:c/usbd_customhid.c ****   uint8_t ret = 0;
 243:c/usbd_customhid.c ****   USBD_CUSTOM_HID_HandleTypeDef     *hhid;
 244:c/usbd_customhid.c ****   /* Open EP IN */
 245:c/usbd_customhid.c ****   USBD_LL_OpenEP(pdev,
 246:c/usbd_customhid.c ****                  CUSTOM_HID_EPIN_ADDR,
 247:c/usbd_customhid.c ****                  USBD_EP_TYPE_INTR,
 248:c/usbd_customhid.c ****                  CUSTOM_HID_EPIN_SIZE);  
 249:c/usbd_customhid.c ****   
 250:c/usbd_customhid.c ****   /* Open EP OUT */
 251:c/usbd_customhid.c ****   USBD_LL_OpenEP(pdev,
 252:c/usbd_customhid.c ****                  CUSTOM_HID_EPOUT_ADDR,
 253:c/usbd_customhid.c ****                  USBD_EP_TYPE_INTR,
 254:c/usbd_customhid.c ****                  CUSTOM_HID_EPOUT_SIZE);
 255:c/usbd_customhid.c ****   
 256:c/usbd_customhid.c ****   pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 257:c/usbd_customhid.c ****   
 258:c/usbd_customhid.c ****   if(pdev->pClassData == NULL)
 259:c/usbd_customhid.c ****   {
 260:c/usbd_customhid.c ****     ret = 1; 
 261:c/usbd_customhid.c ****   }
 262:c/usbd_customhid.c ****   else
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s 			page 6


 263:c/usbd_customhid.c ****   {
 264:c/usbd_customhid.c ****     hhid = (USBD_CUSTOM_HID_HandleTypeDef*) pdev->pClassData;
 265:c/usbd_customhid.c ****       
 266:c/usbd_customhid.c ****     hhid->state = CUSTOM_HID_IDLE;
 267:c/usbd_customhid.c ****     ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 268:c/usbd_customhid.c ****           /* Prepare Out endpoint to receive 1st packet */ 
 269:c/usbd_customhid.c ****     USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf, 
 270:c/usbd_customhid.c ****                            USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 271:c/usbd_customhid.c ****   }
 272:c/usbd_customhid.c ****     
 273:c/usbd_customhid.c ****   return ret;
 274:c/usbd_customhid.c **** }
 275:c/usbd_customhid.c **** 
 276:c/usbd_customhid.c **** /**
 277:c/usbd_customhid.c ****   * @brief  USBD_CUSTOM_HID_Init
 278:c/usbd_customhid.c ****   *         DeInitialize the CUSTOM_HID layer
 279:c/usbd_customhid.c ****   * @param  pdev: device instance
 280:c/usbd_customhid.c ****   * @param  cfgidx: Configuration index
 281:c/usbd_customhid.c ****   * @retval status
 282:c/usbd_customhid.c ****   */
 283:c/usbd_customhid.c **** static uint8_t  USBD_CUSTOM_HID_DeInit (USBD_HandleTypeDef *pdev, 
 284:c/usbd_customhid.c ****                                  uint8_t cfgidx)
 285:c/usbd_customhid.c **** {
 286:c/usbd_customhid.c ****   /* Close CUSTOM_HID EP IN */
 287:c/usbd_customhid.c ****   USBD_LL_CloseEP(pdev,
 288:c/usbd_customhid.c ****                   CUSTOM_HID_EPIN_ADDR);
 289:c/usbd_customhid.c ****   
 290:c/usbd_customhid.c ****   /* Close CUSTOM_HID EP OUT */
 291:c/usbd_customhid.c ****   USBD_LL_CloseEP(pdev,
 292:c/usbd_customhid.c ****                   CUSTOM_HID_EPOUT_ADDR);
 293:c/usbd_customhid.c ****   
 294:c/usbd_customhid.c ****   /* FRee allocated memory */
 295:c/usbd_customhid.c ****   if(pdev->pClassData != NULL)
 296:c/usbd_customhid.c ****   {
 297:c/usbd_customhid.c ****     ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 298:c/usbd_customhid.c ****     USBD_free(pdev->pClassData);
 299:c/usbd_customhid.c ****     pdev->pClassData = NULL;
 300:c/usbd_customhid.c ****   }
 301:c/usbd_customhid.c ****   return USBD_OK;
 302:c/usbd_customhid.c **** }
 303:c/usbd_customhid.c **** 
 304:c/usbd_customhid.c **** /**
 305:c/usbd_customhid.c ****   * @brief  USBD_CUSTOM_HID_Setup
 306:c/usbd_customhid.c ****   *         Handle the CUSTOM_HID specific requests
 307:c/usbd_customhid.c ****   * @param  pdev: instance
 308:c/usbd_customhid.c ****   * @param  req: usb requests
 309:c/usbd_customhid.c ****   * @retval status
 310:c/usbd_customhid.c ****   */
 311:c/usbd_customhid.c **** static uint8_t  USBD_CUSTOM_HID_Setup (USBD_HandleTypeDef *pdev, 
 312:c/usbd_customhid.c ****                                 USBD_SetupReqTypedef *req)
 313:c/usbd_customhid.c **** {
 314:c/usbd_customhid.c ****   uint16_t len = 0;
 315:c/usbd_customhid.c ****   uint8_t  *pbuf = NULL;
 316:c/usbd_customhid.c ****   USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 317:c/usbd_customhid.c **** 
 318:c/usbd_customhid.c ****   switch (req->bmRequest & USB_REQ_TYPE_MASK)
 319:c/usbd_customhid.c ****   {
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s 			page 7


 320:c/usbd_customhid.c ****   case USB_REQ_TYPE_CLASS :  
 321:c/usbd_customhid.c ****     switch (req->bRequest)
 322:c/usbd_customhid.c ****     {
 323:c/usbd_customhid.c ****       
 324:c/usbd_customhid.c ****       
 325:c/usbd_customhid.c ****     case CUSTOM_HID_REQ_SET_PROTOCOL:
 326:c/usbd_customhid.c ****       hhid->Protocol = (uint8_t)(req->wValue);
 327:c/usbd_customhid.c ****       break;
 328:c/usbd_customhid.c ****       
 329:c/usbd_customhid.c ****     case CUSTOM_HID_REQ_GET_PROTOCOL:
 330:c/usbd_customhid.c ****       USBD_CtlSendData (pdev, 
 331:c/usbd_customhid.c ****                         (uint8_t *)&hhid->Protocol,
 332:c/usbd_customhid.c ****                         1);    
 333:c/usbd_customhid.c ****       break;
 334:c/usbd_customhid.c ****       
 335:c/usbd_customhid.c ****     case CUSTOM_HID_REQ_SET_IDLE:
 336:c/usbd_customhid.c ****       hhid->IdleState = (uint8_t)(req->wValue >> 8);
 337:c/usbd_customhid.c ****       break;
 338:c/usbd_customhid.c ****       
 339:c/usbd_customhid.c ****     case CUSTOM_HID_REQ_GET_IDLE:
 340:c/usbd_customhid.c ****       USBD_CtlSendData (pdev, 
 341:c/usbd_customhid.c ****                         (uint8_t *)&hhid->IdleState,
 342:c/usbd_customhid.c ****                         1);        
 343:c/usbd_customhid.c ****       break;      
 344:c/usbd_customhid.c ****     
 345:c/usbd_customhid.c ****     case CUSTOM_HID_REQ_SET_REPORT:
 346:c/usbd_customhid.c ****       hhid->IsReportAvailable = 1;
 347:c/usbd_customhid.c ****       USBD_CtlPrepareRx (pdev, hhid->Report_buf, (uint8_t)(req->wLength));
 348:c/usbd_customhid.c ****       
 349:c/usbd_customhid.c ****       break;
 350:c/usbd_customhid.c ****     default:
 351:c/usbd_customhid.c ****       USBD_CtlError (pdev, req);
 352:c/usbd_customhid.c ****       return USBD_FAIL; 
 353:c/usbd_customhid.c ****     }
 354:c/usbd_customhid.c ****     break;
 355:c/usbd_customhid.c ****     
 356:c/usbd_customhid.c ****   case USB_REQ_TYPE_STANDARD:
 357:c/usbd_customhid.c ****     switch (req->bRequest)
 358:c/usbd_customhid.c ****     {
 359:c/usbd_customhid.c ****     case USB_REQ_GET_DESCRIPTOR: 
 360:c/usbd_customhid.c ****       if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 361:c/usbd_customhid.c ****       {
 362:c/usbd_customhid.c ****         len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 363:c/usbd_customhid.c ****         pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 364:c/usbd_customhid.c ****       }
 365:c/usbd_customhid.c ****       else if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 366:c/usbd_customhid.c ****       {
 367:c/usbd_customhid.c ****         pbuf = USBD_CUSTOM_HID_Desc;   
 368:c/usbd_customhid.c ****         len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 369:c/usbd_customhid.c ****       }
 370:c/usbd_customhid.c ****       
 371:c/usbd_customhid.c ****       USBD_CtlSendData (pdev, 
 372:c/usbd_customhid.c ****                         pbuf,
 373:c/usbd_customhid.c ****                         len);
 374:c/usbd_customhid.c ****       
 375:c/usbd_customhid.c ****       break;
 376:c/usbd_customhid.c ****       
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s 			page 8


 377:c/usbd_customhid.c ****     case USB_REQ_GET_INTERFACE :
 378:c/usbd_customhid.c ****       USBD_CtlSendData (pdev,
 379:c/usbd_customhid.c ****                         (uint8_t *)&hhid->AltSetting,
 380:c/usbd_customhid.c ****                         1);
 381:c/usbd_customhid.c ****       break;
 382:c/usbd_customhid.c ****       
 383:c/usbd_customhid.c ****     case USB_REQ_SET_INTERFACE :
 384:c/usbd_customhid.c ****       hhid->AltSetting = (uint8_t)(req->wValue);
 385:c/usbd_customhid.c ****       break;
 386:c/usbd_customhid.c ****     }
 387:c/usbd_customhid.c ****   }
 388:c/usbd_customhid.c ****   return USBD_OK;
 389:c/usbd_customhid.c **** }
 390:c/usbd_customhid.c **** 
 391:c/usbd_customhid.c **** /**
 392:c/usbd_customhid.c ****   * @brief  USBD_CUSTOM_HID_SendReport 
 393:c/usbd_customhid.c ****   *         Send CUSTOM_HID Report
 394:c/usbd_customhid.c ****   * @param  pdev: device instance
 395:c/usbd_customhid.c ****   * @param  buff: pointer to report
 396:c/usbd_customhid.c ****   * @retval status
 397:c/usbd_customhid.c ****   */
 398:c/usbd_customhid.c **** uint8_t USBD_CUSTOM_HID_SendReport     (USBD_HandleTypeDef  *pdev, 
 399:c/usbd_customhid.c ****                                  uint8_t *report,
 400:c/usbd_customhid.c ****                                  uint16_t len)
 401:c/usbd_customhid.c **** {
 402:c/usbd_customhid.c ****   USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 403:c/usbd_customhid.c ****   
 404:c/usbd_customhid.c ****   if (pdev->dev_state == USBD_STATE_CONFIGURED )
 405:c/usbd_customhid.c ****   {
 406:c/usbd_customhid.c ****     if(hhid->state == CUSTOM_HID_IDLE)
 407:c/usbd_customhid.c ****     {
 408:c/usbd_customhid.c ****       hhid->state = CUSTOM_HID_BUSY;
 409:c/usbd_customhid.c ****       USBD_LL_Transmit (pdev, 
 410:c/usbd_customhid.c ****                         CUSTOM_HID_EPIN_ADDR,                                      
 411:c/usbd_customhid.c ****                         report,
 412:c/usbd_customhid.c ****                         len);
 413:c/usbd_customhid.c ****       HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 414:c/usbd_customhid.c ****       return USBD_OK;
 415:c/usbd_customhid.c ****     }
 416:c/usbd_customhid.c ****   }
 417:c/usbd_customhid.c ****   return USBD_BUSY;
 418:c/usbd_customhid.c **** }
 419:c/usbd_customhid.c **** 
 420:c/usbd_customhid.c **** /**
 421:c/usbd_customhid.c ****   * @brief  USBD_CUSTOM_HID_GetCfgDesc 
 422:c/usbd_customhid.c ****   *         return configuration descriptor
 423:c/usbd_customhid.c ****   * @param  speed : current device speed
 424:c/usbd_customhid.c ****   * @param  length : pointer data length
 425:c/usbd_customhid.c ****   * @retval pointer to descriptor buffer
 426:c/usbd_customhid.c ****   */
 427:c/usbd_customhid.c **** static uint8_t  *USBD_CUSTOM_HID_GetCfgDesc (uint16_t *length)
 428:c/usbd_customhid.c **** {
  25              		.loc 1 428 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s 			page 9


  30              	.LVL0:
 429:c/usbd_customhid.c ****   *length = sizeof (USBD_CUSTOM_HID_CfgDesc);
  31              		.loc 1 429 0
  32 0000 2923     		movs	r3, #41
  33 0002 0380     		strh	r3, [r0]	@ movhi
 430:c/usbd_customhid.c ****   return USBD_CUSTOM_HID_CfgDesc;
 431:c/usbd_customhid.c **** }
  34              		.loc 1 431 0
  35 0004 0048     		ldr	r0, .L2
  36              	.LVL1:
  37 0006 7047     		bx	lr
  38              	.L3:
  39              		.align	2
  40              	.L2:
  41 0008 00000000 		.word	.LANCHOR0
  42              		.cfi_endproc
  43              	.LFE68:
  45              		.section	.text.USBD_CUSTOM_HID_EP0_RxReady,"ax",%progbits
  46              		.align	1
  47              		.syntax unified
  48              		.thumb
  49              		.thumb_func
  50              		.fpu softvfp
  52              	USBD_CUSTOM_HID_EP0_RxReady:
  53              	.LFB71:
 432:c/usbd_customhid.c **** 
 433:c/usbd_customhid.c **** /**
 434:c/usbd_customhid.c ****   * @brief  USBD_CUSTOM_HID_DataIn
 435:c/usbd_customhid.c ****   *         handle data IN Stage
 436:c/usbd_customhid.c ****   * @param  pdev: device instance
 437:c/usbd_customhid.c ****   * @param  epnum: endpoint index
 438:c/usbd_customhid.c ****   * @retval status
 439:c/usbd_customhid.c ****   */
 440:c/usbd_customhid.c **** static uint8_t  USBD_CUSTOM_HID_DataIn (USBD_HandleTypeDef *pdev, 
 441:c/usbd_customhid.c ****                               uint8_t epnum)
 442:c/usbd_customhid.c **** {
 443:c/usbd_customhid.c ****   
 444:c/usbd_customhid.c ****   /* Ensure that the FIFO is empty before a new transfer, this condition could 
 445:c/usbd_customhid.c ****   be caused by  a new transfer before the end of the previous transfer */
 446:c/usbd_customhid.c ****   ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 447:c/usbd_customhid.c ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 448:c/usbd_customhid.c **** 
 449:c/usbd_customhid.c ****   return USBD_OK;
 450:c/usbd_customhid.c **** }
 451:c/usbd_customhid.c **** 
 452:c/usbd_customhid.c **** /**
 453:c/usbd_customhid.c ****   * @brief  USBD_CUSTOM_HID_DataOut
 454:c/usbd_customhid.c ****   *         handle data OUT Stage
 455:c/usbd_customhid.c ****   * @param  pdev: device instance
 456:c/usbd_customhid.c ****   * @param  epnum: endpoint index
 457:c/usbd_customhid.c ****   * @retval status
 458:c/usbd_customhid.c ****   */
 459:c/usbd_customhid.c **** static uint8_t  USBD_CUSTOM_HID_DataOut (USBD_HandleTypeDef *pdev, 
 460:c/usbd_customhid.c ****                               uint8_t epnum)
 461:c/usbd_customhid.c **** {
 462:c/usbd_customhid.c ****   
 463:c/usbd_customhid.c ****   USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;  
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s 			page 10


 464:c/usbd_customhid.c ****   
 465:c/usbd_customhid.c ****   /*
 466:c/usbd_customhid.c ****   ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0], 
 467:c/usbd_customhid.c ****                                                             hhid->Report_buf[1]);*/
 468:c/usbd_customhid.c ****     
 469:c/usbd_customhid.c ****   ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 470:c/usbd_customhid.c **** 
 471:c/usbd_customhid.c ****   USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf, 
 472:c/usbd_customhid.c ****                          USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 473:c/usbd_customhid.c **** 
 474:c/usbd_customhid.c ****   return USBD_OK;
 475:c/usbd_customhid.c **** }
 476:c/usbd_customhid.c **** 
 477:c/usbd_customhid.c **** /**
 478:c/usbd_customhid.c ****   * @brief  USBD_CUSTOM_HID_EP0_RxReady
 479:c/usbd_customhid.c ****   *         Handles control request data.
 480:c/usbd_customhid.c ****   * @param  pdev: device instance
 481:c/usbd_customhid.c ****   * @retval status
 482:c/usbd_customhid.c ****   */
 483:c/usbd_customhid.c **** uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
 484:c/usbd_customhid.c **** {
  54              		.loc 1 484 0
  55              		.cfi_startproc
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 0, uses_anonymous_args = 0
  58              	.LVL2:
  59 0000 10B5     		push	{r4, lr}
  60              		.cfi_def_cfa_offset 8
  61              		.cfi_offset 4, -8
  62              		.cfi_offset 14, -4
 485:c/usbd_customhid.c ****   USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;  
  63              		.loc 1 485 0
  64 0002 D0F81842 		ldr	r4, [r0, #536]
  65              	.LVL3:
 486:c/usbd_customhid.c **** 
 487:c/usbd_customhid.c ****   if (hhid->IsReportAvailable == 1)
  66              		.loc 1 487 0
  67 0006 E36C     		ldr	r3, [r4, #76]
  68 0008 012B     		cmp	r3, #1
  69 000a 06D1     		bne	.L5
 488:c/usbd_customhid.c ****   {
 489:c/usbd_customhid.c ****       /*
 490:c/usbd_customhid.c ****     ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0], 
 491:c/usbd_customhid.c ****                                                               hhid->Report_buf[1]); */
 492:c/usbd_customhid.c ****     ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
  70              		.loc 1 492 0
  71 000c D0F81C32 		ldr	r3, [r0, #540]
  72 0010 2046     		mov	r0, r4
  73              	.LVL4:
  74 0012 DB68     		ldr	r3, [r3, #12]
  75 0014 9847     		blx	r3
  76              	.LVL5:
 493:c/usbd_customhid.c **** 
 494:c/usbd_customhid.c ****     hhid->IsReportAvailable = 0;      
  77              		.loc 1 494 0
  78 0016 0023     		movs	r3, #0
  79 0018 E364     		str	r3, [r4, #76]
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s 			page 11


  80              	.L5:
 495:c/usbd_customhid.c ****   }
 496:c/usbd_customhid.c **** 
 497:c/usbd_customhid.c ****   return USBD_OK;
 498:c/usbd_customhid.c **** }
  81              		.loc 1 498 0
  82 001a 0020     		movs	r0, #0
  83 001c 10BD     		pop	{r4, pc}
  84              		.cfi_endproc
  85              	.LFE71:
  87              		.section	.text.USBD_CUSTOM_HID_GetDeviceQualifierDesc,"ax",%progbits
  88              		.align	1
  89              		.syntax unified
  90              		.thumb
  91              		.thumb_func
  92              		.fpu softvfp
  94              	USBD_CUSTOM_HID_GetDeviceQualifierDesc:
  95              	.LFB72:
 499:c/usbd_customhid.c **** 
 500:c/usbd_customhid.c **** /**
 501:c/usbd_customhid.c **** * @brief  DeviceQualifierDescriptor 
 502:c/usbd_customhid.c **** *         return Device Qualifier descriptor
 503:c/usbd_customhid.c **** * @param  length : pointer data length
 504:c/usbd_customhid.c **** * @retval pointer to descriptor buffer
 505:c/usbd_customhid.c **** */
 506:c/usbd_customhid.c **** static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
 507:c/usbd_customhid.c **** {
  96              		.loc 1 507 0
  97              		.cfi_startproc
  98              		@ args = 0, pretend = 0, frame = 0
  99              		@ frame_needed = 0, uses_anonymous_args = 0
 100              		@ link register save eliminated.
 101              	.LVL6:
 508:c/usbd_customhid.c ****   *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 102              		.loc 1 508 0
 103 0000 0A23     		movs	r3, #10
 104 0002 0380     		strh	r3, [r0]	@ movhi
 509:c/usbd_customhid.c ****   return USBD_CUSTOM_HID_DeviceQualifierDesc;
 510:c/usbd_customhid.c **** }
 105              		.loc 1 510 0
 106 0004 0048     		ldr	r0, .L7
 107              	.LVL7:
 108 0006 7047     		bx	lr
 109              	.L8:
 110              		.align	2
 111              	.L7:
 112 0008 00000000 		.word	.LANCHOR1
 113              		.cfi_endproc
 114              	.LFE72:
 116              		.section	.text.USBD_CUSTOM_HID_DataOut,"ax",%progbits
 117              		.align	1
 118              		.syntax unified
 119              		.thumb
 120              		.thumb_func
 121              		.fpu softvfp
 123              	USBD_CUSTOM_HID_DataOut:
 124              	.LFB70:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s 			page 12


 461:c/usbd_customhid.c ****   
 125              		.loc 1 461 0
 126              		.cfi_startproc
 127              		@ args = 0, pretend = 0, frame = 0
 128              		@ frame_needed = 0, uses_anonymous_args = 0
 129              	.LVL8:
 130 0000 38B5     		push	{r3, r4, r5, lr}
 131              		.cfi_def_cfa_offset 16
 132              		.cfi_offset 3, -16
 133              		.cfi_offset 4, -12
 134              		.cfi_offset 5, -8
 135              		.cfi_offset 14, -4
 461:c/usbd_customhid.c ****   
 136              		.loc 1 461 0
 137 0002 0446     		mov	r4, r0
 469:c/usbd_customhid.c **** 
 138              		.loc 1 469 0
 139 0004 D0F81852 		ldr	r5, [r0, #536]
 140 0008 D0F81C32 		ldr	r3, [r0, #540]
 141 000c 2846     		mov	r0, r5
 142              	.LVL9:
 143 000e DB68     		ldr	r3, [r3, #12]
 144 0010 9847     		blx	r3
 145              	.LVL10:
 471:c/usbd_customhid.c ****                          USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 146              		.loc 1 471 0
 147 0012 4023     		movs	r3, #64
 148 0014 2A46     		mov	r2, r5
 149 0016 0121     		movs	r1, #1
 150 0018 2046     		mov	r0, r4
 151 001a FFF7FEFF 		bl	USBD_LL_PrepareReceive
 152              	.LVL11:
 475:c/usbd_customhid.c **** 
 153              		.loc 1 475 0
 154 001e 0020     		movs	r0, #0
 155 0020 38BD     		pop	{r3, r4, r5, pc}
 156              		.cfi_endproc
 157              	.LFE70:
 159              		.section	.text.USBD_CUSTOM_HID_DataIn,"ax",%progbits
 160              		.align	1
 161              		.syntax unified
 162              		.thumb
 163              		.thumb_func
 164              		.fpu softvfp
 166              	USBD_CUSTOM_HID_DataIn:
 167              	.LFB69:
 442:c/usbd_customhid.c ****   
 168              		.loc 1 442 0
 169              		.cfi_startproc
 170              		@ args = 0, pretend = 0, frame = 0
 171              		@ frame_needed = 0, uses_anonymous_args = 0
 172              	.LVL12:
 173 0000 10B5     		push	{r4, lr}
 174              		.cfi_def_cfa_offset 8
 175              		.cfi_offset 4, -8
 176              		.cfi_offset 14, -4
 446:c/usbd_customhid.c ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s 			page 13


 177              		.loc 1 446 0
 178 0002 0024     		movs	r4, #0
 179 0004 D0F81832 		ldr	r3, [r0, #536]
 447:c/usbd_customhid.c **** 
 180              		.loc 1 447 0
 181 0008 0122     		movs	r2, #1
 446:c/usbd_customhid.c ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 182              		.loc 1 446 0
 183 000a 83F85040 		strb	r4, [r3, #80]
 447:c/usbd_customhid.c **** 
 184              		.loc 1 447 0
 185 000e 4FF40051 		mov	r1, #8192
 186              	.LVL13:
 187 0012 0248     		ldr	r0, .L11
 188              	.LVL14:
 189 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 190              	.LVL15:
 450:c/usbd_customhid.c **** 
 191              		.loc 1 450 0
 192 0018 2046     		mov	r0, r4
 193 001a 10BD     		pop	{r4, pc}
 194              	.L12:
 195              		.align	2
 196              	.L11:
 197 001c 00100140 		.word	1073811456
 198              		.cfi_endproc
 199              	.LFE69:
 201              		.section	.text.USBD_CUSTOM_HID_Setup,"ax",%progbits
 202              		.align	1
 203              		.syntax unified
 204              		.thumb
 205              		.thumb_func
 206              		.fpu softvfp
 208              	USBD_CUSTOM_HID_Setup:
 209              	.LFB66:
 313:c/usbd_customhid.c ****   uint16_t len = 0;
 210              		.loc 1 313 0
 211              		.cfi_startproc
 212              		@ args = 0, pretend = 0, frame = 0
 213              		@ frame_needed = 0, uses_anonymous_args = 0
 214              	.LVL16:
 215 0000 38B5     		push	{r3, r4, r5, lr}
 216              		.cfi_def_cfa_offset 16
 217              		.cfi_offset 3, -16
 218              		.cfi_offset 4, -12
 219              		.cfi_offset 5, -8
 220              		.cfi_offset 14, -4
 318:c/usbd_customhid.c ****   {
 221              		.loc 1 318 0
 222 0002 0C78     		ldrb	r4, [r1]	@ zero_extendqisi2
 313:c/usbd_customhid.c ****   uint16_t len = 0;
 223              		.loc 1 313 0
 224 0004 0546     		mov	r5, r0
 318:c/usbd_customhid.c ****   {
 225              		.loc 1 318 0
 226 0006 14F06004 		ands	r4, r4, #96
 316:c/usbd_customhid.c **** 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s 			page 14


 227              		.loc 1 316 0
 228 000a D0F81832 		ldr	r3, [r0, #536]
 229              	.LVL17:
 318:c/usbd_customhid.c ****   {
 230              		.loc 1 318 0
 231 000e 2DD0     		beq	.L15
 232 0010 202C     		cmp	r4, #32
 233 0012 0CD1     		bne	.L32
 321:c/usbd_customhid.c ****     {
 234              		.loc 1 321 0
 235 0014 4A78     		ldrb	r2, [r1, #1]	@ zero_extendqisi2
 236 0016 023A     		subs	r2, r2, #2
 237 0018 092A     		cmp	r2, #9
 238 001a 21D8     		bhi	.L17
 239 001c DFE802F0 		tbb	[pc, r2]
 240              	.LVL18:
 241              	.L19:
 242 0020 14       		.byte	(.L18-.L19)/2
 243 0021 09       		.byte	(.L20-.L19)/2
 244 0022 20       		.byte	(.L17-.L19)/2
 245 0023 20       		.byte	(.L17-.L19)/2
 246 0024 20       		.byte	(.L17-.L19)/2
 247 0025 20       		.byte	(.L17-.L19)/2
 248 0026 20       		.byte	(.L17-.L19)/2
 249 0027 18       		.byte	(.L21-.L19)/2
 250 0028 10       		.byte	(.L22-.L19)/2
 251 0029 05       		.byte	(.L23-.L19)/2
 252              		.p2align 1
 253              	.L23:
 326:c/usbd_customhid.c ****       break;
 254              		.loc 1 326 0
 255 002a 8A78     		ldrb	r2, [r1, #2]	@ zero_extendqisi2
 256 002c 1A64     		str	r2, [r3, #64]
 257              	.LVL19:
 258              	.L32:
 388:c/usbd_customhid.c **** }
 259              		.loc 1 388 0
 260 002e 0024     		movs	r4, #0
 261 0030 1AE0     		b	.L14
 262              	.LVL20:
 263              	.L20:
 330:c/usbd_customhid.c ****                         (uint8_t *)&hhid->Protocol,
 264              		.loc 1 330 0
 265 0032 0122     		movs	r2, #1
 266 0034 03F14001 		add	r1, r3, #64
 267              	.LVL21:
 268              	.L28:
 371:c/usbd_customhid.c ****                         pbuf,
 269              		.loc 1 371 0
 270 0038 2846     		mov	r0, r5
 271 003a FFF7FEFF 		bl	USBD_CtlSendData
 272              	.LVL22:
 273 003e F6E7     		b	.L32
 274              	.LVL23:
 275              	.L22:
 336:c/usbd_customhid.c ****       break;
 276              		.loc 1 336 0
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s 			page 15


 277 0040 4A88     		ldrh	r2, [r1, #2]
 278 0042 120A     		lsrs	r2, r2, #8
 279 0044 5A64     		str	r2, [r3, #68]
 280 0046 F2E7     		b	.L32
 281              	.L18:
 340:c/usbd_customhid.c ****                         (uint8_t *)&hhid->IdleState,
 282              		.loc 1 340 0
 283 0048 0122     		movs	r2, #1
 284 004a 03F14401 		add	r1, r3, #68
 285              	.LVL24:
 286 004e F3E7     		b	.L28
 287              	.LVL25:
 288              	.L21:
 346:c/usbd_customhid.c ****       USBD_CtlPrepareRx (pdev, hhid->Report_buf, (uint8_t)(req->wLength));
 289              		.loc 1 346 0
 290 0050 0122     		movs	r2, #1
 347:c/usbd_customhid.c ****       
 291              		.loc 1 347 0
 292 0052 2846     		mov	r0, r5
 346:c/usbd_customhid.c ****       USBD_CtlPrepareRx (pdev, hhid->Report_buf, (uint8_t)(req->wLength));
 293              		.loc 1 346 0
 294 0054 DA64     		str	r2, [r3, #76]
 347:c/usbd_customhid.c ****       
 295              		.loc 1 347 0
 296 0056 8A79     		ldrb	r2, [r1, #6]	@ zero_extendqisi2
 297 0058 1946     		mov	r1, r3
 298              	.LVL26:
 299 005a FFF7FEFF 		bl	USBD_CtlPrepareRx
 300              	.LVL27:
 301 005e E6E7     		b	.L32
 302              	.LVL28:
 303              	.L17:
 351:c/usbd_customhid.c ****       return USBD_FAIL; 
 304              		.loc 1 351 0
 305 0060 2846     		mov	r0, r5
 306 0062 FFF7FEFF 		bl	USBD_CtlError
 307              	.LVL29:
 352:c/usbd_customhid.c ****     }
 308              		.loc 1 352 0
 309 0066 0224     		movs	r4, #2
 310              	.LVL30:
 311              	.L14:
 389:c/usbd_customhid.c **** 
 312              		.loc 1 389 0
 313 0068 2046     		mov	r0, r4
 314 006a 38BD     		pop	{r3, r4, r5, pc}
 315              	.LVL31:
 316              	.L15:
 357:c/usbd_customhid.c ****     {
 317              		.loc 1 357 0
 318 006c 4A78     		ldrb	r2, [r1, #1]	@ zero_extendqisi2
 319 006e 0A2A     		cmp	r2, #10
 320 0070 1AD0     		beq	.L24
 321 0072 0B2A     		cmp	r2, #11
 322 0074 1ED0     		beq	.L25
 323 0076 062A     		cmp	r2, #6
 324 0078 F6D1     		bne	.L14
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s 			page 16


 360:c/usbd_customhid.c ****       {
 325              		.loc 1 360 0
 326 007a 4B88     		ldrh	r3, [r1, #2]
 327              	.LVL32:
 328 007c 1B0A     		lsrs	r3, r3, #8
 329 007e 222B     		cmp	r3, #34
 330 0080 07D1     		bne	.L27
 362:c/usbd_customhid.c ****         pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 331              		.loc 1 362 0
 332 0082 CA88     		ldrh	r2, [r1, #6]
 363:c/usbd_customhid.c ****       }
 333              		.loc 1 363 0
 334 0084 D0F81C32 		ldr	r3, [r0, #540]
 362:c/usbd_customhid.c ****         pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 335              		.loc 1 362 0
 336 0088 212A     		cmp	r2, #33
 337 008a 28BF     		it	cs
 338 008c 2122     		movcs	r2, #33
 339              	.LVL33:
 363:c/usbd_customhid.c ****       }
 340              		.loc 1 363 0
 341 008e 1968     		ldr	r1, [r3]
 342              	.LVL34:
 343 0090 D2E7     		b	.L28
 344              	.LVL35:
 345              	.L27:
 365:c/usbd_customhid.c ****       {
 346              		.loc 1 365 0
 347 0092 212B     		cmp	r3, #33
 348 0094 05D1     		bne	.L31
 349              	.LVL36:
 368:c/usbd_customhid.c ****       }
 350              		.loc 1 368 0
 351 0096 CA88     		ldrh	r2, [r1, #6]
 367:c/usbd_customhid.c ****         len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 352              		.loc 1 367 0
 353 0098 0849     		ldr	r1, .L34
 354              	.LVL37:
 368:c/usbd_customhid.c ****       }
 355              		.loc 1 368 0
 356 009a 092A     		cmp	r2, #9
 357 009c 28BF     		it	cs
 358 009e 0922     		movcs	r2, #9
 359              	.LVL38:
 360 00a0 CAE7     		b	.L28
 361              	.LVL39:
 362              	.L31:
 315:c/usbd_customhid.c ****   USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 363              		.loc 1 315 0
 364 00a2 2146     		mov	r1, r4
 365              	.LVL40:
 314:c/usbd_customhid.c ****   uint8_t  *pbuf = NULL;
 366              		.loc 1 314 0
 367 00a4 2246     		mov	r2, r4
 368 00a6 C7E7     		b	.L28
 369              	.LVL41:
 370              	.L24:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s 			page 17


 378:c/usbd_customhid.c ****                         (uint8_t *)&hhid->AltSetting,
 371              		.loc 1 378 0
 372 00a8 0122     		movs	r2, #1
 373 00aa 03F14801 		add	r1, r3, #72
 374              	.LVL42:
 375 00ae FFF7FEFF 		bl	USBD_CtlSendData
 376              	.LVL43:
 381:c/usbd_customhid.c ****       
 377              		.loc 1 381 0
 378 00b2 D9E7     		b	.L14
 379              	.LVL44:
 380              	.L25:
 384:c/usbd_customhid.c ****       break;
 381              		.loc 1 384 0
 382 00b4 8A78     		ldrb	r2, [r1, #2]	@ zero_extendqisi2
 383 00b6 9A64     		str	r2, [r3, #72]
 385:c/usbd_customhid.c ****     }
 384              		.loc 1 385 0
 385 00b8 D6E7     		b	.L14
 386              	.L35:
 387 00ba 00BF     		.align	2
 388              	.L34:
 389 00bc 00000000 		.word	.LANCHOR2
 390              		.cfi_endproc
 391              	.LFE66:
 393              		.section	.text.USBD_CUSTOM_HID_DeInit,"ax",%progbits
 394              		.align	1
 395              		.syntax unified
 396              		.thumb
 397              		.thumb_func
 398              		.fpu softvfp
 400              	USBD_CUSTOM_HID_DeInit:
 401              	.LFB65:
 285:c/usbd_customhid.c ****   /* Close CUSTOM_HID EP IN */
 402              		.loc 1 285 0
 403              		.cfi_startproc
 404              		@ args = 0, pretend = 0, frame = 0
 405              		@ frame_needed = 0, uses_anonymous_args = 0
 406              	.LVL45:
 407 0000 10B5     		push	{r4, lr}
 408              		.cfi_def_cfa_offset 8
 409              		.cfi_offset 4, -8
 410              		.cfi_offset 14, -4
 285:c/usbd_customhid.c ****   /* Close CUSTOM_HID EP IN */
 411              		.loc 1 285 0
 412 0002 0446     		mov	r4, r0
 287:c/usbd_customhid.c ****                   CUSTOM_HID_EPIN_ADDR);
 413              		.loc 1 287 0
 414 0004 8121     		movs	r1, #129
 415              	.LVL46:
 416 0006 FFF7FEFF 		bl	USBD_LL_CloseEP
 417              	.LVL47:
 291:c/usbd_customhid.c ****                   CUSTOM_HID_EPOUT_ADDR);
 418              		.loc 1 291 0
 419 000a 0121     		movs	r1, #1
 420 000c 2046     		mov	r0, r4
 421 000e FFF7FEFF 		bl	USBD_LL_CloseEP
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s 			page 18


 422              	.LVL48:
 295:c/usbd_customhid.c ****   {
 423              		.loc 1 295 0
 424 0012 D4F81832 		ldr	r3, [r4, #536]
 425 0016 53B1     		cbz	r3, .L37
 297:c/usbd_customhid.c ****     USBD_free(pdev->pClassData);
 426              		.loc 1 297 0
 427 0018 D4F81C32 		ldr	r3, [r4, #540]
 428 001c 9B68     		ldr	r3, [r3, #8]
 429 001e 9847     		blx	r3
 430              	.LVL49:
 298:c/usbd_customhid.c ****     pdev->pClassData = NULL;
 431              		.loc 1 298 0
 432 0020 D4F81802 		ldr	r0, [r4, #536]
 433 0024 FFF7FEFF 		bl	USBD_static_free
 434              	.LVL50:
 299:c/usbd_customhid.c ****   }
 435              		.loc 1 299 0
 436 0028 0023     		movs	r3, #0
 437 002a C4F81832 		str	r3, [r4, #536]
 438              	.L37:
 302:c/usbd_customhid.c **** 
 439              		.loc 1 302 0
 440 002e 0020     		movs	r0, #0
 441 0030 10BD     		pop	{r4, pc}
 442              		.cfi_endproc
 443              	.LFE65:
 445              		.section	.text.USBD_CUSTOM_HID_Init,"ax",%progbits
 446              		.align	1
 447              		.syntax unified
 448              		.thumb
 449              		.thumb_func
 450              		.fpu softvfp
 452              	USBD_CUSTOM_HID_Init:
 453              	.LFB64:
 241:c/usbd_customhid.c ****   uint8_t ret = 0;
 454              		.loc 1 241 0
 455              		.cfi_startproc
 456              		@ args = 0, pretend = 0, frame = 0
 457              		@ frame_needed = 0, uses_anonymous_args = 0
 458              	.LVL51:
 459 0000 70B5     		push	{r4, r5, r6, lr}
 460              		.cfi_def_cfa_offset 16
 461              		.cfi_offset 4, -16
 462              		.cfi_offset 5, -12
 463              		.cfi_offset 6, -8
 464              		.cfi_offset 14, -4
 241:c/usbd_customhid.c ****   uint8_t ret = 0;
 465              		.loc 1 241 0
 466 0002 0546     		mov	r5, r0
 245:c/usbd_customhid.c ****                  CUSTOM_HID_EPIN_ADDR,
 467              		.loc 1 245 0
 468 0004 0223     		movs	r3, #2
 469 0006 0322     		movs	r2, #3
 470 0008 8121     		movs	r1, #129
 471              	.LVL52:
 472 000a FFF7FEFF 		bl	USBD_LL_OpenEP
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s 			page 19


 473              	.LVL53:
 251:c/usbd_customhid.c ****                  CUSTOM_HID_EPOUT_ADDR,
 474              		.loc 1 251 0
 475 000e 0223     		movs	r3, #2
 476 0010 0322     		movs	r2, #3
 477 0012 0121     		movs	r1, #1
 478 0014 2846     		mov	r0, r5
 479 0016 FFF7FEFF 		bl	USBD_LL_OpenEP
 480              	.LVL54:
 256:c/usbd_customhid.c ****   
 481              		.loc 1 256 0
 482 001a 5420     		movs	r0, #84
 483 001c FFF7FEFF 		bl	USBD_static_malloc
 484              	.LVL55:
 485 0020 0646     		mov	r6, r0
 486 0022 C5F81802 		str	r0, [r5, #536]
 258:c/usbd_customhid.c ****   {
 487              		.loc 1 258 0
 488 0026 70B1     		cbz	r0, .L43
 489              	.LVL56:
 266:c/usbd_customhid.c ****     ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 490              		.loc 1 266 0
 491 0028 0024     		movs	r4, #0
 267:c/usbd_customhid.c ****           /* Prepare Out endpoint to receive 1st packet */ 
 492              		.loc 1 267 0
 493 002a D5F81C32 		ldr	r3, [r5, #540]
 266:c/usbd_customhid.c ****     ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 494              		.loc 1 266 0
 495 002e 80F85040 		strb	r4, [r0, #80]
 267:c/usbd_customhid.c ****           /* Prepare Out endpoint to receive 1st packet */ 
 496              		.loc 1 267 0
 497 0032 5B68     		ldr	r3, [r3, #4]
 498 0034 9847     		blx	r3
 499              	.LVL57:
 269:c/usbd_customhid.c ****                            USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 500              		.loc 1 269 0
 501 0036 4023     		movs	r3, #64
 502 0038 3246     		mov	r2, r6
 503 003a 0121     		movs	r1, #1
 504 003c 2846     		mov	r0, r5
 505 003e FFF7FEFF 		bl	USBD_LL_PrepareReceive
 506              	.LVL58:
 242:c/usbd_customhid.c ****   USBD_CUSTOM_HID_HandleTypeDef     *hhid;
 507              		.loc 1 242 0
 508 0042 2046     		mov	r0, r4
 509 0044 70BD     		pop	{r4, r5, r6, pc}
 510              	.LVL59:
 511              	.L43:
 260:c/usbd_customhid.c ****   }
 512              		.loc 1 260 0
 513 0046 0120     		movs	r0, #1
 514              	.LVL60:
 274:c/usbd_customhid.c **** 
 515              		.loc 1 274 0
 516 0048 70BD     		pop	{r4, r5, r6, pc}
 517              		.cfi_endproc
 518              	.LFE64:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s 			page 20


 520              		.section	.text.USBD_CUSTOM_HID_SendReport,"ax",%progbits
 521              		.align	1
 522              		.global	USBD_CUSTOM_HID_SendReport
 523              		.syntax unified
 524              		.thumb
 525              		.thumb_func
 526              		.fpu softvfp
 528              	USBD_CUSTOM_HID_SendReport:
 529              	.LFB67:
 401:c/usbd_customhid.c ****   USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 530              		.loc 1 401 0
 531              		.cfi_startproc
 532              		@ args = 0, pretend = 0, frame = 0
 533              		@ frame_needed = 0, uses_anonymous_args = 0
 534              	.LVL61:
 535 0000 70B5     		push	{r4, r5, r6, lr}
 536              		.cfi_def_cfa_offset 16
 537              		.cfi_offset 4, -16
 538              		.cfi_offset 5, -12
 539              		.cfi_offset 6, -8
 540              		.cfi_offset 14, -4
 401:c/usbd_customhid.c ****   USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 541              		.loc 1 401 0
 542 0002 1346     		mov	r3, r2
 404:c/usbd_customhid.c ****   {
 543              		.loc 1 404 0
 544 0004 90F8FC21 		ldrb	r2, [r0, #508]	@ zero_extendqisi2
 545              	.LVL62:
 546 0008 032A     		cmp	r2, #3
 547 000a 13D1     		bne	.L46
 402:c/usbd_customhid.c ****   
 548              		.loc 1 402 0
 549 000c D0F81862 		ldr	r6, [r0, #536]
 550 0010 0124     		movs	r4, #1
 406:c/usbd_customhid.c ****     {
 551              		.loc 1 406 0
 552 0012 96F85050 		ldrb	r5, [r6, #80]	@ zero_extendqisi2
 553 0016 6DB9     		cbnz	r5, .L46
 409:c/usbd_customhid.c ****                         CUSTOM_HID_EPIN_ADDR,                                      
 554              		.loc 1 409 0
 555 0018 0A46     		mov	r2, r1
 408:c/usbd_customhid.c ****       USBD_LL_Transmit (pdev, 
 556              		.loc 1 408 0
 557 001a 86F85040 		strb	r4, [r6, #80]
 409:c/usbd_customhid.c ****                         CUSTOM_HID_EPIN_ADDR,                                      
 558              		.loc 1 409 0
 559 001e 8121     		movs	r1, #129
 560              	.LVL63:
 561 0020 FFF7FEFF 		bl	USBD_LL_Transmit
 562              	.LVL64:
 413:c/usbd_customhid.c ****       return USBD_OK;
 563              		.loc 1 413 0
 564 0024 2A46     		mov	r2, r5
 565 0026 4FF40051 		mov	r1, #8192
 566 002a 0348     		ldr	r0, .L48
 567 002c FFF7FEFF 		bl	HAL_GPIO_WritePin
 568              	.LVL65:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s 			page 21


 414:c/usbd_customhid.c ****     }
 569              		.loc 1 414 0
 570 0030 2846     		mov	r0, r5
 571 0032 70BD     		pop	{r4, r5, r6, pc}
 572              	.LVL66:
 573              	.L46:
 417:c/usbd_customhid.c **** }
 574              		.loc 1 417 0
 575 0034 0120     		movs	r0, #1
 576              	.LVL67:
 577 0036 70BD     		pop	{r4, r5, r6, pc}
 578              	.L49:
 579              		.align	2
 580              	.L48:
 581 0038 00100140 		.word	1073811456
 582              		.cfi_endproc
 583              	.LFE67:
 585              		.section	.text.USBD_CUSTOM_HID_RegisterInterface,"ax",%progbits
 586              		.align	1
 587              		.global	USBD_CUSTOM_HID_RegisterInterface
 588              		.syntax unified
 589              		.thumb
 590              		.thumb_func
 591              		.fpu softvfp
 593              	USBD_CUSTOM_HID_RegisterInterface:
 594              	.LFB73:
 511:c/usbd_customhid.c **** 
 512:c/usbd_customhid.c **** /**
 513:c/usbd_customhid.c **** * @brief  USBD_CUSTOM_HID_RegisterInterface
 514:c/usbd_customhid.c ****   * @param  pdev: device instance
 515:c/usbd_customhid.c ****   * @param  fops: CUSTOMHID Interface callback
 516:c/usbd_customhid.c ****   * @retval status
 517:c/usbd_customhid.c ****   */
 518:c/usbd_customhid.c **** uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
 519:c/usbd_customhid.c ****                                              USBD_CUSTOM_HID_ItfTypeDef *fops)
 520:c/usbd_customhid.c **** {
 595              		.loc 1 520 0
 596              		.cfi_startproc
 597              		@ args = 0, pretend = 0, frame = 0
 598              		@ frame_needed = 0, uses_anonymous_args = 0
 599              		@ link register save eliminated.
 600              	.LVL68:
 521:c/usbd_customhid.c ****   uint8_t  ret = USBD_FAIL;
 522:c/usbd_customhid.c ****   
 523:c/usbd_customhid.c ****   if(fops != NULL)
 601              		.loc 1 523 0
 602 0000 19B1     		cbz	r1, .L52
 524:c/usbd_customhid.c ****   {
 525:c/usbd_customhid.c ****     pdev->pUserData= fops;
 603              		.loc 1 525 0
 604 0002 C0F81C12 		str	r1, [r0, #540]
 605              	.LVL69:
 526:c/usbd_customhid.c ****     ret = USBD_OK;    
 606              		.loc 1 526 0
 607 0006 0020     		movs	r0, #0
 608              	.LVL70:
 609 0008 7047     		bx	lr
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s 			page 22


 610              	.LVL71:
 611              	.L52:
 521:c/usbd_customhid.c ****   uint8_t  ret = USBD_FAIL;
 612              		.loc 1 521 0
 613 000a 0220     		movs	r0, #2
 614              	.LVL72:
 527:c/usbd_customhid.c ****   }
 528:c/usbd_customhid.c ****   
 529:c/usbd_customhid.c ****   return ret;
 530:c/usbd_customhid.c **** }
 615              		.loc 1 530 0
 616 000c 7047     		bx	lr
 617              		.cfi_endproc
 618              	.LFE73:
 620              		.global	USBD_CUSTOM_HID
 621              		.section	.data.USBD_CUSTOM_HID,"aw",%progbits
 622              		.align	2
 625              	USBD_CUSTOM_HID:
 626 0000 00000000 		.word	USBD_CUSTOM_HID_Init
 627 0004 00000000 		.word	USBD_CUSTOM_HID_DeInit
 628 0008 00000000 		.word	USBD_CUSTOM_HID_Setup
 629 000c 00000000 		.word	0
 630 0010 00000000 		.word	USBD_CUSTOM_HID_EP0_RxReady
 631 0014 00000000 		.word	USBD_CUSTOM_HID_DataIn
 632 0018 00000000 		.word	USBD_CUSTOM_HID_DataOut
 633 001c 00000000 		.word	0
 634 0020 00000000 		.word	0
 635 0024 00000000 		.word	0
 636 0028 00000000 		.word	USBD_CUSTOM_HID_GetCfgDesc
 637 002c 00000000 		.word	USBD_CUSTOM_HID_GetCfgDesc
 638 0030 00000000 		.word	USBD_CUSTOM_HID_GetCfgDesc
 639 0034 00000000 		.word	USBD_CUSTOM_HID_GetDeviceQualifierDesc
 640 0038 00000000 		.space	4
 641              		.section	.data.USBD_CUSTOM_HID_CfgDesc,"aw",%progbits
 642              		.align	2
 643              		.set	.LANCHOR0,. + 0
 646              	USBD_CUSTOM_HID_CfgDesc:
 647 0000 09       		.byte	9
 648 0001 02       		.byte	2
 649 0002 29       		.byte	41
 650 0003 00       		.byte	0
 651 0004 01       		.byte	1
 652 0005 01       		.byte	1
 653 0006 00       		.byte	0
 654 0007 C0       		.byte	-64
 655 0008 32       		.byte	50
 656 0009 09       		.byte	9
 657 000a 04       		.byte	4
 658 000b 00       		.byte	0
 659 000c 00       		.byte	0
 660 000d 02       		.byte	2
 661 000e 03       		.byte	3
 662 000f 00       		.byte	0
 663 0010 00       		.byte	0
 664 0011 00       		.byte	0
 665 0012 09       		.byte	9
 666 0013 21       		.byte	33
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s 			page 23


 667 0014 11       		.byte	17
 668 0015 01       		.byte	1
 669 0016 00       		.byte	0
 670 0017 01       		.byte	1
 671 0018 22       		.byte	34
 672 0019 21       		.byte	33
 673 001a 00       		.byte	0
 674 001b 07       		.byte	7
 675 001c 05       		.byte	5
 676 001d 81       		.byte	-127
 677 001e 03       		.byte	3
 678 001f 02       		.byte	2
 679 0020 00       		.byte	0
 680 0021 20       		.byte	32
 681 0022 07       		.byte	7
 682 0023 05       		.byte	5
 683 0024 01       		.byte	1
 684 0025 03       		.byte	3
 685 0026 02       		.byte	2
 686 0027 00       		.byte	0
 687 0028 20       		.byte	32
 688              		.section	.data.USBD_CUSTOM_HID_Desc,"aw",%progbits
 689              		.align	2
 690              		.set	.LANCHOR2,. + 0
 693              	USBD_CUSTOM_HID_Desc:
 694 0000 09       		.byte	9
 695 0001 21       		.byte	33
 696 0002 11       		.byte	17
 697 0003 01       		.byte	1
 698 0004 00       		.byte	0
 699 0005 01       		.byte	1
 700 0006 22       		.byte	34
 701 0007 21       		.byte	33
 702 0008 00       		.byte	0
 703              		.section	.data.USBD_CUSTOM_HID_DeviceQualifierDesc,"aw",%progbits
 704              		.align	2
 705              		.set	.LANCHOR1,. + 0
 708              	USBD_CUSTOM_HID_DeviceQualifierDesc:
 709 0000 0A       		.byte	10
 710 0001 06       		.byte	6
 711 0002 00       		.byte	0
 712 0003 02       		.byte	2
 713 0004 00       		.byte	0
 714 0005 00       		.byte	0
 715 0006 00       		.byte	0
 716 0007 40       		.byte	64
 717 0008 01       		.byte	1
 718 0009 00       		.byte	0
 719              		.text
 720              	.Letext0:
 721              		.file 2 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/machine/_
 722              		.file 3 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_stdi
 723              		.file 4 "c/core_cm3.h"
 724              		.file 5 "c/system_stm32f1xx.h"
 725              		.file 6 "c/stm32f103xb.h"
 726              		.file 7 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/lock.
 727              		.file 8 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_type
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s 			page 24


 728              		.file 9 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/lib/gcc/arm-none-eabi/6.3.1/inc
 729              		.file 10 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/reen
 730              		.file 11 "c/usbd_def.h"
 731              		.file 12 "c/usbd_customhid.h"
 732              		.file 13 "c/usbd_desc.h"
 733              		.file 14 "c/usbd_core.h"
 734              		.file 15 "c/stm32f1xx_hal_gpio.h"
 735              		.file 16 "c/usbd_ioreq.h"
 736              		.file 17 "c/usbd_ctlreq.h"
 737              		.file 18 "c/usbd_conf.h"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s 			page 25


DEFINED SYMBOLS
                            *ABS*:0000000000000000 usbd_customhid.c
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:16     .text.USBD_CUSTOM_HID_GetCfgDesc:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:22     .text.USBD_CUSTOM_HID_GetCfgDesc:0000000000000000 USBD_CUSTOM_HID_GetCfgDesc
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:41     .text.USBD_CUSTOM_HID_GetCfgDesc:0000000000000008 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:46     .text.USBD_CUSTOM_HID_EP0_RxReady:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:52     .text.USBD_CUSTOM_HID_EP0_RxReady:0000000000000000 USBD_CUSTOM_HID_EP0_RxReady
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:88     .text.USBD_CUSTOM_HID_GetDeviceQualifierDesc:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:94     .text.USBD_CUSTOM_HID_GetDeviceQualifierDesc:0000000000000000 USBD_CUSTOM_HID_GetDeviceQualifierDesc
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:112    .text.USBD_CUSTOM_HID_GetDeviceQualifierDesc:0000000000000008 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:117    .text.USBD_CUSTOM_HID_DataOut:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:123    .text.USBD_CUSTOM_HID_DataOut:0000000000000000 USBD_CUSTOM_HID_DataOut
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:160    .text.USBD_CUSTOM_HID_DataIn:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:166    .text.USBD_CUSTOM_HID_DataIn:0000000000000000 USBD_CUSTOM_HID_DataIn
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:197    .text.USBD_CUSTOM_HID_DataIn:000000000000001c $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:202    .text.USBD_CUSTOM_HID_Setup:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:208    .text.USBD_CUSTOM_HID_Setup:0000000000000000 USBD_CUSTOM_HID_Setup
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:242    .text.USBD_CUSTOM_HID_Setup:0000000000000020 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:252    .text.USBD_CUSTOM_HID_Setup:000000000000002a $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:389    .text.USBD_CUSTOM_HID_Setup:00000000000000bc $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:394    .text.USBD_CUSTOM_HID_DeInit:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:400    .text.USBD_CUSTOM_HID_DeInit:0000000000000000 USBD_CUSTOM_HID_DeInit
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:446    .text.USBD_CUSTOM_HID_Init:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:452    .text.USBD_CUSTOM_HID_Init:0000000000000000 USBD_CUSTOM_HID_Init
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:521    .text.USBD_CUSTOM_HID_SendReport:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:528    .text.USBD_CUSTOM_HID_SendReport:0000000000000000 USBD_CUSTOM_HID_SendReport
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:581    .text.USBD_CUSTOM_HID_SendReport:0000000000000038 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:586    .text.USBD_CUSTOM_HID_RegisterInterface:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:593    .text.USBD_CUSTOM_HID_RegisterInterface:0000000000000000 USBD_CUSTOM_HID_RegisterInterface
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:625    .data.USBD_CUSTOM_HID:0000000000000000 USBD_CUSTOM_HID
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:622    .data.USBD_CUSTOM_HID:0000000000000000 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:642    .data.USBD_CUSTOM_HID_CfgDesc:0000000000000000 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:646    .data.USBD_CUSTOM_HID_CfgDesc:0000000000000000 USBD_CUSTOM_HID_CfgDesc
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:689    .data.USBD_CUSTOM_HID_Desc:0000000000000000 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:693    .data.USBD_CUSTOM_HID_Desc:0000000000000000 USBD_CUSTOM_HID_Desc
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:704    .data.USBD_CUSTOM_HID_DeviceQualifierDesc:0000000000000000 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cck5Lm6F.s:708    .data.USBD_CUSTOM_HID_DeviceQualifierDesc:0000000000000000 USBD_CUSTOM_HID_DeviceQualifierDesc
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
USBD_LL_PrepareReceive
HAL_GPIO_WritePin
USBD_CtlSendData
USBD_CtlPrepareRx
USBD_CtlError
USBD_LL_CloseEP
USBD_static_free
USBD_LL_OpenEP
USBD_static_malloc
USBD_LL_Transmit
exit code: 0
OPT_LEVEL = Some("s")
HOST = Some("x86_64-apple-darwin")
CFLAGS_arm-none-eabi = None
CFLAGS_arm_none_eabi = None
TARGET_CFLAGS = None
CFLAGS = None
DEBUG = Some("true")
running: "arm-none-eabi-gcc" "-Os" "-ffunction-sections" "-fdata-sections" "-g" "-DSTM32F103xB" "-DUSE_HAL_DRIVER" "-mcpu=cortex-m3" "-mthumb" "-Wall" "-fdata-sections" "-ffunction-sections" "-Wa,-a,-ad" "-g" "-Wall" "-Wextra" "-o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/usbd_custom_hid_if.o" "-c" "c/usbd_custom_hid_if.c"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccP89Rtd.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"usbd_custom_hid_if.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.CUSTOM_HID_DeInit_FS,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	CUSTOM_HID_DeInit_FS:
  23              	.LFB65:
  24              		.file 1 "c/usbd_custom_hid_if.c"
   1:c/usbd_custom_hid_if.c **** /**
   2:c/usbd_custom_hid_if.c ****   ******************************************************************************
   3:c/usbd_custom_hid_if.c ****   * @file           : usbd_custom_hid_if.c
   4:c/usbd_custom_hid_if.c ****   * @brief          : USB Device Custom HID interface file.
   5:c/usbd_custom_hid_if.c ****   ******************************************************************************
   6:c/usbd_custom_hid_if.c ****   * This notice applies to any and all portions of this file
   7:c/usbd_custom_hid_if.c ****   * that are not between comment pairs USER CODE BEGIN and
   8:c/usbd_custom_hid_if.c ****   * USER CODE END. Other portions of this file, whether 
   9:c/usbd_custom_hid_if.c ****   * inserted by the user or by software development tools
  10:c/usbd_custom_hid_if.c ****   * are owned by their respective copyright owners.
  11:c/usbd_custom_hid_if.c ****   *
  12:c/usbd_custom_hid_if.c ****   * Copyright (c) 2017 STMicroelectronics International N.V. 
  13:c/usbd_custom_hid_if.c ****   * All rights reserved.
  14:c/usbd_custom_hid_if.c ****   *
  15:c/usbd_custom_hid_if.c ****   * Redistribution and use in source and binary forms, with or without 
  16:c/usbd_custom_hid_if.c ****   * modification, are permitted, provided that the following conditions are met:
  17:c/usbd_custom_hid_if.c ****   *
  18:c/usbd_custom_hid_if.c ****   * 1. Redistribution of source code must retain the above copyright notice, 
  19:c/usbd_custom_hid_if.c ****   *    this list of conditions and the following disclaimer.
  20:c/usbd_custom_hid_if.c ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  21:c/usbd_custom_hid_if.c ****   *    this list of conditions and the following disclaimer in the documentation
  22:c/usbd_custom_hid_if.c ****   *    and/or other materials provided with the distribution.
  23:c/usbd_custom_hid_if.c ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  24:c/usbd_custom_hid_if.c ****   *    contributors to this software may be used to endorse or promote products 
  25:c/usbd_custom_hid_if.c ****   *    derived from this software without specific written permission.
  26:c/usbd_custom_hid_if.c ****   * 4. This software, including modifications and/or derivative works of this 
  27:c/usbd_custom_hid_if.c ****   *    software, must execute solely and exclusively on microcontroller or
  28:c/usbd_custom_hid_if.c ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  29:c/usbd_custom_hid_if.c ****   * 5. Redistribution and use of this software other than as permitted under 
  30:c/usbd_custom_hid_if.c ****   *    this license is void and will automatically terminate your rights under 
  31:c/usbd_custom_hid_if.c ****   *    this license. 
  32:c/usbd_custom_hid_if.c ****   *
  33:c/usbd_custom_hid_if.c ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  34:c/usbd_custom_hid_if.c ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccP89Rtd.s 			page 2


  35:c/usbd_custom_hid_if.c ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  36:c/usbd_custom_hid_if.c ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  37:c/usbd_custom_hid_if.c ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  38:c/usbd_custom_hid_if.c ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  39:c/usbd_custom_hid_if.c ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  40:c/usbd_custom_hid_if.c ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  41:c/usbd_custom_hid_if.c ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  42:c/usbd_custom_hid_if.c ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  43:c/usbd_custom_hid_if.c ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  44:c/usbd_custom_hid_if.c ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  45:c/usbd_custom_hid_if.c ****   *
  46:c/usbd_custom_hid_if.c ****   ******************************************************************************
  47:c/usbd_custom_hid_if.c **** */
  48:c/usbd_custom_hid_if.c **** 
  49:c/usbd_custom_hid_if.c **** /* Includes ------------------------------------------------------------------*/
  50:c/usbd_custom_hid_if.c **** #include "usbd_custom_hid_if.h"
  51:c/usbd_custom_hid_if.c **** /* USER CODE BEGIN INCLUDE */
  52:c/usbd_custom_hid_if.c **** /* USER CODE END INCLUDE */
  53:c/usbd_custom_hid_if.c **** /** @addtogroup STM32_USB_OTG_DEVICE_LIBRARY
  54:c/usbd_custom_hid_if.c ****   * @{
  55:c/usbd_custom_hid_if.c ****   */
  56:c/usbd_custom_hid_if.c **** 
  57:c/usbd_custom_hid_if.c **** /** @defgroup USBD_CUSTOM_HID 
  58:c/usbd_custom_hid_if.c ****   * @brief usbd core module
  59:c/usbd_custom_hid_if.c ****   * @{
  60:c/usbd_custom_hid_if.c ****   */ 
  61:c/usbd_custom_hid_if.c **** 
  62:c/usbd_custom_hid_if.c **** /** @defgroup USBD_CUSTOM_HID_Private_TypesDefinitions
  63:c/usbd_custom_hid_if.c ****   * @{
  64:c/usbd_custom_hid_if.c ****   */ 
  65:c/usbd_custom_hid_if.c **** /* USER CODE BEGIN PRIVATE_TYPES */
  66:c/usbd_custom_hid_if.c **** /* USER CODE END PRIVATE_TYPES */ 
  67:c/usbd_custom_hid_if.c **** /**
  68:c/usbd_custom_hid_if.c ****   * @}
  69:c/usbd_custom_hid_if.c ****   */ 
  70:c/usbd_custom_hid_if.c **** 
  71:c/usbd_custom_hid_if.c **** /** @defgroup USBD_CUSTOM_HID_Private_Defines
  72:c/usbd_custom_hid_if.c ****   * @{
  73:c/usbd_custom_hid_if.c ****   */ 
  74:c/usbd_custom_hid_if.c **** /* USER CODE BEGIN PRIVATE_DEFINES */
  75:c/usbd_custom_hid_if.c **** /* USER CODE END PRIVATE_DEFINES */
  76:c/usbd_custom_hid_if.c ****   
  77:c/usbd_custom_hid_if.c **** /**
  78:c/usbd_custom_hid_if.c ****   * @}
  79:c/usbd_custom_hid_if.c ****   */ 
  80:c/usbd_custom_hid_if.c **** 
  81:c/usbd_custom_hid_if.c **** /** @defgroup USBD_CUSTOM_HID_Private_Macros
  82:c/usbd_custom_hid_if.c ****   * @{
  83:c/usbd_custom_hid_if.c ****   */ 
  84:c/usbd_custom_hid_if.c **** /* USER CODE BEGIN PRIVATE_MACRO */
  85:c/usbd_custom_hid_if.c **** /* USER CODE END PRIVATE_MACRO */
  86:c/usbd_custom_hid_if.c **** 
  87:c/usbd_custom_hid_if.c **** /**
  88:c/usbd_custom_hid_if.c ****   * @}
  89:c/usbd_custom_hid_if.c ****   */ 
  90:c/usbd_custom_hid_if.c **** 
  91:c/usbd_custom_hid_if.c **** /** @defgroup USBD_AUDIO_IF_Private_Variables
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccP89Rtd.s 			page 3


  92:c/usbd_custom_hid_if.c ****  * @{
  93:c/usbd_custom_hid_if.c ****  */
  94:c/usbd_custom_hid_if.c **** __ALIGN_BEGIN static uint8_t CUSTOM_HID_ReportDesc_FS[USBD_CUSTOM_HID_REPORT_DESC_SIZE] __ALIGN_END
  95:c/usbd_custom_hid_if.c **** {
  96:c/usbd_custom_hid_if.c ****   0x05, 0x01, // usage page: generic desktop
  97:c/usbd_custom_hid_if.c ****   0x09, 0x01, // usage: undefine
  98:c/usbd_custom_hid_if.c ****   0xa1, 0x01, // collection: application
  99:c/usbd_custom_hid_if.c ****   // 6 bytes
 100:c/usbd_custom_hid_if.c **** 
 101:c/usbd_custom_hid_if.c ****   // The Input report
 102:c/usbd_custom_hid_if.c ****   0x09, 0x00, // usage id: undefined
 103:c/usbd_custom_hid_if.c ****   0x15, 0x00, // LOGICAL_MINIMUM (0)
 104:c/usbd_custom_hid_if.c ****   0x26, 0xff, 0x00, // LOGICAL_MAXIMUM (255)
 105:c/usbd_custom_hid_if.c ****   0x75, 0x08, // REPORT_SIZE (8)
 106:c/usbd_custom_hid_if.c ****   0x95, 0x40, // REPORT_COUNT (64)
 107:c/usbd_custom_hid_if.c ****   0x81, 0x02, // INPUT (Data,Var,Abs)
 108:c/usbd_custom_hid_if.c ****   // 13 bytes
 109:c/usbd_custom_hid_if.c ****   
 110:c/usbd_custom_hid_if.c ****   // The Output report
 111:c/usbd_custom_hid_if.c ****   0x09,0x00, // usage id: undefined
 112:c/usbd_custom_hid_if.c ****   0x15,0x00, // LOGICAL_MINIMUM (0)
 113:c/usbd_custom_hid_if.c ****   0x26,0xff,0x00, // LOGICAL_MAXIMUM (255)
 114:c/usbd_custom_hid_if.c ****   0x75,0x08, // REPORT_SIZE (8)
 115:c/usbd_custom_hid_if.c ****   0x95,0x40, // REPORT_COUNT (64)
 116:c/usbd_custom_hid_if.c ****   0x91,0x02, // OUTPUT (Data,Var,Abs)
 117:c/usbd_custom_hid_if.c ****   // 13 bytes
 118:c/usbd_custom_hid_if.c ****   0xC0       // collection: end
 119:c/usbd_custom_hid_if.c **** };
 120:c/usbd_custom_hid_if.c **** 
 121:c/usbd_custom_hid_if.c **** /* USER CODE BEGIN PRIVATE_VARIABLES */
 122:c/usbd_custom_hid_if.c **** /* USER CODE END PRIVATE_VARIABLES */
 123:c/usbd_custom_hid_if.c **** /**
 124:c/usbd_custom_hid_if.c ****   * @}
 125:c/usbd_custom_hid_if.c ****   */ 
 126:c/usbd_custom_hid_if.c ****   
 127:c/usbd_custom_hid_if.c **** /** @defgroup USBD_CUSTOM_HID_IF_Exported_Variables
 128:c/usbd_custom_hid_if.c ****   * @{
 129:c/usbd_custom_hid_if.c ****   */ 
 130:c/usbd_custom_hid_if.c ****   extern USBD_HandleTypeDef hUsbDeviceFS;
 131:c/usbd_custom_hid_if.c **** /* USER CODE BEGIN EXPORTED_VARIABLES */
 132:c/usbd_custom_hid_if.c **** /* USER CODE END EXPORTED_VARIABLES */
 133:c/usbd_custom_hid_if.c **** 
 134:c/usbd_custom_hid_if.c **** /**
 135:c/usbd_custom_hid_if.c ****   * @}
 136:c/usbd_custom_hid_if.c ****   */ 
 137:c/usbd_custom_hid_if.c ****   
 138:c/usbd_custom_hid_if.c **** /** @defgroup USBD_CUSTOM_HID_Private_FunctionPrototypes
 139:c/usbd_custom_hid_if.c ****   * @{
 140:c/usbd_custom_hid_if.c ****   */
 141:c/usbd_custom_hid_if.c **** static int8_t CUSTOM_HID_Init_FS     (void);
 142:c/usbd_custom_hid_if.c **** static int8_t CUSTOM_HID_DeInit_FS   (void);
 143:c/usbd_custom_hid_if.c **** //static int8_t CUSTOM_HID_OutEvent_FS (uint8_t event_idx, uint8_t state);
 144:c/usbd_custom_hid_if.c **** static int8_t CUSTOM_HID_OutEvent_FS (uint8_t *);
 145:c/usbd_custom_hid_if.c ****  
 146:c/usbd_custom_hid_if.c **** 
 147:c/usbd_custom_hid_if.c **** USBD_CUSTOM_HID_ItfTypeDef USBD_CustomHID_fops_FS = 
 148:c/usbd_custom_hid_if.c **** {
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccP89Rtd.s 			page 4


 149:c/usbd_custom_hid_if.c ****   CUSTOM_HID_ReportDesc_FS,
 150:c/usbd_custom_hid_if.c ****   CUSTOM_HID_Init_FS,
 151:c/usbd_custom_hid_if.c ****   CUSTOM_HID_DeInit_FS,
 152:c/usbd_custom_hid_if.c ****   CUSTOM_HID_OutEvent_FS,
 153:c/usbd_custom_hid_if.c **** };
 154:c/usbd_custom_hid_if.c **** 
 155:c/usbd_custom_hid_if.c **** /* Private functions ---------------------------------------------------------*/
 156:c/usbd_custom_hid_if.c **** /**
 157:c/usbd_custom_hid_if.c ****   * @brief  CUSTOM_HID_Init_FS
 158:c/usbd_custom_hid_if.c ****   *         Initializes the CUSTOM HID media low layer
 159:c/usbd_custom_hid_if.c ****   * @param  None
 160:c/usbd_custom_hid_if.c ****   * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 161:c/usbd_custom_hid_if.c ****   */
 162:c/usbd_custom_hid_if.c **** static int8_t CUSTOM_HID_Init_FS(void)
 163:c/usbd_custom_hid_if.c **** { 
 164:c/usbd_custom_hid_if.c ****   /* USER CODE BEGIN 4 */ 
 165:c/usbd_custom_hid_if.c ****   return (0);
 166:c/usbd_custom_hid_if.c ****   /* USER CODE END 4 */ 
 167:c/usbd_custom_hid_if.c **** }
 168:c/usbd_custom_hid_if.c **** 
 169:c/usbd_custom_hid_if.c **** /**
 170:c/usbd_custom_hid_if.c ****   * @brief  CUSTOM_HID_DeInit_FS
 171:c/usbd_custom_hid_if.c ****   *         DeInitializes the CUSTOM HID media low layer
 172:c/usbd_custom_hid_if.c ****   * @param  None
 173:c/usbd_custom_hid_if.c ****   * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 174:c/usbd_custom_hid_if.c ****   */
 175:c/usbd_custom_hid_if.c **** static int8_t CUSTOM_HID_DeInit_FS(void)
 176:c/usbd_custom_hid_if.c **** {
  25              		.loc 1 176 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
 177:c/usbd_custom_hid_if.c ****   /* USER CODE BEGIN 5 */ 
 178:c/usbd_custom_hid_if.c ****   return (0);
 179:c/usbd_custom_hid_if.c ****   /* USER CODE END 5 */ 
 180:c/usbd_custom_hid_if.c **** }
  30              		.loc 1 180 0
  31 0000 0020     		movs	r0, #0
  32 0002 7047     		bx	lr
  33              		.cfi_endproc
  34              	.LFE65:
  36              		.section	.text.CUSTOM_HID_OutEvent_FS,"ax",%progbits
  37              		.align	1
  38              		.syntax unified
  39              		.thumb
  40              		.thumb_func
  41              		.fpu softvfp
  43              	CUSTOM_HID_OutEvent_FS:
  44              	.LFB66:
 181:c/usbd_custom_hid_if.c **** 
 182:c/usbd_custom_hid_if.c **** /**
 183:c/usbd_custom_hid_if.c ****   * @brief  CUSTOM_HID_OutEvent_FS
 184:c/usbd_custom_hid_if.c ****   *         Manage the CUSTOM HID class events       
 185:c/usbd_custom_hid_if.c ****   * @param  event_idx: event index
 186:c/usbd_custom_hid_if.c ****   * @param  state: event state
 187:c/usbd_custom_hid_if.c ****   * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccP89Rtd.s 			page 5


 188:c/usbd_custom_hid_if.c ****   */
 189:c/usbd_custom_hid_if.c **** uint8_t hid_recv_data[64];
 190:c/usbd_custom_hid_if.c **** uint32_t hid_recv_len;
 191:c/usbd_custom_hid_if.c **** //static int8_t CUSTOM_HID_OutEvent_FS  (uint8_t event_idx, uint8_t state)
 192:c/usbd_custom_hid_if.c **** static int8_t CUSTOM_HID_OutEvent_FS  (uint8_t *buff)
 193:c/usbd_custom_hid_if.c **** {
  45              		.loc 1 193 0
  46              		.cfi_startproc
  47              		@ args = 0, pretend = 0, frame = 0
  48              		@ frame_needed = 0, uses_anonymous_args = 0
  49              	.LVL0:
  50 0000 30B5     		push	{r4, r5, lr}
  51              		.cfi_def_cfa_offset 12
  52              		.cfi_offset 4, -12
  53              		.cfi_offset 5, -8
  54              		.cfi_offset 14, -4
 194:c/usbd_custom_hid_if.c ****     uint32_t i;
 195:c/usbd_custom_hid_if.c ****     for (i = 0; i < 64 && buff[i]; i++)
 196:c/usbd_custom_hid_if.c ****         hid_recv_data[hid_recv_len++] = buff[i];
  55              		.loc 1 196 0
  56 0002 084A     		ldr	r2, .L8
  57 0004 084C     		ldr	r4, .L8+4
  58 0006 431E     		subs	r3, r0, #1
  59 0008 3F30     		adds	r0, r0, #63
  60              	.LVL1:
  61              	.L3:
 195:c/usbd_custom_hid_if.c ****         hid_recv_data[hid_recv_len++] = buff[i];
  62              		.loc 1 195 0 discriminator 3
  63 000a 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
  64 000c 39B1     		cbz	r1, .L7
  65              		.loc 1 196 0 discriminator 4
  66 000e 1168     		ldr	r1, [r2]
  67 0010 4D1C     		adds	r5, r1, #1
  68 0012 1560     		str	r5, [r2]
  69 0014 13F8015F 		ldrb	r5, [r3, #1]!	@ zero_extendqisi2
  70              	.LVL2:
 195:c/usbd_custom_hid_if.c ****         hid_recv_data[hid_recv_len++] = buff[i];
  71              		.loc 1 195 0 discriminator 4
  72 0018 8342     		cmp	r3, r0
  73              		.loc 1 196 0 discriminator 4
  74 001a 6554     		strb	r5, [r4, r1]
  75              	.LVL3:
 195:c/usbd_custom_hid_if.c ****         hid_recv_data[hid_recv_len++] = buff[i];
  76              		.loc 1 195 0 discriminator 4
  77 001c F5D1     		bne	.L3
  78              	.LVL4:
  79              	.L7:
 197:c/usbd_custom_hid_if.c ****     return 0;
 198:c/usbd_custom_hid_if.c **** }
  80              		.loc 1 198 0
  81 001e 0020     		movs	r0, #0
  82              	.LVL5:
  83 0020 30BD     		pop	{r4, r5, pc}
  84              	.L9:
  85 0022 00BF     		.align	2
  86              	.L8:
  87 0024 00000000 		.word	hid_recv_len
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccP89Rtd.s 			page 6


  88 0028 00000000 		.word	hid_recv_data
  89              		.cfi_endproc
  90              	.LFE66:
  92              		.section	.text.CUSTOM_HID_Init_FS,"ax",%progbits
  93              		.align	1
  94              		.syntax unified
  95              		.thumb
  96              		.thumb_func
  97              		.fpu softvfp
  99              	CUSTOM_HID_Init_FS:
 100              	.LFB69:
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 0, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105 0000 0020     		movs	r0, #0
 106 0002 7047     		bx	lr
 107              		.cfi_endproc
 108              	.LFE69:
 110              		.section	.text.USBD_CUSTOM_HID_SendReport_FS,"ax",%progbits
 111              		.align	1
 112              		.global	USBD_CUSTOM_HID_SendReport_FS
 113              		.syntax unified
 114              		.thumb
 115              		.thumb_func
 116              		.fpu softvfp
 118              	USBD_CUSTOM_HID_SendReport_FS:
 119              	.LFB67:
 199:c/usbd_custom_hid_if.c **** 
 200:c/usbd_custom_hid_if.c **** /* USER CODE BEGIN 7 */ 
 201:c/usbd_custom_hid_if.c **** /**
 202:c/usbd_custom_hid_if.c ****   * @brief  USBD_CUSTOM_HID_SendReport_FS
 203:c/usbd_custom_hid_if.c ****   *         Send the report to the Host       
 204:c/usbd_custom_hid_if.c ****   * @param  report: the report to be sent
 205:c/usbd_custom_hid_if.c ****   * @param  len: the report length
 206:c/usbd_custom_hid_if.c ****   * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 207:c/usbd_custom_hid_if.c ****   */
 208:c/usbd_custom_hid_if.c **** 
 209:c/usbd_custom_hid_if.c **** int8_t USBD_CUSTOM_HID_SendReport_FS ( uint8_t *report,uint16_t len)
 210:c/usbd_custom_hid_if.c **** {
 120              		.loc 1 210 0
 121              		.cfi_startproc
 122              		@ args = 0, pretend = 0, frame = 0
 123              		@ frame_needed = 0, uses_anonymous_args = 0
 124              	.LVL6:
 211:c/usbd_custom_hid_if.c ****   return USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, len); 
 125              		.loc 1 211 0
 126 0000 0A46     		mov	r2, r1
 210:c/usbd_custom_hid_if.c ****   return USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, len); 
 127              		.loc 1 210 0
 128 0002 08B5     		push	{r3, lr}
 129              		.cfi_def_cfa_offset 8
 130              		.cfi_offset 3, -8
 131              		.cfi_offset 14, -4
 132              		.loc 1 211 0
 133 0004 0146     		mov	r1, r0
 134              	.LVL7:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccP89Rtd.s 			page 7


 135 0006 0248     		ldr	r0, .L12
 136              	.LVL8:
 137 0008 FFF7FEFF 		bl	USBD_CUSTOM_HID_SendReport
 138              	.LVL9:
 212:c/usbd_custom_hid_if.c **** }
 139              		.loc 1 212 0
 140 000c 40B2     		sxtb	r0, r0
 141 000e 08BD     		pop	{r3, pc}
 142              	.L13:
 143              		.align	2
 144              	.L12:
 145 0010 00000000 		.word	hUsbDeviceFS
 146              		.cfi_endproc
 147              	.LFE67:
 149              		.comm	hid_recv_len,4,4
 150              		.comm	hid_recv_data,64,1
 151              		.global	USBD_CustomHID_fops_FS
 152              		.section	.data.CUSTOM_HID_ReportDesc_FS,"aw",%progbits
 153              		.align	2
 156              	CUSTOM_HID_ReportDesc_FS:
 157 0000 05       		.byte	5
 158 0001 01       		.byte	1
 159 0002 09       		.byte	9
 160 0003 01       		.byte	1
 161 0004 A1       		.byte	-95
 162 0005 01       		.byte	1
 163 0006 09       		.byte	9
 164 0007 00       		.byte	0
 165 0008 15       		.byte	21
 166 0009 00       		.byte	0
 167 000a 26       		.byte	38
 168 000b FF       		.byte	-1
 169 000c 00       		.byte	0
 170 000d 75       		.byte	117
 171 000e 08       		.byte	8
 172 000f 95       		.byte	-107
 173 0010 40       		.byte	64
 174 0011 81       		.byte	-127
 175 0012 02       		.byte	2
 176 0013 09       		.byte	9
 177 0014 00       		.byte	0
 178 0015 15       		.byte	21
 179 0016 00       		.byte	0
 180 0017 26       		.byte	38
 181 0018 FF       		.byte	-1
 182 0019 00       		.byte	0
 183 001a 75       		.byte	117
 184 001b 08       		.byte	8
 185 001c 95       		.byte	-107
 186 001d 40       		.byte	64
 187 001e 91       		.byte	-111
 188 001f 02       		.byte	2
 189 0020 C0       		.byte	-64
 190              		.section	.data.USBD_CustomHID_fops_FS,"aw",%progbits
 191              		.align	2
 194              	USBD_CustomHID_fops_FS:
 195 0000 00000000 		.word	CUSTOM_HID_ReportDesc_FS
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccP89Rtd.s 			page 8


 196 0004 00000000 		.word	CUSTOM_HID_Init_FS
 197 0008 00000000 		.word	CUSTOM_HID_DeInit_FS
 198 000c 00000000 		.word	CUSTOM_HID_OutEvent_FS
 199              		.text
 200              	.Letext0:
 201              		.file 2 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/machine/_
 202              		.file 3 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_stdi
 203              		.file 4 "c/core_cm3.h"
 204              		.file 5 "c/system_stm32f1xx.h"
 205              		.file 6 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/lock.
 206              		.file 7 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_type
 207              		.file 8 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/lib/gcc/arm-none-eabi/6.3.1/inc
 208              		.file 9 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/reent
 209              		.file 10 "c/usbd_def.h"
 210              		.file 11 "c/usbd_customhid.h"
 211              		.file 12 "c/usbd_custom_hid_if.h"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccP89Rtd.s 			page 9


DEFINED SYMBOLS
                            *ABS*:0000000000000000 usbd_custom_hid_if.c
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccP89Rtd.s:16     .text.CUSTOM_HID_DeInit_FS:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccP89Rtd.s:22     .text.CUSTOM_HID_DeInit_FS:0000000000000000 CUSTOM_HID_DeInit_FS
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccP89Rtd.s:37     .text.CUSTOM_HID_OutEvent_FS:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccP89Rtd.s:43     .text.CUSTOM_HID_OutEvent_FS:0000000000000000 CUSTOM_HID_OutEvent_FS
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccP89Rtd.s:87     .text.CUSTOM_HID_OutEvent_FS:0000000000000024 $d
                            *COM*:0000000000000004 hid_recv_len
                            *COM*:0000000000000040 hid_recv_data
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccP89Rtd.s:93     .text.CUSTOM_HID_Init_FS:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccP89Rtd.s:99     .text.CUSTOM_HID_Init_FS:0000000000000000 CUSTOM_HID_Init_FS
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccP89Rtd.s:111    .text.USBD_CUSTOM_HID_SendReport_FS:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccP89Rtd.s:118    .text.USBD_CUSTOM_HID_SendReport_FS:0000000000000000 USBD_CUSTOM_HID_SendReport_FS
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccP89Rtd.s:145    .text.USBD_CUSTOM_HID_SendReport_FS:0000000000000010 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccP89Rtd.s:194    .data.USBD_CustomHID_fops_FS:0000000000000000 USBD_CustomHID_fops_FS
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccP89Rtd.s:153    .data.CUSTOM_HID_ReportDesc_FS:0000000000000000 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccP89Rtd.s:156    .data.CUSTOM_HID_ReportDesc_FS:0000000000000000 CUSTOM_HID_ReportDesc_FS
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccP89Rtd.s:191    .data.USBD_CustomHID_fops_FS:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
USBD_CUSTOM_HID_SendReport
hUsbDeviceFS
exit code: 0
OPT_LEVEL = Some("s")
HOST = Some("x86_64-apple-darwin")
CFLAGS_arm-none-eabi = None
CFLAGS_arm_none_eabi = None
TARGET_CFLAGS = None
CFLAGS = None
DEBUG = Some("true")
running: "arm-none-eabi-gcc" "-Os" "-ffunction-sections" "-fdata-sections" "-g" "-DSTM32F103xB" "-DUSE_HAL_DRIVER" "-mcpu=cortex-m3" "-mthumb" "-Wall" "-fdata-sections" "-ffunction-sections" "-Wa,-a,-ad" "-g" "-Wall" "-Wextra" "-o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/usbd_desc.o" "-c" "c/usbd_desc.c"
cargo:warning=c/usbd_desc.c: In function 'USBD_FS_DeviceDescriptor':
cargo:warning=c/usbd_desc.c:189:56: warning: unused parameter 'speed' [-Wunused-parameter]
cargo:warning= uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
cargo:warning=                                                        ^~~~~
cargo:warning=c/usbd_desc.c: In function 'USBD_FS_LangIDStrDescriptor':
cargo:warning=c/usbd_desc.c:202:59: warning: unused parameter 'speed' [-Wunused-parameter]
cargo:warning= uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
cargo:warning=                                                           ^~~~~
cargo:warning=c/usbd_desc.c: In function 'USBD_FS_ProductStrDescriptor':
cargo:warning=c/usbd_desc.c:78:36: warning: pointer targets in passing argument 1 of 'USBD_GetString' differ in signedness [-Wpointer-sign]
cargo:warning= #define USBD_PRODUCT_STRING_FS     "STM32 Custom Human interface"
cargo:warning=                                    ^
cargo:warning=c/usbd_desc.c:219:21: note: in expansion of macro 'USBD_PRODUCT_STRING_FS'
cargo:warning=     USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
cargo:warning=                     ^~~~~~~~~~~~~~~~~~~~~~
cargo:warning=In file included from c/usbd_core.h:40:0,
cargo:warning=                 from c/usbd_desc.c:51:
cargo:warning=c/usbd_ctlreq.h:93:6: note: expected 'uint8_t * {aka unsigned char *}' but argument is of type 'char *'
cargo:warning= void USBD_GetString         (uint8_t *desc, uint8_t *unicode, uint16_t *len);
cargo:warning=      ^~~~~~~~~~~~~~
cargo:warning=c/usbd_desc.c:78:36: warning: pointer targets in passing argument 1 of 'USBD_GetString' differ in signedness [-Wpointer-sign]
cargo:warning= #define USBD_PRODUCT_STRING_FS     "STM32 Custom Human interface"
cargo:warning=                                    ^
cargo:warning=c/usbd_desc.c:223:21: note: in expansion of macro 'USBD_PRODUCT_STRING_FS'
cargo:warning=     USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);    
cargo:warning=                     ^~~~~~~~~~~~~~~~~~~~~~
cargo:warning=In file included from c/usbd_core.h:40:0,
cargo:warning=                 from c/usbd_desc.c:51:
cargo:warning=c/usbd_ctlreq.h:93:6: note: expected 'uint8_t * {aka unsigned char *}' but argument is of type 'char *'
cargo:warning= void USBD_GetString         (uint8_t *desc, uint8_t *unicode, uint16_t *len);
cargo:warning=      ^~~~~~~~~~~~~~
cargo:warning=c/usbd_desc.c: In function 'USBD_FS_ManufacturerStrDescriptor':
cargo:warning=c/usbd_desc.c:76:38: warning: pointer targets in passing argument 1 of 'USBD_GetString' differ in signedness [-Wpointer-sign]
cargo:warning= #define USBD_MANUFACTURER_STRING     "STMicroelectronics"
cargo:warning=                                      ^
cargo:warning=c/usbd_desc.c:237:19: note: in expansion of macro 'USBD_MANUFACTURER_STRING'
cargo:warning=   USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
cargo:warning=                   ^~~~~~~~~~~~~~~~~~~~~~~~
cargo:warning=In file included from c/usbd_core.h:40:0,
cargo:warning=                 from c/usbd_desc.c:51:
cargo:warning=c/usbd_ctlreq.h:93:6: note: expected 'uint8_t * {aka unsigned char *}' but argument is of type 'char *'
cargo:warning= void USBD_GetString         (uint8_t *desc, uint8_t *unicode, uint16_t *len);
cargo:warning=      ^~~~~~~~~~~~~~
cargo:warning=c/usbd_desc.c:235:65: warning: unused parameter 'speed' [-Wunused-parameter]
cargo:warning= uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
cargo:warning=                                                                 ^~~~~
cargo:warning=c/usbd_desc.c: In function 'USBD_FS_SerialStrDescriptor':
cargo:warning=c/usbd_desc.c:79:41: warning: pointer targets in passing argument 1 of 'USBD_GetString' differ in signedness [-Wpointer-sign]
cargo:warning= #define USBD_SERIALNUMBER_STRING_FS     "00000000001A"
cargo:warning=                                         ^
cargo:warning=c/usbd_desc.c:252:21: note: in expansion of macro 'USBD_SERIALNUMBER_STRING_FS'
cargo:warning=     USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
cargo:warning=                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~
cargo:warning=In file included from c/usbd_core.h:40:0,
cargo:warning=                 from c/usbd_desc.c:51:
cargo:warning=c/usbd_ctlreq.h:93:6: note: expected 'uint8_t * {aka unsigned char *}' but argument is of type 'char *'
cargo:warning= void USBD_GetString         (uint8_t *desc, uint8_t *unicode, uint16_t *len);
cargo:warning=      ^~~~~~~~~~~~~~
cargo:warning=c/usbd_desc.c:79:41: warning: pointer targets in passing argument 1 of 'USBD_GetString' differ in signedness [-Wpointer-sign]
cargo:warning= #define USBD_SERIALNUMBER_STRING_FS     "00000000001A"
cargo:warning=                                         ^
cargo:warning=c/usbd_desc.c:256:21: note: in expansion of macro 'USBD_SERIALNUMBER_STRING_FS'
cargo:warning=     USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
cargo:warning=                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~
cargo:warning=In file included from c/usbd_core.h:40:0,
cargo:warning=                 from c/usbd_desc.c:51:
cargo:warning=c/usbd_ctlreq.h:93:6: note: expected 'uint8_t * {aka unsigned char *}' but argument is of type 'char *'
cargo:warning= void USBD_GetString         (uint8_t *desc, uint8_t *unicode, uint16_t *len);
cargo:warning=      ^~~~~~~~~~~~~~
cargo:warning=c/usbd_desc.c: In function 'USBD_FS_ConfigStrDescriptor':
cargo:warning=c/usbd_desc.c:80:42: warning: pointer targets in passing argument 1 of 'USBD_GetString' differ in signedness [-Wpointer-sign]
cargo:warning= #define USBD_CONFIGURATION_STRING_FS     "Custom HID Config"
cargo:warning=                                          ^
cargo:warning=c/usbd_desc.c:272:21: note: in expansion of macro 'USBD_CONFIGURATION_STRING_FS'
cargo:warning=     USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
cargo:warning=                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
cargo:warning=In file included from c/usbd_core.h:40:0,
cargo:warning=                 from c/usbd_desc.c:51:
cargo:warning=c/usbd_ctlreq.h:93:6: note: expected 'uint8_t * {aka unsigned char *}' but argument is of type 'char *'
cargo:warning= void USBD_GetString         (uint8_t *desc, uint8_t *unicode, uint16_t *len);
cargo:warning=      ^~~~~~~~~~~~~~
cargo:warning=c/usbd_desc.c:80:42: warning: pointer targets in passing argument 1 of 'USBD_GetString' differ in signedness [-Wpointer-sign]
cargo:warning= #define USBD_CONFIGURATION_STRING_FS     "Custom HID Config"
cargo:warning=                                          ^
cargo:warning=c/usbd_desc.c:276:21: note: in expansion of macro 'USBD_CONFIGURATION_STRING_FS'
cargo:warning=     USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
cargo:warning=                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
cargo:warning=In file included from c/usbd_core.h:40:0,
cargo:warning=                 from c/usbd_desc.c:51:
cargo:warning=c/usbd_ctlreq.h:93:6: note: expected 'uint8_t * {aka unsigned char *}' but argument is of type 'char *'
cargo:warning= void USBD_GetString         (uint8_t *desc, uint8_t *unicode, uint16_t *len);
cargo:warning=      ^~~~~~~~~~~~~~
cargo:warning=c/usbd_desc.c: In function 'USBD_FS_InterfaceStrDescriptor':
cargo:warning=c/usbd_desc.c:81:38: warning: pointer targets in passing argument 1 of 'USBD_GetString' differ in signedness [-Wpointer-sign]
cargo:warning= #define USBD_INTERFACE_STRING_FS     "Custom HID Interface"
cargo:warning=                                      ^
cargo:warning=c/usbd_desc.c:292:21: note: in expansion of macro 'USBD_INTERFACE_STRING_FS'
cargo:warning=     USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
cargo:warning=                     ^~~~~~~~~~~~~~~~~~~~~~~~
cargo:warning=In file included from c/usbd_core.h:40:0,
cargo:warning=                 from c/usbd_desc.c:51:
cargo:warning=c/usbd_ctlreq.h:93:6: note: expected 'uint8_t * {aka unsigned char *}' but argument is of type 'char *'
cargo:warning= void USBD_GetString         (uint8_t *desc, uint8_t *unicode, uint16_t *len);
cargo:warning=      ^~~~~~~~~~~~~~
cargo:warning=c/usbd_desc.c:81:38: warning: pointer targets in passing argument 1 of 'USBD_GetString' differ in signedness [-Wpointer-sign]
cargo:warning= #define USBD_INTERFACE_STRING_FS     "Custom HID Interface"
cargo:warning=                                      ^
cargo:warning=c/usbd_desc.c:296:21: note: in expansion of macro 'USBD_INTERFACE_STRING_FS'
cargo:warning=     USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
cargo:warning=                     ^~~~~~~~~~~~~~~~~~~~~~~~
cargo:warning=In file included from c/usbd_core.h:40:0,
cargo:warning=                 from c/usbd_desc.c:51:
cargo:warning=c/usbd_ctlreq.h:93:6: note: expected 'uint8_t * {aka unsigned char *}' but argument is of type 'char *'
cargo:warning= void USBD_GetString         (uint8_t *desc, uint8_t *unicode, uint16_t *len);
cargo:warning=      ^~~~~~~~~~~~~~
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"usbd_desc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.USBD_FS_DeviceDescriptor,"ax",%progbits
  16              		.align	1
  17              		.global	USBD_FS_DeviceDescriptor
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	USBD_FS_DeviceDescriptor:
  24              	.LFB64:
  25              		.file 1 "c/usbd_desc.c"
   1:c/usbd_desc.c **** /**
   2:c/usbd_desc.c ****   ******************************************************************************
   3:c/usbd_desc.c ****   * @file           : usbd_desc.c
   4:c/usbd_desc.c ****   * @version        : v2.0_Cube
   5:c/usbd_desc.c ****   * @brief          : This file implements the USB Device descriptors
   6:c/usbd_desc.c ****   ******************************************************************************
   7:c/usbd_desc.c ****   * This notice applies to any and all portions of this file
   8:c/usbd_desc.c ****   * that are not between comment pairs USER CODE BEGIN and
   9:c/usbd_desc.c ****   * USER CODE END. Other portions of this file, whether 
  10:c/usbd_desc.c ****   * inserted by the user or by software development tools
  11:c/usbd_desc.c ****   * are owned by their respective copyright owners.
  12:c/usbd_desc.c ****   *
  13:c/usbd_desc.c ****   * Copyright (c) 2017 STMicroelectronics International N.V. 
  14:c/usbd_desc.c ****   * All rights reserved.
  15:c/usbd_desc.c ****   *
  16:c/usbd_desc.c ****   * Redistribution and use in source and binary forms, with or without 
  17:c/usbd_desc.c ****   * modification, are permitted, provided that the following conditions are met:
  18:c/usbd_desc.c ****   *
  19:c/usbd_desc.c ****   * 1. Redistribution of source code must retain the above copyright notice, 
  20:c/usbd_desc.c ****   *    this list of conditions and the following disclaimer.
  21:c/usbd_desc.c ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:c/usbd_desc.c ****   *    this list of conditions and the following disclaimer in the documentation
  23:c/usbd_desc.c ****   *    and/or other materials provided with the distribution.
  24:c/usbd_desc.c ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  25:c/usbd_desc.c ****   *    contributors to this software may be used to endorse or promote products 
  26:c/usbd_desc.c ****   *    derived from this software without specific written permission.
  27:c/usbd_desc.c ****   * 4. This software, including modifications and/or derivative works of this 
  28:c/usbd_desc.c ****   *    software, must execute solely and exclusively on microcontroller or
  29:c/usbd_desc.c ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:c/usbd_desc.c ****   * 5. Redistribution and use of this software other than as permitted under 
  31:c/usbd_desc.c ****   *    this license is void and will automatically terminate your rights under 
  32:c/usbd_desc.c ****   *    this license. 
  33:c/usbd_desc.c ****   *
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s 			page 2


  34:c/usbd_desc.c ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  35:c/usbd_desc.c ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  36:c/usbd_desc.c ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  37:c/usbd_desc.c ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  38:c/usbd_desc.c ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  39:c/usbd_desc.c ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:c/usbd_desc.c ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:c/usbd_desc.c ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  42:c/usbd_desc.c ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  43:c/usbd_desc.c ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  44:c/usbd_desc.c ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:c/usbd_desc.c ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:c/usbd_desc.c ****   *
  47:c/usbd_desc.c ****   ******************************************************************************
  48:c/usbd_desc.c **** */
  49:c/usbd_desc.c **** 
  50:c/usbd_desc.c **** /* Includes ------------------------------------------------------------------*/
  51:c/usbd_desc.c **** #include "usbd_core.h"
  52:c/usbd_desc.c **** #include "usbd_desc.h"
  53:c/usbd_desc.c **** #include "usbd_conf.h"
  54:c/usbd_desc.c **** 
  55:c/usbd_desc.c **** /** @addtogroup STM32_USB_OTG_DEVICE_LIBRARY
  56:c/usbd_desc.c ****   * @{
  57:c/usbd_desc.c ****   */
  58:c/usbd_desc.c **** 
  59:c/usbd_desc.c **** /** @defgroup USBD_DESC 
  60:c/usbd_desc.c ****   * @brief USBD descriptors module
  61:c/usbd_desc.c ****   * @{
  62:c/usbd_desc.c ****   */ 
  63:c/usbd_desc.c **** 
  64:c/usbd_desc.c **** /** @defgroup USBD_DESC_Private_TypesDefinitions
  65:c/usbd_desc.c ****   * @{
  66:c/usbd_desc.c ****   */ 
  67:c/usbd_desc.c **** /**
  68:c/usbd_desc.c ****   * @}
  69:c/usbd_desc.c ****   */ 
  70:c/usbd_desc.c **** 
  71:c/usbd_desc.c **** /** @defgroup USBD_DESC_Private_Defines
  72:c/usbd_desc.c ****   * @{
  73:c/usbd_desc.c ****   */ 
  74:c/usbd_desc.c **** #define USBD_VID     1155
  75:c/usbd_desc.c **** #define USBD_LANGID_STRING     1033
  76:c/usbd_desc.c **** #define USBD_MANUFACTURER_STRING     "STMicroelectronics"
  77:c/usbd_desc.c **** #define USBD_PID_FS     22352
  78:c/usbd_desc.c **** #define USBD_PRODUCT_STRING_FS     "STM32 Custom Human interface"
  79:c/usbd_desc.c **** #define USBD_SERIALNUMBER_STRING_FS     "00000000001A"
  80:c/usbd_desc.c **** #define USBD_CONFIGURATION_STRING_FS     "Custom HID Config"
  81:c/usbd_desc.c **** #define USBD_INTERFACE_STRING_FS     "Custom HID Interface"
  82:c/usbd_desc.c **** 
  83:c/usbd_desc.c **** /* USER CODE BEGIN 0 */
  84:c/usbd_desc.c **** 
  85:c/usbd_desc.c **** /* USER CODE END 0*/
  86:c/usbd_desc.c **** /**
  87:c/usbd_desc.c ****   * @}
  88:c/usbd_desc.c ****   */ 
  89:c/usbd_desc.c **** 
  90:c/usbd_desc.c **** /** @defgroup USBD_DESC_Private_Macros
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s 			page 3


  91:c/usbd_desc.c ****   * @{
  92:c/usbd_desc.c ****   */ 
  93:c/usbd_desc.c **** /**
  94:c/usbd_desc.c ****   * @}
  95:c/usbd_desc.c ****   */ 
  96:c/usbd_desc.c **** 
  97:c/usbd_desc.c **** /** @defgroup USBD_DESC_Private_Variables
  98:c/usbd_desc.c ****   * @{
  99:c/usbd_desc.c ****   */ 
 100:c/usbd_desc.c **** uint8_t *     USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length);
 101:c/usbd_desc.c **** uint8_t *     USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length);
 102:c/usbd_desc.c **** uint8_t *     USBD_FS_ManufacturerStrDescriptor ( USBD_SpeedTypeDef speed , uint16_t *length);
 103:c/usbd_desc.c **** uint8_t *     USBD_FS_ProductStrDescriptor ( USBD_SpeedTypeDef speed , uint16_t *length);
 104:c/usbd_desc.c **** uint8_t *     USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length);
 105:c/usbd_desc.c **** uint8_t *     USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length);
 106:c/usbd_desc.c **** uint8_t *     USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length);
 107:c/usbd_desc.c **** 
 108:c/usbd_desc.c **** #ifdef USB_SUPPORT_USER_STRING_DESC
 109:c/usbd_desc.c **** uint8_t *     USBD_FS_USRStringDesc (USBD_SpeedTypeDef speed, uint8_t idx , uint16_t *length);  
 110:c/usbd_desc.c **** #endif /* USB_SUPPORT_USER_STRING_DESC */  
 111:c/usbd_desc.c **** 
 112:c/usbd_desc.c **** USBD_DescriptorsTypeDef FS_Desc =
 113:c/usbd_desc.c **** {
 114:c/usbd_desc.c ****   USBD_FS_DeviceDescriptor,
 115:c/usbd_desc.c ****   USBD_FS_LangIDStrDescriptor, 
 116:c/usbd_desc.c ****   USBD_FS_ManufacturerStrDescriptor,
 117:c/usbd_desc.c ****   USBD_FS_ProductStrDescriptor,
 118:c/usbd_desc.c ****   USBD_FS_SerialStrDescriptor,
 119:c/usbd_desc.c ****   USBD_FS_ConfigStrDescriptor,
 120:c/usbd_desc.c ****   USBD_FS_InterfaceStrDescriptor,
 121:c/usbd_desc.c **** };
 122:c/usbd_desc.c **** 
 123:c/usbd_desc.c **** #if defined ( __ICCARM__ ) /*!< IAR Compiler */
 124:c/usbd_desc.c ****   #pragma data_alignment=4   
 125:c/usbd_desc.c **** #endif
 126:c/usbd_desc.c **** /* USB Standard Device Descriptor */
 127:c/usbd_desc.c **** __ALIGN_BEGIN uint8_t USBD_FS_DeviceDesc[USB_LEN_DEV_DESC] __ALIGN_END =
 128:c/usbd_desc.c ****   {
 129:c/usbd_desc.c ****     0x12,                       /*bLength */
 130:c/usbd_desc.c ****     USB_DESC_TYPE_DEVICE,       /*bDescriptorType*/
 131:c/usbd_desc.c ****     0x00,                       /* bcdUSB */  
 132:c/usbd_desc.c ****     0x02,
 133:c/usbd_desc.c ****     0x00,                       /*bDeviceClass*/
 134:c/usbd_desc.c ****     0x00,                       /*bDeviceSubClass*/
 135:c/usbd_desc.c ****     0x00,                       /*bDeviceProtocol*/
 136:c/usbd_desc.c ****     USB_MAX_EP0_SIZE,          /*bMaxPacketSize*/
 137:c/usbd_desc.c ****     LOBYTE(USBD_VID),           /*idVendor*/
 138:c/usbd_desc.c ****     HIBYTE(USBD_VID),           /*idVendor*/
 139:c/usbd_desc.c ****     LOBYTE(USBD_PID_FS),           /*idVendor*/
 140:c/usbd_desc.c ****     HIBYTE(USBD_PID_FS),           /*idVendor*/
 141:c/usbd_desc.c ****     0x00,                       /*bcdDevice rel. 2.00*/
 142:c/usbd_desc.c ****     0x02,
 143:c/usbd_desc.c ****     USBD_IDX_MFC_STR,           /*Index of manufacturer  string*/
 144:c/usbd_desc.c ****     USBD_IDX_PRODUCT_STR,       /*Index of product string*/
 145:c/usbd_desc.c ****     USBD_IDX_SERIAL_STR,        /*Index of serial number string*/
 146:c/usbd_desc.c ****     USBD_MAX_NUM_CONFIGURATION  /*bNumConfigurations*/
 147:c/usbd_desc.c ****   } ; 
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s 			page 4


 148:c/usbd_desc.c **** /* USB_DeviceDescriptor */
 149:c/usbd_desc.c **** 
 150:c/usbd_desc.c **** #if defined ( __ICCARM__ ) /*!< IAR Compiler */
 151:c/usbd_desc.c ****   #pragma data_alignment=4   
 152:c/usbd_desc.c **** #endif
 153:c/usbd_desc.c **** 
 154:c/usbd_desc.c **** /* USB Standard Device Descriptor */
 155:c/usbd_desc.c **** __ALIGN_BEGIN uint8_t USBD_LangIDDesc[USB_LEN_LANGID_STR_DESC] __ALIGN_END =
 156:c/usbd_desc.c **** {
 157:c/usbd_desc.c ****      USB_LEN_LANGID_STR_DESC,         
 158:c/usbd_desc.c ****      USB_DESC_TYPE_STRING,       
 159:c/usbd_desc.c ****      LOBYTE(USBD_LANGID_STRING),
 160:c/usbd_desc.c ****      HIBYTE(USBD_LANGID_STRING), 
 161:c/usbd_desc.c **** };
 162:c/usbd_desc.c **** 
 163:c/usbd_desc.c **** #if defined ( __ICCARM__ ) /*!< IAR Compiler */
 164:c/usbd_desc.c ****   #pragma data_alignment=4   
 165:c/usbd_desc.c **** #endif
 166:c/usbd_desc.c **** __ALIGN_BEGIN uint8_t USBD_StrDesc[USBD_MAX_STR_DESC_SIZ] __ALIGN_END;
 167:c/usbd_desc.c **** /**
 168:c/usbd_desc.c ****   * @}
 169:c/usbd_desc.c ****   */ 
 170:c/usbd_desc.c **** 
 171:c/usbd_desc.c **** /** @defgroup USBD_DESC_Private_FunctionPrototypes
 172:c/usbd_desc.c ****   * @{
 173:c/usbd_desc.c ****   */ 
 174:c/usbd_desc.c **** /**
 175:c/usbd_desc.c ****   * @}
 176:c/usbd_desc.c ****   */ 
 177:c/usbd_desc.c **** 
 178:c/usbd_desc.c **** /** @defgroup USBD_DESC_Private_Functions
 179:c/usbd_desc.c ****   * @{
 180:c/usbd_desc.c ****   */ 
 181:c/usbd_desc.c **** 
 182:c/usbd_desc.c **** /**
 183:c/usbd_desc.c **** * @brief  USBD_FS_DeviceDescriptor 
 184:c/usbd_desc.c **** *         return the device descriptor
 185:c/usbd_desc.c **** * @param  speed : current device speed
 186:c/usbd_desc.c **** * @param  length : pointer to data length variable
 187:c/usbd_desc.c **** * @retval pointer to descriptor buffer
 188:c/usbd_desc.c **** */
 189:c/usbd_desc.c **** uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
 190:c/usbd_desc.c **** {
  26              		.loc 1 190 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
 191:c/usbd_desc.c ****   *length = sizeof(USBD_FS_DeviceDesc);
  32              		.loc 1 191 0
  33 0000 1223     		movs	r3, #18
 192:c/usbd_desc.c ****   return USBD_FS_DeviceDesc;
 193:c/usbd_desc.c **** }
  34              		.loc 1 193 0
  35 0002 0148     		ldr	r0, .L2
  36              	.LVL1:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s 			page 5


 191:c/usbd_desc.c ****   *length = sizeof(USBD_FS_DeviceDesc);
  37              		.loc 1 191 0
  38 0004 0B80     		strh	r3, [r1]	@ movhi
  39              		.loc 1 193 0
  40 0006 7047     		bx	lr
  41              	.L3:
  42              		.align	2
  43              	.L2:
  44 0008 00000000 		.word	.LANCHOR0
  45              		.cfi_endproc
  46              	.LFE64:
  48              		.section	.text.USBD_FS_LangIDStrDescriptor,"ax",%progbits
  49              		.align	1
  50              		.global	USBD_FS_LangIDStrDescriptor
  51              		.syntax unified
  52              		.thumb
  53              		.thumb_func
  54              		.fpu softvfp
  56              	USBD_FS_LangIDStrDescriptor:
  57              	.LFB65:
 194:c/usbd_desc.c **** 
 195:c/usbd_desc.c **** /**
 196:c/usbd_desc.c **** * @brief  USBD_FS_LangIDStrDescriptor 
 197:c/usbd_desc.c **** *         return the LangID string descriptor
 198:c/usbd_desc.c **** * @param  speed : current device speed
 199:c/usbd_desc.c **** * @param  length : pointer to data length variable
 200:c/usbd_desc.c **** * @retval pointer to descriptor buffer
 201:c/usbd_desc.c **** */
 202:c/usbd_desc.c **** uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
 203:c/usbd_desc.c **** {
  58              		.loc 1 203 0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 0
  61              		@ frame_needed = 0, uses_anonymous_args = 0
  62              		@ link register save eliminated.
  63              	.LVL2:
 204:c/usbd_desc.c ****   *length =  sizeof(USBD_LangIDDesc);  
  64              		.loc 1 204 0
  65 0000 0423     		movs	r3, #4
 205:c/usbd_desc.c ****   return USBD_LangIDDesc;
 206:c/usbd_desc.c **** }
  66              		.loc 1 206 0
  67 0002 0148     		ldr	r0, .L5
  68              	.LVL3:
 204:c/usbd_desc.c ****   *length =  sizeof(USBD_LangIDDesc);  
  69              		.loc 1 204 0
  70 0004 0B80     		strh	r3, [r1]	@ movhi
  71              		.loc 1 206 0
  72 0006 7047     		bx	lr
  73              	.L6:
  74              		.align	2
  75              	.L5:
  76 0008 00000000 		.word	.LANCHOR1
  77              		.cfi_endproc
  78              	.LFE65:
  80              		.section	.text.USBD_FS_ManufacturerStrDescriptor,"ax",%progbits
  81              		.align	1
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s 			page 6


  82              		.global	USBD_FS_ManufacturerStrDescriptor
  83              		.syntax unified
  84              		.thumb
  85              		.thumb_func
  86              		.fpu softvfp
  88              	USBD_FS_ManufacturerStrDescriptor:
  89              	.LFB67:
 207:c/usbd_desc.c **** 
 208:c/usbd_desc.c **** /**
 209:c/usbd_desc.c **** * @brief  USBD_FS_ProductStrDescriptor 
 210:c/usbd_desc.c **** *         return the product string descriptor
 211:c/usbd_desc.c **** * @param  speed : current device speed
 212:c/usbd_desc.c **** * @param  length : pointer to data length variable
 213:c/usbd_desc.c **** * @retval pointer to descriptor buffer
 214:c/usbd_desc.c **** */
 215:c/usbd_desc.c **** uint8_t *  USBD_FS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
 216:c/usbd_desc.c **** {
 217:c/usbd_desc.c ****   if(speed == 0)
 218:c/usbd_desc.c ****   {   
 219:c/usbd_desc.c ****     USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 220:c/usbd_desc.c ****   }
 221:c/usbd_desc.c ****   else
 222:c/usbd_desc.c ****   {
 223:c/usbd_desc.c ****     USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);    
 224:c/usbd_desc.c ****   }
 225:c/usbd_desc.c ****   return USBD_StrDesc;
 226:c/usbd_desc.c **** }
 227:c/usbd_desc.c **** 
 228:c/usbd_desc.c **** /**
 229:c/usbd_desc.c **** * @brief  USBD_FS_ManufacturerStrDescriptor 
 230:c/usbd_desc.c **** *         return the manufacturer string descriptor
 231:c/usbd_desc.c **** * @param  speed : current device speed
 232:c/usbd_desc.c **** * @param  length : pointer to data length variable
 233:c/usbd_desc.c **** * @retval pointer to descriptor buffer
 234:c/usbd_desc.c **** */
 235:c/usbd_desc.c **** uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
 236:c/usbd_desc.c **** {
  90              		.loc 1 236 0
  91              		.cfi_startproc
  92              		@ args = 0, pretend = 0, frame = 0
  93              		@ frame_needed = 0, uses_anonymous_args = 0
  94              	.LVL4:
  95 0000 10B5     		push	{r4, lr}
  96              		.cfi_def_cfa_offset 8
  97              		.cfi_offset 4, -8
  98              		.cfi_offset 14, -4
 237:c/usbd_desc.c ****   USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
  99              		.loc 1 237 0
 100 0002 044C     		ldr	r4, .L8
 101 0004 0A46     		mov	r2, r1
 102 0006 0448     		ldr	r0, .L8+4
 103              	.LVL5:
 104 0008 2146     		mov	r1, r4
 105              	.LVL6:
 106 000a FFF7FEFF 		bl	USBD_GetString
 107              	.LVL7:
 238:c/usbd_desc.c ****   return USBD_StrDesc;
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s 			page 7


 239:c/usbd_desc.c **** }
 108              		.loc 1 239 0
 109 000e 2046     		mov	r0, r4
 110 0010 10BD     		pop	{r4, pc}
 111              	.L9:
 112 0012 00BF     		.align	2
 113              	.L8:
 114 0014 00000000 		.word	USBD_StrDesc
 115 0018 00000000 		.word	.LC0
 116              		.cfi_endproc
 117              	.LFE67:
 119              		.section	.text.USBD_FS_ProductStrDescriptor,"ax",%progbits
 120              		.align	1
 121              		.global	USBD_FS_ProductStrDescriptor
 122              		.syntax unified
 123              		.thumb
 124              		.thumb_func
 125              		.fpu softvfp
 127              	USBD_FS_ProductStrDescriptor:
 128              	.LFB66:
 216:c/usbd_desc.c ****   if(speed == 0)
 129              		.loc 1 216 0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 0, uses_anonymous_args = 0
 133              	.LVL8:
 134 0000 10B5     		push	{r4, lr}
 135              		.cfi_def_cfa_offset 8
 136              		.cfi_offset 4, -8
 137              		.cfi_offset 14, -4
 138              	.LBB4:
 139              	.LBB5:
 219:c/usbd_desc.c ****   }
 140              		.loc 1 219 0
 141 0002 044C     		ldr	r4, .L11
 142 0004 0A46     		mov	r2, r1
 143 0006 0448     		ldr	r0, .L11+4
 144              	.LVL9:
 145 0008 2146     		mov	r1, r4
 146              	.LVL10:
 147 000a FFF7FEFF 		bl	USBD_GetString
 148              	.LVL11:
 149              	.LBE5:
 150              	.LBE4:
 226:c/usbd_desc.c **** 
 151              		.loc 1 226 0
 152 000e 2046     		mov	r0, r4
 153 0010 10BD     		pop	{r4, pc}
 154              	.L12:
 155 0012 00BF     		.align	2
 156              	.L11:
 157 0014 00000000 		.word	USBD_StrDesc
 158 0018 00000000 		.word	.LC1
 159              		.cfi_endproc
 160              	.LFE66:
 162              		.section	.text.USBD_FS_SerialStrDescriptor,"ax",%progbits
 163              		.align	1
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s 			page 8


 164              		.global	USBD_FS_SerialStrDescriptor
 165              		.syntax unified
 166              		.thumb
 167              		.thumb_func
 168              		.fpu softvfp
 170              	USBD_FS_SerialStrDescriptor:
 171              	.LFB68:
 240:c/usbd_desc.c **** 
 241:c/usbd_desc.c **** /**
 242:c/usbd_desc.c **** * @brief  USBD_FS_SerialStrDescriptor 
 243:c/usbd_desc.c **** *         return the serial number string descriptor
 244:c/usbd_desc.c **** * @param  speed : current device speed
 245:c/usbd_desc.c **** * @param  length : pointer to data length variable
 246:c/usbd_desc.c **** * @retval pointer to descriptor buffer
 247:c/usbd_desc.c **** */
 248:c/usbd_desc.c **** uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
 249:c/usbd_desc.c **** {
 172              		.loc 1 249 0
 173              		.cfi_startproc
 174              		@ args = 0, pretend = 0, frame = 0
 175              		@ frame_needed = 0, uses_anonymous_args = 0
 176              	.LVL12:
 177 0000 10B5     		push	{r4, lr}
 178              		.cfi_def_cfa_offset 8
 179              		.cfi_offset 4, -8
 180              		.cfi_offset 14, -4
 181              	.LBB8:
 182              	.LBB9:
 250:c/usbd_desc.c ****   if(speed  == USBD_SPEED_HIGH)
 251:c/usbd_desc.c ****   {    
 252:c/usbd_desc.c ****     USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 183              		.loc 1 252 0
 184 0002 044C     		ldr	r4, .L14
 185 0004 0A46     		mov	r2, r1
 186 0006 0448     		ldr	r0, .L14+4
 187              	.LVL13:
 188 0008 2146     		mov	r1, r4
 189              	.LVL14:
 190 000a FFF7FEFF 		bl	USBD_GetString
 191              	.LVL15:
 192              	.LBE9:
 193              	.LBE8:
 253:c/usbd_desc.c ****   }
 254:c/usbd_desc.c ****   else
 255:c/usbd_desc.c ****   {
 256:c/usbd_desc.c ****     USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
 257:c/usbd_desc.c ****   }
 258:c/usbd_desc.c ****   return USBD_StrDesc;
 259:c/usbd_desc.c **** }
 194              		.loc 1 259 0
 195 000e 2046     		mov	r0, r4
 196 0010 10BD     		pop	{r4, pc}
 197              	.L15:
 198 0012 00BF     		.align	2
 199              	.L14:
 200 0014 00000000 		.word	USBD_StrDesc
 201 0018 00000000 		.word	.LC2
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s 			page 9


 202              		.cfi_endproc
 203              	.LFE68:
 205              		.section	.text.USBD_FS_ConfigStrDescriptor,"ax",%progbits
 206              		.align	1
 207              		.global	USBD_FS_ConfigStrDescriptor
 208              		.syntax unified
 209              		.thumb
 210              		.thumb_func
 211              		.fpu softvfp
 213              	USBD_FS_ConfigStrDescriptor:
 214              	.LFB69:
 260:c/usbd_desc.c **** 
 261:c/usbd_desc.c **** /**
 262:c/usbd_desc.c **** * @brief  USBD_FS_ConfigStrDescriptor 
 263:c/usbd_desc.c **** *         return the configuration string descriptor
 264:c/usbd_desc.c **** * @param  speed : current device speed
 265:c/usbd_desc.c **** * @param  length : pointer to data length variable
 266:c/usbd_desc.c **** * @retval pointer to descriptor buffer
 267:c/usbd_desc.c **** */
 268:c/usbd_desc.c **** uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
 269:c/usbd_desc.c **** {
 215              		.loc 1 269 0
 216              		.cfi_startproc
 217              		@ args = 0, pretend = 0, frame = 0
 218              		@ frame_needed = 0, uses_anonymous_args = 0
 219              	.LVL16:
 220 0000 10B5     		push	{r4, lr}
 221              		.cfi_def_cfa_offset 8
 222              		.cfi_offset 4, -8
 223              		.cfi_offset 14, -4
 224              	.LBB12:
 225              	.LBB13:
 270:c/usbd_desc.c ****   if(speed  == USBD_SPEED_HIGH)
 271:c/usbd_desc.c ****   {  
 272:c/usbd_desc.c ****     USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 226              		.loc 1 272 0
 227 0002 044C     		ldr	r4, .L17
 228 0004 0A46     		mov	r2, r1
 229 0006 0448     		ldr	r0, .L17+4
 230              	.LVL17:
 231 0008 2146     		mov	r1, r4
 232              	.LVL18:
 233 000a FFF7FEFF 		bl	USBD_GetString
 234              	.LVL19:
 235              	.LBE13:
 236              	.LBE12:
 273:c/usbd_desc.c ****   }
 274:c/usbd_desc.c ****   else
 275:c/usbd_desc.c ****   {
 276:c/usbd_desc.c ****     USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
 277:c/usbd_desc.c ****   }
 278:c/usbd_desc.c ****   return USBD_StrDesc;  
 279:c/usbd_desc.c **** }
 237              		.loc 1 279 0
 238 000e 2046     		mov	r0, r4
 239 0010 10BD     		pop	{r4, pc}
 240              	.L18:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s 			page 10


 241 0012 00BF     		.align	2
 242              	.L17:
 243 0014 00000000 		.word	USBD_StrDesc
 244 0018 00000000 		.word	.LC3
 245              		.cfi_endproc
 246              	.LFE69:
 248              		.section	.text.USBD_FS_InterfaceStrDescriptor,"ax",%progbits
 249              		.align	1
 250              		.global	USBD_FS_InterfaceStrDescriptor
 251              		.syntax unified
 252              		.thumb
 253              		.thumb_func
 254              		.fpu softvfp
 256              	USBD_FS_InterfaceStrDescriptor:
 257              	.LFB70:
 280:c/usbd_desc.c **** 
 281:c/usbd_desc.c **** /**
 282:c/usbd_desc.c **** * @brief  USBD_HS_InterfaceStrDescriptor 
 283:c/usbd_desc.c **** *         return the interface string descriptor
 284:c/usbd_desc.c **** * @param  speed : current device speed
 285:c/usbd_desc.c **** * @param  length : pointer to data length variable
 286:c/usbd_desc.c **** * @retval pointer to descriptor buffer
 287:c/usbd_desc.c **** */
 288:c/usbd_desc.c **** uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
 289:c/usbd_desc.c **** {
 258              		.loc 1 289 0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 0
 261              		@ frame_needed = 0, uses_anonymous_args = 0
 262              	.LVL20:
 263 0000 10B5     		push	{r4, lr}
 264              		.cfi_def_cfa_offset 8
 265              		.cfi_offset 4, -8
 266              		.cfi_offset 14, -4
 267              	.LBB16:
 268              	.LBB17:
 290:c/usbd_desc.c ****   if(speed == 0)
 291:c/usbd_desc.c ****   {
 292:c/usbd_desc.c ****     USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 269              		.loc 1 292 0
 270 0002 044C     		ldr	r4, .L20
 271 0004 0A46     		mov	r2, r1
 272 0006 0448     		ldr	r0, .L20+4
 273              	.LVL21:
 274 0008 2146     		mov	r1, r4
 275              	.LVL22:
 276 000a FFF7FEFF 		bl	USBD_GetString
 277              	.LVL23:
 278              	.LBE17:
 279              	.LBE16:
 293:c/usbd_desc.c ****   }
 294:c/usbd_desc.c ****   else
 295:c/usbd_desc.c ****   {
 296:c/usbd_desc.c ****     USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 297:c/usbd_desc.c ****   }
 298:c/usbd_desc.c ****   return USBD_StrDesc;  
 299:c/usbd_desc.c **** }
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s 			page 11


 280              		.loc 1 299 0
 281 000e 2046     		mov	r0, r4
 282 0010 10BD     		pop	{r4, pc}
 283              	.L21:
 284 0012 00BF     		.align	2
 285              	.L20:
 286 0014 00000000 		.word	USBD_StrDesc
 287 0018 00000000 		.word	.LC4
 288              		.cfi_endproc
 289              	.LFE70:
 291              		.comm	USBD_StrDesc,512,4
 292              		.global	USBD_LangIDDesc
 293              		.global	USBD_FS_DeviceDesc
 294              		.global	FS_Desc
 295              		.section	.data.FS_Desc,"aw",%progbits
 296              		.align	2
 299              	FS_Desc:
 300 0000 00000000 		.word	USBD_FS_DeviceDescriptor
 301 0004 00000000 		.word	USBD_FS_LangIDStrDescriptor
 302 0008 00000000 		.word	USBD_FS_ManufacturerStrDescriptor
 303 000c 00000000 		.word	USBD_FS_ProductStrDescriptor
 304 0010 00000000 		.word	USBD_FS_SerialStrDescriptor
 305 0014 00000000 		.word	USBD_FS_ConfigStrDescriptor
 306 0018 00000000 		.word	USBD_FS_InterfaceStrDescriptor
 307              		.section	.data.USBD_FS_DeviceDesc,"aw",%progbits
 308              		.align	2
 309              		.set	.LANCHOR0,. + 0
 312              	USBD_FS_DeviceDesc:
 313 0000 12       		.byte	18
 314 0001 01       		.byte	1
 315 0002 00       		.byte	0
 316 0003 02       		.byte	2
 317 0004 00       		.byte	0
 318 0005 00       		.byte	0
 319 0006 00       		.byte	0
 320 0007 40       		.byte	64
 321 0008 83       		.byte	-125
 322 0009 04       		.byte	4
 323 000a 50       		.byte	80
 324 000b 57       		.byte	87
 325 000c 00       		.byte	0
 326 000d 02       		.byte	2
 327 000e 01       		.byte	1
 328 000f 02       		.byte	2
 329 0010 03       		.byte	3
 330 0011 01       		.byte	1
 331              		.section	.data.USBD_LangIDDesc,"aw",%progbits
 332              		.align	2
 333              		.set	.LANCHOR1,. + 0
 336              	USBD_LangIDDesc:
 337 0000 04       		.byte	4
 338 0001 03       		.byte	3
 339 0002 09       		.byte	9
 340 0003 04       		.byte	4
 341              		.section	.rodata.USBD_FS_ConfigStrDescriptor.str1.1,"aMS",%progbits,1
 342              	.LC3:
 343 0000 43757374 		.ascii	"Custom HID Config\000"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s 			page 12


 343      6F6D2048 
 343      49442043 
 343      6F6E6669 
 343      6700
 344              		.section	.rodata.USBD_FS_InterfaceStrDescriptor.str1.1,"aMS",%progbits,1
 345              	.LC4:
 346 0000 43757374 		.ascii	"Custom HID Interface\000"
 346      6F6D2048 
 346      49442049 
 346      6E746572 
 346      66616365 
 347              		.section	.rodata.USBD_FS_ManufacturerStrDescriptor.str1.1,"aMS",%progbits,1
 348              	.LC0:
 349 0000 53544D69 		.ascii	"STMicroelectronics\000"
 349      63726F65 
 349      6C656374 
 349      726F6E69 
 349      637300
 350              		.section	.rodata.USBD_FS_ProductStrDescriptor.str1.1,"aMS",%progbits,1
 351              	.LC1:
 352 0000 53544D33 		.ascii	"STM32 Custom Human interface\000"
 352      32204375 
 352      73746F6D 
 352      2048756D 
 352      616E2069 
 353              		.section	.rodata.USBD_FS_SerialStrDescriptor.str1.1,"aMS",%progbits,1
 354              	.LC2:
 355 0000 30303030 		.ascii	"00000000001A\000"
 355      30303030 
 355      30303141 
 355      00
 356              		.text
 357              	.Letext0:
 358              		.file 2 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/machine/_
 359              		.file 3 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_stdi
 360              		.file 4 "c/core_cm3.h"
 361              		.file 5 "c/system_stm32f1xx.h"
 362              		.file 6 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/lock.
 363              		.file 7 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_type
 364              		.file 8 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/lib/gcc/arm-none-eabi/6.3.1/inc
 365              		.file 9 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/reent
 366              		.file 10 "c/usbd_def.h"
 367              		.file 11 "c/usbd_desc.h"
 368              		.file 12 "c/usbd_ctlreq.h"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 usbd_desc.c
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s:16     .text.USBD_FS_DeviceDescriptor:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s:23     .text.USBD_FS_DeviceDescriptor:0000000000000000 USBD_FS_DeviceDescriptor
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s:44     .text.USBD_FS_DeviceDescriptor:0000000000000008 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s:49     .text.USBD_FS_LangIDStrDescriptor:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s:56     .text.USBD_FS_LangIDStrDescriptor:0000000000000000 USBD_FS_LangIDStrDescriptor
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s:76     .text.USBD_FS_LangIDStrDescriptor:0000000000000008 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s:81     .text.USBD_FS_ManufacturerStrDescriptor:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s:88     .text.USBD_FS_ManufacturerStrDescriptor:0000000000000000 USBD_FS_ManufacturerStrDescriptor
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s:114    .text.USBD_FS_ManufacturerStrDescriptor:0000000000000014 $d
                            *COM*:0000000000000200 USBD_StrDesc
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s:120    .text.USBD_FS_ProductStrDescriptor:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s:127    .text.USBD_FS_ProductStrDescriptor:0000000000000000 USBD_FS_ProductStrDescriptor
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s:157    .text.USBD_FS_ProductStrDescriptor:0000000000000014 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s:163    .text.USBD_FS_SerialStrDescriptor:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s:170    .text.USBD_FS_SerialStrDescriptor:0000000000000000 USBD_FS_SerialStrDescriptor
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s:200    .text.USBD_FS_SerialStrDescriptor:0000000000000014 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s:206    .text.USBD_FS_ConfigStrDescriptor:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s:213    .text.USBD_FS_ConfigStrDescriptor:0000000000000000 USBD_FS_ConfigStrDescriptor
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s:243    .text.USBD_FS_ConfigStrDescriptor:0000000000000014 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s:249    .text.USBD_FS_InterfaceStrDescriptor:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s:256    .text.USBD_FS_InterfaceStrDescriptor:0000000000000000 USBD_FS_InterfaceStrDescriptor
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s:286    .text.USBD_FS_InterfaceStrDescriptor:0000000000000014 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s:336    .data.USBD_LangIDDesc:0000000000000000 USBD_LangIDDesc
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s:312    .data.USBD_FS_DeviceDesc:0000000000000000 USBD_FS_DeviceDesc
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s:299    .data.FS_Desc:0000000000000000 FS_Desc
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s:296    .data.FS_Desc:0000000000000000 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s:308    .data.USBD_FS_DeviceDesc:0000000000000000 $d
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccLKR0Ko.s:332    .data.USBD_LangIDDesc:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
USBD_GetString
exit code: 0
OPT_LEVEL = Some("s")
HOST = Some("x86_64-apple-darwin")
CFLAGS_arm-none-eabi = None
CFLAGS_arm_none_eabi = None
TARGET_CFLAGS = None
CFLAGS = None
DEBUG = Some("true")
running: "arm-none-eabi-gcc" "-Os" "-ffunction-sections" "-fdata-sections" "-g" "-DSTM32F103xB" "-DUSE_HAL_DRIVER" "-mcpu=cortex-m3" "-mthumb" "-Wall" "-fdata-sections" "-ffunction-sections" "-Wa,-a,-ad" "-g" "-Wall" "-Wextra" "-o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/usb_device.o" "-c" "c/usb_device.c"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cco9XIDB.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"usb_device.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_USB_DEVICE_Init,"ax",%progbits
  16              		.align	1
  17              		.global	MX_USB_DEVICE_Init
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	MX_USB_DEVICE_Init:
  24              	.LFB64:
  25              		.file 1 "c/usb_device.c"
   1:c/usb_device.c **** /**
   2:c/usb_device.c ****   ******************************************************************************
   3:c/usb_device.c ****   * @file           : USB_DEVICE  
   4:c/usb_device.c ****   * @version        : v2.0_Cube
   5:c/usb_device.c ****   * @brief          : This file implements the USB Device 
   6:c/usb_device.c ****   ******************************************************************************
   7:c/usb_device.c ****   * This notice applies to any and all portions of this file
   8:c/usb_device.c ****   * that are not between comment pairs USER CODE BEGIN and
   9:c/usb_device.c ****   * USER CODE END. Other portions of this file, whether 
  10:c/usb_device.c ****   * inserted by the user or by software development tools
  11:c/usb_device.c ****   * are owned by their respective copyright owners.
  12:c/usb_device.c ****   *
  13:c/usb_device.c ****   * Copyright (c) 2017 STMicroelectronics International N.V. 
  14:c/usb_device.c ****   * All rights reserved.
  15:c/usb_device.c ****   *
  16:c/usb_device.c ****   * Redistribution and use in source and binary forms, with or without 
  17:c/usb_device.c ****   * modification, are permitted, provided that the following conditions are met:
  18:c/usb_device.c ****   *
  19:c/usb_device.c ****   * 1. Redistribution of source code must retain the above copyright notice, 
  20:c/usb_device.c ****   *    this list of conditions and the following disclaimer.
  21:c/usb_device.c ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:c/usb_device.c ****   *    this list of conditions and the following disclaimer in the documentation
  23:c/usb_device.c ****   *    and/or other materials provided with the distribution.
  24:c/usb_device.c ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  25:c/usb_device.c ****   *    contributors to this software may be used to endorse or promote products 
  26:c/usb_device.c ****   *    derived from this software without specific written permission.
  27:c/usb_device.c ****   * 4. This software, including modifications and/or derivative works of this 
  28:c/usb_device.c ****   *    software, must execute solely and exclusively on microcontroller or
  29:c/usb_device.c ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:c/usb_device.c ****   * 5. Redistribution and use of this software other than as permitted under 
  31:c/usb_device.c ****   *    this license is void and will automatically terminate your rights under 
  32:c/usb_device.c ****   *    this license. 
  33:c/usb_device.c ****   *
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cco9XIDB.s 			page 2


  34:c/usb_device.c ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  35:c/usb_device.c ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  36:c/usb_device.c ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  37:c/usb_device.c ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  38:c/usb_device.c ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  39:c/usb_device.c ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:c/usb_device.c ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:c/usb_device.c ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  42:c/usb_device.c ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  43:c/usb_device.c ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  44:c/usb_device.c ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:c/usb_device.c ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:c/usb_device.c ****   *
  47:c/usb_device.c ****   ******************************************************************************
  48:c/usb_device.c **** */
  49:c/usb_device.c **** 
  50:c/usb_device.c **** /* Includes ------------------------------------------------------------------*/
  51:c/usb_device.c **** 
  52:c/usb_device.c **** #include "usb_device.h"
  53:c/usb_device.c **** #include "usbd_core.h"
  54:c/usb_device.c **** #include "usbd_desc.h"
  55:c/usb_device.c **** #include "usbd_customhid.h"
  56:c/usb_device.c **** #include "usbd_custom_hid_if.h"
  57:c/usb_device.c **** 
  58:c/usb_device.c **** /* USB Device Core handle declaration */
  59:c/usb_device.c **** USBD_HandleTypeDef hUsbDeviceFS;
  60:c/usb_device.c **** 
  61:c/usb_device.c **** /* init function */				        
  62:c/usb_device.c **** void MX_USB_DEVICE_Init(void)
  63:c/usb_device.c **** {
  26              		.loc 1 63 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 10B5     		push	{r4, lr}
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 4, -8
  33              		.cfi_offset 14, -4
  64:c/usb_device.c ****   /* Init Device Library,Add Supported Class and Start the library*/
  65:c/usb_device.c ****   USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
  34              		.loc 1 65 0
  35 0002 094C     		ldr	r4, .L2
  36 0004 0022     		movs	r2, #0
  37 0006 0949     		ldr	r1, .L2+4
  38 0008 2046     		mov	r0, r4
  39 000a FFF7FEFF 		bl	USBD_Init
  40              	.LVL0:
  66:c/usb_device.c **** 
  67:c/usb_device.c ****   USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID);
  41              		.loc 1 67 0
  42 000e 0849     		ldr	r1, .L2+8
  43 0010 2046     		mov	r0, r4
  44 0012 FFF7FEFF 		bl	USBD_RegisterClass
  45              	.LVL1:
  68:c/usb_device.c **** 
  69:c/usb_device.c ****   USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS);
  46              		.loc 1 69 0
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cco9XIDB.s 			page 3


  47 0016 2046     		mov	r0, r4
  48 0018 0649     		ldr	r1, .L2+12
  49 001a FFF7FEFF 		bl	USBD_CUSTOM_HID_RegisterInterface
  50              	.LVL2:
  70:c/usb_device.c **** 
  71:c/usb_device.c ****   USBD_Start(&hUsbDeviceFS);
  51              		.loc 1 71 0
  52 001e 2046     		mov	r0, r4
  72:c/usb_device.c **** 
  73:c/usb_device.c **** }
  53              		.loc 1 73 0
  54 0020 BDE81040 		pop	{r4, lr}
  55              		.cfi_restore 14
  56              		.cfi_restore 4
  57              		.cfi_def_cfa_offset 0
  71:c/usb_device.c **** 
  58              		.loc 1 71 0
  59 0024 FFF7FEBF 		b	USBD_Start
  60              	.LVL3:
  61              	.L3:
  62              		.align	2
  63              	.L2:
  64 0028 00000000 		.word	hUsbDeviceFS
  65 002c 00000000 		.word	FS_Desc
  66 0030 00000000 		.word	USBD_CUSTOM_HID
  67 0034 00000000 		.word	USBD_CustomHID_fops_FS
  68              		.cfi_endproc
  69              	.LFE64:
  71              		.comm	hUsbDeviceFS,548,4
  72              		.text
  73              	.Letext0:
  74              		.file 2 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/machine/_
  75              		.file 3 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_stdi
  76              		.file 4 "c/core_cm3.h"
  77              		.file 5 "c/system_stm32f1xx.h"
  78              		.file 6 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/lock.
  79              		.file 7 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_type
  80              		.file 8 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/lib/gcc/arm-none-eabi/6.3.1/inc
  81              		.file 9 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/reent
  82              		.file 10 "c/usbd_def.h"
  83              		.file 11 "c/usb_device.h"
  84              		.file 12 "c/usbd_desc.h"
  85              		.file 13 "c/usbd_customhid.h"
  86              		.file 14 "c/usbd_custom_hid_if.h"
  87              		.file 15 "c/usbd_core.h"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cco9XIDB.s 			page 4


DEFINED SYMBOLS
                            *ABS*:0000000000000000 usb_device.c
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cco9XIDB.s:16     .text.MX_USB_DEVICE_Init:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cco9XIDB.s:23     .text.MX_USB_DEVICE_Init:0000000000000000 MX_USB_DEVICE_Init
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//cco9XIDB.s:64     .text.MX_USB_DEVICE_Init:0000000000000028 $d
                            *COM*:0000000000000224 hUsbDeviceFS
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
USBD_Init
USBD_RegisterClass
USBD_CUSTOM_HID_RegisterInterface
USBD_Start
FS_Desc
USBD_CUSTOM_HID
USBD_CustomHID_fops_FS
exit code: 0
OPT_LEVEL = Some("s")
HOST = Some("x86_64-apple-darwin")
CFLAGS_arm-none-eabi = None
CFLAGS_arm_none_eabi = None
TARGET_CFLAGS = None
CFLAGS = None
DEBUG = Some("true")
running: "arm-none-eabi-gcc" "-Os" "-ffunction-sections" "-fdata-sections" "-g" "-DSTM32F103xB" "-DUSE_HAL_DRIVER" "-mcpu=cortex-m3" "-mthumb" "-Wall" "-fdata-sections" "-ffunction-sections" "-Wa,-a,-ad" "-g" "-Wall" "-Wextra" "-o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/usbd_ioreq.o" "-c" "c/usbd_ioreq.c"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccTmi47G.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"usbd_ioreq.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.USBD_CtlSendData,"ax",%progbits
  16              		.align	1
  17              		.global	USBD_CtlSendData
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	USBD_CtlSendData:
  24              	.LFB64:
  25              		.file 1 "c/usbd_ioreq.c"
   1:c/usbd_ioreq.c **** /**
   2:c/usbd_ioreq.c ****   ******************************************************************************
   3:c/usbd_ioreq.c ****   * @file    usbd_ioreq.c
   4:c/usbd_ioreq.c ****   * @author  MCD Application Team
   5:c/usbd_ioreq.c ****   * @version V2.4.2
   6:c/usbd_ioreq.c ****   * @date    11-December-2015
   7:c/usbd_ioreq.c ****   * @brief   This file provides the IO requests APIs for control endpoints.
   8:c/usbd_ioreq.c ****   ******************************************************************************
   9:c/usbd_ioreq.c ****   * @attention
  10:c/usbd_ioreq.c ****   *
  11:c/usbd_ioreq.c ****   * <h2><center>&copy; COPYRIGHT 2015 STMicroelectronics</center></h2>
  12:c/usbd_ioreq.c ****   *
  13:c/usbd_ioreq.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  14:c/usbd_ioreq.c ****   * You may not use this file except in compliance with the License.
  15:c/usbd_ioreq.c ****   * You may obtain a copy of the License at:
  16:c/usbd_ioreq.c ****   *
  17:c/usbd_ioreq.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  18:c/usbd_ioreq.c ****   *
  19:c/usbd_ioreq.c ****   * Unless required by applicable law or agreed to in writing, software 
  20:c/usbd_ioreq.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  21:c/usbd_ioreq.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  22:c/usbd_ioreq.c ****   * See the License for the specific language governing permissions and
  23:c/usbd_ioreq.c ****   * limitations under the License.
  24:c/usbd_ioreq.c ****   *
  25:c/usbd_ioreq.c ****   ******************************************************************************
  26:c/usbd_ioreq.c ****   */ 
  27:c/usbd_ioreq.c **** 
  28:c/usbd_ioreq.c **** /* Includes ------------------------------------------------------------------*/
  29:c/usbd_ioreq.c **** #include "usbd_ioreq.h"
  30:c/usbd_ioreq.c **** 
  31:c/usbd_ioreq.c **** /** @addtogroup STM32_USB_DEVICE_LIBRARY
  32:c/usbd_ioreq.c ****   * @{
  33:c/usbd_ioreq.c ****   */
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccTmi47G.s 			page 2


  34:c/usbd_ioreq.c **** 
  35:c/usbd_ioreq.c **** 
  36:c/usbd_ioreq.c **** /** @defgroup USBD_IOREQ 
  37:c/usbd_ioreq.c ****   * @brief control I/O requests module
  38:c/usbd_ioreq.c ****   * @{
  39:c/usbd_ioreq.c ****   */ 
  40:c/usbd_ioreq.c **** 
  41:c/usbd_ioreq.c **** /** @defgroup USBD_IOREQ_Private_TypesDefinitions
  42:c/usbd_ioreq.c ****   * @{
  43:c/usbd_ioreq.c ****   */ 
  44:c/usbd_ioreq.c **** /**
  45:c/usbd_ioreq.c ****   * @}
  46:c/usbd_ioreq.c ****   */ 
  47:c/usbd_ioreq.c **** 
  48:c/usbd_ioreq.c **** 
  49:c/usbd_ioreq.c **** /** @defgroup USBD_IOREQ_Private_Defines
  50:c/usbd_ioreq.c ****   * @{
  51:c/usbd_ioreq.c ****   */ 
  52:c/usbd_ioreq.c **** 
  53:c/usbd_ioreq.c **** /**
  54:c/usbd_ioreq.c ****   * @}
  55:c/usbd_ioreq.c ****   */ 
  56:c/usbd_ioreq.c **** 
  57:c/usbd_ioreq.c **** 
  58:c/usbd_ioreq.c **** /** @defgroup USBD_IOREQ_Private_Macros
  59:c/usbd_ioreq.c ****   * @{
  60:c/usbd_ioreq.c ****   */ 
  61:c/usbd_ioreq.c **** /**
  62:c/usbd_ioreq.c ****   * @}
  63:c/usbd_ioreq.c ****   */ 
  64:c/usbd_ioreq.c **** 
  65:c/usbd_ioreq.c **** 
  66:c/usbd_ioreq.c **** /** @defgroup USBD_IOREQ_Private_Variables
  67:c/usbd_ioreq.c ****   * @{
  68:c/usbd_ioreq.c ****   */ 
  69:c/usbd_ioreq.c **** 
  70:c/usbd_ioreq.c **** /**
  71:c/usbd_ioreq.c ****   * @}
  72:c/usbd_ioreq.c ****   */ 
  73:c/usbd_ioreq.c **** 
  74:c/usbd_ioreq.c **** 
  75:c/usbd_ioreq.c **** /** @defgroup USBD_IOREQ_Private_FunctionPrototypes
  76:c/usbd_ioreq.c ****   * @{
  77:c/usbd_ioreq.c ****   */ 
  78:c/usbd_ioreq.c **** /**
  79:c/usbd_ioreq.c ****   * @}
  80:c/usbd_ioreq.c ****   */ 
  81:c/usbd_ioreq.c **** 
  82:c/usbd_ioreq.c **** 
  83:c/usbd_ioreq.c **** /** @defgroup USBD_IOREQ_Private_Functions
  84:c/usbd_ioreq.c ****   * @{
  85:c/usbd_ioreq.c ****   */ 
  86:c/usbd_ioreq.c **** 
  87:c/usbd_ioreq.c **** /**
  88:c/usbd_ioreq.c **** * @brief  USBD_CtlSendData
  89:c/usbd_ioreq.c **** *         send data on the ctl pipe
  90:c/usbd_ioreq.c **** * @param  pdev: device instance
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccTmi47G.s 			page 3


  91:c/usbd_ioreq.c **** * @param  buff: pointer to data buffer
  92:c/usbd_ioreq.c **** * @param  len: length of data to be sent
  93:c/usbd_ioreq.c **** * @retval status
  94:c/usbd_ioreq.c **** */
  95:c/usbd_ioreq.c **** USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
  96:c/usbd_ioreq.c ****                                uint8_t *pbuf,
  97:c/usbd_ioreq.c ****                                uint16_t len)
  98:c/usbd_ioreq.c **** {
  26              		.loc 1 98 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 1346     		mov	r3, r2
  99:c/usbd_ioreq.c ****   /* Set EP0 State */
 100:c/usbd_ioreq.c ****   pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
  32              		.loc 1 100 0
  33 0002 0222     		movs	r2, #2
  34              	.LVL1:
  98:c/usbd_ioreq.c ****   /* Set EP0 State */
  35              		.loc 1 98 0
  36 0004 10B5     		push	{r4, lr}
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 4, -8
  39              		.cfi_offset 14, -4
  40              		.loc 1 100 0
  41 0006 C0F8F421 		str	r2, [r0, #500]
 101:c/usbd_ioreq.c ****   pdev->ep_in[0].total_length = len;
  42              		.loc 1 101 0
  43 000a 8361     		str	r3, [r0, #24]
 102:c/usbd_ioreq.c ****   pdev->ep_in[0].rem_length   = len;
 103:c/usbd_ioreq.c ****  /* Start the transfer */
 104:c/usbd_ioreq.c ****   USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
  44              		.loc 1 104 0
  45 000c 0A46     		mov	r2, r1
 102:c/usbd_ioreq.c ****   pdev->ep_in[0].rem_length   = len;
  46              		.loc 1 102 0
  47 000e C361     		str	r3, [r0, #28]
  48              		.loc 1 104 0
  49 0010 0021     		movs	r1, #0
  50              	.LVL2:
  51 0012 FFF7FEFF 		bl	USBD_LL_Transmit
  52              	.LVL3:
 105:c/usbd_ioreq.c ****   
 106:c/usbd_ioreq.c ****   return USBD_OK;
 107:c/usbd_ioreq.c **** }
  53              		.loc 1 107 0
  54 0016 0020     		movs	r0, #0
  55 0018 10BD     		pop	{r4, pc}
  56              		.cfi_endproc
  57              	.LFE64:
  59              		.section	.text.USBD_CtlContinueSendData,"ax",%progbits
  60              		.align	1
  61              		.global	USBD_CtlContinueSendData
  62              		.syntax unified
  63              		.thumb
  64              		.thumb_func
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccTmi47G.s 			page 4


  65              		.fpu softvfp
  67              	USBD_CtlContinueSendData:
  68              	.LFB65:
 108:c/usbd_ioreq.c **** 
 109:c/usbd_ioreq.c **** /**
 110:c/usbd_ioreq.c **** * @brief  USBD_CtlContinueSendData
 111:c/usbd_ioreq.c **** *         continue sending data on the ctl pipe
 112:c/usbd_ioreq.c **** * @param  pdev: device instance
 113:c/usbd_ioreq.c **** * @param  buff: pointer to data buffer
 114:c/usbd_ioreq.c **** * @param  len: length of data to be sent
 115:c/usbd_ioreq.c **** * @retval status
 116:c/usbd_ioreq.c **** */
 117:c/usbd_ioreq.c **** USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
 118:c/usbd_ioreq.c ****                                        uint8_t *pbuf,
 119:c/usbd_ioreq.c ****                                        uint16_t len)
 120:c/usbd_ioreq.c **** {
  69              		.loc 1 120 0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 0
  72              		@ frame_needed = 0, uses_anonymous_args = 0
  73              	.LVL4:
  74 0000 08B5     		push	{r3, lr}
  75              		.cfi_def_cfa_offset 8
  76              		.cfi_offset 3, -8
  77              		.cfi_offset 14, -4
 121:c/usbd_ioreq.c ****  /* Start the next transfer */
 122:c/usbd_ioreq.c ****   USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
  78              		.loc 1 122 0
  79 0002 1346     		mov	r3, r2
  80 0004 0A46     		mov	r2, r1
  81              	.LVL5:
  82 0006 0021     		movs	r1, #0
  83              	.LVL6:
  84 0008 FFF7FEFF 		bl	USBD_LL_Transmit
  85              	.LVL7:
 123:c/usbd_ioreq.c ****   
 124:c/usbd_ioreq.c ****   return USBD_OK;
 125:c/usbd_ioreq.c **** }
  86              		.loc 1 125 0
  87 000c 0020     		movs	r0, #0
  88 000e 08BD     		pop	{r3, pc}
  89              		.cfi_endproc
  90              	.LFE65:
  92              		.section	.text.USBD_CtlPrepareRx,"ax",%progbits
  93              		.align	1
  94              		.global	USBD_CtlPrepareRx
  95              		.syntax unified
  96              		.thumb
  97              		.thumb_func
  98              		.fpu softvfp
 100              	USBD_CtlPrepareRx:
 101              	.LFB66:
 126:c/usbd_ioreq.c **** 
 127:c/usbd_ioreq.c **** /**
 128:c/usbd_ioreq.c **** * @brief  USBD_CtlPrepareRx
 129:c/usbd_ioreq.c **** *         receive data on the ctl pipe
 130:c/usbd_ioreq.c **** * @param  pdev: device instance
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccTmi47G.s 			page 5


 131:c/usbd_ioreq.c **** * @param  buff: pointer to data buffer
 132:c/usbd_ioreq.c **** * @param  len: length of data to be received
 133:c/usbd_ioreq.c **** * @retval status
 134:c/usbd_ioreq.c **** */
 135:c/usbd_ioreq.c **** USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
 136:c/usbd_ioreq.c ****                                   uint8_t *pbuf,                                  
 137:c/usbd_ioreq.c ****                                   uint16_t len)
 138:c/usbd_ioreq.c **** {
 102              		.loc 1 138 0
 103              		.cfi_startproc
 104              		@ args = 0, pretend = 0, frame = 0
 105              		@ frame_needed = 0, uses_anonymous_args = 0
 106              	.LVL8:
 107 0000 1346     		mov	r3, r2
 139:c/usbd_ioreq.c ****   /* Set EP0 State */
 140:c/usbd_ioreq.c ****   pdev->ep0_state = USBD_EP0_DATA_OUT; 
 108              		.loc 1 140 0
 109 0002 0322     		movs	r2, #3
 110              	.LVL9:
 138:c/usbd_ioreq.c ****   /* Set EP0 State */
 111              		.loc 1 138 0
 112 0004 10B5     		push	{r4, lr}
 113              		.cfi_def_cfa_offset 8
 114              		.cfi_offset 4, -8
 115              		.cfi_offset 14, -4
 116              		.loc 1 140 0
 117 0006 C0F8F421 		str	r2, [r0, #500]
 141:c/usbd_ioreq.c ****   pdev->ep_out[0].total_length = len;
 118              		.loc 1 141 0
 119 000a C0F80831 		str	r3, [r0, #264]
 142:c/usbd_ioreq.c ****   pdev->ep_out[0].rem_length   = len;
 143:c/usbd_ioreq.c ****   /* Start the transfer */
 144:c/usbd_ioreq.c ****   USBD_LL_PrepareReceive (pdev,
 120              		.loc 1 144 0
 121 000e 0A46     		mov	r2, r1
 142:c/usbd_ioreq.c ****   pdev->ep_out[0].rem_length   = len;
 122              		.loc 1 142 0
 123 0010 C0F80C31 		str	r3, [r0, #268]
 124              		.loc 1 144 0
 125 0014 0021     		movs	r1, #0
 126              	.LVL10:
 127 0016 FFF7FEFF 		bl	USBD_LL_PrepareReceive
 128              	.LVL11:
 145:c/usbd_ioreq.c ****                           0,
 146:c/usbd_ioreq.c ****                           pbuf,
 147:c/usbd_ioreq.c ****                          len);
 148:c/usbd_ioreq.c ****   
 149:c/usbd_ioreq.c ****   return USBD_OK;
 150:c/usbd_ioreq.c **** }
 129              		.loc 1 150 0
 130 001a 0020     		movs	r0, #0
 131 001c 10BD     		pop	{r4, pc}
 132              		.cfi_endproc
 133              	.LFE66:
 135              		.section	.text.USBD_CtlContinueRx,"ax",%progbits
 136              		.align	1
 137              		.global	USBD_CtlContinueRx
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccTmi47G.s 			page 6


 138              		.syntax unified
 139              		.thumb
 140              		.thumb_func
 141              		.fpu softvfp
 143              	USBD_CtlContinueRx:
 144              	.LFB67:
 151:c/usbd_ioreq.c **** 
 152:c/usbd_ioreq.c **** /**
 153:c/usbd_ioreq.c **** * @brief  USBD_CtlContinueRx
 154:c/usbd_ioreq.c **** *         continue receive data on the ctl pipe
 155:c/usbd_ioreq.c **** * @param  pdev: device instance
 156:c/usbd_ioreq.c **** * @param  buff: pointer to data buffer
 157:c/usbd_ioreq.c **** * @param  len: length of data to be received
 158:c/usbd_ioreq.c **** * @retval status
 159:c/usbd_ioreq.c **** */
 160:c/usbd_ioreq.c **** USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
 161:c/usbd_ioreq.c ****                                           uint8_t *pbuf,                                          
 162:c/usbd_ioreq.c ****                                           uint16_t len)
 163:c/usbd_ioreq.c **** {
 145              		.loc 1 163 0
 146              		.cfi_startproc
 147              		@ args = 0, pretend = 0, frame = 0
 148              		@ frame_needed = 0, uses_anonymous_args = 0
 149              	.LVL12:
 150 0000 08B5     		push	{r3, lr}
 151              		.cfi_def_cfa_offset 8
 152              		.cfi_offset 3, -8
 153              		.cfi_offset 14, -4
 164:c/usbd_ioreq.c **** 
 165:c/usbd_ioreq.c ****   USBD_LL_PrepareReceive (pdev,
 154              		.loc 1 165 0
 155 0002 1346     		mov	r3, r2
 156 0004 0A46     		mov	r2, r1
 157              	.LVL13:
 158 0006 0021     		movs	r1, #0
 159              	.LVL14:
 160 0008 FFF7FEFF 		bl	USBD_LL_PrepareReceive
 161              	.LVL15:
 166:c/usbd_ioreq.c ****                           0,                     
 167:c/usbd_ioreq.c ****                           pbuf,                         
 168:c/usbd_ioreq.c ****                           len);
 169:c/usbd_ioreq.c ****   return USBD_OK;
 170:c/usbd_ioreq.c **** }
 162              		.loc 1 170 0
 163 000c 0020     		movs	r0, #0
 164 000e 08BD     		pop	{r3, pc}
 165              		.cfi_endproc
 166              	.LFE67:
 168              		.section	.text.USBD_CtlSendStatus,"ax",%progbits
 169              		.align	1
 170              		.global	USBD_CtlSendStatus
 171              		.syntax unified
 172              		.thumb
 173              		.thumb_func
 174              		.fpu softvfp
 176              	USBD_CtlSendStatus:
 177              	.LFB68:
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccTmi47G.s 			page 7


 171:c/usbd_ioreq.c **** /**
 172:c/usbd_ioreq.c **** * @brief  USBD_CtlSendStatus
 173:c/usbd_ioreq.c **** *         send zero lzngth packet on the ctl pipe
 174:c/usbd_ioreq.c **** * @param  pdev: device instance
 175:c/usbd_ioreq.c **** * @retval status
 176:c/usbd_ioreq.c **** */
 177:c/usbd_ioreq.c **** USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
 178:c/usbd_ioreq.c **** {
 178              		.loc 1 178 0
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
 182              	.LVL16:
 183 0000 08B5     		push	{r3, lr}
 184              		.cfi_def_cfa_offset 8
 185              		.cfi_offset 3, -8
 186              		.cfi_offset 14, -4
 179:c/usbd_ioreq.c **** 
 180:c/usbd_ioreq.c ****   /* Set EP0 State */
 181:c/usbd_ioreq.c ****   pdev->ep0_state = USBD_EP0_STATUS_IN;
 187              		.loc 1 181 0
 188 0002 0423     		movs	r3, #4
 189 0004 C0F8F431 		str	r3, [r0, #500]
 182:c/usbd_ioreq.c ****   
 183:c/usbd_ioreq.c ****  /* Start the transfer */
 184:c/usbd_ioreq.c ****   USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 190              		.loc 1 184 0
 191 0008 0023     		movs	r3, #0
 192 000a 1A46     		mov	r2, r3
 193 000c 1946     		mov	r1, r3
 194 000e FFF7FEFF 		bl	USBD_LL_Transmit
 195              	.LVL17:
 185:c/usbd_ioreq.c ****   
 186:c/usbd_ioreq.c ****   return USBD_OK;
 187:c/usbd_ioreq.c **** }
 196              		.loc 1 187 0
 197 0012 0020     		movs	r0, #0
 198 0014 08BD     		pop	{r3, pc}
 199              		.cfi_endproc
 200              	.LFE68:
 202              		.section	.text.USBD_CtlReceiveStatus,"ax",%progbits
 203              		.align	1
 204              		.global	USBD_CtlReceiveStatus
 205              		.syntax unified
 206              		.thumb
 207              		.thumb_func
 208              		.fpu softvfp
 210              	USBD_CtlReceiveStatus:
 211              	.LFB69:
 188:c/usbd_ioreq.c **** 
 189:c/usbd_ioreq.c **** /**
 190:c/usbd_ioreq.c **** * @brief  USBD_CtlReceiveStatus
 191:c/usbd_ioreq.c **** *         receive zero lzngth packet on the ctl pipe
 192:c/usbd_ioreq.c **** * @param  pdev: device instance
 193:c/usbd_ioreq.c **** * @retval status
 194:c/usbd_ioreq.c **** */
 195:c/usbd_ioreq.c **** USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccTmi47G.s 			page 8


 196:c/usbd_ioreq.c **** {
 212              		.loc 1 196 0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 0
 215              		@ frame_needed = 0, uses_anonymous_args = 0
 216              	.LVL18:
 217 0000 08B5     		push	{r3, lr}
 218              		.cfi_def_cfa_offset 8
 219              		.cfi_offset 3, -8
 220              		.cfi_offset 14, -4
 197:c/usbd_ioreq.c ****   /* Set EP0 State */
 198:c/usbd_ioreq.c ****   pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 221              		.loc 1 198 0
 222 0002 0523     		movs	r3, #5
 223 0004 C0F8F431 		str	r3, [r0, #500]
 199:c/usbd_ioreq.c ****   
 200:c/usbd_ioreq.c ****  /* Start the transfer */  
 201:c/usbd_ioreq.c ****   USBD_LL_PrepareReceive ( pdev,
 224              		.loc 1 201 0
 225 0008 0023     		movs	r3, #0
 226 000a 1A46     		mov	r2, r3
 227 000c 1946     		mov	r1, r3
 228 000e FFF7FEFF 		bl	USBD_LL_PrepareReceive
 229              	.LVL19:
 202:c/usbd_ioreq.c ****                     0,
 203:c/usbd_ioreq.c ****                     NULL,
 204:c/usbd_ioreq.c ****                     0);  
 205:c/usbd_ioreq.c **** 
 206:c/usbd_ioreq.c ****   return USBD_OK;
 207:c/usbd_ioreq.c **** }
 230              		.loc 1 207 0
 231 0012 0020     		movs	r0, #0
 232 0014 08BD     		pop	{r3, pc}
 233              		.cfi_endproc
 234              	.LFE69:
 236              		.section	.text.USBD_GetRxCount,"ax",%progbits
 237              		.align	1
 238              		.global	USBD_GetRxCount
 239              		.syntax unified
 240              		.thumb
 241              		.thumb_func
 242              		.fpu softvfp
 244              	USBD_GetRxCount:
 245              	.LFB70:
 208:c/usbd_ioreq.c **** 
 209:c/usbd_ioreq.c **** 
 210:c/usbd_ioreq.c **** /**
 211:c/usbd_ioreq.c **** * @brief  USBD_GetRxCount
 212:c/usbd_ioreq.c **** *         returns the received data length
 213:c/usbd_ioreq.c **** * @param  pdev: device instance
 214:c/usbd_ioreq.c **** * @param  ep_addr: endpoint address
 215:c/usbd_ioreq.c **** * @retval Rx Data blength
 216:c/usbd_ioreq.c **** */
 217:c/usbd_ioreq.c **** uint16_t  USBD_GetRxCount (USBD_HandleTypeDef  *pdev , uint8_t ep_addr)
 218:c/usbd_ioreq.c **** {
 246              		.loc 1 218 0
 247              		.cfi_startproc
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccTmi47G.s 			page 9


 248              		@ args = 0, pretend = 0, frame = 0
 249              		@ frame_needed = 0, uses_anonymous_args = 0
 250              	.LVL20:
 251 0000 08B5     		push	{r3, lr}
 252              		.cfi_def_cfa_offset 8
 253              		.cfi_offset 3, -8
 254              		.cfi_offset 14, -4
 219:c/usbd_ioreq.c ****   return USBD_LL_GetRxDataSize(pdev, ep_addr);
 255              		.loc 1 219 0
 256 0002 FFF7FEFF 		bl	USBD_LL_GetRxDataSize
 257              	.LVL21:
 220:c/usbd_ioreq.c **** }
 258              		.loc 1 220 0
 259 0006 80B2     		uxth	r0, r0
 260 0008 08BD     		pop	{r3, pc}
 261              		.cfi_endproc
 262              	.LFE70:
 264              		.text
 265              	.Letext0:
 266              		.file 2 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/machine/_
 267              		.file 3 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_stdi
 268              		.file 4 "c/core_cm3.h"
 269              		.file 5 "c/system_stm32f1xx.h"
 270              		.file 6 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/lock.
 271              		.file 7 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/_type
 272              		.file 8 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/lib/gcc/arm-none-eabi/6.3.1/inc
 273              		.file 9 "/Users/arko/Documents/ARM_GCC/gcc-arm-none-eabi-6-2017-q2/arm-none-eabi/include/sys/reent
 274              		.file 10 "c/usbd_def.h"
 275              		.file 11 "c/usbd_core.h"
ARM GAS  /var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccTmi47G.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 usbd_ioreq.c
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccTmi47G.s:16     .text.USBD_CtlSendData:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccTmi47G.s:23     .text.USBD_CtlSendData:0000000000000000 USBD_CtlSendData
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccTmi47G.s:60     .text.USBD_CtlContinueSendData:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccTmi47G.s:67     .text.USBD_CtlContinueSendData:0000000000000000 USBD_CtlContinueSendData
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccTmi47G.s:93     .text.USBD_CtlPrepareRx:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccTmi47G.s:100    .text.USBD_CtlPrepareRx:0000000000000000 USBD_CtlPrepareRx
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccTmi47G.s:136    .text.USBD_CtlContinueRx:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccTmi47G.s:143    .text.USBD_CtlContinueRx:0000000000000000 USBD_CtlContinueRx
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccTmi47G.s:169    .text.USBD_CtlSendStatus:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccTmi47G.s:176    .text.USBD_CtlSendStatus:0000000000000000 USBD_CtlSendStatus
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccTmi47G.s:203    .text.USBD_CtlReceiveStatus:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccTmi47G.s:210    .text.USBD_CtlReceiveStatus:0000000000000000 USBD_CtlReceiveStatus
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccTmi47G.s:237    .text.USBD_GetRxCount:0000000000000000 $t
/var/folders/56/nrjnt_7502345jgyjl4c6lvh0000gn/T//ccTmi47G.s:244    .text.USBD_GetRxCount:0000000000000000 USBD_GetRxCount
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
USBD_LL_Transmit
USBD_LL_PrepareReceive
USBD_LL_GetRxDataSize
exit code: 0
HOST = Some("x86_64-apple-darwin")
AR_arm-none-eabi = None
AR_arm_none_eabi = None
TARGET_AR = None
AR = None
running: "ar" "crs" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/libusbcdc.a" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/main.o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/stm32f1xx_hal.o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/stm32f1xx_hal_cortex.o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/stm32f1xx_hal_gpio.o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/stm32f1xx_hal_pcd.o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/stm32f1xx_hal_pcd_ex.o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/stm32f1xx_hal_rcc.o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/stm32f1xx_hal_rcc_ex.o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/stm32f1xx_it.o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/stm32f1xx_ll_usb.o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/system_stm32f1xx.o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/usbd_conf.o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/usbd_core.o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/usbd_ctlreq.o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/usbd_customhid.o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/usbd_custom_hid_if.o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/usbd_desc.o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/usb_device.o" "/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/c/usbd_ioreq.o"
cargo:warning=warning: /opt/local/bin/ranlib: warning for library: /Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out/libusbcdc.a the table of contents is empty (no object file members in the library define global symbols)
exit code: 0
cargo:rustc-link-lib=static=usbcdc
cargo:rustc-link-search=native=/Users/arko/GitHub/OneButton/Firmware/Rust/target/thumbv6m-none-eabi/release/build/bluepill-usbhid-27a4839683e02d79/out
