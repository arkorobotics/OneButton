
src/build/fast-f042-48000000i/onebutton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000331c  080000c4  080000c4  000100c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM          00000008  080033e0  080033e0  000133e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   0000000c  080033e8  080033e8  000133e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080033f4  080033f4  000133f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000084c  20000000  080033f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000a4  2000084c  08003c44  0002084c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  200008f0  08003ce8  0002084c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002084c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00022c6e  00000000  00000000  00020874  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002e5a  00000000  00000000  000434e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ad99  00000000  00000000  0004633c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000528  00000000  00000000  000510d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001e20  00000000  00000000  000515fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000416e  00000000  00000000  0005341d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000173f6  00000000  00000000  0005758b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007f  00000000  00000000  0006e981  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000ed8  00000000  00000000  0006ea00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c4 <__do_global_dtors_aux>:
 80000c4:	b510      	push	{r4, lr}
 80000c6:	4c06      	ldr	r4, [pc, #24]	; (80000e0 <__do_global_dtors_aux+0x1c>)
 80000c8:	7823      	ldrb	r3, [r4, #0]
 80000ca:	2b00      	cmp	r3, #0
 80000cc:	d107      	bne.n	80000de <__do_global_dtors_aux+0x1a>
 80000ce:	4b05      	ldr	r3, [pc, #20]	; (80000e4 <__do_global_dtors_aux+0x20>)
 80000d0:	2b00      	cmp	r3, #0
 80000d2:	d002      	beq.n	80000da <__do_global_dtors_aux+0x16>
 80000d4:	4804      	ldr	r0, [pc, #16]	; (80000e8 <__do_global_dtors_aux+0x24>)
 80000d6:	e000      	b.n	80000da <__do_global_dtors_aux+0x16>
 80000d8:	bf00      	nop
 80000da:	2301      	movs	r3, #1
 80000dc:	7023      	strb	r3, [r4, #0]
 80000de:	bd10      	pop	{r4, pc}
 80000e0:	2000084c 	.word	0x2000084c
 80000e4:	00000000 	.word	0x00000000
 80000e8:	080033c8 	.word	0x080033c8

080000ec <frame_dummy>:
 80000ec:	4b08      	ldr	r3, [pc, #32]	; (8000110 <frame_dummy+0x24>)
 80000ee:	b510      	push	{r4, lr}
 80000f0:	2b00      	cmp	r3, #0
 80000f2:	d003      	beq.n	80000fc <frame_dummy+0x10>
 80000f4:	4907      	ldr	r1, [pc, #28]	; (8000114 <frame_dummy+0x28>)
 80000f6:	4808      	ldr	r0, [pc, #32]	; (8000118 <frame_dummy+0x2c>)
 80000f8:	e000      	b.n	80000fc <frame_dummy+0x10>
 80000fa:	bf00      	nop
 80000fc:	4807      	ldr	r0, [pc, #28]	; (800011c <frame_dummy+0x30>)
 80000fe:	6803      	ldr	r3, [r0, #0]
 8000100:	2b00      	cmp	r3, #0
 8000102:	d100      	bne.n	8000106 <frame_dummy+0x1a>
 8000104:	bd10      	pop	{r4, pc}
 8000106:	4b06      	ldr	r3, [pc, #24]	; (8000120 <frame_dummy+0x34>)
 8000108:	2b00      	cmp	r3, #0
 800010a:	d0fb      	beq.n	8000104 <frame_dummy+0x18>
 800010c:	4798      	blx	r3
 800010e:	e7f9      	b.n	8000104 <frame_dummy+0x18>
 8000110:	00000000 	.word	0x00000000
 8000114:	20000850 	.word	0x20000850
 8000118:	080033c8 	.word	0x080033c8
 800011c:	2000084c 	.word	0x2000084c
 8000120:	00000000 	.word	0x00000000

08000124 <_ZN9OneButton18onTransmitCompleteEht>:
     * Finished sending data to the host
     */

    void onTransmitComplete(uint8_t /* endpointIndex */,uint16_t /* size */) {
      // ACK received from the host
    }
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <_ZN9OneButton14onStatusChangeEN9stm32plus13UsbStatusTypeE>:
     * Device status change event
     */

    void onStatusChange(UsbStatusType newStatus) {

      switch(newStatus) {
 8000128:	2907      	cmp	r1, #7
 800012a:	d00a      	beq.n	8000142 <_ZN9OneButton14onStatusChangeEN9stm32plus13UsbStatusTypeE+0x1a>
 800012c:	dc02      	bgt.n	8000134 <_ZN9OneButton14onStatusChangeEN9stm32plus13UsbStatusTypeE+0xc>
 800012e:	2905      	cmp	r1, #5
 8000130:	da02      	bge.n	8000138 <_ZN9OneButton14onStatusChangeEN9stm32plus13UsbStatusTypeE+0x10>
          break;

        default:
          break;
      }
    }
 8000132:	4770      	bx	lr
      switch(newStatus) {
 8000134:	2908      	cmp	r1, #8
 8000136:	d1fc      	bne.n	8000132 <_ZN9OneButton14onStatusChangeEN9stm32plus13UsbStatusTypeE+0xa>
          _deviceConfigured=false;
 8000138:	2342      	movs	r3, #66	; 0x42
 800013a:	2200      	movs	r2, #0
 800013c:	33ff      	adds	r3, #255	; 0xff
 800013e:	54c2      	strb	r2, [r0, r3]
    }
 8000140:	e7f7      	b.n	8000132 <_ZN9OneButton14onStatusChangeEN9stm32plus13UsbStatusTypeE+0xa>
        _deviceConfigured=true;
 8000142:	2342      	movs	r3, #66	; 0x42
 8000144:	2201      	movs	r2, #1
 8000146:	33ff      	adds	r3, #255	; 0xff
 8000148:	54c2      	strb	r2, [r0, r3]
        _lastTransmitTime=MillisecondTimer::millis()+5000;    // 5 second delay before starting to send
 800014a:	4a04      	ldr	r2, [pc, #16]	; (800015c <_ZN9OneButton14onStatusChangeEN9stm32plus13UsbStatusTypeE+0x34>)
   * Get the current value of the systick counter.
   * @return The current value of the counter.
   */

  inline uint32_t MillisecondTimer::millis() {
    return _counter;
 800014c:	4b04      	ldr	r3, [pc, #16]	; (8000160 <_ZN9OneButton14onStatusChangeEN9stm32plus13UsbStatusTypeE+0x38>)
 800014e:	4694      	mov	ip, r2
 8000150:	22a4      	movs	r2, #164	; 0xa4
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	0052      	lsls	r2, r2, #1
 8000156:	4463      	add	r3, ip
 8000158:	5083      	str	r3, [r0, r2]
        break;
 800015a:	e7ea      	b.n	8000132 <_ZN9OneButton14onStatusChangeEN9stm32plus13UsbStatusTypeE+0xa>
 800015c:	00001388 	.word	0x00001388
 8000160:	20000880 	.word	0x20000880

08000164 <_ZN9OneButton9onReceiveEhPKtt>:
    void onReceive(uint8_t endpointIndex,const uint16_t *data,uint16_t size) {
 8000164:	b510      	push	{r4, lr}
 8000166:	0004      	movs	r4, r0
 8000168:	0010      	movs	r0, r2
      if(endpointIndex==1 && size==2 && memcmp(data,"\x02\x01",size)==0)
 800016a:	2901      	cmp	r1, #1
 800016c:	d000      	beq.n	8000170 <_ZN9OneButton9onReceiveEhPKtt+0xc>
    }
 800016e:	bd10      	pop	{r4, pc}
      if(endpointIndex==1 && size==2 && memcmp(data,"\x02\x01",size)==0)
 8000170:	2b02      	cmp	r3, #2
 8000172:	d1fc      	bne.n	800016e <_ZN9OneButton9onReceiveEhPKtt+0xa>
 8000174:	2202      	movs	r2, #2
 8000176:	4905      	ldr	r1, [pc, #20]	; (800018c <_ZN9OneButton9onReceiveEhPKtt+0x28>)
 8000178:	f002 fe12 	bl	8002da0 <memcmp>
 800017c:	2800      	cmp	r0, #0
 800017e:	d1f6      	bne.n	800016e <_ZN9OneButton9onReceiveEhPKtt+0xa>
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <_ZN9OneButton9onReceiveEhPKtt+0x2c>)
 8000182:	681a      	ldr	r2, [r3, #0]
        _receivedReportTime=MillisecondTimer::millis();
 8000184:	23a2      	movs	r3, #162	; 0xa2
 8000186:	005b      	lsls	r3, r3, #1
 8000188:	50e2      	str	r2, [r4, r3]
    }
 800018a:	e7f0      	b.n	800016e <_ZN9OneButton9onReceiveEhPKtt+0xa>
 800018c:	080033c0 	.word	0x080033c0
 8000190:	20000880 	.word	0x20000880

08000194 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE16continueSendDataEh.constprop.83>:
    const uint8_t *dataBytes;
    UsbInEndpointData& ep(_inEndpointData[endpointIndex]);

    // cut down the length if this will be a multi-packet transfer

    if((length=ep.remaining)>ep.maxPacketSize)
 8000194:	2340      	movs	r3, #64	; 0x40
 8000196:	5ac2      	ldrh	r2, [r0, r3]
 8000198:	3304      	adds	r3, #4
  inline void UsbKeyboard<TConfiguration,Features...>::continueSendData(uint8_t endpointIndex) {
 800019a:	b570      	push	{r4, r5, r6, lr}
    if((length=ep.remaining)>ep.maxPacketSize)
 800019c:	5ac6      	ldrh	r6, [r0, r3]
 800019e:	0034      	movs	r4, r6
 80001a0:	42b2      	cmp	r2, r6
 80001a2:	dc01      	bgt.n	80001a8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE16continueSendDataEh.constprop.83+0x14>
 80001a4:	0014      	movs	r4, r2
      length=ep.maxPacketSize;
    else
      length=ep.remaining;
 80001a6:	0016      	movs	r6, r2

    n=(length+1)/2;
    pdwVal=reinterpret_cast<uint16_t *>(BTABLE_BASE+ep.pmaAddress);
 80001a8:	2346      	movs	r3, #70	; 0x46
 80001aa:	5ac5      	ldrh	r5, [r0, r3]
 80001ac:	4b13      	ldr	r3, [pc, #76]	; (80001fc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE16continueSendDataEh.constprop.83+0x68>)
    n=(length+1)/2;
 80001ae:	3401      	adds	r4, #1
    pdwVal=reinterpret_cast<uint16_t *>(BTABLE_BASE+ep.pmaAddress);
 80001b0:	469c      	mov	ip, r3
    n=(length+1)/2;
 80001b2:	1064      	asrs	r4, r4, #1
    pdwVal=reinterpret_cast<uint16_t *>(BTABLE_BASE+ep.pmaAddress);
 80001b4:	4465      	add	r5, ip
    dataBytes=ep.ptr;
 80001b6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

    for(i=n;i!=0;i--) {
 80001b8:	2c00      	cmp	r4, #0
 80001ba:	d00c      	beq.n	80001d6 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE16continueSendDataEh.constprop.83+0x42>
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 80001bc:	7859      	ldrb	r1, [r3, #1]
 80001be:	781a      	ldrb	r2, [r3, #0]
 80001c0:	0209      	lsls	r1, r1, #8
 80001c2:	430a      	orrs	r2, r1
    for(i=n;i!=0;i--) {
 80001c4:	3c01      	subs	r4, #1
      *pdwVal++=word;
 80001c6:	802a      	strh	r2, [r5, #0]
      dataBytes+=2;
 80001c8:	3302      	adds	r3, #2
 80001ca:	3502      	adds	r5, #2
    for(i=n;i!=0;i--) {
 80001cc:	2c00      	cmp	r4, #0
 80001ce:	d1f5      	bne.n	80001bc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE16continueSendDataEh.constprop.83+0x28>
 80001d0:	2240      	movs	r2, #64	; 0x40
 80001d2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80001d4:	5a82      	ldrh	r2, [r0, r2]
    }

    // update status

    ep.ptr+=length;
 80001d6:	199b      	adds	r3, r3, r6
 80001d8:	63c3      	str	r3, [r0, #60]	; 0x3c
    ep.remaining-=length;
 80001da:	2340      	movs	r3, #64	; 0x40
 80001dc:	1b92      	subs	r2, r2, r6
 80001de:	52c2      	strh	r2, [r0, r3]

    // now that the PMA memory is prepared, set the length and tell the peripheral to send it

    USBR_BDT[endpointIndex].tx.count=length;
 80001e0:	4b06      	ldr	r3, [pc, #24]	; (80001fc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE16continueSendDataEh.constprop.83+0x68>)
    value=*epreg & USB_EPTX_DTOGMASK;
 80001e2:	4907      	ldr	r1, [pc, #28]	; (8000200 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE16continueSendDataEh.constprop.83+0x6c>)
    USBR_BDT[endpointIndex].tx.count=length;
 80001e4:	805e      	strh	r6, [r3, #2]
    value=*epreg & USB_EPTX_DTOGMASK;
 80001e6:	880b      	ldrh	r3, [r1, #0]
 80001e8:	4a06      	ldr	r2, [pc, #24]	; (8000204 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE16continueSendDataEh.constprop.83+0x70>)
 80001ea:	4013      	ands	r3, r2
      reg^=USB_EPTX_DTOG2;
 80001ec:	2230      	movs	r2, #48	; 0x30
 80001ee:	405a      	eors	r2, r3
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 80001f0:	4b05      	ldr	r3, [pc, #20]	; (8000208 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE16continueSendDataEh.constprop.83+0x74>)
 80001f2:	4313      	orrs	r3, r2
 80001f4:	b29b      	uxth	r3, r3
 80001f6:	800b      	strh	r3, [r1, #0]
    setTxEndpointStatus(&USBR->EP0R+endpointIndex*2,USB_EP_TX_VALID);
  }
 80001f8:	bd70      	pop	{r4, r5, r6, pc}
 80001fa:	46c0      	nop			; (mov r8, r8)
 80001fc:	40006000 	.word	0x40006000
 8000200:	40005c00 	.word	0x40005c00
 8000204:	ffff8fbf 	.word	0xffff8fbf
 8000208:	ffff8080 	.word	0xffff8080

0800020c <_ZNK9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE13stallEndpointEh.isra.43>:
  template<class TConfiguration,class... Features>
  inline void UsbKeyboard<TConfiguration,Features...>::stallEndpoint(uint8_t epAddr) const {

    uint8_t endpointIndex;

    endpointIndex=epAddr & 0x7f;
 800020c:	237f      	movs	r3, #127	; 0x7f
 800020e:	4a17      	ldr	r2, [pc, #92]	; (800026c <_ZNK9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE13stallEndpointEh.isra.43+0x60>)
 8000210:	4003      	ands	r3, r0

    if(endpointIndex==0)
 8000212:	d112      	bne.n	800023a <_ZNK9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE13stallEndpointEh.isra.43+0x2e>
    value=*epreg & USB_EPRX_DTOGMASK;
 8000214:	4916      	ldr	r1, [pc, #88]	; (8000270 <_ZNK9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE13stallEndpointEh.isra.43+0x64>)
 8000216:	4817      	ldr	r0, [pc, #92]	; (8000274 <_ZNK9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE13stallEndpointEh.isra.43+0x68>)
 8000218:	880b      	ldrh	r3, [r1, #0]
 800021a:	4018      	ands	r0, r3
      reg^=USB_EPRX_DTOG1;
 800021c:	2380      	movs	r3, #128	; 0x80
 800021e:	015b      	lsls	r3, r3, #5
 8000220:	4043      	eors	r3, r0
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8000222:	4313      	orrs	r3, r2
 8000224:	b29b      	uxth	r3, r3
 8000226:	800b      	strh	r3, [r1, #0]
    value=*epreg & USB_EPTX_DTOGMASK;
 8000228:	880b      	ldrh	r3, [r1, #0]
 800022a:	4813      	ldr	r0, [pc, #76]	; (8000278 <_ZNK9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE13stallEndpointEh.isra.43+0x6c>)
 800022c:	4018      	ands	r0, r3
      reg^=USB_EPTX_DTOG1;
 800022e:	2310      	movs	r3, #16
 8000230:	4043      	eors	r3, r0
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8000232:	431a      	orrs	r2, r3
 8000234:	b292      	uxth	r2, r2
 8000236:	800a      	strh	r2, [r1, #0]
 8000238:	e017      	b.n	800026a <_ZNK9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE13stallEndpointEh.isra.43+0x5e>
 800023a:	4910      	ldr	r1, [pc, #64]	; (800027c <_ZNK9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE13stallEndpointEh.isra.43+0x70>)
      controlEndpointError();
    else {

      if((epAddr & 0x80)==0x80)
 800023c:	b240      	sxtb	r0, r0
 800023e:	468c      	mov	ip, r1
 8000240:	4463      	add	r3, ip
        setTxEndpointStatus(&USBR->EP0R+endpointIndex*2,USB_EP_TX_STALL);
 8000242:	009b      	lsls	r3, r3, #2
    value=*epreg & USB_EPTX_DTOGMASK;
 8000244:	8819      	ldrh	r1, [r3, #0]
      if((epAddr & 0x80)==0x80)
 8000246:	2800      	cmp	r0, #0
 8000248:	da07      	bge.n	800025a <_ZNK9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE13stallEndpointEh.isra.43+0x4e>
    value=*epreg & USB_EPTX_DTOGMASK;
 800024a:	480b      	ldr	r0, [pc, #44]	; (8000278 <_ZNK9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE13stallEndpointEh.isra.43+0x6c>)
 800024c:	4008      	ands	r0, r1
      reg^=USB_EPTX_DTOG1;
 800024e:	2110      	movs	r1, #16
 8000250:	4041      	eors	r1, r0
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8000252:	430a      	orrs	r2, r1
 8000254:	b292      	uxth	r2, r2
 8000256:	801a      	strh	r2, [r3, #0]
 8000258:	e007      	b.n	800026a <_ZNK9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE13stallEndpointEh.isra.43+0x5e>
    value=*epreg & USB_EPRX_DTOGMASK;
 800025a:	4806      	ldr	r0, [pc, #24]	; (8000274 <_ZNK9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE13stallEndpointEh.isra.43+0x68>)
 800025c:	4008      	ands	r0, r1
      reg^=USB_EPRX_DTOG1;
 800025e:	2180      	movs	r1, #128	; 0x80
 8000260:	0149      	lsls	r1, r1, #5
 8000262:	4041      	eors	r1, r0
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8000264:	430a      	orrs	r2, r1
 8000266:	b292      	uxth	r2, r2
 8000268:	801a      	strh	r2, [r3, #0]
      else
        setRxEndpointStatus(&USBR->EP0R+endpointIndex*2,USB_EP_RX_STALL);
    }
  }
 800026a:	4770      	bx	lr
 800026c:	ffff8080 	.word	0xffff8080
 8000270:	40005c00 	.word	0x40005c00
 8000274:	ffffbf8f 	.word	0xffffbf8f
 8000278:	ffff8fbf 	.word	0xffff8fbf
 800027c:	10001700 	.word	0x10001700

08000280 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEEC1Ev>:
  inline UsbKeyboard<TConfiguration,Features...>::UsbKeyboard() {
 8000280:	b5f0      	push	{r4, r5, r6, r7, lr}
  DelegateMemento() : m_pthis(0), m_pFunction(0), m_pStaticFunction(0) {};
  void clear() {
    m_pthis=0; m_pFunction=0; m_pStaticFunction=0;
  }
#else
  DelegateMemento() : m_pthis(0), m_pFunction(0) {};
 8000282:	2300      	movs	r3, #0
     * Zero out the contents on construction
     */

    UsbInEndpointData()
      : ptr(nullptr),
        remaining(0) {
 8000284:	2240      	movs	r2, #64	; 0x40
 8000286:	46c6      	mov	lr, r8
 8000288:	b500      	push	{lr}
 800028a:	6043      	str	r3, [r0, #4]
 800028c:	6083      	str	r3, [r0, #8]
 800028e:	6003      	str	r3, [r0, #0]
                            _Alloc_traits<_Tp, _Alloc>::_S_instanceless>
          _Base;
  typedef typename _Base::allocator_type allocator_type;

  _Slist_base(const allocator_type& __a)
    : _Base(__a) { this->_M_head._M_next = 0; }
 8000290:	60c3      	str	r3, [r0, #12]
 8000292:	6103      	str	r3, [r0, #16]
 8000294:	6143      	str	r3, [r0, #20]
 8000296:	6183      	str	r3, [r0, #24]
 8000298:	61c3      	str	r3, [r0, #28]
 800029a:	6203      	str	r3, [r0, #32]
 800029c:	6243      	str	r3, [r0, #36]	; 0x24
 800029e:	6283      	str	r3, [r0, #40]	; 0x28
 80002a0:	62c3      	str	r3, [r0, #44]	; 0x2c
 80002a2:	63c3      	str	r3, [r0, #60]	; 0x3c
 80002a4:	5283      	strh	r3, [r0, r2]
 80002a6:	0002      	movs	r2, r0
 80002a8:	3248      	adds	r2, #72	; 0x48
 80002aa:	b08a      	sub	sp, #40	; 0x28
 80002ac:	6483      	str	r3, [r0, #72]	; 0x48
 80002ae:	8093      	strh	r3, [r2, #4]
        bound_func = reinterpret_cast<GenericMemFuncType>(function_to_bind);
 80002b0:	4a25      	ldr	r2, [pc, #148]	; (8000348 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEEC1Ev+0xc8>)
 80002b2:	ad08      	add	r5, sp, #32
 80002b4:	9205      	str	r2, [sp, #20]
 80002b6:	002a      	movs	r2, r5
    _deviceState=DeviceStateType::NONE;
 80002b8:	6303      	str	r3, [r0, #48]	; 0x30
 80002ba:	9306      	str	r3, [sp, #24]
 80002bc:	ab05      	add	r3, sp, #20
  inline UsbKeyboard<TConfiguration,Features...>::UsbKeyboard() {
 80002be:	0004      	movs	r4, r0
 80002c0:	cb03      	ldmia	r3!, {r0, r1}
 80002c2:	c203      	stmia	r2!, {r0, r1}
  // obtain end().
  iterator before_begin() { return iterator((_Node*) &this->_M_head); }
  const_iterator before_begin() const
    { return const_iterator((_Node*) &this->_M_head); }

  size_type size() const { return __slist_size(this->_M_head._M_next); }
 80002c4:	4f21      	ldr	r7, [pc, #132]	; (800034c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEEC1Ev+0xcc>)
 80002c6:	68fb      	ldr	r3, [r7, #12]
  for ( ; __node != 0; __node = __node->_M_next)
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d006      	beq.n	80002da <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEEC1Ev+0x5a>
 80002cc:	2200      	movs	r2, #0
 80002ce:	681b      	ldr	r3, [r3, #0]
    ++__result;
 80002d0:	3201      	adds	r2, #1
  for ( ; __node != 0; __node = __node->_M_next)
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d1fb      	bne.n	80002ce <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEEC1Ev+0x4e>
      /// \param slot The slot you wish to connect
      /// \see bind To bind a slot to a function

      void insertSubscriber(const slot_type& slot) {

        if(_slots.size()==0)
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d104      	bne.n	80002e4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEEC1Ev+0x64>
    , m_pStaticFunction (right.m_pStaticFunction)
#endif
    {}
protected:
  void SetMementoFrom(const DelegateMemento &right)  {
    m_pFunction = right.m_pFunction;
 80002da:	002a      	movs	r2, r5
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	ca03      	ldmia	r2!, {r0, r1}
 80002e0:	c303      	stmia	r3!, {r0, r1}
    m_pthis = right.m_pthis;
 80002e2:	603c      	str	r4, [r7, #0]

public:

  static void* allocate(size_t __n)
  {
    void* __result = stm32_malloc(__n);
 80002e4:	2010      	movs	r0, #16
 80002e6:	f002 fa93 	bl	8002810 <malloc>
 80002ea:	1e06      	subs	r6, r0, #0
    if (0 == __result) __result = _S_oom_malloc(__n);
 80002ec:	d01d      	beq.n	800032a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEEC1Ev+0xaa>
      construct(&__node->_M_data, __x);
 80002ee:	1d31      	adds	r1, r6, #4

// Internal names

template <class _T1, class _T2>
inline void _Construct(_T1* __p, const _T2& __value) {
  new ((void*) __p) _T1(__value);
 80002f0:	200c      	movs	r0, #12
 80002f2:	f001 fe41 	bl	8001f78 <_ZnwjPv>
    m_pFunction = right.m_pFunction;
 80002f6:	1d03      	adds	r3, r0, #4
 80002f8:	cd06      	ldmia	r5!, {r1, r2}
 80002fa:	c306      	stmia	r3!, {r1, r2}
  __new_node->_M_next = __prev_node->_M_next;
 80002fc:	68fb      	ldr	r3, [r7, #12]
    m_pthis = right.m_pthis;
 80002fe:	6004      	str	r4, [r0, #0]
 8000300:	6033      	str	r3, [r6, #0]
    GpioPinInitialiser::initialise(GPIOA,
 8000302:	2302      	movs	r3, #2
  __prev_node->_M_next = __new_node;
 8000304:	60fe      	str	r6, [r7, #12]
 8000306:	9302      	str	r3, [sp, #8]
 8000308:	3b01      	subs	r3, #1
 800030a:	9301      	str	r3, [sp, #4]
 800030c:	21c0      	movs	r1, #192	; 0xc0
 800030e:	2300      	movs	r3, #0
 8000310:	2090      	movs	r0, #144	; 0x90
 8000312:	9300      	str	r3, [sp, #0]
 8000314:	2203      	movs	r2, #3
 8000316:	3303      	adds	r3, #3
 8000318:	0149      	lsls	r1, r1, #5
 800031a:	05c0      	lsls	r0, r0, #23
 800031c:	f001 ff9e 	bl	800225c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh>
  }
 8000320:	0020      	movs	r0, r4
 8000322:	b00a      	add	sp, #40	; 0x28
 8000324:	bc04      	pop	{r2}
 8000326:	4690      	mov	r8, r2
 8000328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800032a:	4b09      	ldr	r3, [pc, #36]	; (8000350 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEEC1Ev+0xd0>)
 800032c:	4698      	mov	r8, r3
 800032e:	e005      	b.n	800033c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEEC1Ev+0xbc>
    void* __result;

    for (;;) {
        __my_malloc_handler = __malloc_alloc_oom_handler;
        if (0 == __my_malloc_handler) { __THROW_BAD_ALLOC; }
        (*__my_malloc_handler)();
 8000330:	4798      	blx	r3
        __result = malloc(__n);
 8000332:	2010      	movs	r0, #16
 8000334:	f002 fa6c 	bl	8002810 <malloc>
 8000338:	1e06      	subs	r6, r0, #0
        if (__result) return(__result);
 800033a:	d1d8      	bne.n	80002ee <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEEC1Ev+0x6e>
        __my_malloc_handler = __malloc_alloc_oom_handler;
 800033c:	4643      	mov	r3, r8
 800033e:	681b      	ldr	r3, [r3, #0]
        if (0 == __my_malloc_handler) { __THROW_BAD_ALLOC; }
 8000340:	2b00      	cmp	r3, #0
 8000342:	d1f5      	bne.n	8000330 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEEC1Ev+0xb0>
 8000344:	e7fe      	b.n	8000344 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEEC1Ev+0xc4>
 8000346:	46c0      	nop			; (mov r8, r8)
 8000348:	08000f15 	.word	0x08000f15
 800034c:	20000884 	.word	0x20000884
 8000350:	20000868 	.word	0x20000868

08000354 <_ZN9OneButton3runEv>:
      _deviceConfigured=false;
 8000354:	2342      	movs	r3, #66	; 0x42
    void run() {
 8000356:	b5f0      	push	{r4, r5, r6, r7, lr}
      _deviceConfigured=false;
 8000358:	2400      	movs	r4, #0
    void run() {
 800035a:	46de      	mov	lr, fp
 800035c:	4657      	mov	r7, sl
 800035e:	464e      	mov	r6, r9
 8000360:	4645      	mov	r5, r8
      _receivedReportTime=UINT32_MAX-1000;
 8000362:	4ae6      	ldr	r2, [pc, #920]	; (80006fc <_ZN9OneButton3runEv+0x3a8>)
      _deviceConfigured=false;
 8000364:	33ff      	adds	r3, #255	; 0xff
    void run() {
 8000366:	b5e0      	push	{r5, r6, r7, lr}
      _deviceConfigured=false;
 8000368:	54c4      	strb	r4, [r0, r3]
      _receivedReportTime=UINT32_MAX-1000;
 800036a:	3303      	adds	r3, #3
 800036c:	50c2      	str	r2, [r0, r3]
      _lastTransmitTime=0;
 800036e:	3304      	adds	r3, #4
 8000370:	50c4      	str	r4, [r0, r3]

  template<>
  struct ClockControl<PERIPHERAL_SPI1> {

    static void On() {
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1,ENABLE);
 8000372:	2380      	movs	r3, #128	; 0x80
 8000374:	015b      	lsls	r3, r3, #5
    void run() {
 8000376:	b0ed      	sub	sp, #436	; 0x1b4
 8000378:	2101      	movs	r1, #1
 800037a:	4680      	mov	r8, r0
 800037c:	0018      	movs	r0, r3
 800037e:	469a      	mov	sl, r3
 8000380:	f002 f99e 	bl	80026c0 <RCC_APB2PeriphClockCmd>
   */

  template<class TPinPackage,PeripheralName TPeripheralName>
  inline void SpiPinInitialiser<TPinPackage,TPeripheralName>::initialise(uint16_t mode,uint16_t direction) {

    GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_SCK,
 8000384:	2302      	movs	r3, #2
 8000386:	2690      	movs	r6, #144	; 0x90
 8000388:	2701      	movs	r7, #1
 800038a:	4699      	mov	r9, r3
 800038c:	05f6      	lsls	r6, r6, #23
 800038e:	9402      	str	r4, [sp, #8]
 8000390:	9701      	str	r7, [sp, #4]
 8000392:	9300      	str	r3, [sp, #0]
 8000394:	2203      	movs	r2, #3
 8000396:	3301      	adds	r3, #1
 8000398:	2120      	movs	r1, #32
 800039a:	0030      	movs	r0, r6
 800039c:	f001 ff5e 	bl	800225c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh>
                                   GpioAlternateFunctionMapper<TPeripheralName,TPinPackage::Port_SCK,TPinPackage::Pin_SCK>::GPIO_AF);

    // in uni-directional mode slave MOSI is free

    if(mode==SPI_Mode_Master || direction==SPI_Direction_2Lines_FullDuplex)
      GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_MOSI,
 80003a0:	464b      	mov	r3, r9
 80003a2:	9402      	str	r4, [sp, #8]
 80003a4:	9701      	str	r7, [sp, #4]
 80003a6:	9300      	str	r3, [sp, #0]
 80003a8:	2203      	movs	r2, #3
 80003aa:	3301      	adds	r3, #1
 80003ac:	2180      	movs	r1, #128	; 0x80
 80003ae:	0030      	movs	r0, r6
 80003b0:	f001 ff54 	bl	800225c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh>
                                     GpioAlternateFunctionMapper<TPeripheralName,TPinPackage::Port_MOSI,TPinPackage::Pin_MOSI>::GPIO_AF);

    // in uni-directional mode master MISO is free

    if(mode==SPI_Mode_Slave || direction==SPI_Direction_2Lines_FullDuplex)
      GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_MISO,
 80003b4:	464b      	mov	r3, r9
 80003b6:	9402      	str	r4, [sp, #8]
 80003b8:	9701      	str	r7, [sp, #4]
 80003ba:	9300      	str	r3, [sp, #0]
 80003bc:	2203      	movs	r2, #3
 80003be:	3301      	adds	r3, #1
 80003c0:	2140      	movs	r1, #64	; 0x40
 80003c2:	0030      	movs	r0, r6
 80003c4:	f001 ff4a 	bl	800225c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh>

    if(mode==SPI_Mode_Master) {

      // in master mode NSS is an output

      GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_NSS,
 80003c8:	9400      	str	r4, [sp, #0]
 80003ca:	2303      	movs	r3, #3
 80003cc:	2200      	movs	r2, #0
 80003ce:	2110      	movs	r1, #16
 80003d0:	9701      	str	r7, [sp, #4]
 80003d2:	0030      	movs	r0, r6
 80003d4:	f001 feda 	bl	800218c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE>

    SpiPinInitialiser<TPinPackage,TPeripheralName>::initialise(params.spi_mode,params.spi_direction);

    // initialise the peripheral

    SPI_StructInit(&init);
 80003d8:	a854      	add	r0, sp, #336	; 0x150
 80003da:	f002 f989 	bl	80026f0 <SPI_StructInit>

    init.SPI_Direction=params.spi_direction;
 80003de:	22a4      	movs	r2, #164	; 0xa4
 80003e0:	ab02      	add	r3, sp, #8
 80003e2:	0052      	lsls	r2, r2, #1
 80003e4:	189b      	adds	r3, r3, r2
    init.SPI_Mode=params.spi_mode;
 80003e6:	21a5      	movs	r1, #165	; 0xa5
    init.SPI_Direction=params.spi_direction;
 80003e8:	801c      	strh	r4, [r3, #0]
    init.SPI_Mode=params.spi_mode;
 80003ea:	2382      	movs	r3, #130	; 0x82
 80003ec:	0049      	lsls	r1, r1, #1
 80003ee:	aa02      	add	r2, sp, #8
 80003f0:	1852      	adds	r2, r2, r1
 80003f2:	005b      	lsls	r3, r3, #1
 80003f4:	8013      	strh	r3, [r2, #0]
    init.SPI_DataSize=params.spi_dataSize;
 80003f6:	23e0      	movs	r3, #224	; 0xe0
 80003f8:	3102      	adds	r1, #2
 80003fa:	aa02      	add	r2, sp, #8
 80003fc:	1852      	adds	r2, r2, r1
 80003fe:	00db      	lsls	r3, r3, #3
 8000400:	8013      	strh	r3, [r2, #0]
    init.SPI_CPOL=params.spi_cpol;
 8000402:	22a7      	movs	r2, #167	; 0xa7
 8000404:	ab02      	add	r3, sp, #8
 8000406:	0052      	lsls	r2, r2, #1
 8000408:	189b      	adds	r3, r3, r2
 800040a:	464a      	mov	r2, r9
 800040c:	801a      	strh	r2, [r3, #0]
    init.SPI_CPHA=params.spi_cpha;
 800040e:	22a8      	movs	r2, #168	; 0xa8
 8000410:	ab02      	add	r3, sp, #8
 8000412:	0052      	lsls	r2, r2, #1
 8000414:	189b      	adds	r3, r3, r2
 8000416:	801f      	strh	r7, [r3, #0]
    init.SPI_NSS=SPI_NSS_Soft;
 8000418:	2780      	movs	r7, #128	; 0x80
 800041a:	3202      	adds	r2, #2
 800041c:	ab02      	add	r3, sp, #8
 800041e:	00bf      	lsls	r7, r7, #2
 8000420:	189b      	adds	r3, r3, r2
 8000422:	801f      	strh	r7, [r3, #0]
    init.SPI_BaudRatePrescaler=params.spi_baudRatePrescaler;
 8000424:	2308      	movs	r3, #8
 8000426:	3108      	adds	r1, #8
 8000428:	aa02      	add	r2, sp, #8
 800042a:	1852      	adds	r2, r2, r1
 800042c:	8013      	strh	r3, [r2, #0]
    init.SPI_FirstBit=params.spi_firstBit;
 800042e:	22ab      	movs	r2, #171	; 0xab
 8000430:	ab02      	add	r3, sp, #8
 8000432:	0052      	lsls	r2, r2, #1
 8000434:	189b      	adds	r3, r3, r2
 8000436:	801c      	strh	r4, [r3, #0]
    init.SPI_CRCPolynomial=params.spi_polynomial;
 8000438:	2307      	movs	r3, #7
 800043a:	3104      	adds	r1, #4
 800043c:	aa02      	add	r2, sp, #8
 800043e:	1852      	adds	r2, r2, r1

    SPI_Init(_peripheralAddress,&init);
 8000440:	48af      	ldr	r0, [pc, #700]	; (8000700 <_ZN9OneButton3runEv+0x3ac>)
 8000442:	a954      	add	r1, sp, #336	; 0x150
    init.SPI_CRCPolynomial=params.spi_polynomial;
 8000444:	8013      	strh	r3, [r2, #0]
    SPI_Init(_peripheralAddress,&init);
 8000446:	f002 f961 	bl	800270c <SPI_Init>
   * @param value true = high, false = low
   */

  inline void Spi::setNss(bool value) const {
    if(value)
      GPIO_SetBits(_nssPort,_nssPin);
 800044a:	2110      	movs	r1, #16
 800044c:	0030      	movs	r0, r6
 800044e:	f002 f8e3 	bl	8002618 <GPIO_SetBits>
    setNss(true);

    // set a default quarter-full threshold for the FIFO to be compatible with the
    // other families - override with the SpiFifoNotifyFeature.

    SPI_RxFIFOThresholdConfig(_peripheralAddress,SPI_RxFIFOThreshold_QF);
 8000452:	4651      	mov	r1, sl
 8000454:	48aa      	ldr	r0, [pc, #680]	; (8000700 <_ZN9OneButton3runEv+0x3ac>)
 8000456:	f002 f98d 	bl	8002774 <SPI_RxFIFOThresholdConfig>
    SPI_Cmd(_peripheralAddress,ENABLE);
 800045a:	2101      	movs	r1, #1
 800045c:	48a8      	ldr	r0, [pc, #672]	; (8000700 <_ZN9OneButton3runEv+0x3ac>)
 800045e:	f002 f97f 	bl	8002760 <SPI_Cmd>

  inline Dma::Dma(DMA_PeripheralType *peripheralAddress,uint32_t completeFlag,uint32_t halfCompleteFlag,uint32_t errorFlag) {

    // save channel and get peripheral index

    _peripheralAddress=peripheralAddress;
 8000462:	ab1a      	add	r3, sp, #104	; 0x68
 8000464:	4699      	mov	r9, r3
 8000466:	4ba7      	ldr	r3, [pc, #668]	; (8000704 <_ZN9OneButton3runEv+0x3b0>)
    _completeFlag=completeFlag;
    _halfCompleteFlag=halfCompleteFlag;
 8000468:	464a      	mov	r2, r9
    _peripheralAddress=peripheralAddress;
 800046a:	931a      	str	r3, [sp, #104]	; 0x68
    _completeFlag=completeFlag;
 800046c:	464b      	mov	r3, r9
 800046e:	605f      	str	r7, [r3, #4]
    _halfCompleteFlag=halfCompleteFlag;
 8000470:	2380      	movs	r3, #128	; 0x80
 8000472:	00db      	lsls	r3, r3, #3
 8000474:	6093      	str	r3, [r2, #8]
    _errorFlag=errorFlag;
 8000476:	2380      	movs	r3, #128	; 0x80
 8000478:	011b      	lsls	r3, r3, #4
 800047a:	60d3      	str	r3, [r2, #12]
   * Constructor
   * @param dma
   */

  inline DmaFeatureBase::DmaFeatureBase(Dma& dma)
    : _dma(dma) {
 800047c:	464b      	mov	r3, r9
 800047e:	611a      	str	r2, [r3, #16]
    else {
      _init.DMA_PeripheralDataSize=DMA_PeripheralDataSize_HalfWord; // transferring half words
      _init.DMA_MemoryDataSize=DMA_MemoryDataSize_HalfWord;         // transferring half words
    }

    _init.DMA_PeripheralBaseAddr=reinterpret_cast<uint32_t>(&(spi->DR));
 8000480:	4ba1      	ldr	r3, [pc, #644]	; (8000708 <_ZN9OneButton3runEv+0x3b4>)
      _init.DMA_PeripheralDataSize=DMA_PeripheralDataSize_Byte; // transferring bytes
 8000482:	62d4      	str	r4, [r2, #44]	; 0x2c
    _init.DMA_PeripheralBaseAddr=reinterpret_cast<uint32_t>(&(spi->DR));
 8000484:	6153      	str	r3, [r2, #20]
    _init.DMA_DIR=DMA_DIR_PeripheralDST;                      // 'peripheral' is destination
 8000486:	2310      	movs	r3, #16
 8000488:	61d3      	str	r3, [r2, #28]
    _init.DMA_PeripheralInc=DMA_PeripheralInc_Disable;        // 'peripheral' does not increment
    _init.DMA_MemoryInc=DMA_MemoryInc_Enable;                 // memory is incremented
 800048a:	2380      	movs	r3, #128	; 0x80
      _init.DMA_MemoryDataSize=DMA_MemoryDataSize_Byte;         // transferring bytes
 800048c:	6314      	str	r4, [r2, #48]	; 0x30
    _init.DMA_PeripheralInc=DMA_PeripheralInc_Disable;        // 'peripheral' does not increment
 800048e:	6254      	str	r4, [r2, #36]	; 0x24
    _init.DMA_Mode=DMA_Mode_Normal;                           // not a circular buffer
 8000490:	6354      	str	r4, [r2, #52]	; 0x34
    _init.DMA_MemoryInc=DMA_MemoryInc_Enable;                 // memory is incremented
 8000492:	6293      	str	r3, [r2, #40]	; 0x28
    _init.DMA_Mode=DMA_Mode_Normal;                           // not a circular buffer
 8000494:	464b      	mov	r3, r9
    _init.DMA_Priority=TPriority;                             // user-configurable priority
 8000496:	4652      	mov	r2, sl
    _init.DMA_M2M=DMA_M2M_Disable;                            // memory->peripheral configuration
 8000498:	63dc      	str	r4, [r3, #60]	; 0x3c
    _init.DMA_Priority=TPriority;                             // user-configurable priority
 800049a:	639a      	str	r2, [r3, #56]	; 0x38

    SPI_I2S_DMACmd(spi,SPI_I2S_DMAReq_Tx,ENABLE);
 800049c:	2102      	movs	r1, #2
 800049e:	2201      	movs	r2, #1
 80004a0:	4897      	ldr	r0, [pc, #604]	; (8000700 <_ZN9OneButton3runEv+0x3ac>)
 80004a2:	f002 f971 	bl	8002788 <SPI_I2S_DMACmd>
      RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1,ENABLE);
 80004a6:	2101      	movs	r1, #1
 80004a8:	2001      	movs	r0, #1
 80004aa:	f002 f8fd 	bl	80026a8 <RCC_AHBPeriphClockCmd>
       * Init clock and return port address
       * @return the peripheral port address
       */

      GPIO_TypeDef *initClock() {
        RCC_AHBPeriphClockCmd(gpioHelper::getPeripheral<TPortAddress>(),ENABLE);
 80004ae:	2080      	movs	r0, #128	; 0x80
   * Constructor
   * @param peripheralAddress
   */

  inline GpioPortBase::GpioPortBase(GPIO_TypeDef *peripheralAddress)
    : _peripheralAddress(peripheralAddress) {
 80004b0:	ac2a      	add	r4, sp, #168	; 0xa8
 80004b2:	2101      	movs	r1, #1
 80004b4:	0280      	lsls	r0, r0, #10
 80004b6:	f002 f8f7 	bl	80026a8 <RCC_AHBPeriphClockCmd>
    memset(_pinHandlers,'\0',sizeof(_pinHandlers));
 80004ba:	2240      	movs	r2, #64	; 0x40
 80004bc:	2100      	movs	r1, #0
    : _peripheralAddress(peripheralAddress) {
 80004be:	6426      	str	r6, [r4, #64]	; 0x40
    memset(_pinHandlers,'\0',sizeof(_pinHandlers));
 80004c0:	0020      	movs	r0, r4
 80004c2:	f002 fc93 	bl	8002dec <memset>
    _low=15;
 80004c6:	230f      	movs	r3, #15
        uint8_t i;
        GPIO_InitTypeDef init;

        (void)pullUpDownType;

        this->_pinIds=pinIds;
 80004c8:	2250      	movs	r2, #80	; 0x50
 80004ca:	3fbd      	subs	r7, #189	; 0xbd
 80004cc:	3fff      	subs	r7, #255	; 0xff
 80004ce:	55e3      	strb	r3, [r4, r7]
 80004d0:	3311      	adds	r3, #17
 80004d2:	52a3      	strh	r3, [r4, r2]

        init.GPIO_Speed=speed;
        init.GPIO_Mode=GPIO_Mode_OUT;
 80004d4:	4a8d      	ldr	r2, [pc, #564]	; (800070c <_ZN9OneButton3runEv+0x3b8>)
   * @param port
   */

  inline Gpio::Gpio(GpioPortBase& portBase)
    : _portBase(portBase),
      _peripheralAddress(portBase.getPeripheralAddress()) {
 80004d6:	64a4      	str	r4, [r4, #72]	; 0x48
 80004d8:	64e6      	str	r6, [r4, #76]	; 0x4c
        init.GPIO_OType=outputType==Gpio::PUSH_PULL ? GPIO_OType_PP : GPIO_OType_OD;
        init.GPIO_PuPd=pullUpDownType==PUPD_NONE ? GPIO_PuPd_NOPULL : (pullUpDownType==PUPD_UP ? GPIO_PuPd_UP : GPIO_PuPd_DOWN);
        init.GPIO_Pin=pinIds;

        GPIO_Init(_peripheralAddress,&init);
 80004da:	a954      	add	r1, sp, #336	; 0x150
 80004dc:	0030      	movs	r0, r6
        init.GPIO_Mode=GPIO_Mode_OUT;
 80004de:	9255      	str	r2, [sp, #340]	; 0x154
        init.GPIO_Pin=pinIds;
 80004e0:	9354      	str	r3, [sp, #336]	; 0x150
        GPIO_Init(_peripheralAddress,&init);
 80004e2:	f002 f833 	bl	800254c <GPIO_Init>

        // set ourselves as the pin handler in the port base

        for(i=0;i<16;i++)
          if((pinIds & (1<<i))!=0)
            _portBase.setPinHandler(i,this);
 80004e6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   * @param pinHandler The handler for that position
   */

  inline void GpioPortBase::setPinHandler(uint8_t index,Gpio *pinHandler) {

    _pinHandlers[index]=pinHandler;
 80004e8:	aa3c      	add	r2, sp, #240	; 0xf0
 80004ea:	615a      	str	r2, [r3, #20]

    if(index<_low)
 80004ec:	5dda      	ldrb	r2, [r3, r7]
 80004ee:	2a05      	cmp	r2, #5
 80004f0:	dd01      	ble.n	80004f6 <_ZN9OneButton3runEv+0x1a2>
      _low=index;
 80004f2:	2205      	movs	r2, #5
 80004f4:	55da      	strb	r2, [r3, r7]
   * Set the selected pin number to one of those that you initialised this class with
   * @param pinNumber The pin number (0..15)
   */

  inline void Gpio::setSelectedPin(uint8_t pinNumber) {
    _selectedPin=1 << pinNumber;
 80004f6:	2220      	movs	r2, #32
       * @param selectedPin The pin to select
       * @return A reference to the pin that you can call operations such as set(), reset() on.
       */

      Gpio& operator[](uint8_t selectedPin) {
        _pinHandlers[selectedPin]->setSelectedPin(selectedPin);
 80004f8:	6963      	ldr	r3, [r4, #20]
  /**
   * Set the selected pin to LOW.
   */

  inline void Gpio::reset() const {
    GPIO_WriteBit(_peripheralAddress,_selectedPin,Bit_RESET);
 80004fa:	2120      	movs	r1, #32
    _selectedPin=1 << pinNumber;
 80004fc:	815a      	strh	r2, [r3, #10]
    GPIO_WriteBit(_peripheralAddress,_selectedPin,Bit_RESET);
 80004fe:	6858      	ldr	r0, [r3, #4]
 8000500:	2200      	movs	r2, #0
 8000502:	f002 f88d 	bl	8002620 <GPIO_WriteBit>
   * Allow setting/resetting of the selected pin from a variable.
   * @param[in] state The new state of the pin.
   */

  inline void Gpio::setState(bool state) const {
    GPIO_WriteBit(_peripheralAddress,_selectedPin,state ? Bit_SET : Bit_RESET);
 8000506:	2352      	movs	r3, #82	; 0x52
 8000508:	2200      	movs	r2, #0
 800050a:	5ae1      	ldrh	r1, [r4, r3]
 800050c:	983d      	ldr	r0, [sp, #244]	; 0xf4
 800050e:	f002 f887 	bl	8002620 <GPIO_WriteBit>
        RCC_AHBPeriphClockCmd(gpioHelper::getPeripheral<TPortAddress>(),ENABLE);
 8000512:	2080      	movs	r0, #128	; 0x80
    : _peripheralAddress(peripheralAddress) {
 8000514:	2690      	movs	r6, #144	; 0x90
 8000516:	2101      	movs	r1, #1
 8000518:	0280      	lsls	r0, r0, #10
 800051a:	f002 f8c5 	bl	80026a8 <RCC_AHBPeriphClockCmd>
 800051e:	05f6      	lsls	r6, r6, #23
    memset(_pinHandlers,'\0',sizeof(_pinHandlers));
 8000520:	2240      	movs	r2, #64	; 0x40
 8000522:	2100      	movs	r1, #0
 8000524:	a83f      	add	r0, sp, #252	; 0xfc
    : _peripheralAddress(peripheralAddress) {
 8000526:	964f      	str	r6, [sp, #316]	; 0x13c
    memset(_pinHandlers,'\0',sizeof(_pinHandlers));
 8000528:	f002 fc60 	bl	8002dec <memset>
    _low=15;
 800052c:	21f4      	movs	r1, #244	; 0xf4
 800052e:	2444      	movs	r4, #68	; 0x44
 8000530:	230f      	movs	r3, #15
 8000532:	aa02      	add	r2, sp, #8
 8000534:	1852      	adds	r2, r2, r1
 8000536:	5513      	strb	r3, [r2, r4]
      _peripheralAddress(portBase.getPeripheralAddress()) {
 8000538:	ab3f      	add	r3, sp, #252	; 0xfc
                      GPIOSpeed_TypeDef speed=GPIO_Speed_Level_3,
                      Gpio::GpioPullUpDownType pullUpDownType=Gpio::PUPD_NONE) {
        uint8_t i;
        GPIO_InitTypeDef init;

        this->_pinIds=pinIds;
 800053a:	aa02      	add	r2, sp, #8
 800053c:	1852      	adds	r2, r2, r1
    memset(_pinHandlers,'\0',sizeof(_pinHandlers));
 800053e:	2740      	movs	r7, #64	; 0x40
 8000540:	9351      	str	r3, [sp, #324]	; 0x144

        init.GPIO_Speed=speed;
 8000542:	214e      	movs	r1, #78	; 0x4e
        this->_pinIds=pinIds;
 8000544:	2350      	movs	r3, #80	; 0x50
        init.GPIO_Speed=speed;
 8000546:	31ff      	adds	r1, #255	; 0xff
        this->_pinIds=pinIds;
 8000548:	52d7      	strh	r7, [r2, r3]
        init.GPIO_Speed=speed;
 800054a:	aa02      	add	r2, sp, #8
 800054c:	1852      	adds	r2, r2, r1
 800054e:	3b4d      	subs	r3, #77	; 0x4d
 8000550:	7013      	strb	r3, [r2, #0]
        init.GPIO_Mode=GPIO_Mode_IN;
 8000552:	3901      	subs	r1, #1
 8000554:	aa02      	add	r2, sp, #8
 8000556:	2300      	movs	r3, #0
 8000558:	1852      	adds	r2, r2, r1
        init.GPIO_PuPd=pullUpDownType==PUPD_NONE ? GPIO_PuPd_NOPULL : (pullUpDownType==PUPD_UP ? GPIO_PuPd_UP : GPIO_PuPd_DOWN);
 800055a:	2150      	movs	r1, #80	; 0x50
        init.GPIO_Mode=GPIO_Mode_IN;
 800055c:	7013      	strb	r3, [r2, #0]
        init.GPIO_PuPd=pullUpDownType==PUPD_NONE ? GPIO_PuPd_NOPULL : (pullUpDownType==PUPD_UP ? GPIO_PuPd_UP : GPIO_PuPd_DOWN);
 800055e:	31ff      	adds	r1, #255	; 0xff
 8000560:	aa02      	add	r2, sp, #8
 8000562:	1852      	adds	r2, r2, r1
        init.GPIO_Pin=pinIds;

        GPIO_Init(_peripheralAddress,&init);
 8000564:	0030      	movs	r0, r6
 8000566:	a954      	add	r1, sp, #336	; 0x150
        init.GPIO_PuPd=pullUpDownType==PUPD_NONE ? GPIO_PuPd_NOPULL : (pullUpDownType==PUPD_UP ? GPIO_PuPd_UP : GPIO_PuPd_DOWN);
 8000568:	7013      	strb	r3, [r2, #0]
 800056a:	9652      	str	r6, [sp, #328]	; 0x148
        init.GPIO_Pin=pinIds;
 800056c:	9754      	str	r7, [sp, #336]	; 0x150
        GPIO_Init(_peripheralAddress,&init);
 800056e:	f001 ffed 	bl	800254c <GPIO_Init>

        // set ourselves as the pin handler in the port base

        for(i=0;i<16;i++)
          if((pinIds & (1<<i))!=0)
            _portBase.setPinHandler(i,this);
 8000572:	9b51      	ldr	r3, [sp, #324]	; 0x144
    _pinHandlers[index]=pinHandler;
 8000574:	aa51      	add	r2, sp, #324	; 0x144
 8000576:	619a      	str	r2, [r3, #24]
    if(index<_low)
 8000578:	5d1a      	ldrb	r2, [r3, r4]
 800057a:	2a06      	cmp	r2, #6
 800057c:	dd01      	ble.n	8000582 <_ZN9OneButton3runEv+0x22e>
      _low=index;
 800057e:	2206      	movs	r2, #6
 8000580:	551a      	strb	r2, [r3, r4]
    _selectedPin=1 << pinNumber;
 8000582:	2240      	movs	r2, #64	; 0x40
        _pinHandlers[selectedPin]->setSelectedPin(selectedPin);
 8000584:	9b45      	ldr	r3, [sp, #276]	; 0x114
    GPIO_WriteBit(_peripheralAddress,_selectedPin,Bit_RESET);
 8000586:	2140      	movs	r1, #64	; 0x40
    _selectedPin=1 << pinNumber;
 8000588:	815a      	strh	r2, [r3, #10]
    GPIO_WriteBit(_peripheralAddress,_selectedPin,Bit_RESET);
 800058a:	6858      	ldr	r0, [r3, #4]
 800058c:	2200      	movs	r2, #0
 800058e:	f002 f847 	bl	8002620 <GPIO_WriteBit>
      UsbKeyboard<UsbHidKeyboard> usb;
 8000592:	a854      	add	r0, sp, #336	; 0x150
 8000594:	f7ff fe74 	bl	8000280 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEEC1Ev>
        bound_func = reinterpret_cast<GenericMemFuncType>(function_to_bind);
 8000598:	4b5d      	ldr	r3, [pc, #372]	; (8000710 <_ZN9OneButton3runEv+0x3bc>)
 800059a:	ae18      	add	r6, sp, #96	; 0x60
 800059c:	930f      	str	r3, [sp, #60]	; 0x3c
 800059e:	2300      	movs	r3, #0
 80005a0:	0032      	movs	r2, r6
 80005a2:	9310      	str	r3, [sp, #64]	; 0x40
 80005a4:	ab0f      	add	r3, sp, #60	; 0x3c
 80005a6:	cb03      	ldmia	r3!, {r0, r1}
 80005a8:	c203      	stmia	r2!, {r0, r1}
  size_type size() const { return __slist_size(this->_M_head._M_next); }
 80005aa:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
  for ( ; __node != 0; __node = __node->_M_next)
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d006      	beq.n	80005be <_ZN9OneButton3runEv+0x26a>
 80005b0:	2200      	movs	r2, #0
 80005b2:	681b      	ldr	r3, [r3, #0]
    ++__result;
 80005b4:	3201      	adds	r2, #1
  for ( ; __node != 0; __node = __node->_M_next)
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d1fb      	bne.n	80005b2 <_ZN9OneButton3runEv+0x25e>
 80005ba:	2a00      	cmp	r2, #0
 80005bc:	d105      	bne.n	80005ca <_ZN9OneButton3runEv+0x276>
    m_pFunction = right.m_pFunction;
 80005be:	0032      	movs	r2, r6
 80005c0:	ab59      	add	r3, sp, #356	; 0x164
 80005c2:	ca03      	ldmia	r2!, {r0, r1}
 80005c4:	c303      	stmia	r3!, {r0, r1}
    m_pthis = right.m_pthis;
 80005c6:	4643      	mov	r3, r8
 80005c8:	9358      	str	r3, [sp, #352]	; 0x160
    void* __result = stm32_malloc(__n);
 80005ca:	2010      	movs	r0, #16
 80005cc:	f002 f920 	bl	8002810 <malloc>
 80005d0:	4b50      	ldr	r3, [pc, #320]	; (8000714 <_ZN9OneButton3runEv+0x3c0>)
 80005d2:	1e04      	subs	r4, r0, #0
 80005d4:	469a      	mov	sl, r3
    if (0 == __result) __result = _S_oom_malloc(__n);
 80005d6:	d076      	beq.n	80006c6 <_ZN9OneButton3runEv+0x372>
      construct(&__node->_M_data, __x);
 80005d8:	1d21      	adds	r1, r4, #4
 80005da:	200c      	movs	r0, #12
 80005dc:	f001 fccc 	bl	8001f78 <_ZnwjPv>
    m_pFunction = right.m_pFunction;
 80005e0:	1d03      	adds	r3, r0, #4
 80005e2:	ce06      	ldmia	r6!, {r1, r2}
 80005e4:	c306      	stmia	r3!, {r1, r2}
    m_pthis = right.m_pthis;
 80005e6:	4643      	mov	r3, r8
 80005e8:	6003      	str	r3, [r0, #0]
  __new_node->_M_next = __prev_node->_M_next;
 80005ea:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
        bound_func = reinterpret_cast<GenericMemFuncType>(function_to_bind);
 80005ec:	ae18      	add	r6, sp, #96	; 0x60
 80005ee:	9305      	str	r3, [sp, #20]
 80005f0:	6023      	str	r3, [r4, #0]
 80005f2:	4b49      	ldr	r3, [pc, #292]	; (8000718 <_ZN9OneButton3runEv+0x3c4>)
 80005f4:	0032      	movs	r2, r6
 80005f6:	930d      	str	r3, [sp, #52]	; 0x34
 80005f8:	2300      	movs	r3, #0
  __prev_node->_M_next = __new_node;
 80005fa:	945b      	str	r4, [sp, #364]	; 0x16c
 80005fc:	930e      	str	r3, [sp, #56]	; 0x38
 80005fe:	ab0d      	add	r3, sp, #52	; 0x34
 8000600:	cb03      	ldmia	r3!, {r0, r1}
 8000602:	c203      	stmia	r2!, {r0, r1}
  size_type size() const { return __slist_size(this->_M_head._M_next); }
 8000604:	9b57      	ldr	r3, [sp, #348]	; 0x15c
  for ( ; __node != 0; __node = __node->_M_next)
 8000606:	2b00      	cmp	r3, #0
 8000608:	d006      	beq.n	8000618 <_ZN9OneButton3runEv+0x2c4>
 800060a:	2200      	movs	r2, #0
 800060c:	681b      	ldr	r3, [r3, #0]
    ++__result;
 800060e:	3201      	adds	r2, #1
  for ( ; __node != 0; __node = __node->_M_next)
 8000610:	2b00      	cmp	r3, #0
 8000612:	d1fb      	bne.n	800060c <_ZN9OneButton3runEv+0x2b8>
 8000614:	2a00      	cmp	r2, #0
 8000616:	d105      	bne.n	8000624 <_ZN9OneButton3runEv+0x2d0>
    m_pFunction = right.m_pFunction;
 8000618:	0032      	movs	r2, r6
 800061a:	ab55      	add	r3, sp, #340	; 0x154
 800061c:	ca03      	ldmia	r2!, {r0, r1}
 800061e:	c303      	stmia	r3!, {r0, r1}
    m_pthis = right.m_pthis;
 8000620:	4643      	mov	r3, r8
 8000622:	9354      	str	r3, [sp, #336]	; 0x150
    void* __result = stm32_malloc(__n);
 8000624:	2010      	movs	r0, #16
 8000626:	f002 f8f3 	bl	8002810 <malloc>
 800062a:	1e04      	subs	r4, r0, #0
    if (0 == __result) __result = _S_oom_malloc(__n);
 800062c:	d059      	beq.n	80006e2 <_ZN9OneButton3runEv+0x38e>
      construct(&__node->_M_data, __x);
 800062e:	1d21      	adds	r1, r4, #4
 8000630:	200c      	movs	r0, #12
 8000632:	f001 fca1 	bl	8001f78 <_ZnwjPv>
    m_pFunction = right.m_pFunction;
 8000636:	1d03      	adds	r3, r0, #4
 8000638:	ce06      	ldmia	r6!, {r1, r2}
 800063a:	c306      	stmia	r3!, {r1, r2}
    m_pthis = right.m_pthis;
 800063c:	4643      	mov	r3, r8
 800063e:	6003      	str	r3, [r0, #0]
  __new_node->_M_next = __prev_node->_M_next;
 8000640:	9b57      	ldr	r3, [sp, #348]	; 0x15c
        bound_func = reinterpret_cast<GenericMemFuncType>(function_to_bind);
 8000642:	ae18      	add	r6, sp, #96	; 0x60
 8000644:	9305      	str	r3, [sp, #20]
 8000646:	6023      	str	r3, [r4, #0]
 8000648:	4b34      	ldr	r3, [pc, #208]	; (800071c <_ZN9OneButton3runEv+0x3c8>)
  __prev_node->_M_next = __new_node;
 800064a:	9457      	str	r4, [sp, #348]	; 0x15c
 800064c:	930b      	str	r3, [sp, #44]	; 0x2c
 800064e:	2300      	movs	r3, #0
 8000650:	930c      	str	r3, [sp, #48]	; 0x30
 8000652:	0033      	movs	r3, r6
 8000654:	aa0b      	add	r2, sp, #44	; 0x2c
 8000656:	ca03      	ldmia	r2!, {r0, r1}
 8000658:	c303      	stmia	r3!, {r0, r1}
  size_type size() const { return __slist_size(this->_M_head._M_next); }
 800065a:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
  for ( ; __node != 0; __node = __node->_M_next)
 800065c:	2b00      	cmp	r3, #0
 800065e:	d007      	beq.n	8000670 <_ZN9OneButton3runEv+0x31c>
 8000660:	2200      	movs	r2, #0
 8000662:	681b      	ldr	r3, [r3, #0]
    ++__result;
 8000664:	3201      	adds	r2, #1
  for ( ; __node != 0; __node = __node->_M_next)
 8000666:	2b00      	cmp	r3, #0
 8000668:	d1fb      	bne.n	8000662 <_ZN9OneButton3runEv+0x30e>
 800066a:	ac5d      	add	r4, sp, #372	; 0x174
 800066c:	2a00      	cmp	r2, #0
 800066e:	d106      	bne.n	800067e <_ZN9OneButton3runEv+0x32a>
    m_pFunction = right.m_pFunction;
 8000670:	ac5d      	add	r4, sp, #372	; 0x174
 8000672:	0023      	movs	r3, r4
 8000674:	0032      	movs	r2, r6
 8000676:	ca03      	ldmia	r2!, {r0, r1}
 8000678:	c303      	stmia	r3!, {r0, r1}
    m_pthis = right.m_pthis;
 800067a:	4643      	mov	r3, r8
 800067c:	935c      	str	r3, [sp, #368]	; 0x170
    void* __result = stm32_malloc(__n);
 800067e:	2010      	movs	r0, #16
 8000680:	f002 f8c6 	bl	8002810 <malloc>
 8000684:	1e07      	subs	r7, r0, #0
    if (0 == __result) __result = _S_oom_malloc(__n);
 8000686:	d100      	bne.n	800068a <_ZN9OneButton3runEv+0x336>
 8000688:	e0f0      	b.n	800086c <_ZN9OneButton3runEv+0x518>
      construct(&__node->_M_data, __x);
 800068a:	1d39      	adds	r1, r7, #4
 800068c:	200c      	movs	r0, #12
 800068e:	f001 fc73 	bl	8001f78 <_ZnwjPv>
    m_pFunction = right.m_pFunction;
 8000692:	1d03      	adds	r3, r0, #4
 8000694:	ce06      	ldmia	r6!, {r1, r2}
 8000696:	c306      	stmia	r3!, {r1, r2}
    _address=0;
 8000698:	25a4      	movs	r5, #164	; 0xa4
    m_pthis = right.m_pthis;
 800069a:	4643      	mov	r3, r8
 800069c:	2259      	movs	r2, #89	; 0x59
 800069e:	2100      	movs	r1, #0
 80006a0:	6003      	str	r3, [r0, #0]
 80006a2:	006d      	lsls	r5, r5, #1
 80006a4:	a802      	add	r0, sp, #8
 80006a6:	1940      	adds	r0, r0, r5
  __new_node->_M_next = __prev_node->_M_next;
 80006a8:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
  __prev_node->_M_next = __new_node;
 80006aa:	975f      	str	r7, [sp, #380]	; 0x17c
 80006ac:	5481      	strb	r1, [r0, r2]
  template<class TConfiguration,class... Features>
  inline void UsbKeyboard<TConfiguration,Features...>::setDeviceState(DeviceStateType newState) {

    UsbStatusType notify;

    if(_deviceState!=newState) {
 80006ae:	9a60      	ldr	r2, [sp, #384]	; 0x180
  __new_node->_M_next = __prev_node->_M_next;
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	9205      	str	r2, [sp, #20]
 80006b4:	2a01      	cmp	r2, #1
 80006b6:	d067      	beq.n	8000788 <_ZN9OneButton3runEv+0x434>

      _deviceState=newState;
 80006b8:	2201      	movs	r2, #1
 80006ba:	9260      	str	r2, [sp, #384]	; 0x180
    ++__result;
 80006bc:	3101      	adds	r1, #1
  for ( ; __node != 0; __node = __node->_M_next)
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d02f      	beq.n	8000722 <_ZN9OneButton3runEv+0x3ce>
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	e7fa      	b.n	80006bc <_ZN9OneButton3runEv+0x368>
 80006c6:	001c      	movs	r4, r3
        __my_malloc_handler = __malloc_alloc_oom_handler;
 80006c8:	6823      	ldr	r3, [r4, #0]
        if (0 == __my_malloc_handler) { __THROW_BAD_ALLOC; }
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d008      	beq.n	80006e0 <_ZN9OneButton3runEv+0x38c>
        (*__my_malloc_handler)();
 80006ce:	4798      	blx	r3
        __result = malloc(__n);
 80006d0:	2010      	movs	r0, #16
 80006d2:	f002 f89d 	bl	8002810 <malloc>
        if (__result) return(__result);
 80006d6:	2800      	cmp	r0, #0
 80006d8:	d0f6      	beq.n	80006c8 <_ZN9OneButton3runEv+0x374>
 80006da:	46a2      	mov	sl, r4
 80006dc:	0004      	movs	r4, r0
 80006de:	e77b      	b.n	80005d8 <_ZN9OneButton3runEv+0x284>
 80006e0:	e7fe      	b.n	80006e0 <_ZN9OneButton3runEv+0x38c>
 80006e2:	4654      	mov	r4, sl
        __my_malloc_handler = __malloc_alloc_oom_handler;
 80006e4:	6823      	ldr	r3, [r4, #0]
        if (0 == __my_malloc_handler) { __THROW_BAD_ALLOC; }
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d01a      	beq.n	8000720 <_ZN9OneButton3runEv+0x3cc>
        (*__my_malloc_handler)();
 80006ea:	4798      	blx	r3
        __result = malloc(__n);
 80006ec:	2010      	movs	r0, #16
 80006ee:	f002 f88f 	bl	8002810 <malloc>
        if (__result) return(__result);
 80006f2:	2800      	cmp	r0, #0
 80006f4:	d0f6      	beq.n	80006e4 <_ZN9OneButton3runEv+0x390>
 80006f6:	46a2      	mov	sl, r4
 80006f8:	0004      	movs	r4, r0
 80006fa:	e798      	b.n	800062e <_ZN9OneButton3runEv+0x2da>
 80006fc:	fffffc17 	.word	0xfffffc17
 8000700:	40013000 	.word	0x40013000
 8000704:	40020030 	.word	0x40020030
 8000708:	4001300c 	.word	0x4001300c
 800070c:	00000301 	.word	0x00000301
 8000710:	08000165 	.word	0x08000165
 8000714:	20000868 	.word	0x20000868
 8000718:	08000125 	.word	0x08000125
 800071c:	08000129 	.word	0x08000129
 8000720:	e7fe      	b.n	8000720 <_ZN9OneButton3runEv+0x3cc>
      /// Emits the events you wish to send to the call-backs
      /// \param args The arguments to emit to the slots connected to the signal
      template <class ...Args>
      void raiseEvent(Args&&... args) const {

        if(_slots.size()==1)
 8000722:	2901      	cmp	r1, #1
 8000724:	d020      	beq.n	8000768 <_ZN9OneButton3runEv+0x414>
  inline void bind(DesiredRetType (*function_to_bind)(Param1 p1)) {
    m_Closure.bindstaticfunc(this, &FastDelegate1::InvokeStaticFunction, 
      function_to_bind); }
  // Invoke the delegate
  RetType operator() (Param1 p1) const {
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8000726:	2301      	movs	r3, #1
 8000728:	469a      	mov	sl, r3
 800072a:	003e      	movs	r6, r7
 800072c:	af13      	add	r7, sp, #76	; 0x4c
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 800072e:	0033      	movs	r3, r6
 8000730:	003a      	movs	r2, r7
 8000732:	3308      	adds	r3, #8
 8000734:	6870      	ldr	r0, [r6, #4]
 8000736:	cb22      	ldmia	r3!, {r1, r5}
 8000738:	c222      	stmia	r2!, {r1, r5}
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 800073a:	4651      	mov	r1, sl
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 800073c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800073e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8000740:	4211      	tst	r1, r2
 8000742:	d009      	beq.n	8000758 <_ZN9OneButton3runEv+0x404>
 8000744:	1052      	asrs	r2, r2, #1
 8000746:	1880      	adds	r0, r0, r2
 8000748:	6802      	ldr	r2, [r0, #0]
 800074a:	2105      	movs	r1, #5
 800074c:	58d3      	ldr	r3, [r2, r3]
 800074e:	4798      	blx	r3
  void _M_incr() { _M_node = _M_node->_M_next; }
 8000750:	6836      	ldr	r6, [r6, #0]
          _firstSlot(args...);
        else {
          for(auto it=_slots.begin();it!=_slots.end();it++)
 8000752:	2e00      	cmp	r6, #0
 8000754:	d1eb      	bne.n	800072e <_ZN9OneButton3runEv+0x3da>
 8000756:	e017      	b.n	8000788 <_ZN9OneButton3runEv+0x434>
 8000758:	1052      	asrs	r2, r2, #1
 800075a:	1880      	adds	r0, r0, r2
 800075c:	2105      	movs	r1, #5
 800075e:	4798      	blx	r3
 8000760:	6836      	ldr	r6, [r6, #0]
 8000762:	2e00      	cmp	r6, #0
 8000764:	d1e3      	bne.n	800072e <_ZN9OneButton3runEv+0x3da>
 8000766:	e00f      	b.n	8000788 <_ZN9OneButton3runEv+0x434>
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8000768:	0022      	movs	r2, r4
 800076a:	ab11      	add	r3, sp, #68	; 0x44
 800076c:	985c      	ldr	r0, [sp, #368]	; 0x170
 800076e:	ca60      	ldmia	r2!, {r5, r6}
 8000770:	c360      	stmia	r3!, {r5, r6}
 8000772:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8000774:	9a11      	ldr	r2, [sp, #68]	; 0x44
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8000776:	4219      	tst	r1, r3
 8000778:	d100      	bne.n	800077c <_ZN9OneButton3runEv+0x428>
 800077a:	e234      	b.n	8000be6 <_ZN9OneButton3runEv+0x892>
 800077c:	105b      	asrs	r3, r3, #1
 800077e:	18c0      	adds	r0, r0, r3
 8000780:	6803      	ldr	r3, [r0, #0]
 8000782:	589a      	ldr	r2, [r3, r2]
 8000784:	2105      	movs	r1, #5
 8000786:	4790      	blx	r2
    _remoteWakeup=false;
 8000788:	2300      	movs	r3, #0
 800078a:	21a4      	movs	r1, #164	; 0xa4
 800078c:	469a      	mov	sl, r3
 800078e:	0049      	lsls	r1, r1, #1
 8000790:	aa02      	add	r2, sp, #8
 8000792:	1852      	adds	r2, r2, r1
 8000794:	4651      	mov	r1, sl
 8000796:	335b      	adds	r3, #91	; 0x5b
 8000798:	54d1      	strb	r1, [r2, r3]
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB,ENABLE);
 800079a:	2080      	movs	r0, #128	; 0x80
    USBR->BTABLE=0;
 800079c:	4652      	mov	r2, sl
 800079e:	4fd6      	ldr	r7, [pc, #856]	; (8000af8 <_ZN9OneButton3runEv+0x7a4>)
 80007a0:	3b0b      	subs	r3, #11
 80007a2:	52fa      	strh	r2, [r7, r3]
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB,ENABLE);
 80007a4:	2101      	movs	r1, #1
 80007a6:	0400      	lsls	r0, r0, #16
 80007a8:	f001 ff96 	bl	80026d8 <RCC_APB1PeriphClockCmd>

  inline void Nvic::configureIrq(uint8_t interrupt,FunctionalState state,uint8_t preemptionPriority,uint8_t /* subPriority */) {

    NVIC_InitTypeDef nit;

    nit.NVIC_IRQChannel=interrupt;
 80007ac:	231f      	movs	r3, #31
 80007ae:	ae17      	add	r6, sp, #92	; 0x5c
 80007b0:	7033      	strb	r3, [r6, #0]
    nit.NVIC_IRQChannelPriority=preemptionPriority;
 80007b2:	2300      	movs	r3, #0
 80007b4:	7073      	strb	r3, [r6, #1]
    nit.NVIC_IRQChannelCmd=state;
 80007b6:	2301      	movs	r3, #1
 80007b8:	469b      	mov	fp, r3

    NVIC_Init(&nit);
 80007ba:	0030      	movs	r0, r6
    nit.NVIC_IRQChannelCmd=state;
 80007bc:	70b3      	strb	r3, [r6, #2]
    NVIC_Init(&nit);
 80007be:	f001 ff47 	bl	8002650 <NVIC_Init>
    USBR->CNTR=USB_CNTR_FRES;
 80007c2:	2340      	movs	r3, #64	; 0x40
 80007c4:	465a      	mov	r2, fp
 80007c6:	52fa      	strh	r2, [r7, r3]
    USBR->CNTR=0;
 80007c8:	4652      	mov	r2, sl
    USBR->ISTR=0;
 80007ca:	4651      	mov	r1, sl
    USBR->CNTR=0;
 80007cc:	52fa      	strh	r2, [r7, r3]
    USBR->ISTR=0;
 80007ce:	2244      	movs	r2, #68	; 0x44
 80007d0:	52b9      	strh	r1, [r7, r2]
    USBR->CNTR=USB_CNTR_CTRM          // correct transfer
 80007d2:	4aca      	ldr	r2, [pc, #808]	; (8000afc <_ZN9OneButton3runEv+0x7a8>)
    USBR->BCDR |= USB_BCDR_DPPU;
 80007d4:	2180      	movs	r1, #128	; 0x80
    USBR->CNTR=USB_CNTR_CTRM          // correct transfer
 80007d6:	52fa      	strh	r2, [r7, r3]
    USBR->BCDR |= USB_BCDR_DPPU;
 80007d8:	2258      	movs	r2, #88	; 0x58
 80007da:	5abb      	ldrh	r3, [r7, r2]
 80007dc:	0209      	lsls	r1, r1, #8
 80007de:	430b      	orrs	r3, r1
 80007e0:	52bb      	strh	r3, [r7, r2]
  size_type size() const { return __slist_size(this->_M_head._M_next); }
 80007e2:	9f5f      	ldr	r7, [sp, #380]	; 0x17c
  for ( ; __node != 0; __node = __node->_M_next)
 80007e4:	2f00      	cmp	r7, #0
 80007e6:	d01d      	beq.n	8000824 <_ZN9OneButton3runEv+0x4d0>
 80007e8:	003b      	movs	r3, r7
 80007ea:	2100      	movs	r1, #0
 80007ec:	681b      	ldr	r3, [r3, #0]
    ++__result;
 80007ee:	3101      	adds	r1, #1
  for ( ; __node != 0; __node = __node->_M_next)
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d1fb      	bne.n	80007ec <_ZN9OneButton3runEv+0x498>
        if(_slots.size()==1)
 80007f4:	2901      	cmp	r1, #1
 80007f6:	d100      	bne.n	80007fa <_ZN9OneButton3runEv+0x4a6>
 80007f8:	e1e6      	b.n	8000bc8 <_ZN9OneButton3runEv+0x874>
 80007fa:	2401      	movs	r4, #1
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 80007fc:	003b      	movs	r3, r7
 80007fe:	0032      	movs	r2, r6
 8000800:	3308      	adds	r3, #8
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	cb22      	ldmia	r3!, {r1, r5}
 8000806:	c222      	stmia	r2!, {r1, r5}
 8000808:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800080a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 800080c:	421c      	tst	r4, r3
 800080e:	d100      	bne.n	8000812 <_ZN9OneButton3runEv+0x4be>
 8000810:	e1d1      	b.n	8000bb6 <_ZN9OneButton3runEv+0x862>
 8000812:	105b      	asrs	r3, r3, #1
 8000814:	18c0      	adds	r0, r0, r3
 8000816:	6803      	ldr	r3, [r0, #0]
 8000818:	2105      	movs	r1, #5
 800081a:	589b      	ldr	r3, [r3, r2]
 800081c:	4798      	blx	r3
  void _M_incr() { _M_node = _M_node->_M_next; }
 800081e:	683f      	ldr	r7, [r7, #0]
          for(auto it=_slots.begin();it!=_slots.end();it++)
 8000820:	2f00      	cmp	r7, #0
 8000822:	d1eb      	bne.n	80007fc <_ZN9OneButton3runEv+0x4a8>
      MillisecondTimer::delay(200);
 8000824:	20c8      	movs	r0, #200	; 0xc8
 8000826:	f001 fdff 	bl	8002428 <_ZN9stm32plus16MillisecondTimer5delayEm>
 800082a:	239c      	movs	r3, #156	; 0x9c
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	4646      	mov	r6, r8
 8000830:	4443      	add	r3, r8
            dataToSend[data_idx+1] = ((uint8_t)(0x0F & led_bit_1) << 4) | (uint8_t)(0x0F & (uint16_t)(led_bit_2 >> 8));
 8000832:	240f      	movs	r4, #15
 8000834:	46c3      	mov	fp, r8
 8000836:	001d      	movs	r5, r3
 8000838:	3618      	adds	r6, #24
 800083a:	239e      	movs	r3, #158	; 0x9e
 800083c:	465a      	mov	r2, fp
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	58d7      	ldr	r7, [r2, r3]
        uint32_t color = 0;
 8000842:	46dc      	mov	ip, fp
  for ( ; __node != 0; __node = __node->_M_next)
 8000844:	465b      	mov	r3, fp
 8000846:	2200      	movs	r2, #0
 8000848:	0039      	movs	r1, r7
 800084a:	e009      	b.n	8000860 <_ZN9OneButton3runEv+0x50c>
 800084c:	7018      	strb	r0, [r3, #0]
            color++;
 800084e:	1c57      	adds	r7, r2, #1
 8000850:	2000      	movs	r0, #0
 8000852:	2a01      	cmp	r2, #1
 8000854:	d800      	bhi.n	8000858 <_ZN9OneButton3runEv+0x504>
 8000856:	0038      	movs	r0, r7
 8000858:	3301      	adds	r3, #1
 800085a:	0002      	movs	r2, r0
        for(led_bytes_idx = 0; led_bytes_idx < 24; led_bytes_idx++)
 800085c:	429e      	cmp	r6, r3
 800085e:	d012      	beq.n	8000886 <_ZN9OneButton3runEv+0x532>
 8000860:	2000      	movs	r0, #0
 8000862:	4291      	cmp	r1, r2
 8000864:	d1f2      	bne.n	800084c <_ZN9OneButton3runEv+0x4f8>
 8000866:	48a6      	ldr	r0, [pc, #664]	; (8000b00 <_ZN9OneButton3runEv+0x7ac>)
 8000868:	7800      	ldrb	r0, [r0, #0]
 800086a:	e7ef      	b.n	800084c <_ZN9OneButton3runEv+0x4f8>
 800086c:	4655      	mov	r5, sl
        __my_malloc_handler = __malloc_alloc_oom_handler;
 800086e:	682b      	ldr	r3, [r5, #0]
        if (0 == __my_malloc_handler) { __THROW_BAD_ALLOC; }
 8000870:	2b00      	cmp	r3, #0
 8000872:	d007      	beq.n	8000884 <_ZN9OneButton3runEv+0x530>
        (*__my_malloc_handler)();
 8000874:	4798      	blx	r3
        __result = malloc(__n);
 8000876:	2010      	movs	r0, #16
 8000878:	f001 ffca 	bl	8002810 <malloc>
        if (__result) return(__result);
 800087c:	2800      	cmp	r0, #0
 800087e:	d0f6      	beq.n	800086e <_ZN9OneButton3runEv+0x51a>
 8000880:	0007      	movs	r7, r0
 8000882:	e702      	b.n	800068a <_ZN9OneButton3runEv+0x336>
 8000884:	e7fe      	b.n	8000884 <_ZN9OneButton3runEv+0x530>
        colorsweep++;
 8000886:	20a0      	movs	r0, #160	; 0xa0
 8000888:	465a      	mov	r2, fp
 800088a:	465f      	mov	r7, fp
 800088c:	0040      	lsls	r0, r0, #1
 800088e:	5c12      	ldrb	r2, [r2, r0]
 8000890:	4661      	mov	r1, ip
 8000892:	3201      	adds	r2, #1
 8000894:	543a      	strb	r2, [r7, r0]
            dataToSend[data_idx]   = (uint8_t)(0xFF & (uint16_t)(led_bit_1 >> 4));
 8000896:	2201      	movs	r2, #1
 8000898:	4692      	mov	sl, r2
            dataToSend[data_idx+2] = (uint8_t)(0xFF & (uint16_t)(led_bit_2));
 800089a:	3201      	adds	r2, #1
 800089c:	4690      	mov	r8, r2
            dataToSend[data_idx]   = (uint8_t)(0xFF & (uint16_t)(led_bit_1 >> 4));
 800089e:	2704      	movs	r7, #4
 80008a0:	46b4      	mov	ip, r6
 80008a2:	e033      	b.n	800090c <_ZN9OneButton3runEv+0x5b8>
 80008a4:	4897      	ldr	r0, [pc, #604]	; (8000b04 <_ZN9OneButton3runEv+0x7b0>)
 80008a6:	7800      	ldrb	r0, [r0, #0]
            dataToSend[data_idx+2] = (uint8_t)(0xFF & (uint16_t)(led_bit_2));
 80008a8:	4646      	mov	r6, r8
            dataToSend[data_idx]   = (uint8_t)(0xFF & (uint16_t)(led_bit_1 >> 4));
 80008aa:	7018      	strb	r0, [r3, #0]
            dataToSend[data_idx+1] = ((uint8_t)(0x0F & led_bit_1) << 4) | (uint8_t)(0x0F & (uint16_t)(led_bit_2 >> 8));
 80008ac:	705c      	strb	r4, [r3, #1]
            dataToSend[data_idx+2] = (uint8_t)(0xFF & (uint16_t)(led_bit_2));
 80008ae:	2000      	movs	r0, #0
 80008b0:	4216      	tst	r6, r2
 80008b2:	d001      	beq.n	80008b8 <_ZN9OneButton3runEv+0x564>
 80008b4:	4894      	ldr	r0, [pc, #592]	; (8000b08 <_ZN9OneButton3runEv+0x7b4>)
 80008b6:	7800      	ldrb	r0, [r0, #0]
 80008b8:	7098      	strb	r0, [r3, #2]
            dataToSend[data_idx]   = (uint8_t)(0xFF & (uint16_t)(led_bit_1 >> 4));
 80008ba:	4217      	tst	r7, r2
 80008bc:	d030      	beq.n	8000920 <_ZN9OneButton3runEv+0x5cc>
 80008be:	4891      	ldr	r0, [pc, #580]	; (8000b04 <_ZN9OneButton3runEv+0x7b0>)
 80008c0:	7800      	ldrb	r0, [r0, #0]
 80008c2:	70d8      	strb	r0, [r3, #3]
            dataToSend[data_idx+1] = ((uint8_t)(0x0F & led_bit_1) << 4) | (uint8_t)(0x0F & (uint16_t)(led_bit_2 >> 8));
 80008c4:	711c      	strb	r4, [r3, #4]
            dataToSend[data_idx+2] = (uint8_t)(0xFF & (uint16_t)(led_bit_2));
 80008c6:	2000      	movs	r0, #0
 80008c8:	0716      	lsls	r6, r2, #28
 80008ca:	d501      	bpl.n	80008d0 <_ZN9OneButton3runEv+0x57c>
 80008cc:	488e      	ldr	r0, [pc, #568]	; (8000b08 <_ZN9OneButton3runEv+0x7b4>)
 80008ce:	7800      	ldrb	r0, [r0, #0]
 80008d0:	7158      	strb	r0, [r3, #5]
            dataToSend[data_idx]   = (uint8_t)(0xFF & (uint16_t)(led_bit_1 >> 4));
 80008d2:	06d0      	lsls	r0, r2, #27
 80008d4:	d527      	bpl.n	8000926 <_ZN9OneButton3runEv+0x5d2>
 80008d6:	488b      	ldr	r0, [pc, #556]	; (8000b04 <_ZN9OneButton3runEv+0x7b0>)
 80008d8:	7800      	ldrb	r0, [r0, #0]
 80008da:	7198      	strb	r0, [r3, #6]
            dataToSend[data_idx+1] = ((uint8_t)(0x0F & led_bit_1) << 4) | (uint8_t)(0x0F & (uint16_t)(led_bit_2 >> 8));
 80008dc:	71dc      	strb	r4, [r3, #7]
            dataToSend[data_idx+2] = (uint8_t)(0xFF & (uint16_t)(led_bit_2));
 80008de:	2000      	movs	r0, #0
 80008e0:	0696      	lsls	r6, r2, #26
 80008e2:	d501      	bpl.n	80008e8 <_ZN9OneButton3runEv+0x594>
 80008e4:	4888      	ldr	r0, [pc, #544]	; (8000b08 <_ZN9OneButton3runEv+0x7b4>)
 80008e6:	7800      	ldrb	r0, [r0, #0]
 80008e8:	7218      	strb	r0, [r3, #8]
            dataToSend[data_idx]   = (uint8_t)(0xFF & (uint16_t)(led_bit_1 >> 4));
 80008ea:	0650      	lsls	r0, r2, #25
 80008ec:	d515      	bpl.n	800091a <_ZN9OneButton3runEv+0x5c6>
 80008ee:	4885      	ldr	r0, [pc, #532]	; (8000b04 <_ZN9OneButton3runEv+0x7b0>)
 80008f0:	7800      	ldrb	r0, [r0, #0]
 80008f2:	7258      	strb	r0, [r3, #9]
            dataToSend[data_idx+1] = ((uint8_t)(0x0F & led_bit_1) << 4) | (uint8_t)(0x0F & (uint16_t)(led_bit_2 >> 8));
 80008f4:	729c      	strb	r4, [r3, #10]
            dataToSend[data_idx+2] = (uint8_t)(0xFF & (uint16_t)(led_bit_2));
 80008f6:	09d2      	lsrs	r2, r2, #7
 80008f8:	2000      	movs	r0, #0
 80008fa:	2a00      	cmp	r2, #0
 80008fc:	d001      	beq.n	8000902 <_ZN9OneButton3runEv+0x5ae>
 80008fe:	4a82      	ldr	r2, [pc, #520]	; (8000b08 <_ZN9OneButton3runEv+0x7b4>)
 8000900:	7810      	ldrb	r0, [r2, #0]
 8000902:	72d8      	strb	r0, [r3, #11]
 8000904:	330c      	adds	r3, #12
 8000906:	3101      	adds	r1, #1
        for(int a=0; a<24; a++)
 8000908:	429d      	cmp	r5, r3
 800090a:	d00f      	beq.n	800092c <_ZN9OneButton3runEv+0x5d8>
            dataToSend[data_idx]   = (uint8_t)(0xFF & (uint16_t)(led_bit_1 >> 4));
 800090c:	4650      	mov	r0, sl
          uint8_t led_byte = led_bytes[a];
 800090e:	780a      	ldrb	r2, [r1, #0]
            dataToSend[data_idx]   = (uint8_t)(0xFF & (uint16_t)(led_bit_1 >> 4));
 8000910:	4210      	tst	r0, r2
 8000912:	d1c7      	bne.n	80008a4 <_ZN9OneButton3runEv+0x550>
 8000914:	487d      	ldr	r0, [pc, #500]	; (8000b0c <_ZN9OneButton3runEv+0x7b8>)
 8000916:	7800      	ldrb	r0, [r0, #0]
 8000918:	e7c6      	b.n	80008a8 <_ZN9OneButton3runEv+0x554>
 800091a:	487c      	ldr	r0, [pc, #496]	; (8000b0c <_ZN9OneButton3runEv+0x7b8>)
 800091c:	7800      	ldrb	r0, [r0, #0]
 800091e:	e7e8      	b.n	80008f2 <_ZN9OneButton3runEv+0x59e>
 8000920:	487a      	ldr	r0, [pc, #488]	; (8000b0c <_ZN9OneButton3runEv+0x7b8>)
 8000922:	7800      	ldrb	r0, [r0, #0]
 8000924:	e7cd      	b.n	80008c2 <_ZN9OneButton3runEv+0x56e>
 8000926:	4879      	ldr	r0, [pc, #484]	; (8000b0c <_ZN9OneButton3runEv+0x7b8>)
 8000928:	7800      	ldrb	r0, [r0, #0]
 800092a:	e7d6      	b.n	80008da <_ZN9OneButton3runEv+0x586>
        dataToSend[288] = 0;
 800092c:	239c      	movs	r3, #156	; 0x9c
 800092e:	465a      	mov	r2, fp
 8000930:	2100      	movs	r1, #0
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	54d1      	strb	r1, [r2, r3]
   * Read the selected pin state.
   * @return The pin state.
   */

  inline bool Gpio::read() const {
    return GPIO_ReadInputDataBit(_peripheralAddress,_selectedPin);
 8000936:	21f4      	movs	r1, #244	; 0xf4
 8000938:	aa02      	add	r2, sp, #8
 800093a:	3be6      	subs	r3, #230	; 0xe6
 800093c:	1852      	adds	r2, r2, r1
 800093e:	5ad1      	ldrh	r1, [r2, r3]
 8000940:	9852      	ldr	r0, [sp, #328]	; 0x148
 8000942:	4666      	mov	r6, ip
 8000944:	f001 fe62 	bl	800260c <GPIO_ReadInputDataBit>
        if(keyin.read()==0 && _debounce == 0)
 8000948:	2800      	cmp	r0, #0
 800094a:	d178      	bne.n	8000a3e <_ZN9OneButton3runEv+0x6ea>
 800094c:	23a6      	movs	r3, #166	; 0xa6
 800094e:	465a      	mov	r2, fp
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	5cd3      	ldrb	r3, [r2, r3]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	4698      	mov	r8, r3
 8000958:	2b00      	cmp	r3, #0
 800095a:	d170      	bne.n	8000a3e <_ZN9OneButton3runEv+0x6ea>
    else
      GPIO_ResetBits(_nssPort,_nssPin);
 800095c:	2090      	movs	r0, #144	; 0x90
 800095e:	2110      	movs	r1, #16
 8000960:	05c0      	lsls	r0, r0, #23
 8000962:	f001 fe5b 	bl	800261c <GPIO_ResetBits>

    DMA_Channel_TypeDef *peripheralAddress;

    // set up the parameters for this transfer

    _init.DMA_MemoryBaseAddr=reinterpret_cast<uint32_t>(source);
 8000966:	464b      	mov	r3, r9
 8000968:	619e      	str	r6, [r3, #24]
    _init.DMA_BufferSize=count;
 800096a:	2322      	movs	r3, #34	; 0x22
 800096c:	464a      	mov	r2, r9
 800096e:	33ff      	adds	r3, #255	; 0xff
 8000970:	6213      	str	r3, [r2, #32]
 8000972:	6913      	ldr	r3, [r2, #16]

    peripheralAddress=_dma;

      // disable and then re-enable

    DMA_Cmd(peripheralAddress,DISABLE);
 8000974:	2100      	movs	r1, #0
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	469a      	mov	sl, r3
 800097a:	0018      	movs	r0, r3
 800097c:	f001 fdd8 	bl	8002530 <DMA_Cmd>
    DMA_Init(peripheralAddress,&_init);
 8000980:	a91f      	add	r1, sp, #124	; 0x7c
 8000982:	4650      	mov	r0, sl
 8000984:	f001 fdb6 	bl	80024f4 <DMA_Init>
    DMA_Cmd(peripheralAddress,ENABLE);
 8000988:	2101      	movs	r1, #1
 800098a:	4650      	mov	r0, sl
 800098c:	f001 fdd0 	bl	8002530 <DMA_Cmd>
          uint8_t usb_key_report[8] = {2, 0, 5, 0, 0, 0, 0, 0};
 8000990:	4b5f      	ldr	r3, [pc, #380]	; (8000b10 <_ZN9OneButton3runEv+0x7bc>)
 8000992:	9307      	str	r3, [sp, #28]
 8000994:	4643      	mov	r3, r8
 8000996:	9308      	str	r3, [sp, #32]
    if(_deviceState!=DeviceStateType::CONFIGURED)
 8000998:	9b60      	ldr	r3, [sp, #384]	; 0x180
 800099a:	9305      	str	r3, [sp, #20]
 800099c:	2b03      	cmp	r3, #3
 800099e:	d100      	bne.n	80009a2 <_ZN9OneButton3runEv+0x64e>
 80009a0:	e0d2      	b.n	8000b48 <_ZN9OneButton3runEv+0x7f4>
       * @param[in] errorCause Optional 32-bit value associated with this error.
       * @return false, which is the convention for the return value of a method that wants to indicate to its caller that it has failed.
       */

      bool set(uint32_t errorProviderCode,uint32_t errorCode,uint32_t errorCause=0) {
        _provider=errorProviderCode;
 80009a2:	2346      	movs	r3, #70	; 0x46
 80009a4:	4a5b      	ldr	r2, [pc, #364]	; (8000b14 <_ZN9OneButton3runEv+0x7c0>)
 80009a6:	6093      	str	r3, [r2, #8]
        _errorCode=errorCode | (errorProviderCode << 16);
 80009a8:	4b5b      	ldr	r3, [pc, #364]	; (8000b18 <_ZN9OneButton3runEv+0x7c4>)
 80009aa:	6013      	str	r3, [r2, #0]
        _errorCause=errorCause;
 80009ac:	0013      	movs	r3, r2
 80009ae:	4642      	mov	r2, r8
 80009b0:	605a      	str	r2, [r3, #4]
          MillisecondTimer::delay(10);
 80009b2:	200a      	movs	r0, #10
 80009b4:	f001 fd38 	bl	8002428 <_ZN9stm32plus16MillisecondTimer5delayEm>
          uint8_t usb_key_report_2[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 80009b8:	2208      	movs	r2, #8
 80009ba:	2100      	movs	r1, #0
 80009bc:	a809      	add	r0, sp, #36	; 0x24
 80009be:	f002 fa15 	bl	8002dec <memset>
 80009c2:	9b60      	ldr	r3, [sp, #384]	; 0x180
 80009c4:	9305      	str	r3, [sp, #20]
 80009c6:	2b03      	cmp	r3, #3
 80009c8:	d054      	beq.n	8000a74 <_ZN9OneButton3runEv+0x720>
        _provider=errorProviderCode;
 80009ca:	2346      	movs	r3, #70	; 0x46
 80009cc:	4a51      	ldr	r2, [pc, #324]	; (8000b14 <_ZN9OneButton3runEv+0x7c0>)
 80009ce:	6093      	str	r3, [r2, #8]
        _errorCode=errorCode | (errorProviderCode << 16);
 80009d0:	4b51      	ldr	r3, [pc, #324]	; (8000b18 <_ZN9OneButton3runEv+0x7c4>)
 80009d2:	6013      	str	r3, [r2, #0]
        _errorCause=errorCause;
 80009d4:	0013      	movs	r3, r2
 80009d6:	2200      	movs	r2, #0
 80009d8:	605a      	str	r2, [r3, #4]
          MillisecondTimer::delay(10);
 80009da:	200a      	movs	r0, #10
 80009dc:	f001 fd24 	bl	8002428 <_ZN9stm32plus16MillisecondTimer5delayEm>
          _debounce = 1;
 80009e0:	23a6      	movs	r3, #166	; 0xa6
 80009e2:	4659      	mov	r1, fp
 80009e4:	2201      	movs	r2, #1
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	54ca      	strb	r2, [r1, r3]
          MillisecondTimer::delay(200);
 80009ea:	20c8      	movs	r0, #200	; 0xc8
 80009ec:	f001 fd1c 	bl	8002428 <_ZN9stm32plus16MillisecondTimer5delayEm>
 80009f0:	229e      	movs	r2, #158	; 0x9e
          if(estop == 1)
 80009f2:	465b      	mov	r3, fp
 80009f4:	0052      	lsls	r2, r2, #1
 80009f6:	589b      	ldr	r3, [r3, r2]
 80009f8:	3b01      	subs	r3, #1
 80009fa:	1e59      	subs	r1, r3, #1
 80009fc:	418b      	sbcs	r3, r1
 80009fe:	4659      	mov	r1, fp
 8000a00:	508b      	str	r3, [r1, r2]
 8000a02:	21f4      	movs	r1, #244	; 0xf4
 8000a04:	2352      	movs	r3, #82	; 0x52
 8000a06:	aa02      	add	r2, sp, #8
 8000a08:	1852      	adds	r2, r2, r1
 8000a0a:	5ad1      	ldrh	r1, [r2, r3]
 8000a0c:	9852      	ldr	r0, [sp, #328]	; 0x148
 8000a0e:	f001 fdfd 	bl	800260c <GPIO_ReadInputDataBit>
        if(keyin.read() == 1)
 8000a12:	2800      	cmp	r0, #0
 8000a14:	d004      	beq.n	8000a20 <_ZN9OneButton3runEv+0x6cc>
          _debounce = 0;
 8000a16:	23a6      	movs	r3, #166	; 0xa6
 8000a18:	465a      	mov	r2, fp
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	54d1      	strb	r1, [r2, r3]
   * Wait for the peripheral to become idle. If transmitting then the peripheral becomes
   * idle when the last word written to the TX register has been shifted out to the bus.
   */

  inline void Spi::waitForIdle() const {
    while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_BSY)==SET);
 8000a20:	2180      	movs	r1, #128	; 0x80
 8000a22:	483e      	ldr	r0, [pc, #248]	; (8000b1c <_ZN9OneButton3runEv+0x7c8>)
 8000a24:	f001 feba 	bl	800279c <SPI_I2S_GetFlagStatus>
 8000a28:	2801      	cmp	r0, #1
 8000a2a:	d0f9      	beq.n	8000a20 <_ZN9OneButton3runEv+0x6cc>
      GPIO_SetBits(_nssPort,_nssPin);
 8000a2c:	2090      	movs	r0, #144	; 0x90
 8000a2e:	2110      	movs	r1, #16
 8000a30:	05c0      	lsls	r0, r0, #23
 8000a32:	f001 fdf1 	bl	8002618 <GPIO_SetBits>
        MillisecondTimer::delay(1);
 8000a36:	2001      	movs	r0, #1
 8000a38:	f001 fcf6 	bl	8002428 <_ZN9stm32plus16MillisecondTimer5delayEm>
      }
 8000a3c:	e6fd      	b.n	800083a <_ZN9OneButton3runEv+0x4e6>
      GPIO_ResetBits(_nssPort,_nssPin);
 8000a3e:	2090      	movs	r0, #144	; 0x90
 8000a40:	2110      	movs	r1, #16
 8000a42:	05c0      	lsls	r0, r0, #23
 8000a44:	f001 fdea 	bl	800261c <GPIO_ResetBits>
    _init.DMA_MemoryBaseAddr=reinterpret_cast<uint32_t>(source);
 8000a48:	464b      	mov	r3, r9
 8000a4a:	619e      	str	r6, [r3, #24]
    _init.DMA_BufferSize=count;
 8000a4c:	2322      	movs	r3, #34	; 0x22
 8000a4e:	464a      	mov	r2, r9
 8000a50:	33ff      	adds	r3, #255	; 0xff
 8000a52:	6213      	str	r3, [r2, #32]
 8000a54:	6913      	ldr	r3, [r2, #16]
    DMA_Cmd(peripheralAddress,DISABLE);
 8000a56:	2100      	movs	r1, #0
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4698      	mov	r8, r3
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f001 fd67 	bl	8002530 <DMA_Cmd>
    DMA_Init(peripheralAddress,&_init);
 8000a62:	a91f      	add	r1, sp, #124	; 0x7c
 8000a64:	4640      	mov	r0, r8
 8000a66:	f001 fd45 	bl	80024f4 <DMA_Init>
    DMA_Cmd(peripheralAddress,ENABLE);
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	4640      	mov	r0, r8
 8000a6e:	f001 fd5f 	bl	8002530 <DMA_Cmd>
 8000a72:	e7c6      	b.n	8000a02 <_ZN9OneButton3runEv+0x6ae>
    _inEndpointData[endpointIndex].remaining=length;
 8000a74:	4b2a      	ldr	r3, [pc, #168]	; (8000b20 <_ZN9OneButton3runEv+0x7cc>)
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 8000a76:	2120      	movs	r1, #32
    _inEndpointData[endpointIndex].remaining=length;
 8000a78:	9367      	str	r3, [sp, #412]	; 0x19c
 8000a7a:	4b2a      	ldr	r3, [pc, #168]	; (8000b24 <_ZN9OneButton3runEv+0x7d0>)
 8000a7c:	9368      	str	r3, [sp, #416]	; 0x1a0
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 8000a7e:	ab02      	add	r3, sp, #8
 8000a80:	7f5a      	ldrb	r2, [r3, #29]
 8000a82:	7f1b      	ldrb	r3, [r3, #28]
 8000a84:	0212      	lsls	r2, r2, #8
 8000a86:	4313      	orrs	r3, r2
      *pdwVal++=word;
 8000a88:	4a27      	ldr	r2, [pc, #156]	; (8000b28 <_ZN9OneButton3runEv+0x7d4>)
 8000a8a:	8013      	strh	r3, [r2, #0]
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 8000a8c:	ab02      	add	r3, sp, #8
 8000a8e:	7fda      	ldrb	r2, [r3, #31]
 8000a90:	7f9b      	ldrb	r3, [r3, #30]
 8000a92:	0212      	lsls	r2, r2, #8
 8000a94:	4313      	orrs	r3, r2
      *pdwVal++=word;
 8000a96:	4a25      	ldr	r2, [pc, #148]	; (8000b2c <_ZN9OneButton3runEv+0x7d8>)
 8000a98:	8013      	strh	r3, [r2, #0]
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 8000a9a:	2221      	movs	r2, #33	; 0x21
 8000a9c:	ab02      	add	r3, sp, #8
 8000a9e:	189b      	adds	r3, r3, r2
 8000aa0:	781a      	ldrb	r2, [r3, #0]
 8000aa2:	ab02      	add	r3, sp, #8
 8000aa4:	185b      	adds	r3, r3, r1
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	0212      	lsls	r2, r2, #8
 8000aaa:	4313      	orrs	r3, r2
      *pdwVal++=word;
 8000aac:	4a20      	ldr	r2, [pc, #128]	; (8000b30 <_ZN9OneButton3runEv+0x7dc>)
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 8000aae:	3102      	adds	r1, #2
      *pdwVal++=word;
 8000ab0:	8013      	strh	r3, [r2, #0]
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 8000ab2:	2223      	movs	r2, #35	; 0x23
 8000ab4:	ab02      	add	r3, sp, #8
 8000ab6:	189b      	adds	r3, r3, r2
 8000ab8:	781a      	ldrb	r2, [r3, #0]
 8000aba:	ab02      	add	r3, sp, #8
 8000abc:	185b      	adds	r3, r3, r1
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	0212      	lsls	r2, r2, #8
 8000ac2:	4313      	orrs	r3, r2
      *pdwVal++=word;
 8000ac4:	4a1b      	ldr	r2, [pc, #108]	; (8000b34 <_ZN9OneButton3runEv+0x7e0>)
    ep.remaining-=length;
 8000ac6:	3127      	adds	r1, #39	; 0x27
      *pdwVal++=word;
 8000ac8:	8013      	strh	r3, [r2, #0]
    ep.remaining-=length;
 8000aca:	31ff      	adds	r1, #255	; 0xff
    ep.ptr+=length;
 8000acc:	ab0b      	add	r3, sp, #44	; 0x2c
    ep.remaining-=length;
 8000ace:	aa02      	add	r2, sp, #8
    ep.ptr+=length;
 8000ad0:	9366      	str	r3, [sp, #408]	; 0x198
    ep.remaining-=length;
 8000ad2:	1852      	adds	r2, r2, r1
 8000ad4:	234c      	movs	r3, #76	; 0x4c
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	52d1      	strh	r1, [r2, r3]
    USBR_BDT[endpointIndex].tx.count=length;
 8000ada:	2208      	movs	r2, #8
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <_ZN9OneButton3runEv+0x7e4>)
    value=*epreg & USB_EPTX_DTOGMASK;
 8000ade:	4917      	ldr	r1, [pc, #92]	; (8000b3c <_ZN9OneButton3runEv+0x7e8>)
    USBR_BDT[endpointIndex].tx.count=length;
 8000ae0:	805a      	strh	r2, [r3, #2]
    value=*epreg & USB_EPTX_DTOGMASK;
 8000ae2:	880b      	ldrh	r3, [r1, #0]
 8000ae4:	4a16      	ldr	r2, [pc, #88]	; (8000b40 <_ZN9OneButton3runEv+0x7ec>)
 8000ae6:	4013      	ands	r3, r2
      reg^=USB_EPTX_DTOG2;
 8000ae8:	2230      	movs	r2, #48	; 0x30
 8000aea:	405a      	eors	r2, r3
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8000aec:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <_ZN9OneButton3runEv+0x7f0>)
 8000aee:	4313      	orrs	r3, r2
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	800b      	strh	r3, [r1, #0]
 8000af4:	e771      	b.n	80009da <_ZN9OneButton3runEv+0x686>
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	40005c00 	.word	0x40005c00
 8000afc:	ffffbd00 	.word	0xffffbd00
 8000b00:	08003268 	.word	0x08003268
 8000b04:	08003269 	.word	0x08003269
 8000b08:	0800326b 	.word	0x0800326b
 8000b0c:	0800326a 	.word	0x0800326a
 8000b10:	00050002 	.word	0x00050002
 8000b14:	20000874 	.word	0x20000874
 8000b18:	00460001 	.word	0x00460001
 8000b1c:	40013000 	.word	0x40013000
 8000b20:	00080008 	.word	0x00080008
 8000b24:	00980009 	.word	0x00980009
 8000b28:	40006098 	.word	0x40006098
 8000b2c:	4000609a 	.word	0x4000609a
 8000b30:	4000609c 	.word	0x4000609c
 8000b34:	4000609e 	.word	0x4000609e
 8000b38:	40006008 	.word	0x40006008
 8000b3c:	40005c04 	.word	0x40005c04
 8000b40:	ffff8fbf 	.word	0xffff8fbf
 8000b44:	ffff8080 	.word	0xffff8080
    ep.remaining-=length;
 8000b48:	21a4      	movs	r1, #164	; 0xa4
    _inEndpointData[endpointIndex].remaining=length;
 8000b4a:	4b2a      	ldr	r3, [pc, #168]	; (8000bf4 <_ZN9OneButton3runEv+0x8a0>)
    ep.remaining-=length;
 8000b4c:	0049      	lsls	r1, r1, #1
    _inEndpointData[endpointIndex].remaining=length;
 8000b4e:	9367      	str	r3, [sp, #412]	; 0x19c
 8000b50:	4b29      	ldr	r3, [pc, #164]	; (8000bf8 <_ZN9OneButton3runEv+0x8a4>)
 8000b52:	9368      	str	r3, [sp, #416]	; 0x1a0
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 8000b54:	ab02      	add	r3, sp, #8
 8000b56:	7d5a      	ldrb	r2, [r3, #21]
 8000b58:	7d1b      	ldrb	r3, [r3, #20]
 8000b5a:	0212      	lsls	r2, r2, #8
 8000b5c:	4313      	orrs	r3, r2
      *pdwVal++=word;
 8000b5e:	4a27      	ldr	r2, [pc, #156]	; (8000bfc <_ZN9OneButton3runEv+0x8a8>)
 8000b60:	8013      	strh	r3, [r2, #0]
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 8000b62:	ab02      	add	r3, sp, #8
 8000b64:	7dda      	ldrb	r2, [r3, #23]
 8000b66:	7d9b      	ldrb	r3, [r3, #22]
 8000b68:	0212      	lsls	r2, r2, #8
 8000b6a:	4313      	orrs	r3, r2
      *pdwVal++=word;
 8000b6c:	4a24      	ldr	r2, [pc, #144]	; (8000c00 <_ZN9OneButton3runEv+0x8ac>)
 8000b6e:	8013      	strh	r3, [r2, #0]
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 8000b70:	ab02      	add	r3, sp, #8
 8000b72:	7e5a      	ldrb	r2, [r3, #25]
 8000b74:	7e1b      	ldrb	r3, [r3, #24]
 8000b76:	0212      	lsls	r2, r2, #8
 8000b78:	4313      	orrs	r3, r2
      *pdwVal++=word;
 8000b7a:	4a22      	ldr	r2, [pc, #136]	; (8000c04 <_ZN9OneButton3runEv+0x8b0>)
 8000b7c:	8013      	strh	r3, [r2, #0]
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 8000b7e:	ab02      	add	r3, sp, #8
 8000b80:	7eda      	ldrb	r2, [r3, #27]
 8000b82:	7e9b      	ldrb	r3, [r3, #26]
 8000b84:	0212      	lsls	r2, r2, #8
 8000b86:	4313      	orrs	r3, r2
      *pdwVal++=word;
 8000b88:	4a1f      	ldr	r2, [pc, #124]	; (8000c08 <_ZN9OneButton3runEv+0x8b4>)
 8000b8a:	8013      	strh	r3, [r2, #0]
    ep.ptr+=length;
 8000b8c:	ab09      	add	r3, sp, #36	; 0x24
    ep.remaining-=length;
 8000b8e:	aa02      	add	r2, sp, #8
    ep.ptr+=length;
 8000b90:	9366      	str	r3, [sp, #408]	; 0x198
    ep.remaining-=length;
 8000b92:	1852      	adds	r2, r2, r1
 8000b94:	234c      	movs	r3, #76	; 0x4c
 8000b96:	4641      	mov	r1, r8
 8000b98:	52d1      	strh	r1, [r2, r3]
    USBR_BDT[endpointIndex].tx.count=length;
 8000b9a:	2208      	movs	r2, #8
 8000b9c:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <_ZN9OneButton3runEv+0x8b8>)
    value=*epreg & USB_EPTX_DTOGMASK;
 8000b9e:	491c      	ldr	r1, [pc, #112]	; (8000c10 <_ZN9OneButton3runEv+0x8bc>)
    USBR_BDT[endpointIndex].tx.count=length;
 8000ba0:	805a      	strh	r2, [r3, #2]
    value=*epreg & USB_EPTX_DTOGMASK;
 8000ba2:	880b      	ldrh	r3, [r1, #0]
 8000ba4:	4a1b      	ldr	r2, [pc, #108]	; (8000c14 <_ZN9OneButton3runEv+0x8c0>)
 8000ba6:	4013      	ands	r3, r2
      reg^=USB_EPTX_DTOG2;
 8000ba8:	2230      	movs	r2, #48	; 0x30
 8000baa:	405a      	eors	r2, r3
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <_ZN9OneButton3runEv+0x8c4>)
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	800b      	strh	r3, [r1, #0]
 8000bb4:	e6fd      	b.n	80009b2 <_ZN9OneButton3runEv+0x65e>
 8000bb6:	105b      	asrs	r3, r3, #1
 8000bb8:	18c0      	adds	r0, r0, r3
 8000bba:	2105      	movs	r1, #5
 8000bbc:	4790      	blx	r2
  void _M_incr() { _M_node = _M_node->_M_next; }
 8000bbe:	683f      	ldr	r7, [r7, #0]
 8000bc0:	2f00      	cmp	r7, #0
 8000bc2:	d000      	beq.n	8000bc6 <_ZN9OneButton3runEv+0x872>
 8000bc4:	e61a      	b.n	80007fc <_ZN9OneButton3runEv+0x4a8>
 8000bc6:	e62d      	b.n	8000824 <_ZN9OneButton3runEv+0x4d0>
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8000bc8:	ab15      	add	r3, sp, #84	; 0x54
 8000bca:	985c      	ldr	r0, [sp, #368]	; 0x170
 8000bcc:	cc24      	ldmia	r4!, {r2, r5}
 8000bce:	c324      	stmia	r3!, {r2, r5}
 8000bd0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8000bd2:	9a15      	ldr	r2, [sp, #84]	; 0x54
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8000bd4:	4219      	tst	r1, r3
 8000bd6:	d009      	beq.n	8000bec <_ZN9OneButton3runEv+0x898>
 8000bd8:	105b      	asrs	r3, r3, #1
 8000bda:	18c0      	adds	r0, r0, r3
 8000bdc:	6803      	ldr	r3, [r0, #0]
 8000bde:	589a      	ldr	r2, [r3, r2]
 8000be0:	2105      	movs	r1, #5
 8000be2:	4790      	blx	r2
 8000be4:	e61e      	b.n	8000824 <_ZN9OneButton3runEv+0x4d0>
 8000be6:	105b      	asrs	r3, r3, #1
 8000be8:	18c0      	adds	r0, r0, r3
 8000bea:	e5cb      	b.n	8000784 <_ZN9OneButton3runEv+0x430>
 8000bec:	105b      	asrs	r3, r3, #1
 8000bee:	18c0      	adds	r0, r0, r3
 8000bf0:	e7f6      	b.n	8000be0 <_ZN9OneButton3runEv+0x88c>
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	00080008 	.word	0x00080008
 8000bf8:	00980009 	.word	0x00980009
 8000bfc:	40006098 	.word	0x40006098
 8000c00:	4000609a 	.word	0x4000609a
 8000c04:	4000609c 	.word	0x4000609c
 8000c08:	4000609e 	.word	0x4000609e
 8000c0c:	40006008 	.word	0x40006008
 8000c10:	40005c04 	.word	0x40005c04
 8000c14:	ffff8fbf 	.word	0xffff8fbf
 8000c18:	ffff8080 	.word	0xffff8080

08000c1c <main>:

/*
 * Main entry point
 */

int main() {
 8000c1c:	b500      	push	{lr}
 8000c1e:	b0d5      	sub	sp, #340	; 0x154

  Nvic::initialise();

  // set up SysTick at 1ms resolution
  MillisecondTimer::initialise();
 8000c20:	f001 fbdc 	bl	80023dc <_ZN9stm32plus16MillisecondTimer10initialiseEv>
class OneButton {
 8000c24:	2301      	movs	r3, #1
 8000c26:	22a0      	movs	r2, #160	; 0xa0
 8000c28:	4669      	mov	r1, sp
 8000c2a:	934f      	str	r3, [sp, #316]	; 0x13c
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	0052      	lsls	r2, r2, #1
 8000c30:	548b      	strb	r3, [r1, r2]

  OneButton onebutton;
  onebutton.run();
 8000c32:	4668      	mov	r0, sp
class OneButton {
 8000c34:	320c      	adds	r2, #12
 8000c36:	548b      	strb	r3, [r1, r2]
  onebutton.run();
 8000c38:	f7ff fb8c 	bl	8000354 <_ZN9OneButton3runEv>

08000c3c <_ZNK4wink6signalINS_4slotIFvN9stm32plus13UsbStatusTypeEEEEE10raiseEventIJRS3_EEEvDpOT_>:
      void raiseEvent(Args&&... args) const {
 8000c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c3e:	46ce      	mov	lr, r9
 8000c40:	4647      	mov	r7, r8
 8000c42:	b580      	push	{r7, lr}
  size_type size() const { return __slist_size(this->_M_head._M_next); }
 8000c44:	68c4      	ldr	r4, [r0, #12]
 8000c46:	b085      	sub	sp, #20
 8000c48:	000e      	movs	r6, r1
  for ( ; __node != 0; __node = __node->_M_next)
 8000c4a:	2c00      	cmp	r4, #0
 8000c4c:	d01f      	beq.n	8000c8e <_ZNK4wink6signalINS_4slotIFvN9stm32plus13UsbStatusTypeEEEEE10raiseEventIJRS3_EEEvDpOT_+0x52>
 8000c4e:	0023      	movs	r3, r4
 8000c50:	2200      	movs	r2, #0
 8000c52:	681b      	ldr	r3, [r3, #0]
    ++__result;
 8000c54:	3201      	adds	r2, #1
  for ( ; __node != 0; __node = __node->_M_next)
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d1fb      	bne.n	8000c52 <_ZNK4wink6signalINS_4slotIFvN9stm32plus13UsbStatusTypeEEEEE10raiseEventIJRS3_EEEvDpOT_+0x16>
        if(_slots.size()==1)
 8000c5a:	2a01      	cmp	r2, #1
 8000c5c:	d023      	beq.n	8000ca6 <_ZNK4wink6signalINS_4slotIFvN9stm32plus13UsbStatusTypeEEEEE10raiseEventIJRS3_EEEvDpOT_+0x6a>
 8000c5e:	ab02      	add	r3, sp, #8
 8000c60:	4699      	mov	r9, r3
 8000c62:	2301      	movs	r3, #1
 8000c64:	4698      	mov	r8, r3
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8000c66:	0023      	movs	r3, r4
 8000c68:	464a      	mov	r2, r9
 8000c6a:	3308      	adds	r3, #8
 8000c6c:	6831      	ldr	r1, [r6, #0]
 8000c6e:	6860      	ldr	r0, [r4, #4]
 8000c70:	cba0      	ldmia	r3!, {r5, r7}
 8000c72:	c2a0      	stmia	r2!, {r5, r7}
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8000c74:	4645      	mov	r5, r8
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8000c76:	9b03      	ldr	r3, [sp, #12]
 8000c78:	9a02      	ldr	r2, [sp, #8]
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8000c7a:	421d      	tst	r5, r3
 8000c7c:	d00c      	beq.n	8000c98 <_ZNK4wink6signalINS_4slotIFvN9stm32plus13UsbStatusTypeEEEEE10raiseEventIJRS3_EEEvDpOT_+0x5c>
 8000c7e:	105b      	asrs	r3, r3, #1
 8000c80:	18c0      	adds	r0, r0, r3
 8000c82:	6803      	ldr	r3, [r0, #0]
 8000c84:	589b      	ldr	r3, [r3, r2]
 8000c86:	4798      	blx	r3
  void _M_incr() { _M_node = _M_node->_M_next; }
 8000c88:	6824      	ldr	r4, [r4, #0]
          for(auto it=_slots.begin();it!=_slots.end();it++)
 8000c8a:	2c00      	cmp	r4, #0
 8000c8c:	d1eb      	bne.n	8000c66 <_ZNK4wink6signalINS_4slotIFvN9stm32plus13UsbStatusTypeEEEEE10raiseEventIJRS3_EEEvDpOT_+0x2a>
            (*it)(args...);
        }
      }
 8000c8e:	b005      	add	sp, #20
 8000c90:	bc0c      	pop	{r2, r3}
 8000c92:	4690      	mov	r8, r2
 8000c94:	4699      	mov	r9, r3
 8000c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c98:	105b      	asrs	r3, r3, #1
 8000c9a:	18c0      	adds	r0, r0, r3
 8000c9c:	4790      	blx	r2
 8000c9e:	6824      	ldr	r4, [r4, #0]
          for(auto it=_slots.begin();it!=_slots.end();it++)
 8000ca0:	2c00      	cmp	r4, #0
 8000ca2:	d1e0      	bne.n	8000c66 <_ZNK4wink6signalINS_4slotIFvN9stm32plus13UsbStatusTypeEEEEE10raiseEventIJRS3_EEEvDpOT_+0x2a>
 8000ca4:	e7f3      	b.n	8000c8e <_ZNK4wink6signalINS_4slotIFvN9stm32plus13UsbStatusTypeEEEEE10raiseEventIJRS3_EEEvDpOT_+0x52>
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8000ca6:	466b      	mov	r3, sp
 8000ca8:	c810      	ldmia	r0!, {r4}
 8000caa:	6831      	ldr	r1, [r6, #0]
 8000cac:	c860      	ldmia	r0!, {r5, r6}
 8000cae:	c360      	stmia	r3!, {r5, r6}
 8000cb0:	9b01      	ldr	r3, [sp, #4]
 8000cb2:	9d00      	ldr	r5, [sp, #0]
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8000cb4:	421a      	tst	r2, r3
 8000cb6:	d005      	beq.n	8000cc4 <_ZNK4wink6signalINS_4slotIFvN9stm32plus13UsbStatusTypeEEEEE10raiseEventIJRS3_EEEvDpOT_+0x88>
 8000cb8:	105b      	asrs	r3, r3, #1
 8000cba:	18e0      	adds	r0, r4, r3
 8000cbc:	6803      	ldr	r3, [r0, #0]
 8000cbe:	595d      	ldr	r5, [r3, r5]
 8000cc0:	47a8      	blx	r5
 8000cc2:	e7e4      	b.n	8000c8e <_ZNK4wink6signalINS_4slotIFvN9stm32plus13UsbStatusTypeEEEEE10raiseEventIJRS3_EEEvDpOT_+0x52>
 8000cc4:	105b      	asrs	r3, r3, #1
 8000cc6:	18e0      	adds	r0, r4, r3
 8000cc8:	47a8      	blx	r5
 8000cca:	e7e0      	b.n	8000c8e <_ZNK4wink6signalINS_4slotIFvN9stm32plus13UsbStatusTypeEEEEE10raiseEventIJRS3_EEEvDpOT_+0x52>

08000ccc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE>:
    switch(header.bmRequest & USB_REQ_TYPE_MASK) {
 8000ccc:	2360      	movs	r3, #96	; 0x60
 8000cce:	780a      	ldrb	r2, [r1, #0]
  inline void UsbKeyboard<TConfiguration,Features...>::handleSetup(const UsbSetupHeader& header) {
 8000cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch(header.bmRequest & USB_REQ_TYPE_MASK) {
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	d100      	bne.n	8000cd8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0xc>
 8000cd6:	e06e      	b.n	8000db6 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0xea>
 8000cd8:	2b20      	cmp	r3, #32
 8000cda:	d13a      	bne.n	8000d52 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x86>
    switch(header.bRequest) {
 8000cdc:	784b      	ldrb	r3, [r1, #1]
 8000cde:	2b0b      	cmp	r3, #11
 8000ce0:	d900      	bls.n	8000ce4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x18>
 8000ce2:	e06f      	b.n	8000dc4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0xf8>
 8000ce4:	4a7e      	ldr	r2, [pc, #504]	; (8000ee0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x214>)
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	58d3      	ldr	r3, [r2, r3]
 8000cea:	469f      	mov	pc, r3
        _reportAvailable=true;            // incoming report
 8000cec:	235c      	movs	r3, #92	; 0x5c
 8000cee:	2401      	movs	r4, #1
 8000cf0:	54c4      	strb	r4, [r0, r3]
        _controlEndpointState=ControlEndpointStateType::DATA_OUT;
 8000cf2:	3b59      	subs	r3, #89	; 0x59
 8000cf4:	6383      	str	r3, [r0, #56]	; 0x38
        USBR_BDT[0].rx.setRxCount(header.wLength);
 8000cf6:	88cb      	ldrh	r3, [r1, #6]

    void setRxCount(int length) volatile {

      uint16_t wNBlocks;

      if((length)>62) {
 8000cf8:	2b3e      	cmp	r3, #62	; 0x3e
 8000cfa:	dd00      	ble.n	8000cfe <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x32>
 8000cfc:	e0b2      	b.n	8000e64 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x198>

        count=(wNBlocks << 10) | 0x8000;
      }
      else {

        wNBlocks=length >> 1;
 8000cfe:	085a      	lsrs	r2, r3, #1

        if((length & 0x1)!=0)
 8000d00:	421c      	tst	r4, r3
 8000d02:	d000      	beq.n	8000d06 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x3a>
          wNBlocks++;
 8000d04:	3201      	adds	r2, #1

        count=wNBlocks << 10;
 8000d06:	0292      	lsls	r2, r2, #10
 8000d08:	4b76      	ldr	r3, [pc, #472]	; (8000ee4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x218>)
 8000d0a:	b292      	uxth	r2, r2
 8000d0c:	805a      	strh	r2, [r3, #2]
    value=*epreg & USB_EPRX_DTOGMASK;
 8000d0e:	4976      	ldr	r1, [pc, #472]	; (8000ee8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x21c>)
 8000d10:	4a76      	ldr	r2, [pc, #472]	; (8000eec <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x220>)
 8000d12:	880b      	ldrh	r3, [r1, #0]
    _inEndpointData[endpointIndex].total=length;
 8000d14:	2442      	movs	r4, #66	; 0x42
    value=*epreg & USB_EPRX_DTOGMASK;
 8000d16:	401a      	ands	r2, r3
      reg^=USB_EPRX_DTOG2;
 8000d18:	23c0      	movs	r3, #192	; 0xc0
 8000d1a:	019b      	lsls	r3, r3, #6
 8000d1c:	4053      	eors	r3, r2
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8000d1e:	4a74      	ldr	r2, [pc, #464]	; (8000ef0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x224>)
    _inEndpointData[endpointIndex].pmaAddress=pmaInAddress;
 8000d20:	2546      	movs	r5, #70	; 0x46
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8000d22:	4313      	orrs	r3, r2
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	800b      	strh	r3, [r1, #0]
    _controlEndpointState=ControlEndpointStateType::STATUS_IN;
 8000d28:	2304      	movs	r3, #4
 8000d2a:	6383      	str	r3, [r0, #56]	; 0x38
    _inEndpointData[endpointIndex].total=length;
 8000d2c:	2300      	movs	r3, #0
    _inEndpointData[endpointIndex].pmaAddress=pmaInAddress;
 8000d2e:	2658      	movs	r6, #88	; 0x58
    _inEndpointData[endpointIndex].total=length;
 8000d30:	5303      	strh	r3, [r0, r4]
    _inEndpointData[endpointIndex].remaining=length;
 8000d32:	3c02      	subs	r4, #2
 8000d34:	5303      	strh	r3, [r0, r4]
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 8000d36:	63c3      	str	r3, [r0, #60]	; 0x3c
    _inEndpointData[endpointIndex].pmaAddress=pmaInAddress;
 8000d38:	5346      	strh	r6, [r0, r5]
    _inEndpointData[endpointIndex].maxPacketSize=maxPacketSize;
 8000d3a:	3d02      	subs	r5, #2
 8000d3c:	5344      	strh	r4, [r0, r5]
    USBR_BDT[endpointIndex].tx.count=length;
 8000d3e:	486d      	ldr	r0, [pc, #436]	; (8000ef4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x228>)
 8000d40:	8043      	strh	r3, [r0, #2]
    value=*epreg & USB_EPTX_DTOGMASK;
 8000d42:	880b      	ldrh	r3, [r1, #0]
 8000d44:	486c      	ldr	r0, [pc, #432]	; (8000ef8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x22c>)
 8000d46:	4003      	ands	r3, r0
      reg^=USB_EPTX_DTOG2;
 8000d48:	2030      	movs	r0, #48	; 0x30
 8000d4a:	4043      	eors	r3, r0
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	b292      	uxth	r2, r2
 8000d50:	800a      	strh	r2, [r1, #0]
  }
 8000d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    _controlEndpointState=ControlEndpointStateType::DATA_IN;
 8000d54:	2302      	movs	r3, #2
 8000d56:	6383      	str	r3, [r0, #56]	; 0x38
        sendControlData(&_protocol,1);
 8000d58:	0003      	movs	r3, r0
 8000d5a:	3356      	adds	r3, #86	; 0x56
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 8000d5c:	63c3      	str	r3, [r0, #60]	; 0x3c
    _inEndpointData[endpointIndex].remaining=length;
 8000d5e:	4b67      	ldr	r3, [pc, #412]	; (8000efc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x230>)
 8000d60:	6403      	str	r3, [r0, #64]	; 0x40
 8000d62:	4b67      	ldr	r3, [pc, #412]	; (8000f00 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x234>)
 8000d64:	6443      	str	r3, [r0, #68]	; 0x44
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 8000d66:	2357      	movs	r3, #87	; 0x57
 8000d68:	5cc2      	ldrb	r2, [r0, r3]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	5cc3      	ldrb	r3, [r0, r3]
 8000d6e:	0212      	lsls	r2, r2, #8
 8000d70:	4313      	orrs	r3, r2
      *pdwVal++=word;
 8000d72:	4a64      	ldr	r2, [pc, #400]	; (8000f04 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x238>)
 8000d74:	8013      	strh	r3, [r2, #0]
    ep.remaining-=length;
 8000d76:	2240      	movs	r2, #64	; 0x40
    ep.ptr+=length;
 8000d78:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	63c3      	str	r3, [r0, #60]	; 0x3c
    ep.remaining-=length;
 8000d7e:	5a83      	ldrh	r3, [r0, r2]
 8000d80:	3b01      	subs	r3, #1
 8000d82:	5283      	strh	r3, [r0, r2]
    USBR_BDT[endpointIndex].tx.count=length;
 8000d84:	4b5b      	ldr	r3, [pc, #364]	; (8000ef4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x228>)
 8000d86:	3a3f      	subs	r2, #63	; 0x3f
 8000d88:	805a      	strh	r2, [r3, #2]
    value=*epreg & USB_EPTX_DTOGMASK;
 8000d8a:	4957      	ldr	r1, [pc, #348]	; (8000ee8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x21c>)
 8000d8c:	4a5a      	ldr	r2, [pc, #360]	; (8000ef8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x22c>)
 8000d8e:	880b      	ldrh	r3, [r1, #0]
 8000d90:	4013      	ands	r3, r2
      reg^=USB_EPTX_DTOG2;
 8000d92:	2230      	movs	r2, #48	; 0x30
 8000d94:	405a      	eors	r2, r3
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8000d96:	4b56      	ldr	r3, [pc, #344]	; (8000ef0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x224>)
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	800b      	strh	r3, [r1, #0]
 8000d9e:	e7d8      	b.n	8000d52 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x86>
    _controlEndpointState=ControlEndpointStateType::DATA_IN;
 8000da0:	2302      	movs	r3, #2
 8000da2:	6383      	str	r3, [r0, #56]	; 0x38
        sendControlData(&_idleState,1);
 8000da4:	0003      	movs	r3, r0
 8000da6:	3357      	adds	r3, #87	; 0x57
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 8000da8:	63c3      	str	r3, [r0, #60]	; 0x3c
    _inEndpointData[endpointIndex].remaining=length;
 8000daa:	4b54      	ldr	r3, [pc, #336]	; (8000efc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x230>)
 8000dac:	6403      	str	r3, [r0, #64]	; 0x40
 8000dae:	4b54      	ldr	r3, [pc, #336]	; (8000f00 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x234>)
 8000db0:	6443      	str	r3, [r0, #68]	; 0x44
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 8000db2:	2358      	movs	r3, #88	; 0x58
 8000db4:	e7d8      	b.n	8000d68 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x9c>
    switch(header.bRequest) {
 8000db6:	784a      	ldrb	r2, [r1, #1]
 8000db8:	2a0a      	cmp	r2, #10
 8000dba:	d017      	beq.n	8000dec <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x120>
 8000dbc:	2a0b      	cmp	r2, #11
 8000dbe:	d020      	beq.n	8000e02 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x136>
 8000dc0:	2a06      	cmp	r2, #6
 8000dc2:	d039      	beq.n	8000e38 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x16c>
    value=*epreg & USB_EPRX_DTOGMASK;
 8000dc4:	4948      	ldr	r1, [pc, #288]	; (8000ee8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x21c>)
 8000dc6:	4a49      	ldr	r2, [pc, #292]	; (8000eec <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x220>)
 8000dc8:	880b      	ldrh	r3, [r1, #0]
    value=*epreg & USB_EPTX_DTOGMASK;
 8000dca:	484b      	ldr	r0, [pc, #300]	; (8000ef8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x22c>)
    value=*epreg & USB_EPRX_DTOGMASK;
 8000dcc:	401a      	ands	r2, r3
      reg^=USB_EPRX_DTOG1;
 8000dce:	2380      	movs	r3, #128	; 0x80
 8000dd0:	015b      	lsls	r3, r3, #5
 8000dd2:	4053      	eors	r3, r2
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8000dd4:	4a46      	ldr	r2, [pc, #280]	; (8000ef0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x224>)
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	800b      	strh	r3, [r1, #0]
    value=*epreg & USB_EPTX_DTOGMASK;
 8000ddc:	880b      	ldrh	r3, [r1, #0]
 8000dde:	4003      	ands	r3, r0
      reg^=USB_EPTX_DTOG1;
 8000de0:	2010      	movs	r0, #16
 8000de2:	4043      	eors	r3, r0
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8000de4:	431a      	orrs	r2, r3
 8000de6:	b292      	uxth	r2, r2
 8000de8:	800a      	strh	r2, [r1, #0]
  }
 8000dea:	e7b2      	b.n	8000d52 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x86>
    _controlEndpointState=ControlEndpointStateType::DATA_IN;
 8000dec:	2302      	movs	r3, #2
 8000dee:	6383      	str	r3, [r0, #56]	; 0x38
        sendControlData(&_altSetting,1);
 8000df0:	0003      	movs	r3, r0
 8000df2:	3358      	adds	r3, #88	; 0x58
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 8000df4:	63c3      	str	r3, [r0, #60]	; 0x3c
    _inEndpointData[endpointIndex].remaining=length;
 8000df6:	4b41      	ldr	r3, [pc, #260]	; (8000efc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x230>)
 8000df8:	6403      	str	r3, [r0, #64]	; 0x40
 8000dfa:	4b41      	ldr	r3, [pc, #260]	; (8000f00 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x234>)
 8000dfc:	6443      	str	r3, [r0, #68]	; 0x44
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 8000dfe:	2359      	movs	r3, #89	; 0x59
 8000e00:	e7b2      	b.n	8000d68 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x9c>
        _altSetting=header.wValue;
 8000e02:	2258      	movs	r2, #88	; 0x58
 8000e04:	8849      	ldrh	r1, [r1, #2]
 8000e06:	5481      	strb	r1, [r0, r2]
    _controlEndpointState=ControlEndpointStateType::STATUS_IN;
 8000e08:	3a54      	subs	r2, #84	; 0x54
 8000e0a:	6382      	str	r2, [r0, #56]	; 0x38
    _inEndpointData[endpointIndex].remaining=length;
 8000e0c:	4a3c      	ldr	r2, [pc, #240]	; (8000f00 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x234>)
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 8000e0e:	63c3      	str	r3, [r0, #60]	; 0x3c
    _inEndpointData[endpointIndex].remaining=length;
 8000e10:	6442      	str	r2, [r0, #68]	; 0x44
    USBR_BDT[endpointIndex].tx.count=length;
 8000e12:	4a38      	ldr	r2, [pc, #224]	; (8000ef4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x228>)
    _inEndpointData[endpointIndex].remaining=length;
 8000e14:	6403      	str	r3, [r0, #64]	; 0x40
    USBR_BDT[endpointIndex].tx.count=length;
 8000e16:	8053      	strh	r3, [r2, #2]
 8000e18:	e7b7      	b.n	8000d8a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0xbe>
        _protocol=header.wValue;
 8000e1a:	2356      	movs	r3, #86	; 0x56
 8000e1c:	884a      	ldrh	r2, [r1, #2]
 8000e1e:	54c2      	strb	r2, [r0, r3]
    _controlEndpointState=ControlEndpointStateType::STATUS_IN;
 8000e20:	3b52      	subs	r3, #82	; 0x52
 8000e22:	6383      	str	r3, [r0, #56]	; 0x38
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 8000e24:	2300      	movs	r3, #0
 8000e26:	e7f1      	b.n	8000e0c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x140>
        _idleState=header.wValue >> 8;
 8000e28:	2257      	movs	r2, #87	; 0x57
 8000e2a:	884b      	ldrh	r3, [r1, #2]
 8000e2c:	121b      	asrs	r3, r3, #8
 8000e2e:	5483      	strb	r3, [r0, r2]
    _controlEndpointState=ControlEndpointStateType::STATUS_IN;
 8000e30:	2304      	movs	r3, #4
 8000e32:	6383      	str	r3, [r0, #56]	; 0x38
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 8000e34:	2300      	movs	r3, #0
 8000e36:	e7e9      	b.n	8000e0c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x140>
        if(header.wValue >> 8==USB_DESC_TYPE_HID_REPORT) {
 8000e38:	884a      	ldrh	r2, [r1, #2]
 8000e3a:	1212      	asrs	r2, r2, #8
 8000e3c:	2a22      	cmp	r2, #34	; 0x22
 8000e3e:	d047      	beq.n	8000ed0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x204>
        else if(header.wValue >> 8==USB_DESC_TYPE_HID_DESCRIPTOR) {
 8000e40:	2a21      	cmp	r2, #33	; 0x21
 8000e42:	d01b      	beq.n	8000e7c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x1b0>
    _controlEndpointState=ControlEndpointStateType::DATA_IN;
 8000e44:	2202      	movs	r2, #2
    _inEndpointData[endpointIndex].remaining=length;
 8000e46:	6403      	str	r3, [r0, #64]	; 0x40
 8000e48:	4b2d      	ldr	r3, [pc, #180]	; (8000f00 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x234>)
    _controlEndpointState=ControlEndpointStateType::DATA_IN;
 8000e4a:	6382      	str	r2, [r0, #56]	; 0x38
    _inEndpointData[endpointIndex].remaining=length;
 8000e4c:	6443      	str	r3, [r0, #68]	; 0x44
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2700      	movs	r7, #0
          pbuf=nullptr;
 8000e52:	2300      	movs	r3, #0
          len=0;
 8000e54:	2600      	movs	r6, #0
    ep.ptr+=length;
 8000e56:	19db      	adds	r3, r3, r7
 8000e58:	63c3      	str	r3, [r0, #60]	; 0x3c
    ep.remaining-=length;
 8000e5a:	2340      	movs	r3, #64	; 0x40
 8000e5c:	52c2      	strh	r2, [r0, r3]
    USBR_BDT[endpointIndex].tx.count=length;
 8000e5e:	4b25      	ldr	r3, [pc, #148]	; (8000ef4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x228>)
 8000e60:	805e      	strh	r6, [r3, #2]
 8000e62:	e792      	b.n	8000d8a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0xbe>
        wNBlocks = length >> 5;
 8000e64:	095a      	lsrs	r2, r3, #5
        if((length & 0x1f)==0)
 8000e66:	06db      	lsls	r3, r3, #27
 8000e68:	d101      	bne.n	8000e6e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x1a2>
          wNBlocks--;
 8000e6a:	3a01      	subs	r2, #1
 8000e6c:	b292      	uxth	r2, r2
        count=(wNBlocks << 10) | 0x8000;
 8000e6e:	4b26      	ldr	r3, [pc, #152]	; (8000f08 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x23c>)
 8000e70:	0292      	lsls	r2, r2, #10
 8000e72:	431a      	orrs	r2, r3
 8000e74:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x218>)
 8000e76:	b292      	uxth	r2, r2
 8000e78:	805a      	strh	r2, [r3, #2]
 8000e7a:	e748      	b.n	8000d0e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x42>
          len=sizeof(_hidDescriptor);
 8000e7c:	2509      	movs	r5, #9
          pbuf=const_cast<uint8_t *>(_hidDescriptor);
 8000e7e:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x240>)
        else if(header.wValue >> 8==USB_DESC_TYPE_HID_DESCRIPTOR) {
 8000e80:	3a18      	subs	r2, #24
        sendControlData(pbuf,header.wLength<len ? header.wLength : len);
 8000e82:	88ce      	ldrh	r6, [r1, #6]
 8000e84:	0034      	movs	r4, r6
 8000e86:	4296      	cmp	r6, r2
 8000e88:	da26      	bge.n	8000ed8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x20c>
    _controlEndpointState=ControlEndpointStateType::DATA_IN;
 8000e8a:	2202      	movs	r2, #2
    _inEndpointData[endpointIndex].pmaAddress=pmaInAddress;
 8000e8c:	2146      	movs	r1, #70	; 0x46
 8000e8e:	2558      	movs	r5, #88	; 0x58
    _controlEndpointState=ControlEndpointStateType::DATA_IN;
 8000e90:	6382      	str	r2, [r0, #56]	; 0x38
    _inEndpointData[endpointIndex].total=length;
 8000e92:	3240      	adds	r2, #64	; 0x40
 8000e94:	5286      	strh	r6, [r0, r2]
    _inEndpointData[endpointIndex].remaining=length;
 8000e96:	3a02      	subs	r2, #2
 8000e98:	5286      	strh	r6, [r0, r2]
 8000e9a:	3401      	adds	r4, #1
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 8000e9c:	63c3      	str	r3, [r0, #60]	; 0x3c
    _inEndpointData[endpointIndex].pmaAddress=pmaInAddress;
 8000e9e:	5245      	strh	r5, [r0, r1]
    _inEndpointData[endpointIndex].maxPacketSize=maxPacketSize;
 8000ea0:	3902      	subs	r1, #2
 8000ea2:	5242      	strh	r2, [r0, r1]
 8000ea4:	1064      	asrs	r4, r4, #1
 8000ea6:	0037      	movs	r7, r6
    for(i=n;i!=0;i--) {
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2c00      	cmp	r4, #0
 8000eac:	d0d3      	beq.n	8000e56 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x18a>
      *pdwVal++=word;
 8000eae:	4d15      	ldr	r5, [pc, #84]	; (8000f04 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x238>)
 8000eb0:	1aed      	subs	r5, r5, r3
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 8000eb2:	7859      	ldrb	r1, [r3, #1]
 8000eb4:	781a      	ldrb	r2, [r3, #0]
 8000eb6:	0209      	lsls	r1, r1, #8
 8000eb8:	430a      	orrs	r2, r1
    for(i=n;i!=0;i--) {
 8000eba:	3c01      	subs	r4, #1
      *pdwVal++=word;
 8000ebc:	535a      	strh	r2, [r3, r5]
      dataBytes+=2;
 8000ebe:	3302      	adds	r3, #2
    for(i=n;i!=0;i--) {
 8000ec0:	2c00      	cmp	r4, #0
 8000ec2:	d1f6      	bne.n	8000eb2 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x1e6>
 8000ec4:	2240      	movs	r2, #64	; 0x40
 8000ec6:	5a82      	ldrh	r2, [r0, r2]
 8000ec8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000eca:	1b92      	subs	r2, r2, r6
 8000ecc:	b292      	uxth	r2, r2
 8000ece:	e7c2      	b.n	8000e56 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x18a>
        if(header.wValue >> 8==USB_DESC_TYPE_HID_REPORT) {
 8000ed0:	223f      	movs	r2, #63	; 0x3f
          len=sizeof(_reportDescriptor);
 8000ed2:	253f      	movs	r5, #63	; 0x3f
          pbuf=const_cast<uint8_t *>(_reportDescriptor);
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x244>)
 8000ed6:	e7d4      	b.n	8000e82 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x1b6>
        sendControlData(pbuf,header.wLength<len ? header.wLength : len);
 8000ed8:	0014      	movs	r4, r2
 8000eda:	002e      	movs	r6, r5
 8000edc:	e7d5      	b.n	8000e8a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x1be>
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	0800326c 	.word	0x0800326c
 8000ee4:	40006004 	.word	0x40006004
 8000ee8:	40005c00 	.word	0x40005c00
 8000eec:	ffffbf8f 	.word	0xffffbf8f
 8000ef0:	ffff8080 	.word	0xffff8080
 8000ef4:	40006000 	.word	0x40006000
 8000ef8:	ffff8fbf 	.word	0xffff8fbf
 8000efc:	00010001 	.word	0x00010001
 8000f00:	00580040 	.word	0x00580040
 8000f04:	40006058 	.word	0x40006058
 8000f08:	ffff8000 	.word	0xffff8000
 8000f0c:	080032e0 	.word	0x080032e0
 8000f10:	080032ec 	.word	0x080032ec

08000f14 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv>:
  inline void UsbKeyboard<TConfiguration,Features...>::onInterrupt() {
 8000f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f16:	4645      	mov	r5, r8
 8000f18:	46de      	mov	lr, fp
 8000f1a:	4657      	mov	r7, sl
 8000f1c:	464e      	mov	r6, r9
    if((USBR->ISTR & USB_ISTR_CTR)!=0)
 8000f1e:	2344      	movs	r3, #68	; 0x44
  inline void UsbKeyboard<TConfiguration,Features...>::onInterrupt() {
 8000f20:	b5e0      	push	{r5, r6, r7, lr}
    if((USBR->ISTR & USB_ISTR_CTR)!=0)
 8000f22:	4abc      	ldr	r2, [pc, #752]	; (8001214 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x300>)
  inline void UsbKeyboard<TConfiguration,Features...>::onInterrupt() {
 8000f24:	b0b5      	sub	sp, #212	; 0xd4
    if((USBR->ISTR & USB_ISTR_CTR)!=0)
 8000f26:	5ad3      	ldrh	r3, [r2, r3]
  inline void UsbKeyboard<TConfiguration,Features...>::onInterrupt() {
 8000f28:	0005      	movs	r5, r0
    if((USBR->ISTR & USB_ISTR_CTR)!=0)
 8000f2a:	b21b      	sxth	r3, r3
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	da00      	bge.n	8000f32 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1e>
 8000f30:	e082      	b.n	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
    if((USBR->ISTR & USB_ISTR_RESET)!=0)
 8000f32:	2244      	movs	r2, #68	; 0x44
 8000f34:	4bb7      	ldr	r3, [pc, #732]	; (8001214 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x300>)
 8000f36:	5a99      	ldrh	r1, [r3, r2]
 8000f38:	0549      	lsls	r1, r1, #21
 8000f3a:	d500      	bpl.n	8000f3e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x2a>
 8000f3c:	e2a0      	b.n	8001480 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x56c>
    if((USBR->ISTR & USB_ISTR_PMAOVR)!=0)
 8000f3e:	2344      	movs	r3, #68	; 0x44
 8000f40:	4ab4      	ldr	r2, [pc, #720]	; (8001214 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x300>)
 8000f42:	5ad1      	ldrh	r1, [r2, r3]
 8000f44:	0449      	lsls	r1, r1, #17
 8000f46:	d500      	bpl.n	8000f4a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x36>
 8000f48:	e17c      	b.n	8001244 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x330>
    if((USBR->ISTR & USB_ISTR_ERR)!=0)
 8000f4a:	2344      	movs	r3, #68	; 0x44
 8000f4c:	4ab1      	ldr	r2, [pc, #708]	; (8001214 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x300>)
 8000f4e:	5ad1      	ldrh	r1, [r2, r3]
 8000f50:	0489      	lsls	r1, r1, #18
 8000f52:	d500      	bpl.n	8000f56 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x42>
 8000f54:	e1a6      	b.n	80012a4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x390>
    if((USBR->ISTR & USB_ISTR_WKUP)!=0)
 8000f56:	2244      	movs	r2, #68	; 0x44
 8000f58:	4bae      	ldr	r3, [pc, #696]	; (8001214 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x300>)
 8000f5a:	5a99      	ldrh	r1, [r3, r2]
 8000f5c:	04c9      	lsls	r1, r1, #19
 8000f5e:	d500      	bpl.n	8000f62 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x4e>
 8000f60:	e1d0      	b.n	8001304 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x3f0>
    if((USBR->ISTR & USB_ISTR_SUSP)!=0)
 8000f62:	2244      	movs	r2, #68	; 0x44
 8000f64:	4bab      	ldr	r3, [pc, #684]	; (8001214 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x300>)
 8000f66:	5a99      	ldrh	r1, [r3, r2]
 8000f68:	0509      	lsls	r1, r1, #20
 8000f6a:	d500      	bpl.n	8000f6e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x5a>
 8000f6c:	e215      	b.n	800139a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x486>
    if((USBR->ISTR & USB_ISTR_SOF)!=0)
 8000f6e:	2344      	movs	r3, #68	; 0x44
 8000f70:	4aa8      	ldr	r2, [pc, #672]	; (8001214 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x300>)
 8000f72:	5ad1      	ldrh	r1, [r2, r3]
 8000f74:	0589      	lsls	r1, r1, #22
 8000f76:	d500      	bpl.n	8000f7a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x66>
 8000f78:	e24e      	b.n	8001418 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x504>
    if((USBR->ISTR & USB_ISTR_ESOF)!=0)
 8000f7a:	2344      	movs	r3, #68	; 0x44
 8000f7c:	4aa5      	ldr	r2, [pc, #660]	; (8001214 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x300>)
 8000f7e:	5ad1      	ldrh	r1, [r2, r3]
 8000f80:	05c9      	lsls	r1, r1, #23
 8000f82:	d500      	bpl.n	8000f86 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x72>
 8000f84:	e115      	b.n	80011b2 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x29e>
  }
 8000f86:	b035      	add	sp, #212	; 0xd4
 8000f88:	bc3c      	pop	{r2, r3, r4, r5}
 8000f8a:	4690      	mov	r8, r2
 8000f8c:	4699      	mov	r9, r3
 8000f8e:	46a2      	mov	sl, r4
 8000f90:	46ab      	mov	fp, r5
 8000f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f94:	ac28      	add	r4, sp, #160	; 0xa0
    USBR->EP0R=USBR->EP0R & (~USB_EP_CTR_RX) & USB_EPREG_MASK;
 8000f96:	4a9f      	ldr	r2, [pc, #636]	; (8001214 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x300>)
 8000f98:	499f      	ldr	r1, [pc, #636]	; (8001218 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x304>)
 8000f9a:	8813      	ldrh	r3, [r2, #0]

      const uint8_t *ptr;

      ptr=reinterpret_cast<const uint8_t *>(vptr);

      bmRequest=ptr[0];
 8000f9c:	ae26      	add	r6, sp, #152	; 0x98
 8000f9e:	400b      	ands	r3, r1
 8000fa0:	8013      	strh	r3, [r2, #0]
      bRequest=ptr[1];
      wValue=*reinterpret_cast<const uint16_t *>(ptr+2);
      wIndex=*reinterpret_cast<const uint16_t *>(ptr+4);
 8000fa2:	88a3      	ldrh	r3, [r4, #4]
      bmRequest=ptr[0];
 8000fa4:	7821      	ldrb	r1, [r4, #0]
      wIndex=*reinterpret_cast<const uint16_t *>(ptr+4);
 8000fa6:	469c      	mov	ip, r3
 8000fa8:	80b3      	strh	r3, [r6, #4]
    switch(header.bmRequest & 0x1f) {
 8000faa:	231f      	movs	r3, #31
      bRequest=ptr[1];
 8000fac:	7860      	ldrb	r0, [r4, #1]
      wValue=*reinterpret_cast<const uint16_t *>(ptr+2);
 8000fae:	8867      	ldrh	r7, [r4, #2]
      wLength=*reinterpret_cast<const uint16_t *>(ptr+6);
 8000fb0:	88e4      	ldrh	r4, [r4, #6]
      bmRequest=ptr[0];
 8000fb2:	7031      	strb	r1, [r6, #0]
      bRequest=ptr[1];
 8000fb4:	7070      	strb	r0, [r6, #1]
      wValue=*reinterpret_cast<const uint16_t *>(ptr+2);
 8000fb6:	8077      	strh	r7, [r6, #2]
      wLength=*reinterpret_cast<const uint16_t *>(ptr+6);
 8000fb8:	80f4      	strh	r4, [r6, #6]
 8000fba:	400b      	ands	r3, r1
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d101      	bne.n	8000fc4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xb0>
 8000fc0:	f000 fdc5 	bl	8001b4e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc3a>
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d101      	bne.n	8000fcc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xb8>
 8000fc8:	f000 fc3a 	bl	8001840 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x92c>
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d001      	beq.n	8000fd4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc0>
 8000fd0:	f000 fda0 	bl	8001b14 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc00>
    if((header.bmRequest & 0x60)==0x20)
 8000fd4:	2360      	movs	r3, #96	; 0x60
 8000fd6:	4019      	ands	r1, r3
 8000fd8:	2920      	cmp	r1, #32
 8000fda:	d101      	bne.n	8000fe0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xcc>
 8000fdc:	f000 fdc1 	bl	8001b62 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc4e>
      ep_addr=header.wIndex;
 8000fe0:	4669      	mov	r1, sp
 8000fe2:	4663      	mov	r3, ip
 8000fe4:	710b      	strb	r3, [r1, #4]
 8000fe6:	7909      	ldrb	r1, [r1, #4]
      switch(header.bRequest) {
 8000fe8:	2801      	cmp	r0, #1
 8000fea:	d101      	bne.n	8000ff0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xdc>
 8000fec:	f000 fe3e 	bl	8001c6c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xd58>
 8000ff0:	2800      	cmp	r0, #0
 8000ff2:	d101      	bne.n	8000ff8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xe4>
 8000ff4:	f000 fe18 	bl	8001c28 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xd14>
 8000ff8:	2803      	cmp	r0, #3
 8000ffa:	d11d      	bne.n	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
          switch(_deviceState) {
 8000ffc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d101      	bne.n	8001006 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf2>
 8001002:	f000 fe08 	bl	8001c16 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xd02>
 8001006:	2b03      	cmp	r3, #3
 8001008:	d001      	beq.n	800100e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xfa>
 800100a:	f000 fdf0 	bl	8001bee <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xcda>
              if(header.wValue==USB_FEATURE_EP_HALT && (ep_addr & 0x7f)!=0)
 800100e:	2f00      	cmp	r7, #0
 8001010:	d104      	bne.n	800101c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x108>
 8001012:	064b      	lsls	r3, r1, #25
 8001014:	d002      	beq.n	800101c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x108>
                stallEndpoint(ep_addr);
 8001016:	0008      	movs	r0, r1
 8001018:	f7ff f8f8 	bl	800020c <_ZNK9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE13stallEndpointEh.isra.43>
              handleSetup(header);
 800101c:	0031      	movs	r1, r6
 800101e:	0028      	movs	r0, r5
 8001020:	f7ff fe54 	bl	8000ccc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE>
    _controlEndpointState=ControlEndpointStateType::STATUS_IN;
 8001024:	2304      	movs	r3, #4
 8001026:	63ab      	str	r3, [r5, #56]	; 0x38
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 8001028:	2300      	movs	r3, #0
 800102a:	63eb      	str	r3, [r5, #60]	; 0x3c
    _inEndpointData[endpointIndex].remaining=length;
 800102c:	642b      	str	r3, [r5, #64]	; 0x40
 800102e:	4b7b      	ldr	r3, [pc, #492]	; (800121c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x308>)
    continueSendData(endpointIndex);
 8001030:	0028      	movs	r0, r5
    _inEndpointData[endpointIndex].remaining=length;
 8001032:	646b      	str	r3, [r5, #68]	; 0x44
    continueSendData(endpointIndex);
 8001034:	f7ff f8ae 	bl	8000194 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE16continueSendDataEh.constprop.83>
    while(((irq=USBR->ISTR) & USB_ISTR_CTR)!=0) {
 8001038:	2144      	movs	r1, #68	; 0x44
 800103a:	4a76      	ldr	r2, [pc, #472]	; (8001214 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x300>)
 800103c:	5a53      	ldrh	r3, [r2, r1]
 800103e:	b29b      	uxth	r3, r3
 8001040:	b218      	sxth	r0, r3
 8001042:	2800      	cmp	r0, #0
 8001044:	db00      	blt.n	8001048 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x134>
 8001046:	e774      	b.n	8000f32 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1e>
      endpointIndex=irq & USB_ISTR_EP_ID;
 8001048:	240f      	movs	r4, #15
 800104a:	401c      	ands	r4, r3
      if(endpointIndex==0) {
 800104c:	d118      	bne.n	8001080 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x16c>
        if(isOut)
 800104e:	06db      	lsls	r3, r3, #27
 8001050:	d470      	bmi.n	8001134 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x220>
    USBR->EP0R=USBR->EP0R & (~USB_EP_CTR_TX) & USB_EPREG_MASK;
 8001052:	8813      	ldrh	r3, [r2, #0]
 8001054:	4872      	ldr	r0, [pc, #456]	; (8001220 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x30c>)
 8001056:	4003      	ands	r3, r0
 8001058:	8013      	strh	r3, [r2, #0]
    if(_controlEndpointState==ControlEndpointStateType::DATA_IN) {
 800105a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800105c:	2b02      	cmp	r3, #2
 800105e:	d100      	bne.n	8001062 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x14e>
 8001060:	e2fb      	b.n	800165a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x746>
    if(_address>0 && _inEndpointData[0].remaining==0) {
 8001062:	2259      	movs	r2, #89	; 0x59
 8001064:	5cab      	ldrb	r3, [r5, r2]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0e6      	beq.n	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
 800106a:	2140      	movs	r1, #64	; 0x40
 800106c:	5a69      	ldrh	r1, [r5, r1]
 800106e:	2900      	cmp	r1, #0
 8001070:	d1e2      	bne.n	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
      USBR->DADDR=_address | USB_DADDR_EF;
 8001072:	2080      	movs	r0, #128	; 0x80
 8001074:	4c67      	ldr	r4, [pc, #412]	; (8001214 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x300>)
 8001076:	4303      	orrs	r3, r0
 8001078:	3834      	subs	r0, #52	; 0x34
 800107a:	5223      	strh	r3, [r4, r0]
      _address=0;
 800107c:	54a9      	strb	r1, [r5, r2]
 800107e:	e7db      	b.n	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
        reg=&USBR->EP0R+2*endpointIndex;
 8001080:	4b68      	ldr	r3, [pc, #416]	; (8001224 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x310>)
 8001082:	18e6      	adds	r6, r4, r3
 8001084:	00b6      	lsls	r6, r6, #2
        if((*reg & USB_EP_CTR_RX)!=0)
 8001086:	8833      	ldrh	r3, [r6, #0]
 8001088:	b21b      	sxth	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	da00      	bge.n	8001090 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x17c>
 800108e:	e31f      	b.n	80016d0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x7bc>
        if((*reg & USB_EP_CTR_TX)!=0)
 8001090:	8833      	ldrh	r3, [r6, #0]
 8001092:	061b      	lsls	r3, r3, #24
 8001094:	d5d0      	bpl.n	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
    *reg=*reg & (~USB_EP_CTR_TX) & USB_EPREG_MASK;
 8001096:	8833      	ldrh	r3, [r6, #0]
 8001098:	4a61      	ldr	r2, [pc, #388]	; (8001220 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x30c>)
 800109a:	4013      	ands	r3, r2
 800109c:	8033      	strh	r3, [r6, #0]
    if(_inEndpointData[endpointIndex].remaining==0)
 800109e:	0063      	lsls	r3, r4, #1
 80010a0:	469c      	mov	ip, r3
 80010a2:	191b      	adds	r3, r3, r4
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	18eb      	adds	r3, r5, r3
 80010a8:	001a      	movs	r2, r3
 80010aa:	3240      	adds	r2, #64	; 0x40
 80010ac:	8812      	ldrh	r2, [r2, #0]
 80010ae:	2a00      	cmp	r2, #0
 80010b0:	d100      	bne.n	80010b4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1a0>
 80010b2:	e366      	b.n	8001782 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x86e>
    if((length=ep.remaining)>ep.maxPacketSize)
 80010b4:	3344      	adds	r3, #68	; 0x44
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	4698      	mov	r8, r3
 80010ba:	0018      	movs	r0, r3
 80010bc:	429a      	cmp	r2, r3
 80010be:	dc01      	bgt.n	80010c4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1b0>
 80010c0:	0010      	movs	r0, r2
 80010c2:	4690      	mov	r8, r2
    pdwVal=reinterpret_cast<uint16_t *>(BTABLE_BASE+ep.pmaAddress);
 80010c4:	4663      	mov	r3, ip
 80010c6:	191b      	adds	r3, r3, r4
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	18eb      	adds	r3, r5, r3
 80010cc:	001a      	movs	r2, r3
 80010ce:	3246      	adds	r2, #70	; 0x46
 80010d0:	8817      	ldrh	r7, [r2, #0]
 80010d2:	4a55      	ldr	r2, [pc, #340]	; (8001228 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x314>)
    n=(length+1)/2;
 80010d4:	3001      	adds	r0, #1
    pdwVal=reinterpret_cast<uint16_t *>(BTABLE_BASE+ep.pmaAddress);
 80010d6:	4691      	mov	r9, r2
    n=(length+1)/2;
 80010d8:	1040      	asrs	r0, r0, #1
    pdwVal=reinterpret_cast<uint16_t *>(BTABLE_BASE+ep.pmaAddress);
 80010da:	444f      	add	r7, r9
    dataBytes=ep.ptr;
 80010dc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    for(i=n;i!=0;i--) {
 80010de:	2800      	cmp	r0, #0
 80010e0:	d00e      	beq.n	8001100 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1ec>
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 80010e2:	784a      	ldrb	r2, [r1, #1]
 80010e4:	780b      	ldrb	r3, [r1, #0]
 80010e6:	0212      	lsls	r2, r2, #8
 80010e8:	4313      	orrs	r3, r2
    for(i=n;i!=0;i--) {
 80010ea:	3801      	subs	r0, #1
      *pdwVal++=word;
 80010ec:	803b      	strh	r3, [r7, #0]
      dataBytes+=2;
 80010ee:	3102      	adds	r1, #2
 80010f0:	3702      	adds	r7, #2
    for(i=n;i!=0;i--) {
 80010f2:	2800      	cmp	r0, #0
 80010f4:	d1f5      	bne.n	80010e2 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1ce>
 80010f6:	4663      	mov	r3, ip
 80010f8:	191b      	adds	r3, r3, r4
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	18eb      	adds	r3, r5, r3
 80010fe:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    ep.ptr+=length;
 8001100:	4663      	mov	r3, ip
 8001102:	191b      	adds	r3, r3, r4
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	18eb      	adds	r3, r5, r3
 8001108:	4441      	add	r1, r8
 800110a:	63d9      	str	r1, [r3, #60]	; 0x3c
    ep.remaining-=length;
 800110c:	4641      	mov	r1, r8
 800110e:	3340      	adds	r3, #64	; 0x40
 8001110:	881a      	ldrh	r2, [r3, #0]
 8001112:	1a52      	subs	r2, r2, r1
 8001114:	801a      	strh	r2, [r3, #0]
    USBR_BDT[endpointIndex].tx.count=length;
 8001116:	4b45      	ldr	r3, [pc, #276]	; (800122c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x318>)
    value=*epreg & USB_EPTX_DTOGMASK;
 8001118:	4a45      	ldr	r2, [pc, #276]	; (8001230 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x31c>)
    USBR_BDT[endpointIndex].tx.count=length;
 800111a:	469c      	mov	ip, r3
 800111c:	4464      	add	r4, ip
 800111e:	00e4      	lsls	r4, r4, #3
 8001120:	8061      	strh	r1, [r4, #2]
    value=*epreg & USB_EPTX_DTOGMASK;
 8001122:	8833      	ldrh	r3, [r6, #0]
 8001124:	4013      	ands	r3, r2
      reg^=USB_EPTX_DTOG2;
 8001126:	2230      	movs	r2, #48	; 0x30
 8001128:	405a      	eors	r2, r3
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 800112a:	4b42      	ldr	r3, [pc, #264]	; (8001234 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x320>)
 800112c:	4313      	orrs	r3, r2
 800112e:	b29b      	uxth	r3, r3
 8001130:	8033      	strh	r3, [r6, #0]
 8001132:	e781      	b.n	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
    if((USBR->EP0R & USB_EP_SETUP)!=0)
 8001134:	8813      	ldrh	r3, [r2, #0]
 8001136:	051b      	lsls	r3, r3, #20
 8001138:	d500      	bpl.n	800113c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x228>
 800113a:	e366      	b.n	800180a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x8f6>
    else if((USBR->EP0R & USB_EP_CTR_RX)!=0)
 800113c:	8813      	ldrh	r3, [r2, #0]
 800113e:	b21b      	sxth	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	db00      	blt.n	8001146 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x232>
 8001144:	e778      	b.n	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
    USBR->EP0R=USBR->EP0R & ~(USB_EP_CTR_RX) & USB_EPREG_MASK;
 8001146:	8813      	ldrh	r3, [r2, #0]
 8001148:	4933      	ldr	r1, [pc, #204]	; (8001218 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x304>)
 800114a:	400b      	ands	r3, r1
 800114c:	8013      	strh	r3, [r2, #0]
      return count & 0x3ff;
 800114e:	4b3a      	ldr	r3, [pc, #232]	; (8001238 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x324>)
 8001150:	885f      	ldrh	r7, [r3, #2]
 8001152:	05bf      	lsls	r7, r7, #22
 8001154:	0dbf      	lsrs	r7, r7, #22
    if((count=USBR_BDT[0].rx.getCount())>0) {
 8001156:	d100      	bne.n	800115a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x246>
 8001158:	e25d      	b.n	8001616 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x702>
  size_type size() const { return __slist_size(this->_M_head._M_next); }
 800115a:	69ec      	ldr	r4, [r5, #28]
  for ( ; __node != 0; __node = __node->_M_next)
 800115c:	2c00      	cmp	r4, #0
 800115e:	d100      	bne.n	8001162 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x24e>
 8001160:	e259      	b.n	8001616 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x702>
 8001162:	0023      	movs	r3, r4
 8001164:	2200      	movs	r2, #0
 8001166:	681b      	ldr	r3, [r3, #0]
    ++__result;
 8001168:	3201      	adds	r2, #1
  for ( ; __node != 0; __node = __node->_M_next)
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1fb      	bne.n	8001166 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x252>
        if(_slots.size()==1)
 800116e:	2a01      	cmp	r2, #1
 8001170:	d100      	bne.n	8001174 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x260>
 8001172:	e23d      	b.n	80015f0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6dc>
  inline void bind(DesiredRetType (*function_to_bind)(Param1 p1, Param2 p2, Param3 p3)) {
    m_Closure.bindstaticfunc(this, &FastDelegate3::InvokeStaticFunction, 
      function_to_bind); }
  // Invoke the delegate
  RetType operator() (Param1 p1, Param2 p2, Param3 p3) const {
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1, p2, p3); }
 8001174:	2301      	movs	r3, #1
 8001176:	ae04      	add	r6, sp, #16
 8001178:	4699      	mov	r9, r3
 800117a:	46b8      	mov	r8, r7
 800117c:	e00b      	b.n	8001196 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x282>
 800117e:	105b      	asrs	r3, r3, #1
 8001180:	18c0      	adds	r0, r0, r3
 8001182:	6803      	ldr	r3, [r0, #0]
 8001184:	59df      	ldr	r7, [r3, r7]
 8001186:	4643      	mov	r3, r8
 8001188:	4a2c      	ldr	r2, [pc, #176]	; (800123c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x328>)
 800118a:	2100      	movs	r1, #0
 800118c:	47b8      	blx	r7
  void _M_incr() { _M_node = _M_node->_M_next; }
 800118e:	6824      	ldr	r4, [r4, #0]
          for(auto it=_slots.begin();it!=_slots.end();it++)
 8001190:	2c00      	cmp	r4, #0
 8001192:	d100      	bne.n	8001196 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x282>
 8001194:	e23f      	b.n	8001616 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x702>
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8001196:	0021      	movs	r1, r4
 8001198:	0033      	movs	r3, r6
 800119a:	3108      	adds	r1, #8
 800119c:	6860      	ldr	r0, [r4, #4]
 800119e:	c984      	ldmia	r1!, {r2, r7}
 80011a0:	c384      	stmia	r3!, {r2, r7}
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1, p2, p3); }
 80011a2:	464a      	mov	r2, r9
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 80011a4:	9b05      	ldr	r3, [sp, #20]
 80011a6:	9f04      	ldr	r7, [sp, #16]
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1, p2, p3); }
 80011a8:	421a      	tst	r2, r3
 80011aa:	d1e8      	bne.n	800117e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x26a>
 80011ac:	105b      	asrs	r3, r3, #1
 80011ae:	18c0      	adds	r0, r0, r3
 80011b0:	e7e9      	b.n	8001186 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x272>
    USBR->ISTR &= ~USB_ISTR_ESOF;
 80011b2:	5ad1      	ldrh	r1, [r2, r3]
 80011b4:	4822      	ldr	r0, [pc, #136]	; (8001240 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x32c>)
  size_type size() const { return __slist_size(this->_M_head._M_next); }
 80011b6:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 80011b8:	4001      	ands	r1, r0
 80011ba:	52d1      	strh	r1, [r2, r3]
  for ( ; __node != 0; __node = __node->_M_next)
 80011bc:	2c00      	cmp	r4, #0
 80011be:	d100      	bne.n	80011c2 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x2ae>
 80011c0:	e6e1      	b.n	8000f86 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x72>
 80011c2:	0023      	movs	r3, r4
 80011c4:	2200      	movs	r2, #0
 80011c6:	681b      	ldr	r3, [r3, #0]
    ++__result;
 80011c8:	3201      	adds	r2, #1
  for ( ; __node != 0; __node = __node->_M_next)
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1fb      	bne.n	80011c6 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x2b2>
        if(_slots.size()==1)
 80011ce:	2a01      	cmp	r2, #1
 80011d0:	d101      	bne.n	80011d6 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x2c2>
 80011d2:	f000 fc08 	bl	80019e6 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xad2>
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 80011d6:	2601      	movs	r6, #1
 80011d8:	ad28      	add	r5, sp, #160	; 0xa0
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 80011da:	0023      	movs	r3, r4
 80011dc:	002a      	movs	r2, r5
 80011de:	3308      	adds	r3, #8
 80011e0:	6860      	ldr	r0, [r4, #4]
 80011e2:	cb82      	ldmia	r3!, {r1, r7}
 80011e4:	c282      	stmia	r2!, {r1, r7}
 80011e6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80011e8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 80011ea:	421e      	tst	r6, r3
 80011ec:	d009      	beq.n	8001202 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x2ee>
 80011ee:	105b      	asrs	r3, r3, #1
 80011f0:	18c0      	adds	r0, r0, r3
 80011f2:	6803      	ldr	r3, [r0, #0]
 80011f4:	2104      	movs	r1, #4
 80011f6:	589b      	ldr	r3, [r3, r2]
 80011f8:	4798      	blx	r3
  void _M_incr() { _M_node = _M_node->_M_next; }
 80011fa:	6824      	ldr	r4, [r4, #0]
          for(auto it=_slots.begin();it!=_slots.end();it++)
 80011fc:	2c00      	cmp	r4, #0
 80011fe:	d1ec      	bne.n	80011da <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x2c6>
 8001200:	e6c1      	b.n	8000f86 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x72>
 8001202:	105b      	asrs	r3, r3, #1
 8001204:	18c0      	adds	r0, r0, r3
 8001206:	2104      	movs	r1, #4
 8001208:	4790      	blx	r2
 800120a:	6824      	ldr	r4, [r4, #0]
 800120c:	2c00      	cmp	r4, #0
 800120e:	d1e4      	bne.n	80011da <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x2c6>
 8001210:	e6b9      	b.n	8000f86 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x72>
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	40005c00 	.word	0x40005c00
 8001218:	00000f8f 	.word	0x00000f8f
 800121c:	00580040 	.word	0x00580040
 8001220:	ffff8f0f 	.word	0xffff8f0f
 8001224:	10001700 	.word	0x10001700
 8001228:	40006000 	.word	0x40006000
 800122c:	08000c00 	.word	0x08000c00
 8001230:	ffff8fbf 	.word	0xffff8fbf
 8001234:	ffff8080 	.word	0xffff8080
 8001238:	40006004 	.word	0x40006004
 800123c:	40006018 	.word	0x40006018
 8001240:	fffffeff 	.word	0xfffffeff
    USBR->ISTR &= ~USB_ISTR_PMAOVR;
 8001244:	5ad1      	ldrh	r1, [r2, r3]
 8001246:	48d3      	ldr	r0, [pc, #844]	; (8001594 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x680>)
  size_type size() const { return __slist_size(this->_M_head._M_next); }
 8001248:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 800124a:	4001      	ands	r1, r0
 800124c:	52d1      	strh	r1, [r2, r3]
  for ( ; __node != 0; __node = __node->_M_next)
 800124e:	2c00      	cmp	r4, #0
 8001250:	d100      	bne.n	8001254 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x340>
 8001252:	e67a      	b.n	8000f4a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x36>
 8001254:	0023      	movs	r3, r4
 8001256:	2200      	movs	r2, #0
 8001258:	681b      	ldr	r3, [r3, #0]
    ++__result;
 800125a:	3201      	adds	r2, #1
  for ( ; __node != 0; __node = __node->_M_next)
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1fb      	bne.n	8001258 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x344>
        if(_slots.size()==1)
 8001260:	2a01      	cmp	r2, #1
 8001262:	d101      	bne.n	8001268 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x354>
 8001264:	f000 fc32 	bl	8001acc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xbb8>
 8001268:	2701      	movs	r7, #1
 800126a:	46a8      	mov	r8, r5
 800126c:	ae14      	add	r6, sp, #80	; 0x50
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 800126e:	0023      	movs	r3, r4
 8001270:	0032      	movs	r2, r6
 8001272:	3308      	adds	r3, #8
 8001274:	6860      	ldr	r0, [r4, #4]
 8001276:	cb22      	ldmia	r3!, {r1, r5}
 8001278:	c222      	stmia	r2!, {r1, r5}
 800127a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800127c:	9a14      	ldr	r2, [sp, #80]	; 0x50
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 800127e:	421f      	tst	r7, r3
 8001280:	d100      	bne.n	8001284 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x370>
 8001282:	e0f3      	b.n	800146c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x558>
 8001284:	105b      	asrs	r3, r3, #1
 8001286:	18c0      	adds	r0, r0, r3
 8001288:	6803      	ldr	r3, [r0, #0]
 800128a:	2101      	movs	r1, #1
 800128c:	589b      	ldr	r3, [r3, r2]
 800128e:	4798      	blx	r3
  void _M_incr() { _M_node = _M_node->_M_next; }
 8001290:	6824      	ldr	r4, [r4, #0]
          for(auto it=_slots.begin();it!=_slots.end();it++)
 8001292:	2c00      	cmp	r4, #0
 8001294:	d1eb      	bne.n	800126e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x35a>
 8001296:	4645      	mov	r5, r8
    if((USBR->ISTR & USB_ISTR_ERR)!=0)
 8001298:	2344      	movs	r3, #68	; 0x44
 800129a:	4abf      	ldr	r2, [pc, #764]	; (8001598 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x684>)
 800129c:	5ad1      	ldrh	r1, [r2, r3]
 800129e:	0489      	lsls	r1, r1, #18
 80012a0:	d400      	bmi.n	80012a4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x390>
 80012a2:	e658      	b.n	8000f56 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x42>
    USBR->ISTR &= ~USB_ISTR_ERR;
 80012a4:	5ad1      	ldrh	r1, [r2, r3]
 80012a6:	48bd      	ldr	r0, [pc, #756]	; (800159c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x688>)
  size_type size() const { return __slist_size(this->_M_head._M_next); }
 80012a8:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 80012aa:	4001      	ands	r1, r0
 80012ac:	52d1      	strh	r1, [r2, r3]
  for ( ; __node != 0; __node = __node->_M_next)
 80012ae:	2c00      	cmp	r4, #0
 80012b0:	d100      	bne.n	80012b4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x3a0>
 80012b2:	e650      	b.n	8000f56 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x42>
 80012b4:	0023      	movs	r3, r4
 80012b6:	2200      	movs	r2, #0
 80012b8:	681b      	ldr	r3, [r3, #0]
    ++__result;
 80012ba:	3201      	adds	r2, #1
  for ( ; __node != 0; __node = __node->_M_next)
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1fb      	bne.n	80012b8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x3a4>
        if(_slots.size()==1)
 80012c0:	2a01      	cmp	r2, #1
 80012c2:	d101      	bne.n	80012c8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x3b4>
 80012c4:	f000 fc14 	bl	8001af0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xbdc>
 80012c8:	2701      	movs	r7, #1
 80012ca:	46a8      	mov	r8, r5
 80012cc:	ae18      	add	r6, sp, #96	; 0x60
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 80012ce:	0023      	movs	r3, r4
 80012d0:	0032      	movs	r2, r6
 80012d2:	3308      	adds	r3, #8
 80012d4:	6860      	ldr	r0, [r4, #4]
 80012d6:	cb22      	ldmia	r3!, {r1, r5}
 80012d8:	c222      	stmia	r2!, {r1, r5}
 80012da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80012dc:	9a18      	ldr	r2, [sp, #96]	; 0x60
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 80012de:	421f      	tst	r7, r3
 80012e0:	d100      	bne.n	80012e4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x3d0>
 80012e2:	e17b      	b.n	80015dc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6c8>
 80012e4:	105b      	asrs	r3, r3, #1
 80012e6:	18c0      	adds	r0, r0, r3
 80012e8:	6803      	ldr	r3, [r0, #0]
 80012ea:	2101      	movs	r1, #1
 80012ec:	589b      	ldr	r3, [r3, r2]
 80012ee:	4798      	blx	r3
  void _M_incr() { _M_node = _M_node->_M_next; }
 80012f0:	6824      	ldr	r4, [r4, #0]
          for(auto it=_slots.begin();it!=_slots.end();it++)
 80012f2:	2c00      	cmp	r4, #0
 80012f4:	d1eb      	bne.n	80012ce <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x3ba>
 80012f6:	4645      	mov	r5, r8
    if((USBR->ISTR & USB_ISTR_WKUP)!=0)
 80012f8:	2244      	movs	r2, #68	; 0x44
 80012fa:	4ba7      	ldr	r3, [pc, #668]	; (8001598 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x684>)
 80012fc:	5a99      	ldrh	r1, [r3, r2]
 80012fe:	04c9      	lsls	r1, r1, #19
 8001300:	d400      	bmi.n	8001304 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x3f0>
 8001302:	e62e      	b.n	8000f62 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x4e>
    USBR->CNTR &= ~USB_CNTR_LPMODE;
 8001304:	2140      	movs	r1, #64	; 0x40
 8001306:	2404      	movs	r4, #4
 8001308:	5a58      	ldrh	r0, [r3, r1]
 800130a:	43a0      	bics	r0, r4
 800130c:	5258      	strh	r0, [r3, r1]
    USBR->CNTR=USB_CNTR_CTRM          // correct transfer
 800130e:	48a4      	ldr	r0, [pc, #656]	; (80015a0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x68c>)
 8001310:	5258      	strh	r0, [r3, r1]
    USBR->ISTR &= ~USB_ISTR_WKUP;
 8001312:	5a99      	ldrh	r1, [r3, r2]
 8001314:	48a3      	ldr	r0, [pc, #652]	; (80015a4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x690>)
 8001316:	4001      	ands	r1, r0
 8001318:	5299      	strh	r1, [r3, r2]
    setDeviceState(_savedState);
 800131a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    if(_deviceState!=newState) {
 800131c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800131e:	4293      	cmp	r3, r2
 8001320:	d100      	bne.n	8001324 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x410>
 8001322:	e61e      	b.n	8000f62 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x4e>
      _deviceState=newState;
 8001324:	632b      	str	r3, [r5, #48]	; 0x30

      switch(newState) {
 8001326:	2b02      	cmp	r3, #2
 8001328:	d100      	bne.n	800132c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x418>
 800132a:	e287      	b.n	800183c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x928>
 800132c:	dc00      	bgt.n	8001330 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x41c>
 800132e:	e266      	b.n	80017fe <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x8ea>
 8001330:	2b03      	cmp	r3, #3
 8001332:	d100      	bne.n	8001336 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x422>
 8001334:	e355      	b.n	80019e2 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xace>
        case DeviceStateType::CONFIGURED:
          notify=UsbStatusType::STATE_CONFIGURED;
          break;

        case DeviceStateType::SUSPENDED:
          notify=UsbStatusType::STATE_SUSPENDED;
 8001336:	2708      	movs	r7, #8
      switch(newState) {
 8001338:	2b04      	cmp	r3, #4
 800133a:	d000      	beq.n	800133e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x42a>
 800133c:	e611      	b.n	8000f62 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x4e>
  size_type size() const { return __slist_size(this->_M_head._M_next); }
 800133e:	6aec      	ldr	r4, [r5, #44]	; 0x2c
  for ( ; __node != 0; __node = __node->_M_next)
 8001340:	2c00      	cmp	r4, #0
 8001342:	d100      	bne.n	8001346 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x432>
 8001344:	e60d      	b.n	8000f62 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x4e>
 8001346:	0023      	movs	r3, r4
 8001348:	2200      	movs	r2, #0
 800134a:	681b      	ldr	r3, [r3, #0]
    ++__result;
 800134c:	3201      	adds	r2, #1
  for ( ; __node != 0; __node = __node->_M_next)
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1fb      	bne.n	800134a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x436>
        if(_slots.size()==1)
 8001352:	2a01      	cmp	r2, #1
 8001354:	d101      	bne.n	800135a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x446>
 8001356:	f000 fbe8 	bl	8001b2a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc16>
 800135a:	2301      	movs	r3, #1
 800135c:	46a9      	mov	r9, r5
 800135e:	4698      	mov	r8, r3
 8001360:	ae1c      	add	r6, sp, #112	; 0x70
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8001362:	0021      	movs	r1, r4
 8001364:	0033      	movs	r3, r6
 8001366:	3108      	adds	r1, #8
 8001368:	6860      	ldr	r0, [r4, #4]
 800136a:	c924      	ldmia	r1!, {r2, r5}
 800136c:	c324      	stmia	r3!, {r2, r5}
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 800136e:	4641      	mov	r1, r8
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8001370:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8001372:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8001374:	4219      	tst	r1, r3
 8001376:	d100      	bne.n	800137a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x466>
 8001378:	e15b      	b.n	8001632 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x71e>
 800137a:	105b      	asrs	r3, r3, #1
 800137c:	18c0      	adds	r0, r0, r3
 800137e:	6803      	ldr	r3, [r0, #0]
 8001380:	0039      	movs	r1, r7
 8001382:	589b      	ldr	r3, [r3, r2]
 8001384:	4798      	blx	r3
  void _M_incr() { _M_node = _M_node->_M_next; }
 8001386:	6824      	ldr	r4, [r4, #0]
          for(auto it=_slots.begin();it!=_slots.end();it++)
 8001388:	2c00      	cmp	r4, #0
 800138a:	d1ea      	bne.n	8001362 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x44e>
 800138c:	464d      	mov	r5, r9
    if((USBR->ISTR & USB_ISTR_SUSP)!=0)
 800138e:	2244      	movs	r2, #68	; 0x44
 8001390:	4b81      	ldr	r3, [pc, #516]	; (8001598 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x684>)
 8001392:	5a99      	ldrh	r1, [r3, r2]
 8001394:	0509      	lsls	r1, r1, #20
 8001396:	d400      	bmi.n	800139a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x486>
 8001398:	e5e9      	b.n	8000f6e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x5a>
    USBR->ISTR &= ~USB_ISTR_SUSP;
 800139a:	5a99      	ldrh	r1, [r3, r2]
 800139c:	4882      	ldr	r0, [pc, #520]	; (80015a8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x694>)
 800139e:	4001      	ands	r1, r0
    USBR->CNTR |= USB_CNTR_FSUSP;
 80013a0:	2008      	movs	r0, #8
    USBR->ISTR &= ~USB_ISTR_SUSP;
 80013a2:	5299      	strh	r1, [r3, r2]
    USBR->CNTR |= USB_CNTR_FSUSP;
 80013a4:	3a04      	subs	r2, #4
 80013a6:	5a99      	ldrh	r1, [r3, r2]
 80013a8:	4301      	orrs	r1, r0
 80013aa:	5299      	strh	r1, [r3, r2]
    USBR->CNTR |= USB_CNTR_LPMODE;
 80013ac:	5a99      	ldrh	r1, [r3, r2]
 80013ae:	3804      	subs	r0, #4
 80013b0:	4301      	orrs	r1, r0
 80013b2:	5299      	strh	r1, [r3, r2]
    _savedState=_deviceState;
 80013b4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80013b6:	636b      	str	r3, [r5, #52]	; 0x34
    if(_deviceState!=newState) {
 80013b8:	2b04      	cmp	r3, #4
 80013ba:	d100      	bne.n	80013be <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x4aa>
 80013bc:	e5d7      	b.n	8000f6e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x5a>
      _deviceState=newState;
 80013be:	2304      	movs	r3, #4
  size_type size() const { return __slist_size(this->_M_head._M_next); }
 80013c0:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 80013c2:	632b      	str	r3, [r5, #48]	; 0x30
  for ( ; __node != 0; __node = __node->_M_next)
 80013c4:	2c00      	cmp	r4, #0
 80013c6:	d100      	bne.n	80013ca <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x4b6>
 80013c8:	e5d1      	b.n	8000f6e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x5a>
 80013ca:	0023      	movs	r3, r4
 80013cc:	2200      	movs	r2, #0
 80013ce:	681b      	ldr	r3, [r3, #0]
    ++__result;
 80013d0:	3201      	adds	r2, #1
  for ( ; __node != 0; __node = __node->_M_next)
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1fb      	bne.n	80013ce <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x4ba>
        if(_slots.size()==1)
 80013d6:	2a01      	cmp	r2, #1
 80013d8:	d100      	bne.n	80013dc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x4c8>
 80013da:	e3c8      	b.n	8001b6e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc5a>
 80013dc:	2701      	movs	r7, #1
 80013de:	46a8      	mov	r8, r5
 80013e0:	ae20      	add	r6, sp, #128	; 0x80
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 80013e2:	0021      	movs	r1, r4
 80013e4:	0033      	movs	r3, r6
 80013e6:	3108      	adds	r1, #8
 80013e8:	6860      	ldr	r0, [r4, #4]
 80013ea:	c924      	ldmia	r1!, {r2, r5}
 80013ec:	c324      	stmia	r3!, {r2, r5}
 80013ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80013f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 80013f2:	421f      	tst	r7, r3
 80013f4:	d100      	bne.n	80013f8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x4e4>
 80013f6:	e126      	b.n	8001646 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x732>
 80013f8:	105b      	asrs	r3, r3, #1
 80013fa:	18c0      	adds	r0, r0, r3
 80013fc:	6803      	ldr	r3, [r0, #0]
 80013fe:	2108      	movs	r1, #8
 8001400:	589b      	ldr	r3, [r3, r2]
 8001402:	4798      	blx	r3
  void _M_incr() { _M_node = _M_node->_M_next; }
 8001404:	6824      	ldr	r4, [r4, #0]
          for(auto it=_slots.begin();it!=_slots.end();it++)
 8001406:	2c00      	cmp	r4, #0
 8001408:	d1eb      	bne.n	80013e2 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x4ce>
 800140a:	4645      	mov	r5, r8
    if((USBR->ISTR & USB_ISTR_SOF)!=0)
 800140c:	2344      	movs	r3, #68	; 0x44
 800140e:	4a62      	ldr	r2, [pc, #392]	; (8001598 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x684>)
 8001410:	5ad1      	ldrh	r1, [r2, r3]
 8001412:	0589      	lsls	r1, r1, #22
 8001414:	d400      	bmi.n	8001418 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x504>
 8001416:	e5b0      	b.n	8000f7a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x66>
    USBR->ISTR &= ~USB_ISTR_SOF;
 8001418:	5ad1      	ldrh	r1, [r2, r3]
 800141a:	4864      	ldr	r0, [pc, #400]	; (80015ac <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x698>)
  size_type size() const { return __slist_size(this->_M_head._M_next); }
 800141c:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 800141e:	4001      	ands	r1, r0
 8001420:	52d1      	strh	r1, [r2, r3]
  for ( ; __node != 0; __node = __node->_M_next)
 8001422:	2c00      	cmp	r4, #0
 8001424:	d100      	bne.n	8001428 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x514>
 8001426:	e5a8      	b.n	8000f7a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x66>
 8001428:	0023      	movs	r3, r4
 800142a:	2200      	movs	r2, #0
 800142c:	681b      	ldr	r3, [r3, #0]
    ++__result;
 800142e:	3201      	adds	r2, #1
  for ( ; __node != 0; __node = __node->_M_next)
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1fb      	bne.n	800142c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x518>
        if(_slots.size()==1)
 8001434:	2a01      	cmp	r2, #1
 8001436:	d100      	bne.n	800143a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x526>
 8001438:	e336      	b.n	8001aa8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xb94>
 800143a:	2701      	movs	r7, #1
 800143c:	46a8      	mov	r8, r5
 800143e:	ae24      	add	r6, sp, #144	; 0x90
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8001440:	0023      	movs	r3, r4
 8001442:	0032      	movs	r2, r6
 8001444:	3308      	adds	r3, #8
 8001446:	6860      	ldr	r0, [r4, #4]
 8001448:	cb22      	ldmia	r3!, {r1, r5}
 800144a:	c222      	stmia	r2!, {r1, r5}
 800144c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800144e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8001450:	421f      	tst	r7, r3
 8001452:	d100      	bne.n	8001456 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x542>
 8001454:	e093      	b.n	800157e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x66a>
 8001456:	105b      	asrs	r3, r3, #1
 8001458:	18c0      	adds	r0, r0, r3
 800145a:	6803      	ldr	r3, [r0, #0]
 800145c:	2103      	movs	r1, #3
 800145e:	589b      	ldr	r3, [r3, r2]
 8001460:	4798      	blx	r3
  void _M_incr() { _M_node = _M_node->_M_next; }
 8001462:	6824      	ldr	r4, [r4, #0]
          for(auto it=_slots.begin();it!=_slots.end();it++)
 8001464:	2c00      	cmp	r4, #0
 8001466:	d1eb      	bne.n	8001440 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x52c>
 8001468:	4645      	mov	r5, r8
 800146a:	e586      	b.n	8000f7a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x66>
 800146c:	105b      	asrs	r3, r3, #1
 800146e:	18c0      	adds	r0, r0, r3
 8001470:	2101      	movs	r1, #1
 8001472:	4790      	blx	r2
 8001474:	6824      	ldr	r4, [r4, #0]
 8001476:	2c00      	cmp	r4, #0
 8001478:	d000      	beq.n	800147c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x568>
 800147a:	e6f8      	b.n	800126e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x35a>
 800147c:	4645      	mov	r5, r8
 800147e:	e70b      	b.n	8001298 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x384>
    USBR->ISTR &= ~USB_ISTR_RESET;
 8001480:	5a99      	ldrh	r1, [r3, r2]
 8001482:	484b      	ldr	r0, [pc, #300]	; (80015b0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x69c>)
 8001484:	4001      	ands	r1, r0
 8001486:	5299      	strh	r1, [r3, r2]
      USBR->DADDR=USB_DADDR_EF;
 8001488:	2180      	movs	r1, #128	; 0x80
 800148a:	3208      	adds	r2, #8
 800148c:	5299      	strh	r1, [r3, r2]
    *reg=(*reg & USB_EP_T_MASK) | type;
 800148e:	881a      	ldrh	r2, [r3, #0]
 8001490:	4948      	ldr	r1, [pc, #288]	; (80015b4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6a0>)
 8001492:	4011      	ands	r1, r2
 8001494:	2280      	movs	r2, #128	; 0x80
 8001496:	0092      	lsls	r2, r2, #2
 8001498:	430a      	orrs	r2, r1
 800149a:	801a      	strh	r2, [r3, #0]
    *reg=(*reg & USB_EPREG_MASK) | addr | USB_EP_CTR_TX;
 800149c:	881a      	ldrh	r2, [r3, #0]
 800149e:	4946      	ldr	r1, [pc, #280]	; (80015b8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6a4>)
 80014a0:	400a      	ands	r2, r1
 80014a2:	2180      	movs	r1, #128	; 0x80
 80014a4:	430a      	orrs	r2, r1
 80014a6:	801a      	strh	r2, [r3, #0]
    USBR_BDT[addr].tx.addr=pmaAddress;
 80014a8:	4a44      	ldr	r2, [pc, #272]	; (80015bc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6a8>)
 80014aa:	3928      	subs	r1, #40	; 0x28
 80014ac:	8011      	strh	r1, [r2, #0]
    if((*reg & USB_EP_DTOG_TX)!=0)
 80014ae:	881a      	ldrh	r2, [r3, #0]
 80014b0:	0652      	lsls	r2, r2, #25
 80014b2:	d505      	bpl.n	80014c0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x5ac>
      *reg=(*reg & USB_EPREG_MASK) | USB_EP_CTR_TX | USB_EP_DTOG_TX;
 80014b4:	881a      	ldrh	r2, [r3, #0]
 80014b6:	4942      	ldr	r1, [pc, #264]	; (80015c0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6ac>)
 80014b8:	400a      	ands	r2, r1
 80014ba:	21c0      	movs	r1, #192	; 0xc0
 80014bc:	430a      	orrs	r2, r1
 80014be:	801a      	strh	r2, [r3, #0]
    value=*epreg & USB_EPTX_DTOGMASK;
 80014c0:	4b35      	ldr	r3, [pc, #212]	; (8001598 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x684>)
 80014c2:	4940      	ldr	r1, [pc, #256]	; (80015c4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6b0>)
 80014c4:	881a      	ldrh	r2, [r3, #0]
 80014c6:	400a      	ands	r2, r1
      reg^=USB_EPTX_DTOG2;
 80014c8:	2120      	movs	r1, #32
 80014ca:	4051      	eors	r1, r2
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 80014cc:	4a3e      	ldr	r2, [pc, #248]	; (80015c8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6b4>)
 80014ce:	430a      	orrs	r2, r1
 80014d0:	b292      	uxth	r2, r2
 80014d2:	801a      	strh	r2, [r3, #0]
    *reg=(*reg & USB_EP_T_MASK) | type;
 80014d4:	881a      	ldrh	r2, [r3, #0]
 80014d6:	4937      	ldr	r1, [pc, #220]	; (80015b4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6a0>)
 80014d8:	4011      	ands	r1, r2
 80014da:	2280      	movs	r2, #128	; 0x80
 80014dc:	0092      	lsls	r2, r2, #2
 80014de:	430a      	orrs	r2, r1
 80014e0:	801a      	strh	r2, [r3, #0]
    *reg=(*reg & USB_EPREG_MASK) | addr | USB_EP_CTR_RX;
 80014e2:	881a      	ldrh	r2, [r3, #0]
 80014e4:	4934      	ldr	r1, [pc, #208]	; (80015b8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6a4>)
 80014e6:	400a      	ands	r2, r1
 80014e8:	2180      	movs	r1, #128	; 0x80
 80014ea:	0209      	lsls	r1, r1, #8
 80014ec:	430a      	orrs	r2, r1
    USBR_BDT[addr].rx.addr=pmaAddress;
 80014ee:	2118      	movs	r1, #24
    *reg=(*reg & USB_EPREG_MASK) | addr | USB_EP_CTR_RX;
 80014f0:	801a      	strh	r2, [r3, #0]
    USBR_BDT[addr].rx.addr=pmaAddress;
 80014f2:	4a32      	ldr	r2, [pc, #200]	; (80015bc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6a8>)
 80014f4:	8091      	strh	r1, [r2, #4]
        count=(wNBlocks << 10) | 0x8000;
 80014f6:	4935      	ldr	r1, [pc, #212]	; (80015cc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6b8>)
 80014f8:	80d1      	strh	r1, [r2, #6]
    if((*reg & USB_EP_DTOG_RX)!=0)
 80014fa:	881a      	ldrh	r2, [r3, #0]
 80014fc:	0452      	lsls	r2, r2, #17
 80014fe:	d506      	bpl.n	800150e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x5fa>
      *reg=(*reg & USB_EPREG_MASK) | USB_EP_CTR_RX | USB_EP_DTOG_RX;
 8001500:	881a      	ldrh	r2, [r3, #0]
 8001502:	4933      	ldr	r1, [pc, #204]	; (80015d0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6bc>)
 8001504:	400a      	ands	r2, r1
 8001506:	21c0      	movs	r1, #192	; 0xc0
 8001508:	0209      	lsls	r1, r1, #8
 800150a:	430a      	orrs	r2, r1
 800150c:	801a      	strh	r2, [r3, #0]
    value=*epreg & USB_EPRX_DTOGMASK;
 800150e:	4922      	ldr	r1, [pc, #136]	; (8001598 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x684>)
 8001510:	4a30      	ldr	r2, [pc, #192]	; (80015d4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6c0>)
 8001512:	880b      	ldrh	r3, [r1, #0]
  size_type size() const { return __slist_size(this->_M_head._M_next); }
 8001514:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8001516:	401a      	ands	r2, r3
      reg^=USB_EPRX_DTOG2;
 8001518:	23c0      	movs	r3, #192	; 0xc0
 800151a:	019b      	lsls	r3, r3, #6
 800151c:	4053      	eors	r3, r2
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 800151e:	4a2e      	ldr	r2, [pc, #184]	; (80015d8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6c4>)
 8001520:	4313      	orrs	r3, r2
 8001522:	800b      	strh	r3, [r1, #0]
  for ( ; __node != 0; __node = __node->_M_next)
 8001524:	2c00      	cmp	r4, #0
 8001526:	d100      	bne.n	800152a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x616>
 8001528:	e509      	b.n	8000f3e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x2a>
 800152a:	0023      	movs	r3, r4
 800152c:	2200      	movs	r2, #0
 800152e:	681b      	ldr	r3, [r3, #0]
    ++__result;
 8001530:	3201      	adds	r2, #1
  for ( ; __node != 0; __node = __node->_M_next)
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1fb      	bne.n	800152e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x61a>
        if(_slots.size()==1)
 8001536:	2a01      	cmp	r2, #1
 8001538:	d100      	bne.n	800153c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x628>
 800153a:	e266      	b.n	8001a0a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xaf6>
 800153c:	2701      	movs	r7, #1
 800153e:	46a8      	mov	r8, r5
 8001540:	ae10      	add	r6, sp, #64	; 0x40
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8001542:	0023      	movs	r3, r4
 8001544:	0032      	movs	r2, r6
 8001546:	3308      	adds	r3, #8
 8001548:	6860      	ldr	r0, [r4, #4]
 800154a:	cb22      	ldmia	r3!, {r1, r5}
 800154c:	c222      	stmia	r2!, {r1, r5}
 800154e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001550:	9a10      	ldr	r2, [sp, #64]	; 0x40
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8001552:	421f      	tst	r7, r3
 8001554:	d00a      	beq.n	800156c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x658>
 8001556:	105b      	asrs	r3, r3, #1
 8001558:	18c0      	adds	r0, r0, r3
 800155a:	6803      	ldr	r3, [r0, #0]
 800155c:	2100      	movs	r1, #0
 800155e:	589b      	ldr	r3, [r3, r2]
 8001560:	4798      	blx	r3
  void _M_incr() { _M_node = _M_node->_M_next; }
 8001562:	6824      	ldr	r4, [r4, #0]
          for(auto it=_slots.begin();it!=_slots.end();it++)
 8001564:	2c00      	cmp	r4, #0
 8001566:	d1ec      	bne.n	8001542 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x62e>
 8001568:	4645      	mov	r5, r8
 800156a:	e4e8      	b.n	8000f3e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x2a>
 800156c:	105b      	asrs	r3, r3, #1
 800156e:	18c0      	adds	r0, r0, r3
 8001570:	2100      	movs	r1, #0
 8001572:	4790      	blx	r2
 8001574:	6824      	ldr	r4, [r4, #0]
 8001576:	2c00      	cmp	r4, #0
 8001578:	d1e3      	bne.n	8001542 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x62e>
 800157a:	4645      	mov	r5, r8
 800157c:	e4df      	b.n	8000f3e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x2a>
 800157e:	105b      	asrs	r3, r3, #1
 8001580:	18c0      	adds	r0, r0, r3
 8001582:	2103      	movs	r1, #3
 8001584:	4790      	blx	r2
 8001586:	6824      	ldr	r4, [r4, #0]
 8001588:	2c00      	cmp	r4, #0
 800158a:	d000      	beq.n	800158e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x67a>
 800158c:	e758      	b.n	8001440 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x52c>
 800158e:	4645      	mov	r5, r8
 8001590:	e4f3      	b.n	8000f7a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x66>
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	ffffbfff 	.word	0xffffbfff
 8001598:	40005c00 	.word	0x40005c00
 800159c:	ffffdfff 	.word	0xffffdfff
 80015a0:	ffffbd00 	.word	0xffffbd00
 80015a4:	ffffefff 	.word	0xffffefff
 80015a8:	fffff7ff 	.word	0xfffff7ff
 80015ac:	fffffdff 	.word	0xfffffdff
 80015b0:	fffffbff 	.word	0xfffffbff
 80015b4:	ffff898f 	.word	0xffff898f
 80015b8:	ffff8f8f 	.word	0xffff8f8f
 80015bc:	40006000 	.word	0x40006000
 80015c0:	ffff8f0f 	.word	0xffff8f0f
 80015c4:	ffff8fbf 	.word	0xffff8fbf
 80015c8:	ffff8080 	.word	0xffff8080
 80015cc:	ffff8400 	.word	0xffff8400
 80015d0:	00000f8f 	.word	0x00000f8f
 80015d4:	ffffbf8f 	.word	0xffffbf8f
 80015d8:	00008080 	.word	0x00008080
 80015dc:	105b      	asrs	r3, r3, #1
 80015de:	18c0      	adds	r0, r0, r3
 80015e0:	2101      	movs	r1, #1
 80015e2:	4790      	blx	r2
 80015e4:	6824      	ldr	r4, [r4, #0]
 80015e6:	2c00      	cmp	r4, #0
 80015e8:	d000      	beq.n	80015ec <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6d8>
 80015ea:	e670      	b.n	80012ce <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x3ba>
 80015ec:	4645      	mov	r5, r8
 80015ee:	e683      	b.n	80012f8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x3e4>
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 80015f0:	002b      	movs	r3, r5
 80015f2:	a902      	add	r1, sp, #8
 80015f4:	3314      	adds	r3, #20
 80015f6:	6928      	ldr	r0, [r5, #16]
 80015f8:	cb50      	ldmia	r3!, {r4, r6}
 80015fa:	c150      	stmia	r1!, {r4, r6}
 80015fc:	9b03      	ldr	r3, [sp, #12]
 80015fe:	9c02      	ldr	r4, [sp, #8]
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1, p2, p3); }
 8001600:	421a      	tst	r2, r3
 8001602:	d100      	bne.n	8001606 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6f2>
 8001604:	e359      	b.n	8001cba <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xda6>
 8001606:	105b      	asrs	r3, r3, #1
 8001608:	18c0      	adds	r0, r0, r3
 800160a:	6803      	ldr	r3, [r0, #0]
 800160c:	591c      	ldr	r4, [r3, r4]
 800160e:	003b      	movs	r3, r7
 8001610:	4ad2      	ldr	r2, [pc, #840]	; (800195c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa48>)
 8001612:	2100      	movs	r1, #0
 8001614:	47a0      	blx	r4
 8001616:	4ad2      	ldr	r2, [pc, #840]	; (8001960 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa4c>)
 8001618:	4bd2      	ldr	r3, [pc, #840]	; (8001964 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa50>)
    value=*epreg & USB_EPRX_DTOGMASK;
 800161a:	49d3      	ldr	r1, [pc, #844]	; (8001968 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa54>)
 800161c:	805a      	strh	r2, [r3, #2]
 800161e:	880b      	ldrh	r3, [r1, #0]
 8001620:	4ad2      	ldr	r2, [pc, #840]	; (800196c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa58>)
 8001622:	401a      	ands	r2, r3
      reg^=USB_EPRX_DTOG2;
 8001624:	23c0      	movs	r3, #192	; 0xc0
 8001626:	019b      	lsls	r3, r3, #6
 8001628:	4053      	eors	r3, r2
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 800162a:	4ad1      	ldr	r2, [pc, #836]	; (8001970 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa5c>)
 800162c:	4313      	orrs	r3, r2
 800162e:	800b      	strh	r3, [r1, #0]
 8001630:	e502      	b.n	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8001632:	105b      	asrs	r3, r3, #1
 8001634:	18c0      	adds	r0, r0, r3
 8001636:	0039      	movs	r1, r7
 8001638:	4790      	blx	r2
 800163a:	6824      	ldr	r4, [r4, #0]
 800163c:	2c00      	cmp	r4, #0
 800163e:	d000      	beq.n	8001642 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x72e>
 8001640:	e68f      	b.n	8001362 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x44e>
 8001642:	464d      	mov	r5, r9
 8001644:	e6a3      	b.n	800138e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x47a>
 8001646:	105b      	asrs	r3, r3, #1
 8001648:	18c0      	adds	r0, r0, r3
 800164a:	2108      	movs	r1, #8
 800164c:	4790      	blx	r2
 800164e:	6824      	ldr	r4, [r4, #0]
 8001650:	2c00      	cmp	r4, #0
 8001652:	d000      	beq.n	8001656 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x742>
 8001654:	e6c5      	b.n	80013e2 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x4ce>
 8001656:	4645      	mov	r5, r8
 8001658:	e6d8      	b.n	800140c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x4f8>
      if(_inEndpointData[0].remaining) {
 800165a:	333e      	adds	r3, #62	; 0x3e
 800165c:	5aeb      	ldrh	r3, [r5, r3]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d000      	beq.n	8001664 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x750>
 8001662:	e1e5      	b.n	8001a30 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xb1c>
        if((_inEndpointData[0].total % CONTROL_MAX_PACKET_SIZE)==0 &&
 8001664:	2342      	movs	r3, #66	; 0x42
 8001666:	5ae9      	ldrh	r1, [r5, r3]
 8001668:	3b03      	subs	r3, #3
 800166a:	400b      	ands	r3, r1
 800166c:	d120      	bne.n	80016b0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x79c>
 800166e:	2940      	cmp	r1, #64	; 0x40
 8001670:	d91e      	bls.n	80016b0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x79c>
            _inEndpointData[0].total<_setupDataLength) {
 8001672:	2054      	movs	r0, #84	; 0x54
 8001674:	5a28      	ldrh	r0, [r5, r0]
            _inEndpointData[0].total>CONTROL_MAX_PACKET_SIZE &&
 8001676:	4281      	cmp	r1, r0
 8001678:	da1a      	bge.n	80016b0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x79c>
    _inEndpointData[endpointIndex].remaining=length;
 800167a:	49be      	ldr	r1, [pc, #760]	; (8001974 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa60>)
 800167c:	642b      	str	r3, [r5, #64]	; 0x40
 800167e:	6469      	str	r1, [r5, #68]	; 0x44
    USBR_BDT[endpointIndex].tx.count=length;
 8001680:	49bd      	ldr	r1, [pc, #756]	; (8001978 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa64>)
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 8001682:	63eb      	str	r3, [r5, #60]	; 0x3c
    USBR_BDT[endpointIndex].tx.count=length;
 8001684:	804b      	strh	r3, [r1, #2]
    value=*epreg & USB_EPTX_DTOGMASK;
 8001686:	8811      	ldrh	r1, [r2, #0]
 8001688:	48bc      	ldr	r0, [pc, #752]	; (800197c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa68>)
 800168a:	4001      	ands	r1, r0
      reg^=USB_EPTX_DTOG2;
 800168c:	2030      	movs	r0, #48	; 0x30
 800168e:	4041      	eors	r1, r0
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001690:	48bb      	ldr	r0, [pc, #748]	; (8001980 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa6c>)
 8001692:	4301      	orrs	r1, r0
 8001694:	b289      	uxth	r1, r1
 8001696:	8011      	strh	r1, [r2, #0]
        count=wNBlocks << 10;
 8001698:	49b2      	ldr	r1, [pc, #712]	; (8001964 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa50>)
 800169a:	804b      	strh	r3, [r1, #2]
    value=*epreg & USB_EPRX_DTOGMASK;
 800169c:	8813      	ldrh	r3, [r2, #0]
 800169e:	49b3      	ldr	r1, [pc, #716]	; (800196c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa58>)
 80016a0:	4019      	ands	r1, r3
      reg^=USB_EPRX_DTOG2;
 80016a2:	23c0      	movs	r3, #192	; 0xc0
 80016a4:	019b      	lsls	r3, r3, #6
 80016a6:	404b      	eors	r3, r1
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 80016a8:	4318      	orrs	r0, r3
 80016aa:	b280      	uxth	r0, r0
 80016ac:	8010      	strh	r0, [r2, #0]
 80016ae:	e4d8      	b.n	8001062 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x14e>
          _controlEndpointState=ControlEndpointStateType::STATUS_OUT;
 80016b0:	2305      	movs	r3, #5
 80016b2:	2200      	movs	r2, #0
 80016b4:	63ab      	str	r3, [r5, #56]	; 0x38
 80016b6:	4bab      	ldr	r3, [pc, #684]	; (8001964 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa50>)
    value=*epreg & USB_EPRX_DTOGMASK;
 80016b8:	49ab      	ldr	r1, [pc, #684]	; (8001968 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa54>)
 80016ba:	805a      	strh	r2, [r3, #2]
 80016bc:	880b      	ldrh	r3, [r1, #0]
 80016be:	4aab      	ldr	r2, [pc, #684]	; (800196c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa58>)
 80016c0:	401a      	ands	r2, r3
      reg^=USB_EPRX_DTOG2;
 80016c2:	23c0      	movs	r3, #192	; 0xc0
 80016c4:	019b      	lsls	r3, r3, #6
 80016c6:	4053      	eors	r3, r2
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 80016c8:	4aa9      	ldr	r2, [pc, #676]	; (8001970 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa5c>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	800b      	strh	r3, [r1, #0]
 80016ce:	e4c8      	b.n	8001062 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x14e>
    *reg=*reg & (~USB_EP_CTR_RX) & USB_EPREG_MASK;
 80016d0:	8833      	ldrh	r3, [r6, #0]
 80016d2:	4aac      	ldr	r2, [pc, #688]	; (8001984 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa70>)
  size_type size() const { return __slist_size(this->_M_head._M_next); }
 80016d4:	69ef      	ldr	r7, [r5, #28]
 80016d6:	4013      	ands	r3, r2
 80016d8:	8033      	strh	r3, [r6, #0]
        static_cast<uint16_t>(USBR_BDT[endpointIndex].rx.getCount()));
 80016da:	4bab      	ldr	r3, [pc, #684]	; (8001988 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa74>)
 80016dc:	18e3      	adds	r3, r4, r3
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	9301      	str	r3, [sp, #4]
      return count & 0x3ff;
 80016e2:	88db      	ldrh	r3, [r3, #6]
 80016e4:	059b      	lsls	r3, r3, #22
 80016e6:	0d9b      	lsrs	r3, r3, #22
 80016e8:	469a      	mov	sl, r3
  for ( ; __node != 0; __node = __node->_M_next)
 80016ea:	2f00      	cmp	r7, #0
 80016ec:	d03b      	beq.n	8001766 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x852>
 80016ee:	003b      	movs	r3, r7
 80016f0:	2200      	movs	r2, #0
 80016f2:	681b      	ldr	r3, [r3, #0]
    ++__result;
 80016f4:	3201      	adds	r2, #1
  for ( ; __node != 0; __node = __node->_M_next)
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1fb      	bne.n	80016f2 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x7de>
        if(_slots.size()==1)
 80016fa:	2a01      	cmp	r2, #1
 80016fc:	d01e      	beq.n	800173c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x828>
 80016fe:	ab08      	add	r3, sp, #32
 8001700:	4698      	mov	r8, r3
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1, p2, p3); }
 8001702:	2301      	movs	r3, #1
 8001704:	46a1      	mov	r9, r4
 8001706:	469b      	mov	fp, r3
 8001708:	e00a      	b.n	8001720 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x80c>
 800170a:	105b      	asrs	r3, r3, #1
 800170c:	18c8      	adds	r0, r1, r3
 800170e:	6803      	ldr	r3, [r0, #0]
 8001710:	591c      	ldr	r4, [r3, r4]
 8001712:	4653      	mov	r3, sl
 8001714:	4a9d      	ldr	r2, [pc, #628]	; (800198c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa78>)
 8001716:	4649      	mov	r1, r9
 8001718:	47a0      	blx	r4
  void _M_incr() { _M_node = _M_node->_M_next; }
 800171a:	683f      	ldr	r7, [r7, #0]
          for(auto it=_slots.begin();it!=_slots.end();it++)
 800171c:	2f00      	cmp	r7, #0
 800171e:	d06c      	beq.n	80017fa <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x8e6>
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8001720:	003a      	movs	r2, r7
 8001722:	4643      	mov	r3, r8
 8001724:	3208      	adds	r2, #8
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	ca11      	ldmia	r2!, {r0, r4}
 800172a:	c311      	stmia	r3!, {r0, r4}
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1, p2, p3); }
 800172c:	465a      	mov	r2, fp
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 800172e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001730:	9c08      	ldr	r4, [sp, #32]
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1, p2, p3); }
 8001732:	421a      	tst	r2, r3
 8001734:	d1e9      	bne.n	800170a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x7f6>
 8001736:	1058      	asrs	r0, r3, #1
 8001738:	1808      	adds	r0, r1, r0
 800173a:	e7ea      	b.n	8001712 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x7fe>
 800173c:	692b      	ldr	r3, [r5, #16]
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 800173e:	a906      	add	r1, sp, #24
 8001740:	469c      	mov	ip, r3
 8001742:	002b      	movs	r3, r5
 8001744:	3314      	adds	r3, #20
 8001746:	cb81      	ldmia	r3!, {r0, r7}
 8001748:	c181      	stmia	r1!, {r0, r7}
 800174a:	9b07      	ldr	r3, [sp, #28]
 800174c:	9f06      	ldr	r7, [sp, #24]
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1, p2, p3); }
 800174e:	421a      	tst	r2, r3
 8001750:	d100      	bne.n	8001754 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x840>
 8001752:	e2ab      	b.n	8001cac <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xd98>
 8001754:	105b      	asrs	r3, r3, #1
 8001756:	4463      	add	r3, ip
 8001758:	0018      	movs	r0, r3
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	59df      	ldr	r7, [r3, r7]
 800175e:	4653      	mov	r3, sl
 8001760:	4a8a      	ldr	r2, [pc, #552]	; (800198c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa78>)
 8001762:	0021      	movs	r1, r4
 8001764:	47b8      	blx	r7
        count=wNBlocks << 10;
 8001766:	2380      	movs	r3, #128	; 0x80
 8001768:	9a01      	ldr	r2, [sp, #4]
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	80d3      	strh	r3, [r2, #6]
    value=*epreg & USB_EPRX_DTOGMASK;
 800176e:	8833      	ldrh	r3, [r6, #0]
 8001770:	4a7e      	ldr	r2, [pc, #504]	; (800196c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa58>)
 8001772:	401a      	ands	r2, r3
      reg^=USB_EPRX_DTOG2;
 8001774:	23c0      	movs	r3, #192	; 0xc0
 8001776:	019b      	lsls	r3, r3, #6
 8001778:	4053      	eors	r3, r2
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 800177a:	4a7d      	ldr	r2, [pc, #500]	; (8001970 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa5c>)
 800177c:	4313      	orrs	r3, r2
 800177e:	8033      	strh	r3, [r6, #0]
 8001780:	e486      	b.n	8001090 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x17c>
  size_type size() const { return __slist_size(this->_M_head._M_next); }
 8001782:	68ee      	ldr	r6, [r5, #12]
  for ( ; __node != 0; __node = __node->_M_next)
 8001784:	2e00      	cmp	r6, #0
 8001786:	d100      	bne.n	800178a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x876>
 8001788:	e456      	b.n	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
 800178a:	0033      	movs	r3, r6
 800178c:	2100      	movs	r1, #0
 800178e:	681b      	ldr	r3, [r3, #0]
    ++__result;
 8001790:	3101      	adds	r1, #1
  for ( ; __node != 0; __node = __node->_M_next)
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1fb      	bne.n	800178e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x87a>
        if(_slots.size()==1)
 8001796:	2901      	cmp	r1, #1
 8001798:	d100      	bne.n	800179c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x888>
 800179a:	e209      	b.n	8001bb0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc9c>
 800179c:	ab0c      	add	r3, sp, #48	; 0x30
 800179e:	4698      	mov	r8, r3
 80017a0:	4663      	mov	r3, ip
 80017a2:	191f      	adds	r7, r3, r4
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1, p2); }
 80017a4:	2301      	movs	r3, #1
 80017a6:	46a3      	mov	fp, r4
 80017a8:	4699      	mov	r9, r3
 80017aa:	00bf      	lsls	r7, r7, #2
 80017ac:	19ef      	adds	r7, r5, r7
 80017ae:	3742      	adds	r7, #66	; 0x42
 80017b0:	9501      	str	r5, [sp, #4]
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 80017b2:	0031      	movs	r1, r6
 80017b4:	4643      	mov	r3, r8
 80017b6:	3108      	adds	r1, #8
 80017b8:	883a      	ldrh	r2, [r7, #0]
 80017ba:	6870      	ldr	r0, [r6, #4]
 80017bc:	c930      	ldmia	r1!, {r4, r5}
 80017be:	c330      	stmia	r3!, {r4, r5}
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1, p2); }
 80017c0:	4649      	mov	r1, r9
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 80017c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80017c4:	469a      	mov	sl, r3
 80017c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1, p2); }
 80017c8:	4219      	tst	r1, r3
 80017ca:	d00c      	beq.n	80017e6 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x8d2>
 80017cc:	4651      	mov	r1, sl
 80017ce:	105b      	asrs	r3, r3, #1
 80017d0:	18c0      	adds	r0, r0, r3
 80017d2:	6803      	ldr	r3, [r0, #0]
 80017d4:	585b      	ldr	r3, [r3, r1]
 80017d6:	4659      	mov	r1, fp
 80017d8:	4798      	blx	r3
  void _M_incr() { _M_node = _M_node->_M_next; }
 80017da:	6836      	ldr	r6, [r6, #0]
          for(auto it=_slots.begin();it!=_slots.end();it++)
 80017dc:	2e00      	cmp	r6, #0
 80017de:	d1e8      	bne.n	80017b2 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x89e>
 80017e0:	9d01      	ldr	r5, [sp, #4]
 80017e2:	f7ff fc29 	bl	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
 80017e6:	105b      	asrs	r3, r3, #1
 80017e8:	18c0      	adds	r0, r0, r3
 80017ea:	4659      	mov	r1, fp
 80017ec:	47d0      	blx	sl
 80017ee:	6836      	ldr	r6, [r6, #0]
 80017f0:	2e00      	cmp	r6, #0
 80017f2:	d1de      	bne.n	80017b2 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x89e>
 80017f4:	9d01      	ldr	r5, [sp, #4]
 80017f6:	f7ff fc1f 	bl	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
 80017fa:	464c      	mov	r4, r9
 80017fc:	e7b3      	b.n	8001766 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x852>
          notify=UsbStatusType::STATE_DEFAULT;
 80017fe:	2705      	movs	r7, #5
      switch(newState) {
 8001800:	2b01      	cmp	r3, #1
 8001802:	d100      	bne.n	8001806 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x8f2>
 8001804:	e59b      	b.n	800133e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x42a>
 8001806:	f7ff fbac 	bl	8000f62 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x4e>
      return count & 0x3ff;
 800180a:	4b56      	ldr	r3, [pc, #344]	; (8001964 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa50>)
 800180c:	885a      	ldrh	r2, [r3, #2]
    _setupDataLength=USBR_BDT[0].rx.getCount();
 800180e:	2354      	movs	r3, #84	; 0x54
 8001810:	0592      	lsls	r2, r2, #22
 8001812:	0d92      	lsrs	r2, r2, #22
 8001814:	52ea      	strh	r2, [r5, r3]
    _controlEndpointState=ControlEndpointStateType::SETUP;
 8001816:	3b53      	subs	r3, #83	; 0x53
    for(i=(byteCount+1)/2;i>0;i--)
 8001818:	3201      	adds	r2, #1
    _controlEndpointState=ControlEndpointStateType::SETUP;
 800181a:	63ab      	str	r3, [r5, #56]	; 0x38
    for(i=(byteCount+1)/2;i>0;i--)
 800181c:	1052      	asrs	r2, r2, #1
 800181e:	d101      	bne.n	8001824 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x910>
 8001820:	f7ff fbb8 	bl	8000f94 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x80>
 8001824:	4b4d      	ldr	r3, [pc, #308]	; (800195c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa48>)
 8001826:	ac28      	add	r4, sp, #160	; 0xa0
      *destptr++=*srcptr++;
 8001828:	4959      	ldr	r1, [pc, #356]	; (8001990 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa7c>)
 800182a:	8818      	ldrh	r0, [r3, #0]
 800182c:	1859      	adds	r1, r3, r1
    for(i=(byteCount+1)/2;i>0;i--)
 800182e:	3a01      	subs	r2, #1
      *destptr++=*srcptr++;
 8001830:	5260      	strh	r0, [r4, r1]
 8001832:	3302      	adds	r3, #2
    for(i=(byteCount+1)/2;i>0;i--)
 8001834:	2a00      	cmp	r2, #0
 8001836:	d1f7      	bne.n	8001828 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x914>
 8001838:	f7ff fbad 	bl	8000f96 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x82>
          notify=UsbStatusType::STATE_ADDRESSED;
 800183c:	2706      	movs	r7, #6
 800183e:	e57e      	b.n	800133e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x42a>
    switch(header.bRequest) {
 8001840:	2809      	cmp	r0, #9
 8001842:	d809      	bhi.n	8001858 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x944>
 8001844:	4b53      	ldr	r3, [pc, #332]	; (8001994 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa80>)
 8001846:	0080      	lsls	r0, r0, #2
 8001848:	581b      	ldr	r3, [r3, r0]
 800184a:	469f      	mov	pc, r3
    if((_configurationIndex=header.wValue)>1)    // just one configuration here
 800184c:	235a      	movs	r3, #90	; 0x5a
 800184e:	b2ff      	uxtb	r7, r7
 8001850:	54ef      	strb	r7, [r5, r3]
 8001852:	2f01      	cmp	r7, #1
 8001854:	d800      	bhi.n	8001858 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x944>
 8001856:	e257      	b.n	8001d08 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xdf4>
    value=*epreg & USB_EPRX_DTOGMASK;
 8001858:	4943      	ldr	r1, [pc, #268]	; (8001968 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa54>)
 800185a:	4a44      	ldr	r2, [pc, #272]	; (800196c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa58>)
 800185c:	880b      	ldrh	r3, [r1, #0]
    value=*epreg & USB_EPTX_DTOGMASK;
 800185e:	4847      	ldr	r0, [pc, #284]	; (800197c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa68>)
    value=*epreg & USB_EPRX_DTOGMASK;
 8001860:	401a      	ands	r2, r3
      reg^=USB_EPRX_DTOG1;
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	015b      	lsls	r3, r3, #5
 8001866:	4053      	eors	r3, r2
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001868:	4a45      	ldr	r2, [pc, #276]	; (8001980 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa6c>)
 800186a:	4313      	orrs	r3, r2
 800186c:	b29b      	uxth	r3, r3
 800186e:	800b      	strh	r3, [r1, #0]
    value=*epreg & USB_EPTX_DTOGMASK;
 8001870:	880b      	ldrh	r3, [r1, #0]
 8001872:	4003      	ands	r3, r0
      reg^=USB_EPTX_DTOG1;
 8001874:	2010      	movs	r0, #16
 8001876:	4043      	eors	r3, r0
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001878:	431a      	orrs	r2, r3
 800187a:	b292      	uxth	r2, r2
 800187c:	800a      	strh	r2, [r1, #0]
 800187e:	f7ff fbdb 	bl	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
    if(header.wLength!=1)
 8001882:	2c01      	cmp	r4, #1
 8001884:	d1e8      	bne.n	8001858 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x944>
      switch(_deviceState) {
 8001886:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001888:	2b02      	cmp	r3, #2
 800188a:	d100      	bne.n	800188e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x97a>
 800188c:	e30b      	b.n	8001ea6 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf92>
 800188e:	2b03      	cmp	r3, #3
 8001890:	d111      	bne.n	80018b6 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x9a2>
    _controlEndpointState=ControlEndpointStateType::DATA_IN;
 8001892:	2302      	movs	r3, #2
 8001894:	63ab      	str	r3, [r5, #56]	; 0x38
          sendControlData(&_configurationIndex,1);
 8001896:	002b      	movs	r3, r5
 8001898:	335a      	adds	r3, #90	; 0x5a
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 800189a:	63eb      	str	r3, [r5, #60]	; 0x3c
    _inEndpointData[endpointIndex].remaining=length;
 800189c:	4b3e      	ldr	r3, [pc, #248]	; (8001998 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa84>)
 800189e:	f7ff fbc5 	bl	800102c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x118>
    switch(header.wValue >> 8) {
 80018a2:	123b      	asrs	r3, r7, #8
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d100      	bne.n	80018aa <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x996>
 80018a8:	e2fa      	b.n	8001ea0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf8c>
 80018aa:	2b03      	cmp	r3, #3
 80018ac:	d100      	bne.n	80018b0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x99c>
 80018ae:	e2ef      	b.n	8001e90 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf7c>
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d100      	bne.n	80018b6 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x9a2>
 80018b4:	e2d2      	b.n	8001e5c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf48>
    value=*epreg & USB_EPRX_DTOGMASK;
 80018b6:	492c      	ldr	r1, [pc, #176]	; (8001968 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa54>)
 80018b8:	4a2c      	ldr	r2, [pc, #176]	; (800196c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa58>)
 80018ba:	880b      	ldrh	r3, [r1, #0]
    value=*epreg & USB_EPTX_DTOGMASK;
 80018bc:	482f      	ldr	r0, [pc, #188]	; (800197c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa68>)
    value=*epreg & USB_EPRX_DTOGMASK;
 80018be:	401a      	ands	r2, r3
      reg^=USB_EPRX_DTOG1;
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	015b      	lsls	r3, r3, #5
 80018c4:	4053      	eors	r3, r2
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 80018c6:	4a2e      	ldr	r2, [pc, #184]	; (8001980 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa6c>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	800b      	strh	r3, [r1, #0]
    value=*epreg & USB_EPTX_DTOGMASK;
 80018ce:	880b      	ldrh	r3, [r1, #0]
 80018d0:	4018      	ands	r0, r3
      reg^=USB_EPTX_DTOG1;
 80018d2:	2310      	movs	r3, #16
 80018d4:	4043      	eors	r3, r0
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 80018d6:	431a      	orrs	r2, r3
 80018d8:	b292      	uxth	r2, r2
 80018da:	800a      	strh	r2, [r1, #0]
 80018dc:	f7ff fbac 	bl	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
    if(header.wIndex==0 && header.wLength==0) {
 80018e0:	4663      	mov	r3, ip
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1b8      	bne.n	8001858 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x944>
 80018e6:	2c00      	cmp	r4, #0
 80018e8:	d1b6      	bne.n	8001858 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x944>
      if(_deviceState==DeviceStateType::CONFIGURED)
 80018ea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80018ec:	2b03      	cmp	r3, #3
 80018ee:	d0e2      	beq.n	80018b6 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x9a2>
        address=header.wValue & 0x7F;
 80018f0:	237f      	movs	r3, #127	; 0x7f
 80018f2:	401f      	ands	r7, r3
    if(address==0)
 80018f4:	d000      	beq.n	80018f8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x9e4>
 80018f6:	e2e7      	b.n	8001ec8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xfb4>
      USBR->DADDR=USB_DADDR_EF;
 80018f8:	2180      	movs	r1, #128	; 0x80
 80018fa:	4a1b      	ldr	r2, [pc, #108]	; (8001968 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa54>)
 80018fc:	3b33      	subs	r3, #51	; 0x33
 80018fe:	52d1      	strh	r1, [r2, r3]
    _inEndpointData[endpointIndex].total=length;
 8001900:	4662      	mov	r2, ip
    _controlEndpointState=ControlEndpointStateType::STATUS_IN;
 8001902:	3b48      	subs	r3, #72	; 0x48
 8001904:	63ab      	str	r3, [r5, #56]	; 0x38
    _inEndpointData[endpointIndex].total=length;
 8001906:	333e      	adds	r3, #62	; 0x3e
 8001908:	52ea      	strh	r2, [r5, r3]
    _inEndpointData[endpointIndex].remaining=length;
 800190a:	3b02      	subs	r3, #2
 800190c:	52ea      	strh	r2, [r5, r3]
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 800190e:	4662      	mov	r2, ip
 8001910:	63ea      	str	r2, [r5, #60]	; 0x3c
    _inEndpointData[endpointIndex].pmaAddress=pmaInAddress;
 8001912:	2246      	movs	r2, #70	; 0x46
 8001914:	3928      	subs	r1, #40	; 0x28
 8001916:	52a9      	strh	r1, [r5, r2]
    _inEndpointData[endpointIndex].maxPacketSize=maxPacketSize;
 8001918:	3a02      	subs	r2, #2
 800191a:	52ab      	strh	r3, [r5, r2]
    continueSendData(endpointIndex);
 800191c:	0028      	movs	r0, r5
 800191e:	f7fe fc39 	bl	8000194 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE16continueSendDataEh.constprop.83>
    if(_deviceState!=newState) {
 8001922:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001924:	2b01      	cmp	r3, #1
 8001926:	d101      	bne.n	800192c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa18>
 8001928:	f7ff fb86 	bl	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
      _deviceState=newState;
 800192c:	2301      	movs	r3, #1
 800192e:	632b      	str	r3, [r5, #48]	; 0x30
          notify=UsbStatusType::STATE_DEFAULT;
 8001930:	3304      	adds	r3, #4
 8001932:	9324      	str	r3, [sp, #144]	; 0x90

        default:
          return;
      }

      UsbStatusEventSender.raiseEvent(notify);
 8001934:	0028      	movs	r0, r5
 8001936:	a924      	add	r1, sp, #144	; 0x90
 8001938:	3020      	adds	r0, #32
 800193a:	f7ff f97f 	bl	8000c3c <_ZNK4wink6signalINS_4slotIFvN9stm32plus13UsbStatusTypeEEEEE10raiseEventIJRS3_EEEvDpOT_>
 800193e:	f7ff fb7b 	bl	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
    if(header.wValue==USB_FEATURE_REMOTE_WAKEUP) {
 8001942:	2f01      	cmp	r7, #1
 8001944:	d001      	beq.n	800194a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa36>
 8001946:	f7ff fb77 	bl	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
      _remoteWakeup=true;
 800194a:	235b      	movs	r3, #91	; 0x5b
 800194c:	54ef      	strb	r7, [r5, r3]
    _controlEndpointState=ControlEndpointStateType::STATUS_IN;
 800194e:	3b57      	subs	r3, #87	; 0x57
 8001950:	63ab      	str	r3, [r5, #56]	; 0x38
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 8001952:	2300      	movs	r3, #0
 8001954:	63eb      	str	r3, [r5, #60]	; 0x3c
 8001956:	f7ff fb69 	bl	800102c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x118>
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	40006018 	.word	0x40006018
 8001960:	ffff8400 	.word	0xffff8400
 8001964:	40006004 	.word	0x40006004
 8001968:	40005c00 	.word	0x40005c00
 800196c:	ffffbf8f 	.word	0xffffbf8f
 8001970:	00008080 	.word	0x00008080
 8001974:	00580040 	.word	0x00580040
 8001978:	40006000 	.word	0x40006000
 800197c:	ffff8fbf 	.word	0xffff8fbf
 8001980:	ffff8080 	.word	0xffff8080
 8001984:	00000f8f 	.word	0x00000f8f
 8001988:	08000c00 	.word	0x08000c00
 800198c:	400060d8 	.word	0x400060d8
 8001990:	bfff9fe8 	.word	0xbfff9fe8
 8001994:	0800329c 	.word	0x0800329c
 8001998:	00010001 	.word	0x00010001
    if(_deviceState==DeviceStateType::ADDRESSED || _deviceState==DeviceStateType::CONFIGURED) {
 800199c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800199e:	3b02      	subs	r3, #2
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d901      	bls.n	80019a8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa94>
 80019a4:	f7ff fb48 	bl	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
      status=0;
 80019a8:	2200      	movs	r2, #0
 80019aa:	4bcb      	ldr	r3, [pc, #812]	; (8001cd8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xdc4>)
 80019ac:	701a      	strb	r2, [r3, #0]
      if(_remoteWakeup)
 80019ae:	325b      	adds	r2, #91	; 0x5b
 80019b0:	5caa      	ldrb	r2, [r5, r2]
 80019b2:	2a00      	cmp	r2, #0
 80019b4:	d001      	beq.n	80019ba <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xaa6>
        status|=USB_CONFIG_REMOTE_WAKEUP;
 80019b6:	2202      	movs	r2, #2
 80019b8:	701a      	strb	r2, [r3, #0]
    _controlEndpointState=ControlEndpointStateType::DATA_IN;
 80019ba:	2202      	movs	r2, #2
 80019bc:	63aa      	str	r2, [r5, #56]	; 0x38
 80019be:	e76c      	b.n	800189a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x986>
    if(_deviceState==DeviceStateType::ADDRESSED || _deviceState==DeviceStateType::CONFIGURED) {
 80019c0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80019c2:	3b02      	subs	r3, #2
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d900      	bls.n	80019ca <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xab6>
 80019c8:	e746      	b.n	8001858 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x944>
      if(header.wValue==USB_FEATURE_REMOTE_WAKEUP) {
 80019ca:	2f01      	cmp	r7, #1
 80019cc:	d001      	beq.n	80019d2 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xabe>
 80019ce:	f7ff fb33 	bl	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
        _remoteWakeup=false;
 80019d2:	2300      	movs	r3, #0
 80019d4:	225b      	movs	r2, #91	; 0x5b
 80019d6:	54ab      	strb	r3, [r5, r2]
    _controlEndpointState=ControlEndpointStateType::STATUS_IN;
 80019d8:	3a57      	subs	r2, #87	; 0x57
 80019da:	63aa      	str	r2, [r5, #56]	; 0x38
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 80019dc:	63eb      	str	r3, [r5, #60]	; 0x3c
 80019de:	f7ff fb25 	bl	800102c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x118>
          notify=UsbStatusType::STATE_CONFIGURED;
 80019e2:	2707      	movs	r7, #7
 80019e4:	e4ab      	b.n	800133e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x42a>
 80019e6:	6a28      	ldr	r0, [r5, #32]
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 80019e8:	ab26      	add	r3, sp, #152	; 0x98
 80019ea:	3524      	adds	r5, #36	; 0x24
 80019ec:	cd12      	ldmia	r5!, {r1, r4}
 80019ee:	c312      	stmia	r3!, {r1, r4}
 80019f0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80019f2:	9c26      	ldr	r4, [sp, #152]	; 0x98
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 80019f4:	421a      	tst	r2, r3
 80019f6:	d100      	bne.n	80019fa <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xae6>
 80019f8:	e0cb      	b.n	8001b92 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc7e>
 80019fa:	105b      	asrs	r3, r3, #1
 80019fc:	18c0      	adds	r0, r0, r3
 80019fe:	6803      	ldr	r3, [r0, #0]
 8001a00:	591c      	ldr	r4, [r3, r4]
 8001a02:	2104      	movs	r1, #4
 8001a04:	47a0      	blx	r4
 8001a06:	f7ff fabe 	bl	8000f86 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x72>
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8001a0a:	002b      	movs	r3, r5
 8001a0c:	a90e      	add	r1, sp, #56	; 0x38
 8001a0e:	3324      	adds	r3, #36	; 0x24
 8001a10:	6a28      	ldr	r0, [r5, #32]
 8001a12:	cb50      	ldmia	r3!, {r4, r6}
 8001a14:	c150      	stmia	r1!, {r4, r6}
 8001a16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001a18:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8001a1a:	421a      	tst	r2, r3
 8001a1c:	d100      	bne.n	8001a20 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xb0c>
 8001a1e:	e0bb      	b.n	8001b98 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc84>
 8001a20:	105b      	asrs	r3, r3, #1
 8001a22:	18c0      	adds	r0, r0, r3
 8001a24:	6803      	ldr	r3, [r0, #0]
 8001a26:	591c      	ldr	r4, [r3, r4]
 8001a28:	2100      	movs	r1, #0
 8001a2a:	47a0      	blx	r4
 8001a2c:	f7ff fa87 	bl	8000f3e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x2a>
    if((length=ep.remaining)>ep.maxPacketSize)
 8001a30:	5a6e      	ldrh	r6, [r5, r1]
 8001a32:	0030      	movs	r0, r6
 8001a34:	42b3      	cmp	r3, r6
 8001a36:	dc01      	bgt.n	8001a3c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xb28>
 8001a38:	0018      	movs	r0, r3
 8001a3a:	001e      	movs	r6, r3
    pdwVal=reinterpret_cast<uint16_t *>(BTABLE_BASE+ep.pmaAddress);
 8001a3c:	2246      	movs	r2, #70	; 0x46
 8001a3e:	5aac      	ldrh	r4, [r5, r2]
 8001a40:	4aa6      	ldr	r2, [pc, #664]	; (8001cdc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xdc8>)
    n=(length+1)/2;
 8001a42:	3001      	adds	r0, #1
    pdwVal=reinterpret_cast<uint16_t *>(BTABLE_BASE+ep.pmaAddress);
 8001a44:	4694      	mov	ip, r2
    n=(length+1)/2;
 8001a46:	1040      	asrs	r0, r0, #1
    pdwVal=reinterpret_cast<uint16_t *>(BTABLE_BASE+ep.pmaAddress);
 8001a48:	4464      	add	r4, ip
    dataBytes=ep.ptr;
 8001a4a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    for(i=n;i!=0;i--) {
 8001a4c:	2800      	cmp	r0, #0
 8001a4e:	d00c      	beq.n	8001a6a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xb56>
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 8001a50:	784a      	ldrb	r2, [r1, #1]
 8001a52:	780b      	ldrb	r3, [r1, #0]
 8001a54:	0212      	lsls	r2, r2, #8
 8001a56:	4313      	orrs	r3, r2
    for(i=n;i!=0;i--) {
 8001a58:	3801      	subs	r0, #1
      *pdwVal++=word;
 8001a5a:	8023      	strh	r3, [r4, #0]
      dataBytes+=2;
 8001a5c:	3102      	adds	r1, #2
 8001a5e:	3402      	adds	r4, #2
    for(i=n;i!=0;i--) {
 8001a60:	2800      	cmp	r0, #0
 8001a62:	d1f5      	bne.n	8001a50 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xb3c>
 8001a64:	2340      	movs	r3, #64	; 0x40
 8001a66:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8001a68:	5aeb      	ldrh	r3, [r5, r3]
    ep.remaining-=length;
 8001a6a:	2240      	movs	r2, #64	; 0x40
    ep.ptr+=length;
 8001a6c:	1989      	adds	r1, r1, r6
    ep.remaining-=length;
 8001a6e:	1b9b      	subs	r3, r3, r6
    ep.ptr+=length;
 8001a70:	63e9      	str	r1, [r5, #60]	; 0x3c
    ep.remaining-=length;
 8001a72:	52ab      	strh	r3, [r5, r2]
    USBR_BDT[endpointIndex].tx.count=length;
 8001a74:	4b99      	ldr	r3, [pc, #612]	; (8001cdc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xdc8>)
    value=*epreg & USB_EPTX_DTOGMASK;
 8001a76:	499a      	ldr	r1, [pc, #616]	; (8001ce0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xdcc>)
    USBR_BDT[endpointIndex].tx.count=length;
 8001a78:	805e      	strh	r6, [r3, #2]
    value=*epreg & USB_EPTX_DTOGMASK;
 8001a7a:	880b      	ldrh	r3, [r1, #0]
 8001a7c:	4a99      	ldr	r2, [pc, #612]	; (8001ce4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xdd0>)
        count=wNBlocks << 10;
 8001a7e:	2000      	movs	r0, #0
 8001a80:	4013      	ands	r3, r2
      reg^=USB_EPTX_DTOG2;
 8001a82:	2230      	movs	r2, #48	; 0x30
 8001a84:	4053      	eors	r3, r2
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001a86:	4a98      	ldr	r2, [pc, #608]	; (8001ce8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xdd4>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	800b      	strh	r3, [r1, #0]
 8001a8e:	4b97      	ldr	r3, [pc, #604]	; (8001cec <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xdd8>)
 8001a90:	8058      	strh	r0, [r3, #2]
    value=*epreg & USB_EPRX_DTOGMASK;
 8001a92:	880b      	ldrh	r3, [r1, #0]
 8001a94:	4896      	ldr	r0, [pc, #600]	; (8001cf0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xddc>)
 8001a96:	4018      	ands	r0, r3
      reg^=USB_EPRX_DTOG2;
 8001a98:	23c0      	movs	r3, #192	; 0xc0
 8001a9a:	019b      	lsls	r3, r3, #6
 8001a9c:	4043      	eors	r3, r0
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	b292      	uxth	r2, r2
 8001aa2:	800a      	strh	r2, [r1, #0]
 8001aa4:	f7ff fadd 	bl	8001062 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x14e>
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8001aa8:	002b      	movs	r3, r5
 8001aaa:	a922      	add	r1, sp, #136	; 0x88
 8001aac:	3324      	adds	r3, #36	; 0x24
 8001aae:	6a28      	ldr	r0, [r5, #32]
 8001ab0:	cb50      	ldmia	r3!, {r4, r6}
 8001ab2:	c150      	stmia	r1!, {r4, r6}
 8001ab4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8001ab6:	9c22      	ldr	r4, [sp, #136]	; 0x88
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8001ab8:	421a      	tst	r2, r3
 8001aba:	d076      	beq.n	8001baa <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc96>
 8001abc:	105b      	asrs	r3, r3, #1
 8001abe:	18c0      	adds	r0, r0, r3
 8001ac0:	6803      	ldr	r3, [r0, #0]
 8001ac2:	591c      	ldr	r4, [r3, r4]
 8001ac4:	2103      	movs	r1, #3
 8001ac6:	47a0      	blx	r4
 8001ac8:	f7ff fa57 	bl	8000f7a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x66>
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8001acc:	002b      	movs	r3, r5
 8001ace:	a912      	add	r1, sp, #72	; 0x48
 8001ad0:	3324      	adds	r3, #36	; 0x24
 8001ad2:	6a28      	ldr	r0, [r5, #32]
 8001ad4:	cb50      	ldmia	r3!, {r4, r6}
 8001ad6:	c150      	stmia	r1!, {r4, r6}
 8001ad8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001ada:	9c12      	ldr	r4, [sp, #72]	; 0x48
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8001adc:	421a      	tst	r2, r3
 8001ade:	d05e      	beq.n	8001b9e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc8a>
 8001ae0:	105b      	asrs	r3, r3, #1
 8001ae2:	18c0      	adds	r0, r0, r3
 8001ae4:	6803      	ldr	r3, [r0, #0]
 8001ae6:	591c      	ldr	r4, [r3, r4]
 8001ae8:	2101      	movs	r1, #1
 8001aea:	47a0      	blx	r4
 8001aec:	f7ff fa2d 	bl	8000f4a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x36>
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8001af0:	002b      	movs	r3, r5
 8001af2:	a916      	add	r1, sp, #88	; 0x58
 8001af4:	3324      	adds	r3, #36	; 0x24
 8001af6:	6a28      	ldr	r0, [r5, #32]
 8001af8:	cb50      	ldmia	r3!, {r4, r6}
 8001afa:	c150      	stmia	r1!, {r4, r6}
 8001afc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001afe:	9c16      	ldr	r4, [sp, #88]	; 0x58
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8001b00:	421a      	tst	r2, r3
 8001b02:	d04f      	beq.n	8001ba4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc90>
 8001b04:	105b      	asrs	r3, r3, #1
 8001b06:	18c0      	adds	r0, r0, r3
 8001b08:	6803      	ldr	r3, [r0, #0]
 8001b0a:	591c      	ldr	r4, [r3, r4]
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	47a0      	blx	r4
 8001b10:	f7ff fa21 	bl	8000f56 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x42>
    value=*epreg & USB_EPRX_DTOGMASK;
 8001b14:	8813      	ldrh	r3, [r2, #0]
 8001b16:	4976      	ldr	r1, [pc, #472]	; (8001cf0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xddc>)
 8001b18:	4019      	ands	r1, r3
      reg^=USB_EPRX_DTOG1;
 8001b1a:	2380      	movs	r3, #128	; 0x80
 8001b1c:	015b      	lsls	r3, r3, #5
 8001b1e:	404b      	eors	r3, r1
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001b20:	4974      	ldr	r1, [pc, #464]	; (8001cf4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xde0>)
 8001b22:	430b      	orrs	r3, r1
 8001b24:	8013      	strh	r3, [r2, #0]
 8001b26:	f7ff fa87 	bl	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8001b2a:	002b      	movs	r3, r5
 8001b2c:	a91a      	add	r1, sp, #104	; 0x68
 8001b2e:	3324      	adds	r3, #36	; 0x24
 8001b30:	6a28      	ldr	r0, [r5, #32]
 8001b32:	cb50      	ldmia	r3!, {r4, r6}
 8001b34:	c150      	stmia	r1!, {r4, r6}
 8001b36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001b38:	9c1a      	ldr	r4, [sp, #104]	; 0x68
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8001b3a:	421a      	tst	r2, r3
 8001b3c:	d051      	beq.n	8001be2 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xcce>
 8001b3e:	105b      	asrs	r3, r3, #1
 8001b40:	18c0      	adds	r0, r0, r3
 8001b42:	6803      	ldr	r3, [r0, #0]
 8001b44:	591c      	ldr	r4, [r3, r4]
 8001b46:	0039      	movs	r1, r7
 8001b48:	47a0      	blx	r4
 8001b4a:	f7ff fa0a 	bl	8000f62 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x4e>
    if(_deviceState==DeviceStateType::CONFIGURED && (header.wIndex & 0xff)<=1)
 8001b4e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001b50:	2b03      	cmp	r3, #3
 8001b52:	d000      	beq.n	8001b56 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc42>
 8001b54:	e680      	b.n	8001858 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x944>
 8001b56:	4662      	mov	r2, ip
 8001b58:	33fc      	adds	r3, #252	; 0xfc
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d900      	bls.n	8001b62 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc4e>
 8001b60:	e67a      	b.n	8001858 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x944>
      handleSetup(header);
 8001b62:	0031      	movs	r1, r6
 8001b64:	0028      	movs	r0, r5
 8001b66:	f7ff f8b1 	bl	8000ccc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE>
 8001b6a:	f7ff fa65 	bl	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8001b6e:	0029      	movs	r1, r5
 8001b70:	ab1e      	add	r3, sp, #120	; 0x78
 8001b72:	3124      	adds	r1, #36	; 0x24
 8001b74:	6a28      	ldr	r0, [r5, #32]
 8001b76:	c950      	ldmia	r1!, {r4, r6}
 8001b78:	c350      	stmia	r3!, {r4, r6}
 8001b7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001b7c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8001b7e:	421a      	tst	r2, r3
 8001b80:	d032      	beq.n	8001be8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xcd4>
 8001b82:	105b      	asrs	r3, r3, #1
 8001b84:	18c0      	adds	r0, r0, r3
 8001b86:	6803      	ldr	r3, [r0, #0]
 8001b88:	591c      	ldr	r4, [r3, r4]
 8001b8a:	2108      	movs	r1, #8
 8001b8c:	47a0      	blx	r4
 8001b8e:	f7ff f9ee 	bl	8000f6e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x5a>
 8001b92:	105b      	asrs	r3, r3, #1
 8001b94:	18c0      	adds	r0, r0, r3
 8001b96:	e734      	b.n	8001a02 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xaee>
 8001b98:	105b      	asrs	r3, r3, #1
 8001b9a:	18c0      	adds	r0, r0, r3
 8001b9c:	e744      	b.n	8001a28 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xb14>
 8001b9e:	105b      	asrs	r3, r3, #1
 8001ba0:	18c0      	adds	r0, r0, r3
 8001ba2:	e7a1      	b.n	8001ae8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xbd4>
 8001ba4:	105b      	asrs	r3, r3, #1
 8001ba6:	18c0      	adds	r0, r0, r3
 8001ba8:	e7b0      	b.n	8001b0c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xbf8>
 8001baa:	105b      	asrs	r3, r3, #1
 8001bac:	18c0      	adds	r0, r0, r3
 8001bae:	e789      	b.n	8001ac4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xbb0>
 8001bb0:	4663      	mov	r3, ip
 8001bb2:	191b      	adds	r3, r3, r4
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	18eb      	adds	r3, r5, r3
 8001bb8:	3342      	adds	r3, #66	; 0x42
 8001bba:	881b      	ldrh	r3, [r3, #0]
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8001bbc:	ae0a      	add	r6, sp, #40	; 0x28
 8001bbe:	469c      	mov	ip, r3
 8001bc0:	002b      	movs	r3, r5
 8001bc2:	cb01      	ldmia	r3!, {r0}
 8001bc4:	cb84      	ldmia	r3!, {r2, r7}
 8001bc6:	c684      	stmia	r6!, {r2, r7}
 8001bc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001bca:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1, p2); }
 8001bcc:	4219      	tst	r1, r3
 8001bce:	d071      	beq.n	8001cb4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xda0>
 8001bd0:	105b      	asrs	r3, r3, #1
 8001bd2:	18c0      	adds	r0, r0, r3
 8001bd4:	6803      	ldr	r3, [r0, #0]
 8001bd6:	599e      	ldr	r6, [r3, r6]
 8001bd8:	4662      	mov	r2, ip
 8001bda:	0021      	movs	r1, r4
 8001bdc:	47b0      	blx	r6
 8001bde:	f7ff fa2b 	bl	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
 8001be2:	105b      	asrs	r3, r3, #1
 8001be4:	18c0      	adds	r0, r0, r3
 8001be6:	e7ae      	b.n	8001b46 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc32>
 8001be8:	105b      	asrs	r3, r3, #1
 8001bea:	18c0      	adds	r0, r0, r3
 8001bec:	e7cd      	b.n	8001b8a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc76>
    value=*epreg & USB_EPRX_DTOGMASK;
 8001bee:	8813      	ldrh	r3, [r2, #0]
 8001bf0:	493f      	ldr	r1, [pc, #252]	; (8001cf0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xddc>)
    value=*epreg & USB_EPTX_DTOGMASK;
 8001bf2:	483c      	ldr	r0, [pc, #240]	; (8001ce4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xdd0>)
    value=*epreg & USB_EPRX_DTOGMASK;
 8001bf4:	4019      	ands	r1, r3
      reg^=USB_EPRX_DTOG1;
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	015b      	lsls	r3, r3, #5
 8001bfa:	404b      	eors	r3, r1
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001bfc:	493a      	ldr	r1, [pc, #232]	; (8001ce8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xdd4>)
 8001bfe:	430b      	orrs	r3, r1
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	8013      	strh	r3, [r2, #0]
    value=*epreg & USB_EPTX_DTOGMASK;
 8001c04:	8813      	ldrh	r3, [r2, #0]
 8001c06:	4003      	ands	r3, r0
      reg^=USB_EPTX_DTOG1;
 8001c08:	2010      	movs	r0, #16
 8001c0a:	4043      	eors	r3, r0
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001c0c:	4319      	orrs	r1, r3
 8001c0e:	b289      	uxth	r1, r1
 8001c10:	8011      	strh	r1, [r2, #0]
 8001c12:	f7ff fa11 	bl	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
              if((ep_addr & 0x7f)!=0)
 8001c16:	064b      	lsls	r3, r1, #25
 8001c18:	d101      	bne.n	8001c1e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xd0a>
 8001c1a:	f7ff fa0d 	bl	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
                stallEndpoint(ep_addr);
 8001c1e:	0008      	movs	r0, r1
 8001c20:	f7fe faf4 	bl	800020c <_ZNK9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE13stallEndpointEh.isra.43>
 8001c24:	f7ff fa08 	bl	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
          switch (_deviceState) {
 8001c28:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d0f3      	beq.n	8001c16 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xd02>
 8001c2e:	2b03      	cmp	r3, #3
 8001c30:	d1dd      	bne.n	8001bee <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xcda>
    endpointIndex=epAddr & 0x7f;
 8001c32:	207f      	movs	r0, #127	; 0x7f
    if((epAddr & 0x80)==0x80 || endpointIndex==0) {
 8001c34:	4663      	mov	r3, ip
    endpointIndex=epAddr & 0x7f;
 8001c36:	4008      	ands	r0, r1
    if((epAddr & 0x80)==0x80 || endpointIndex==0) {
 8001c38:	061b      	lsls	r3, r3, #24
 8001c3a:	d441      	bmi.n	8001cc0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xdac>
 8001c3c:	2800      	cmp	r0, #0
 8001c3e:	d03f      	beq.n	8001cc0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xdac>
      status=getRxEndpointStatus(&USBR->EP0R+endpointIndex*2);
 8001c40:	4b2d      	ldr	r3, [pc, #180]	; (8001cf8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xde4>)
      return status==USB_EP_RX_STALL;
 8001c42:	22c0      	movs	r2, #192	; 0xc0
      status=getRxEndpointStatus(&USBR->EP0R+endpointIndex*2);
 8001c44:	469c      	mov	ip, r3
 8001c46:	4460      	add	r0, ip
 8001c48:	0080      	lsls	r0, r0, #2
    return *epreg & USB_EPRX_STAT;
 8001c4a:	8803      	ldrh	r3, [r0, #0]
      return status==USB_EP_RX_STALL;
 8001c4c:	0192      	lsls	r2, r2, #6
 8001c4e:	4013      	ands	r3, r2
 8001c50:	4a2a      	ldr	r2, [pc, #168]	; (8001cfc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xde8>)
 8001c52:	4694      	mov	ip, r2
 8001c54:	4463      	add	r3, ip
 8001c56:	4259      	negs	r1, r3
 8001c58:	4159      	adcs	r1, r3
 8001c5a:	b2cb      	uxtb	r3, r1
              status=isStalled(ep_addr) ? 1 : 0;
 8001c5c:	4a28      	ldr	r2, [pc, #160]	; (8001d00 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xdec>)
 8001c5e:	8013      	strh	r3, [r2, #0]
    _controlEndpointState=ControlEndpointStateType::DATA_IN;
 8001c60:	2302      	movs	r3, #2
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 8001c62:	63ea      	str	r2, [r5, #60]	; 0x3c
    _controlEndpointState=ControlEndpointStateType::DATA_IN;
 8001c64:	63ab      	str	r3, [r5, #56]	; 0x38
    _inEndpointData[endpointIndex].remaining=length;
 8001c66:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xdf0>)
 8001c68:	f7ff f9e0 	bl	800102c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x118>
          switch (_deviceState) {
 8001c6c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d0d1      	beq.n	8001c16 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xd02>
 8001c72:	2b03      	cmp	r3, #3
 8001c74:	d1bb      	bne.n	8001bee <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xcda>
              if(header.wValue==USB_FEATURE_EP_HALT) {
 8001c76:	2f00      	cmp	r7, #0
 8001c78:	d001      	beq.n	8001c7e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xd6a>
 8001c7a:	f7ff f9dd 	bl	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
 8001c7e:	207f      	movs	r0, #127	; 0x7f
 8001c80:	4008      	ands	r0, r1
                if((ep_addr & 0x7f)!=0) {
 8001c82:	d101      	bne.n	8001c88 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xd74>
 8001c84:	f7ff f9d8 	bl	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
    if((epAddr & 0x80)==0x80 || endpointIndex==0)
 8001c88:	4663      	mov	r3, ip
 8001c8a:	061b      	lsls	r3, r3, #24
 8001c8c:	d500      	bpl.n	8001c90 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xd7c>
 8001c8e:	e10e      	b.n	8001eae <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf9a>
      setRxEndpointStatus(&USBR->EP0R+endpointIndex*2,USB_EP_RX_STALL);
 8001c90:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xde4>)
    value=*epreg & USB_EPRX_DTOGMASK;
 8001c92:	4a17      	ldr	r2, [pc, #92]	; (8001cf0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xddc>)
      setRxEndpointStatus(&USBR->EP0R+endpointIndex*2,USB_EP_RX_STALL);
 8001c94:	469c      	mov	ip, r3
 8001c96:	4460      	add	r0, ip
 8001c98:	0080      	lsls	r0, r0, #2
    value=*epreg & USB_EPRX_DTOGMASK;
 8001c9a:	8803      	ldrh	r3, [r0, #0]
 8001c9c:	401a      	ands	r2, r3
      reg^=USB_EPRX_DTOG1;
 8001c9e:	2380      	movs	r3, #128	; 0x80
 8001ca0:	015b      	lsls	r3, r3, #5
 8001ca2:	4053      	eors	r3, r2
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001ca4:	4a13      	ldr	r2, [pc, #76]	; (8001cf4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xde0>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	8003      	strh	r3, [r0, #0]
 8001caa:	e75a      	b.n	8001b62 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc4e>
 8001cac:	105b      	asrs	r3, r3, #1
 8001cae:	4463      	add	r3, ip
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	e554      	b.n	800175e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x84a>
 8001cb4:	105b      	asrs	r3, r3, #1
 8001cb6:	18c0      	adds	r0, r0, r3
 8001cb8:	e78e      	b.n	8001bd8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xcc4>
 8001cba:	105b      	asrs	r3, r3, #1
 8001cbc:	18c0      	adds	r0, r0, r3
 8001cbe:	e4a6      	b.n	800160e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6fa>
      status=getTxEndpointStatus(&USBR->EP0R+endpointIndex*2);
 8001cc0:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xde4>)
 8001cc2:	469c      	mov	ip, r3
      return status==USB_EP_TX_STALL;
 8001cc4:	2330      	movs	r3, #48	; 0x30
      status=getTxEndpointStatus(&USBR->EP0R+endpointIndex*2);
 8001cc6:	4460      	add	r0, ip
 8001cc8:	0080      	lsls	r0, r0, #2
    return *epreg & USB_EPTX_STAT;
 8001cca:	8802      	ldrh	r2, [r0, #0]
      return status==USB_EP_TX_STALL;
 8001ccc:	4013      	ands	r3, r2
 8001cce:	3b10      	subs	r3, #16
 8001cd0:	4259      	negs	r1, r3
 8001cd2:	4159      	adcs	r1, r3
 8001cd4:	b2cb      	uxtb	r3, r1
 8001cd6:	e7c1      	b.n	8001c5c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xd48>
 8001cd8:	2000086c 	.word	0x2000086c
 8001cdc:	40006000 	.word	0x40006000
 8001ce0:	40005c00 	.word	0x40005c00
 8001ce4:	ffff8fbf 	.word	0xffff8fbf
 8001ce8:	ffff8080 	.word	0xffff8080
 8001cec:	40006004 	.word	0x40006004
 8001cf0:	ffffbf8f 	.word	0xffffbf8f
 8001cf4:	00008080 	.word	0x00008080
 8001cf8:	10001700 	.word	0x10001700
 8001cfc:	fffff000 	.word	0xfffff000
 8001d00:	2000086e 	.word	0x2000086e
 8001d04:	00020002 	.word	0x00020002
      switch(_deviceState) {
 8001d08:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d041      	beq.n	8001d92 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xe7e>
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d000      	beq.n	8001d14 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xe00>
 8001d12:	e5d0      	b.n	80018b6 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x9a2>
          if(_configurationIndex==0) {
 8001d14:	2f00      	cmp	r7, #0
 8001d16:	d001      	beq.n	8001d1c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xe08>
 8001d18:	f7ff f984 	bl	8001024 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x110>
    if((*reg & USB_EP_DTOG_TX)!=0)
 8001d1c:	4a7e      	ldr	r2, [pc, #504]	; (8001f18 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1004>)
 8001d1e:	8813      	ldrh	r3, [r2, #0]
 8001d20:	065b      	lsls	r3, r3, #25
 8001d22:	d505      	bpl.n	8001d30 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xe1c>
      *reg=(*reg & USB_EPREG_MASK) | USB_EP_CTR_RX | USB_EP_CTR_TX | USB_EP_DTOG_TX;
 8001d24:	8813      	ldrh	r3, [r2, #0]
 8001d26:	497d      	ldr	r1, [pc, #500]	; (8001f1c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1008>)
 8001d28:	400b      	ands	r3, r1
 8001d2a:	497d      	ldr	r1, [pc, #500]	; (8001f20 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x100c>)
 8001d2c:	430b      	orrs	r3, r1
 8001d2e:	8013      	strh	r3, [r2, #0]
    value=*epreg & USB_EPTX_DTOGMASK;
 8001d30:	4b79      	ldr	r3, [pc, #484]	; (8001f18 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1004>)
 8001d32:	497c      	ldr	r1, [pc, #496]	; (8001f24 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1010>)
 8001d34:	881a      	ldrh	r2, [r3, #0]
 8001d36:	400a      	ands	r2, r1
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001d38:	497b      	ldr	r1, [pc, #492]	; (8001f28 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1014>)
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	801a      	strh	r2, [r3, #0]
    if((*reg & USB_EP_DTOG_RX)!=0)
 8001d3e:	881a      	ldrh	r2, [r3, #0]
 8001d40:	0452      	lsls	r2, r2, #17
 8001d42:	d505      	bpl.n	8001d50 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xe3c>
      *reg=(*reg & USB_EPREG_MASK) | USB_EP_CTR_RX | USB_EP_CTR_TX | USB_EP_DTOG_RX;
 8001d44:	881a      	ldrh	r2, [r3, #0]
 8001d46:	4975      	ldr	r1, [pc, #468]	; (8001f1c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1008>)
 8001d48:	400a      	ands	r2, r1
 8001d4a:	4978      	ldr	r1, [pc, #480]	; (8001f2c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1018>)
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	801a      	strh	r2, [r3, #0]
    value=*epreg & USB_EPRX_DTOGMASK;
 8001d50:	4a71      	ldr	r2, [pc, #452]	; (8001f18 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1004>)
 8001d52:	4977      	ldr	r1, [pc, #476]	; (8001f30 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x101c>)
 8001d54:	8813      	ldrh	r3, [r2, #0]
    continueSendData(endpointIndex);
 8001d56:	0028      	movs	r0, r5
    value=*epreg & USB_EPRX_DTOGMASK;
 8001d58:	400b      	ands	r3, r1
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001d5a:	4973      	ldr	r1, [pc, #460]	; (8001f28 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1014>)
 8001d5c:	430b      	orrs	r3, r1
 8001d5e:	8013      	strh	r3, [r2, #0]
    _controlEndpointState=ControlEndpointStateType::STATUS_IN;
 8001d60:	2304      	movs	r3, #4
    _inEndpointData[endpointIndex].total=length;
 8001d62:	2242      	movs	r2, #66	; 0x42
    _controlEndpointState=ControlEndpointStateType::STATUS_IN;
 8001d64:	63ab      	str	r3, [r5, #56]	; 0x38
    _inEndpointData[endpointIndex].total=length;
 8001d66:	2300      	movs	r3, #0
    _inEndpointData[endpointIndex].pmaAddress=pmaInAddress;
 8001d68:	2158      	movs	r1, #88	; 0x58
    _inEndpointData[endpointIndex].total=length;
 8001d6a:	52ab      	strh	r3, [r5, r2]
    _inEndpointData[endpointIndex].remaining=length;
 8001d6c:	3a02      	subs	r2, #2
 8001d6e:	52ab      	strh	r3, [r5, r2]
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 8001d70:	63eb      	str	r3, [r5, #60]	; 0x3c
    _inEndpointData[endpointIndex].pmaAddress=pmaInAddress;
 8001d72:	3346      	adds	r3, #70	; 0x46
 8001d74:	52e9      	strh	r1, [r5, r3]
    _inEndpointData[endpointIndex].maxPacketSize=maxPacketSize;
 8001d76:	3b02      	subs	r3, #2
 8001d78:	52ea      	strh	r2, [r5, r3]
    continueSendData(endpointIndex);
 8001d7a:	f7fe fa0b 	bl	8000194 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE16continueSendDataEh.constprop.83>
    if(_deviceState!=newState) {
 8001d7e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d101      	bne.n	8001d88 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xe74>
 8001d84:	f7ff f958 	bl	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
      _deviceState=newState;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	632b      	str	r3, [r5, #48]	; 0x30
          notify=UsbStatusType::STATE_CONFIGURED;
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	9324      	str	r3, [sp, #144]	; 0x90
 8001d90:	e5d0      	b.n	8001934 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa20>
          if(_configurationIndex) {
 8001d92:	2f00      	cmp	r7, #0
 8001d94:	d101      	bne.n	8001d9a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xe86>
 8001d96:	f7ff f945 	bl	8001024 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x110>
    *reg=(*reg & USB_EP_T_MASK) | type;
 8001d9a:	4b5f      	ldr	r3, [pc, #380]	; (8001f18 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1004>)
 8001d9c:	4965      	ldr	r1, [pc, #404]	; (8001f34 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1020>)
 8001d9e:	881a      	ldrh	r2, [r3, #0]
 8001da0:	4011      	ands	r1, r2
 8001da2:	22c0      	movs	r2, #192	; 0xc0
 8001da4:	00d2      	lsls	r2, r2, #3
 8001da6:	430a      	orrs	r2, r1
 8001da8:	801a      	strh	r2, [r3, #0]
    *reg=(*reg & USB_EPREG_MASK) | addr | USB_EP_CTR_TX;
 8001daa:	881a      	ldrh	r2, [r3, #0]
 8001dac:	4962      	ldr	r1, [pc, #392]	; (8001f38 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1024>)
 8001dae:	4011      	ands	r1, r2
 8001db0:	2281      	movs	r2, #129	; 0x81
 8001db2:	430a      	orrs	r2, r1
    USBR_BDT[addr].tx.addr=pmaAddress;
 8001db4:	2198      	movs	r1, #152	; 0x98
    *reg=(*reg & USB_EPREG_MASK) | addr | USB_EP_CTR_TX;
 8001db6:	801a      	strh	r2, [r3, #0]
    USBR_BDT[addr].tx.addr=pmaAddress;
 8001db8:	4a60      	ldr	r2, [pc, #384]	; (8001f3c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1028>)
 8001dba:	8011      	strh	r1, [r2, #0]
    if((*reg & USB_EP_DTOG_TX)!=0)
 8001dbc:	881a      	ldrh	r2, [r3, #0]
 8001dbe:	0652      	lsls	r2, r2, #25
 8001dc0:	d505      	bpl.n	8001dce <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xeba>
      *reg=(*reg & USB_EPREG_MASK) | USB_EP_CTR_TX | USB_EP_DTOG_TX;
 8001dc2:	881a      	ldrh	r2, [r3, #0]
 8001dc4:	495e      	ldr	r1, [pc, #376]	; (8001f40 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x102c>)
 8001dc6:	4011      	ands	r1, r2
 8001dc8:	22c0      	movs	r2, #192	; 0xc0
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	801a      	strh	r2, [r3, #0]
    value=*epreg & USB_EPTX_DTOGMASK;
 8001dce:	4b52      	ldr	r3, [pc, #328]	; (8001f18 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1004>)
 8001dd0:	4954      	ldr	r1, [pc, #336]	; (8001f24 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1010>)
 8001dd2:	881a      	ldrh	r2, [r3, #0]
 8001dd4:	4011      	ands	r1, r2
      reg^=USB_EPTX_DTOG2;
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	404a      	eors	r2, r1
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001dda:	4953      	ldr	r1, [pc, #332]	; (8001f28 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1014>)
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	801a      	strh	r2, [r3, #0]
    *reg=(*reg & USB_EP_T_MASK) | type;
 8001de0:	881a      	ldrh	r2, [r3, #0]
 8001de2:	4954      	ldr	r1, [pc, #336]	; (8001f34 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1020>)
 8001de4:	4011      	ands	r1, r2
 8001de6:	22c0      	movs	r2, #192	; 0xc0
 8001de8:	00d2      	lsls	r2, r2, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	801a      	strh	r2, [r3, #0]
    *reg=(*reg & USB_EPREG_MASK) | addr | USB_EP_CTR_RX;
 8001dee:	881a      	ldrh	r2, [r3, #0]
 8001df0:	4951      	ldr	r1, [pc, #324]	; (8001f38 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1024>)
 8001df2:	400a      	ands	r2, r1
 8001df4:	4953      	ldr	r1, [pc, #332]	; (8001f44 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1030>)
 8001df6:	430a      	orrs	r2, r1
    USBR_BDT[addr].rx.addr=pmaAddress;
 8001df8:	21d8      	movs	r1, #216	; 0xd8
    *reg=(*reg & USB_EPREG_MASK) | addr | USB_EP_CTR_RX;
 8001dfa:	801a      	strh	r2, [r3, #0]
    USBR_BDT[addr].rx.addr=pmaAddress;
 8001dfc:	4a4f      	ldr	r2, [pc, #316]	; (8001f3c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1028>)
 8001dfe:	8091      	strh	r1, [r2, #4]
 8001e00:	2180      	movs	r1, #128	; 0x80
 8001e02:	00c9      	lsls	r1, r1, #3
 8001e04:	80d1      	strh	r1, [r2, #6]
    if((*reg & USB_EP_DTOG_RX)!=0)
 8001e06:	881a      	ldrh	r2, [r3, #0]
 8001e08:	0452      	lsls	r2, r2, #17
 8001e0a:	d506      	bpl.n	8001e1a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf06>
      *reg=(*reg & USB_EPREG_MASK) | USB_EP_CTR_RX | USB_EP_DTOG_RX;
 8001e0c:	881a      	ldrh	r2, [r3, #0]
 8001e0e:	494e      	ldr	r1, [pc, #312]	; (8001f48 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1034>)
 8001e10:	400a      	ands	r2, r1
 8001e12:	21c0      	movs	r1, #192	; 0xc0
 8001e14:	0209      	lsls	r1, r1, #8
 8001e16:	430a      	orrs	r2, r1
 8001e18:	801a      	strh	r2, [r3, #0]
    value=*epreg & USB_EPRX_DTOGMASK;
 8001e1a:	493f      	ldr	r1, [pc, #252]	; (8001f18 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1004>)
 8001e1c:	4a44      	ldr	r2, [pc, #272]	; (8001f30 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x101c>)
 8001e1e:	880b      	ldrh	r3, [r1, #0]
    continueSendData(endpointIndex);
 8001e20:	0028      	movs	r0, r5
    value=*epreg & USB_EPRX_DTOGMASK;
 8001e22:	401a      	ands	r2, r3
      reg^=USB_EPRX_DTOG2;
 8001e24:	23c0      	movs	r3, #192	; 0xc0
 8001e26:	019b      	lsls	r3, r3, #6
 8001e28:	4053      	eors	r3, r2
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001e2a:	4a3f      	ldr	r2, [pc, #252]	; (8001f28 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1014>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	800b      	strh	r3, [r1, #0]
    _controlEndpointState=ControlEndpointStateType::STATUS_IN;
 8001e30:	2304      	movs	r3, #4
    _inEndpointData[endpointIndex].total=length;
 8001e32:	2242      	movs	r2, #66	; 0x42
    _controlEndpointState=ControlEndpointStateType::STATUS_IN;
 8001e34:	63ab      	str	r3, [r5, #56]	; 0x38
    _inEndpointData[endpointIndex].total=length;
 8001e36:	2300      	movs	r3, #0
    _inEndpointData[endpointIndex].pmaAddress=pmaInAddress;
 8001e38:	2158      	movs	r1, #88	; 0x58
    _inEndpointData[endpointIndex].total=length;
 8001e3a:	52ab      	strh	r3, [r5, r2]
    _inEndpointData[endpointIndex].remaining=length;
 8001e3c:	3a02      	subs	r2, #2
 8001e3e:	52ab      	strh	r3, [r5, r2]
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 8001e40:	63eb      	str	r3, [r5, #60]	; 0x3c
    _inEndpointData[endpointIndex].pmaAddress=pmaInAddress;
 8001e42:	3346      	adds	r3, #70	; 0x46
 8001e44:	52e9      	strh	r1, [r5, r3]
    _inEndpointData[endpointIndex].maxPacketSize=maxPacketSize;
 8001e46:	3b02      	subs	r3, #2
 8001e48:	52ea      	strh	r2, [r5, r3]
    continueSendData(endpointIndex);
 8001e4a:	f7fe f9a3 	bl	8000194 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE16continueSendDataEh.constprop.83>
    if(_deviceState!=newState) {
 8001e4e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001e50:	2b03      	cmp	r3, #3
 8001e52:	d101      	bne.n	8001e58 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf44>
 8001e54:	f7ff f8f0 	bl	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
      _deviceState=newState;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e796      	b.n	8001d8a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xe76>
        length=sizeof(_deviceDescriptor);
 8001e5c:	2312      	movs	r3, #18
        dataToSend=const_cast<uint8_t *>(_deviceDescriptor);
 8001e5e:	4a3b      	ldr	r2, [pc, #236]	; (8001f4c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1038>)
    if(length && header.wLength)
 8001e60:	2c00      	cmp	r4, #0
 8001e62:	d101      	bne.n	8001e68 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf54>
 8001e64:	f7ff f8e8 	bl	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
      sendControlData(dataToSend,length<=header.wLength ? length : header.wLength);
 8001e68:	42a3      	cmp	r3, r4
 8001e6a:	dc00      	bgt.n	8001e6e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf5a>
 8001e6c:	001c      	movs	r4, r3
    _controlEndpointState=ControlEndpointStateType::DATA_IN;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	63ab      	str	r3, [r5, #56]	; 0x38
    _inEndpointData[endpointIndex].total=length;
 8001e72:	3340      	adds	r3, #64	; 0x40
 8001e74:	52ec      	strh	r4, [r5, r3]
    _inEndpointData[endpointIndex].remaining=length;
 8001e76:	3b02      	subs	r3, #2
 8001e78:	52ec      	strh	r4, [r5, r3]
    _inEndpointData[endpointIndex].pmaAddress=pmaInAddress;
 8001e7a:	2158      	movs	r1, #88	; 0x58
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 8001e7c:	63ea      	str	r2, [r5, #60]	; 0x3c
    _inEndpointData[endpointIndex].pmaAddress=pmaInAddress;
 8001e7e:	2246      	movs	r2, #70	; 0x46
 8001e80:	52a9      	strh	r1, [r5, r2]
    _inEndpointData[endpointIndex].maxPacketSize=maxPacketSize;
 8001e82:	3a02      	subs	r2, #2
 8001e84:	52ab      	strh	r3, [r5, r2]
    continueSendData(endpointIndex);
 8001e86:	0028      	movs	r0, r5
 8001e88:	f7fe f984 	bl	8000194 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE16continueSendDataEh.constprop.83>
 8001e8c:	f7ff f8d4 	bl	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
    switch(header.wValue & 0xff) {
 8001e90:	b2ff      	uxtb	r7, r7
 8001e92:	2f05      	cmp	r7, #5
 8001e94:	d900      	bls.n	8001e98 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf84>
 8001e96:	e50e      	b.n	80018b6 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x9a2>
 8001e98:	4b2d      	ldr	r3, [pc, #180]	; (8001f50 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x103c>)
 8001e9a:	00bf      	lsls	r7, r7, #2
 8001e9c:	59db      	ldr	r3, [r3, r7]
 8001e9e:	469f      	mov	pc, r3
        length=sizeof(_configurationDescriptor);
 8001ea0:	2329      	movs	r3, #41	; 0x29
        dataToSend=const_cast<uint8_t *>(_configurationDescriptor);
 8001ea2:	4a2c      	ldr	r2, [pc, #176]	; (8001f54 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1040>)
 8001ea4:	e7dc      	b.n	8001e60 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf4c>
          _configurationIndex=0;
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	235a      	movs	r3, #90	; 0x5a
 8001eaa:	54ea      	strb	r2, [r5, r3]
 8001eac:	e4f1      	b.n	8001892 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x97e>
      setTxEndpointStatus(&USBR->EP0R+endpointIndex*2,USB_EP_TX_STALL);
 8001eae:	4b2a      	ldr	r3, [pc, #168]	; (8001f58 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1044>)
    value=*epreg & USB_EPTX_DTOGMASK;
 8001eb0:	4a1c      	ldr	r2, [pc, #112]	; (8001f24 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1010>)
      setTxEndpointStatus(&USBR->EP0R+endpointIndex*2,USB_EP_TX_STALL);
 8001eb2:	469c      	mov	ip, r3
 8001eb4:	4460      	add	r0, ip
 8001eb6:	0080      	lsls	r0, r0, #2
    value=*epreg & USB_EPTX_DTOGMASK;
 8001eb8:	8803      	ldrh	r3, [r0, #0]
 8001eba:	401a      	ands	r2, r3
      reg^=USB_EPTX_DTOG1;
 8001ebc:	2310      	movs	r3, #16
 8001ebe:	4053      	eors	r3, r2
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001ec0:	4a19      	ldr	r2, [pc, #100]	; (8001f28 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1014>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	8003      	strh	r3, [r0, #0]
 8001ec6:	e64c      	b.n	8001b62 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc4e>
      _address=address;
 8001ec8:	2359      	movs	r3, #89	; 0x59
 8001eca:	54ef      	strb	r7, [r5, r3]
    _controlEndpointState=ControlEndpointStateType::STATUS_IN;
 8001ecc:	3b55      	subs	r3, #85	; 0x55
 8001ece:	63ab      	str	r3, [r5, #56]	; 0x38
    _inEndpointData[endpointIndex].remaining=length;
 8001ed0:	4b22      	ldr	r3, [pc, #136]	; (8001f5c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1048>)
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 8001ed2:	63ec      	str	r4, [r5, #60]	; 0x3c
    _inEndpointData[endpointIndex].remaining=length;
 8001ed4:	646b      	str	r3, [r5, #68]	; 0x44
 8001ed6:	642c      	str	r4, [r5, #64]	; 0x40
    continueSendData(endpointIndex);
 8001ed8:	0028      	movs	r0, r5
 8001eda:	f7fe f95b 	bl	8000194 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE16continueSendDataEh.constprop.83>
    if(_deviceState!=newState) {
 8001ede:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d101      	bne.n	8001ee8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xfd4>
 8001ee4:	f7ff f8a8 	bl	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
      _deviceState=newState;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	632b      	str	r3, [r5, #48]	; 0x30
          notify=UsbStatusType::STATE_ADDRESSED;
 8001eec:	3304      	adds	r3, #4
 8001eee:	9324      	str	r3, [sp, #144]	; 0x90
 8001ef0:	e520      	b.n	8001934 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa20>
        length=sizeof(TConfiguration::ConfigurationString);
 8001ef2:	2308      	movs	r3, #8
        dataToSend=const_cast<uint8_t *>(TConfiguration::ConfigurationString);
 8001ef4:	4a1a      	ldr	r2, [pc, #104]	; (8001f60 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x104c>)
 8001ef6:	e7b3      	b.n	8001e60 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf4c>
        length=sizeof(TConfiguration::SerialString);
 8001ef8:	230c      	movs	r3, #12
        dataToSend=const_cast<uint8_t *>(TConfiguration::SerialString);
 8001efa:	4a1a      	ldr	r2, [pc, #104]	; (8001f64 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1050>)
 8001efc:	e7b0      	b.n	8001e60 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf4c>
        length=sizeof(TConfiguration::ProductString);
 8001efe:	2316      	movs	r3, #22
        dataToSend=const_cast<uint8_t *>(TConfiguration::ProductString);
 8001f00:	4a19      	ldr	r2, [pc, #100]	; (8001f68 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1054>)
 8001f02:	e7ad      	b.n	8001e60 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf4c>
        length=sizeof(TConfiguration::ManufacturerString);
 8001f04:	2320      	movs	r3, #32
        dataToSend=const_cast<uint8_t *>(TConfiguration::ManufacturerString);
 8001f06:	4a19      	ldr	r2, [pc, #100]	; (8001f6c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1058>)
 8001f08:	e7aa      	b.n	8001e60 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf4c>
        length=sizeof(_langIdDescriptor);
 8001f0a:	2304      	movs	r3, #4
        dataToSend=const_cast<uint8_t *>(_langIdDescriptor);
 8001f0c:	4a18      	ldr	r2, [pc, #96]	; (8001f70 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x105c>)
 8001f0e:	e7a7      	b.n	8001e60 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf4c>
        length=sizeof(TConfiguration::InterfaceString);
 8001f10:	2308      	movs	r3, #8
        dataToSend=const_cast<uint8_t *>(TConfiguration::InterfaceString);
 8001f12:	4a18      	ldr	r2, [pc, #96]	; (8001f74 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1060>)
 8001f14:	e7a4      	b.n	8001e60 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf4c>
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	40005c04 	.word	0x40005c04
 8001f1c:	00000f0f 	.word	0x00000f0f
 8001f20:	000080c0 	.word	0x000080c0
 8001f24:	ffff8fbf 	.word	0xffff8fbf
 8001f28:	00008080 	.word	0x00008080
 8001f2c:	0000c080 	.word	0x0000c080
 8001f30:	ffffbf8f 	.word	0xffffbf8f
 8001f34:	ffff898f 	.word	0xffff898f
 8001f38:	ffff8f8f 	.word	0xffff8f8f
 8001f3c:	40006008 	.word	0x40006008
 8001f40:	ffff8f0f 	.word	0xffff8f0f
 8001f44:	00008001 	.word	0x00008001
 8001f48:	00000f8f 	.word	0x00000f8f
 8001f4c:	08003358 	.word	0x08003358
 8001f50:	080032c4 	.word	0x080032c4
 8001f54:	0800332c 	.word	0x0800332c
 8001f58:	10001700 	.word	0x10001700
 8001f5c:	00580040 	.word	0x00580040
 8001f60:	080033b8 	.word	0x080033b8
 8001f64:	0800336c 	.word	0x0800336c
 8001f68:	08003378 	.word	0x08003378
 8001f6c:	08003398 	.word	0x08003398
 8001f70:	080032dc 	.word	0x080032dc
 8001f74:	08003390 	.word	0x08003390

08001f78 <_ZnwjPv>:
 8001f78:	0008      	movs	r0, r1
 8001f7a:	4770      	bx	lr

08001f7c <_sbrk>:
  caddr_t _sbrk ( int incr ) {

    static unsigned char *heap = NULL;
    unsigned char *prev_heap;

    if (heap == NULL) {
 8001f7c:	4a04      	ldr	r2, [pc, #16]	; (8001f90 <_sbrk+0x14>)
 8001f7e:	6813      	ldr	r3, [r2, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <_sbrk+0x10>
      heap = (unsigned char *)&_end;
    }
    prev_heap = heap;
    /* check removed to show basic approach */

    heap += incr;
 8001f84:	1818      	adds	r0, r3, r0
 8001f86:	6010      	str	r0, [r2, #0]

    return (caddr_t) prev_heap;
  }
 8001f88:	0018      	movs	r0, r3
 8001f8a:	4770      	bx	lr
 8001f8c:	4b01      	ldr	r3, [pc, #4]	; (8001f94 <_sbrk+0x18>)
 8001f8e:	e7f9      	b.n	8001f84 <_sbrk+0x8>
 8001f90:	20000870 	.word	0x20000870
 8001f94:	200008f0 	.word	0x200008f0

08001f98 <__wrap_atexit>:

  int __wrap_atexit (void (*)(void)) {
         return 0;
  }
 8001f98:	2000      	movs	r0, #0
 8001f9a:	4770      	bx	lr

08001f9c <Reset_Handler>:
 8001f9c:	4813      	ldr	r0, [pc, #76]	; (8001fec <LoopForever+0x2>)
 8001f9e:	4685      	mov	sp, r0
 8001fa0:	4813      	ldr	r0, [pc, #76]	; (8001ff0 <LoopForever+0x6>)
 8001fa2:	6801      	ldr	r1, [r0, #0]
 8001fa4:	0e09      	lsrs	r1, r1, #24
 8001fa6:	4a13      	ldr	r2, [pc, #76]	; (8001ff4 <LoopForever+0xa>)
 8001fa8:	4291      	cmp	r1, r2
 8001faa:	d105      	bne.n	8001fb8 <ApplicationStart>
 8001fac:	4812      	ldr	r0, [pc, #72]	; (8001ff8 <LoopForever+0xe>)
 8001fae:	4913      	ldr	r1, [pc, #76]	; (8001ffc <LoopForever+0x12>)
 8001fb0:	6001      	str	r1, [r0, #0]
 8001fb2:	4813      	ldr	r0, [pc, #76]	; (8002000 <LoopForever+0x16>)
 8001fb4:	4913      	ldr	r1, [pc, #76]	; (8002004 <LoopForever+0x1a>)
 8001fb6:	6001      	str	r1, [r0, #0]

08001fb8 <ApplicationStart>:
 8001fb8:	2100      	movs	r1, #0
 8001fba:	e003      	b.n	8001fc4 <LoopCopyDataInit>

08001fbc <CopyDataInit>:
 8001fbc:	4b12      	ldr	r3, [pc, #72]	; (8002008 <LoopForever+0x1e>)
 8001fbe:	585b      	ldr	r3, [r3, r1]
 8001fc0:	5043      	str	r3, [r0, r1]
 8001fc2:	3104      	adds	r1, #4

08001fc4 <LoopCopyDataInit>:
 8001fc4:	4811      	ldr	r0, [pc, #68]	; (800200c <LoopForever+0x22>)
 8001fc6:	4b12      	ldr	r3, [pc, #72]	; (8002010 <LoopForever+0x26>)
 8001fc8:	1842      	adds	r2, r0, r1
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d3f6      	bcc.n	8001fbc <CopyDataInit>
 8001fce:	4a11      	ldr	r2, [pc, #68]	; (8002014 <LoopForever+0x2a>)
 8001fd0:	e002      	b.n	8001fd8 <LoopFillZerobss>

08001fd2 <FillZerobss>:
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	3204      	adds	r2, #4

08001fd8 <LoopFillZerobss>:
 8001fd8:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <LoopForever+0x2e>)
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d3f9      	bcc.n	8001fd2 <FillZerobss>
 8001fde:	f000 f81f 	bl	8002020 <SystemInit>
 8001fe2:	f000 fbf1 	bl	80027c8 <__libc_init_array>
 8001fe6:	f7fe fe19 	bl	8000c1c <main>

08001fea <LoopForever>:
 8001fea:	e7fe      	b.n	8001fea <LoopForever>
 8001fec:	20001800 	.word	0x20001800
 8001ff0:	00000004 	.word	0x00000004
 8001ff4:	0000001f 	.word	0x0000001f
 8001ff8:	40021018 	.word	0x40021018
 8001ffc:	00000001 	.word	0x00000001
 8002000:	40010000 	.word	0x40010000
 8002004:	00000000 	.word	0x00000000
 8002008:	080033f8 	.word	0x080033f8
 800200c:	20000000 	.word	0x20000000
 8002010:	2000084c 	.word	0x2000084c
 8002014:	2000084c 	.word	0x2000084c
 8002018:	200008f0 	.word	0x200008f0

0800201c <ADC1_IRQHandler>:
 800201c:	e7fe      	b.n	800201c <ADC1_IRQHandler>
	...

08002020 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002020:	2101      	movs	r1, #1
 8002022:	4b4b      	ldr	r3, [pc, #300]	; (8002150 <SystemInit+0x130>)
{
 8002024:	b570      	push	{r4, r5, r6, lr}
  RCC->CR |= (uint32_t)0x00000001;
 8002026:	681a      	ldr	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 8002028:	484a      	ldr	r0, [pc, #296]	; (8002154 <SystemInit+0x134>)
  RCC->CR |= (uint32_t)0x00000001;
 800202a:	430a      	orrs	r2, r1
 800202c:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	4002      	ands	r2, r0
 8002032:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	4848      	ldr	r0, [pc, #288]	; (8002158 <SystemInit+0x138>)
 8002038:	4002      	ands	r2, r0
 800203a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	4847      	ldr	r0, [pc, #284]	; (800215c <SystemInit+0x13c>)
 8002040:	4002      	ands	r2, r0
 8002042:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	4846      	ldr	r0, [pc, #280]	; (8002160 <SystemInit+0x140>)
 8002048:	4002      	ands	r2, r0

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800204a:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800204c:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800204e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002050:	4382      	bics	r2, r0
 8002052:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 8002054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002056:	4843      	ldr	r0, [pc, #268]	; (8002164 <SystemInit+0x144>)
 8002058:	4002      	ands	r2, r0
 800205a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800205c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  */
static void SetSysClock(void)
{
  // enable flash prefetch buffer

  FLASH->ACR |= FLASH_ACR_PRFTBE;
 800205e:	3065      	adds	r0, #101	; 0x65
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8002060:	438a      	bics	r2, r1
 8002062:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->CIR = 0x00000000;
 8002064:	2200      	movs	r2, #0
  FLASH->ACR |= FLASH_ACR_PRFTBE;
 8002066:	4940      	ldr	r1, [pc, #256]	; (8002168 <SystemInit+0x148>)
  RCC->CIR = 0x00000000;
 8002068:	609a      	str	r2, [r3, #8]
  FLASH->ACR |= FLASH_ACR_PRFTBE;
 800206a:	680a      	ldr	r2, [r1, #0]
 800206c:	30ff      	adds	r0, #255	; 0xff
 800206e:	4302      	orrs	r2, r0
 8002070:	600a      	str	r2, [r1, #0]

  // enable HSI48

  RCC->CR2 |= RCC_CR2_HSI48ON;
 8002072:	2280      	movs	r2, #128	; 0x80
 8002074:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002076:	0252      	lsls	r2, r2, #9
 8002078:	430a      	orrs	r2, r1
  while((RCC->CR2 & RCC_CR2_HSI48RDY)==0);
 800207a:	2180      	movs	r1, #128	; 0x80
  RCC->CR2 |= RCC_CR2_HSI48ON;
 800207c:	635a      	str	r2, [r3, #52]	; 0x34
  while((RCC->CR2 & RCC_CR2_HSI48RDY)==0);
 800207e:	0289      	lsls	r1, r1, #10
 8002080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002082:	420a      	tst	r2, r1
 8002084:	d0fc      	beq.n	8002080 <SystemInit+0x60>

  // disable the PLL

  RCC->CR &=~ RCC_CR_PLLON;
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4938      	ldr	r1, [pc, #224]	; (800216c <SystemInit+0x14c>)
 800208a:	400a      	ands	r2, r1
  while((RCC->CR & RCC_CR_PLLRDY)!=0);
 800208c:	2180      	movs	r1, #128	; 0x80
  RCC->CR &=~ RCC_CR_PLLON;
 800208e:	601a      	str	r2, [r3, #0]
  while((RCC->CR & RCC_CR_PLLRDY)!=0);
 8002090:	4a2f      	ldr	r2, [pc, #188]	; (8002150 <SystemInit+0x130>)
 8002092:	0489      	lsls	r1, r1, #18
 8002094:	6813      	ldr	r3, [r2, #0]
 8002096:	420b      	tst	r3, r1
 8002098:	d1fc      	bne.n	8002094 <SystemInit+0x74>

  // select HSI48 as the USB clock source

  RCC->CFGR3 = (RCC->CFGR3 &~ RCC_CFGR3_USBSW) | RCC_CFGR3_USBSW_HSI48;
 800209a:	2180      	movs	r1, #128	; 0x80

  // set flash latency = 1

  FLASH->ACR = (FLASH->ACR &~FLASH_ACR_LATENCY) | FLASH_Latency_1;
 800209c:	2001      	movs	r0, #1
  RCC->CFGR3 = (RCC->CFGR3 &~ RCC_CFGR3_USBSW) | RCC_CFGR3_USBSW_HSI48;
 800209e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  RCC->CFGR = (RCC->CFGR &~ RCC_CFGR_HPRE) | RCC_CFGR_HPRE_DIV1;

  // HCLK source = HSI48

  RCC->CFGR = (RCC->CFGR &~ RCC_CFGR_SW) | RCC_CFGR_SW_HSI48;
  while((RCC->CFGR & RCC_CFGR_SWS)!=RCC_CFGR_SWS_HSI48);
 80020a0:	4c2b      	ldr	r4, [pc, #172]	; (8002150 <SystemInit+0x130>)
  RCC->CFGR3 = (RCC->CFGR3 &~ RCC_CFGR3_USBSW) | RCC_CFGR3_USBSW_HSI48;
 80020a2:	438b      	bics	r3, r1
  FLASH->ACR = (FLASH->ACR &~FLASH_ACR_LATENCY) | FLASH_Latency_1;
 80020a4:	4930      	ldr	r1, [pc, #192]	; (8002168 <SystemInit+0x148>)
  RCC->CFGR3 = (RCC->CFGR3 &~ RCC_CFGR3_USBSW) | RCC_CFGR3_USBSW_HSI48;
 80020a6:	6313      	str	r3, [r2, #48]	; 0x30
  FLASH->ACR = (FLASH->ACR &~FLASH_ACR_LATENCY) | FLASH_Latency_1;
 80020a8:	680b      	ldr	r3, [r1, #0]
 80020aa:	4303      	orrs	r3, r0
 80020ac:	600b      	str	r3, [r1, #0]
  RCC->CFGR = (RCC->CFGR &~ RCC_CFGR_HPRE) | RCC_CFGR_HPRE_DIV1;
 80020ae:	21f0      	movs	r1, #240	; 0xf0
 80020b0:	6853      	ldr	r3, [r2, #4]
 80020b2:	438b      	bics	r3, r1
 80020b4:	6053      	str	r3, [r2, #4]
  RCC->CFGR = (RCC->CFGR &~ RCC_CFGR_SW) | RCC_CFGR_SW_HSI48;
 80020b6:	6853      	ldr	r3, [r2, #4]
 80020b8:	39ed      	subs	r1, #237	; 0xed
 80020ba:	430b      	orrs	r3, r1
 80020bc:	6053      	str	r3, [r2, #4]
  while((RCC->CFGR & RCC_CFGR_SWS)!=RCC_CFGR_SWS_HSI48);
 80020be:	220c      	movs	r2, #12
 80020c0:	6863      	ldr	r3, [r4, #4]
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b0c      	cmp	r3, #12
 80020c6:	d1fb      	bne.n	80020c0 <SystemInit+0xa0>

  RCC->CFGR = (RCC->CFGR &~ RCC_CFGR_PPRE) | RCC_CFGR_PPRE_DIV1;

  // enable clock recovery system from USB SOF frames

  RCC_APB1PeriphClockCmd(RCC_APB1Periph_CRS,ENABLE);
 80020c8:	2580      	movs	r5, #128	; 0x80
  RCC->CFGR = (RCC->CFGR &~ RCC_CFGR_PPRE) | RCC_CFGR_PPRE_DIV1;
 80020ca:	6863      	ldr	r3, [r4, #4]
 80020cc:	4a28      	ldr	r2, [pc, #160]	; (8002170 <SystemInit+0x150>)
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_CRS,ENABLE);
 80020ce:	052d      	lsls	r5, r5, #20
  RCC->CFGR = (RCC->CFGR &~ RCC_CFGR_PPRE) | RCC_CFGR_PPRE_DIV1;
 80020d0:	4013      	ands	r3, r2
 80020d2:	6063      	str	r3, [r4, #4]
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_CRS,ENABLE);
 80020d4:	0028      	movs	r0, r5
 80020d6:	2101      	movs	r1, #1
 80020d8:	f000 fafe 	bl	80026d8 <RCC_APB1PeriphClockCmd>

  // Before configuration, reset CRS registers to their default values

  RCC->APB1RSTR |= RCC_APB1RSTR_CRSRST;
 80020dc:	6923      	ldr	r3, [r4, #16]
  RCC->APB1RSTR &=~ RCC_APB1RSTR_CRSRST;
 80020de:	4a25      	ldr	r2, [pc, #148]	; (8002174 <SystemInit+0x154>)
  RCC->APB1RSTR |= RCC_APB1RSTR_CRSRST;
 80020e0:	431d      	orrs	r5, r3
 80020e2:	6125      	str	r5, [r4, #16]
  RCC->APB1RSTR &=~ RCC_APB1RSTR_CRSRST;
 80020e4:	6923      	ldr	r3, [r4, #16]

  // Configure Synchronization input */
  // Clear SYNCDIV[2:0], SYNCSRC[1:0] & SYNCSPOL bits */

  CRS->CFGR &= ~(CRS_CFGR_SYNCDIV | CRS_CFGR_SYNCSRC | CRS_CFGR_SYNCPOL);
 80020e6:	4924      	ldr	r1, [pc, #144]	; (8002178 <SystemInit+0x158>)
  RCC->APB1RSTR &=~ RCC_APB1RSTR_CRSRST;
 80020e8:	4013      	ands	r3, r2
 80020ea:	6123      	str	r3, [r4, #16]
  CRS->CFGR &= ~(CRS_CFGR_SYNCDIV | CRS_CFGR_SYNCSRC | CRS_CFGR_SYNCPOL);
 80020ec:	4b23      	ldr	r3, [pc, #140]	; (800217c <SystemInit+0x15c>)
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	400a      	ands	r2, r1
 80020f2:	605a      	str	r2, [r3, #4]
  // Set the CRS_CFGR_SYNCDIV[2:0] bits according to Prescaler value
  // CRS->CFGR |= 0;

  // Set the SYNCSRC[1:0] bits according to Source value

  CRS->CFGR |= CRS_CFGR_SYNCSRC_1;
 80020f4:	2280      	movs	r2, #128	; 0x80
 80020f6:	6859      	ldr	r1, [r3, #4]
 80020f8:	0592      	lsls	r2, r2, #22
 80020fa:	430a      	orrs	r2, r1
 80020fc:	605a      	str	r2, [r3, #4]
  // CRS->CFGR |= 0;

  // Configure Frequency Error Measurement
  // Clear RELOAD[15:0] & FELIM[7:0] bits

  CRS->CFGR &= ~(CRS_CFGR_RELOAD | CRS_CFGR_FELIM);
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	0e12      	lsrs	r2, r2, #24
 8002102:	0612      	lsls	r2, r2, #24
 8002104:	605a      	str	r2, [r3, #4]

  // Set the RELOAD[15:0] bits according to ReloadValue value

  CRS->CFGR |= 47999;     // (48MHz/1000) -1
 8002106:	6859      	ldr	r1, [r3, #4]
 8002108:	4a1d      	ldr	r2, [pc, #116]	; (8002180 <SystemInit+0x160>)
 800210a:	430a      	orrs	r2, r1
 800210c:	605a      	str	r2, [r3, #4]

  // Set the FELIM[7:0] bits according to ErrorLimitValue value

  CRS->CFGR |= (0x22 << 16);
 800210e:	2288      	movs	r2, #136	; 0x88
 8002110:	6859      	ldr	r1, [r3, #4]
 8002112:	0392      	lsls	r2, r2, #14
 8002114:	430a      	orrs	r2, r1
 8002116:	605a      	str	r2, [r3, #4]

  // Adjust HSI48 oscillator smooth trimming
  // Clear TRIM[5:0] bits

  CRS->CR &= ~CRS_CR_TRIM;
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	491a      	ldr	r1, [pc, #104]	; (8002184 <SystemInit+0x164>)
 800211c:	400a      	ands	r2, r1
 800211e:	601a      	str	r2, [r3, #0]

  // Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value

  CRS->CR |= (0x20 << 8);
 8002120:	2280      	movs	r2, #128	; 0x80
 8002122:	6819      	ldr	r1, [r3, #0]
 8002124:	0192      	lsls	r2, r2, #6
 8002126:	430a      	orrs	r2, r1

  // Enable Automatic trimming

  CRS->CR |= CRS_CR_AUTOTRIMEN;
 8002128:	2140      	movs	r1, #64	; 0x40
  CRS->CR |= (0x20 << 8);
 800212a:	601a      	str	r2, [r3, #0]
  CRS->CR |= CRS_CR_AUTOTRIMEN;
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	601a      	str	r2, [r3, #0]

  // Enable Frequency error counter

  CRS->CR |= CRS_CR_CEN;
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	3920      	subs	r1, #32
 8002136:	430a      	orrs	r2, r1
 8002138:	601a      	str	r2, [r3, #0]

  // Remap PA11-12 to PA9-10 for USB

  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGCOMPEN;
 800213a:	2201      	movs	r2, #1
 800213c:	69a3      	ldr	r3, [r4, #24]
  SYSCFG->CFGR1 |= SYSCFG_CFGR1_PA11_PA12_RMP;
 800213e:	3910      	subs	r1, #16
  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGCOMPEN;
 8002140:	4313      	orrs	r3, r2
  SYSCFG->CFGR1 |= SYSCFG_CFGR1_PA11_PA12_RMP;
 8002142:	4a11      	ldr	r2, [pc, #68]	; (8002188 <SystemInit+0x168>)
  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGCOMPEN;
 8002144:	61a3      	str	r3, [r4, #24]
  SYSCFG->CFGR1 |= SYSCFG_CFGR1_PA11_PA12_RMP;
 8002146:	6813      	ldr	r3, [r2, #0]
 8002148:	430b      	orrs	r3, r1
 800214a:	6013      	str	r3, [r2, #0]
}
 800214c:	bd70      	pop	{r4, r5, r6, pc}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	40021000 	.word	0x40021000
 8002154:	f8ffb80c 	.word	0xf8ffb80c
 8002158:	fef6ffff 	.word	0xfef6ffff
 800215c:	fffbffff 	.word	0xfffbffff
 8002160:	ffc0ffff 	.word	0xffc0ffff
 8002164:	fffffeac 	.word	0xfffffeac
 8002168:	40022000 	.word	0x40022000
 800216c:	feffffff 	.word	0xfeffffff
 8002170:	fffff8ff 	.word	0xfffff8ff
 8002174:	f7ffffff 	.word	0xf7ffffff
 8002178:	48ffffff 	.word	0x48ffffff
 800217c:	40006c00 	.word	0x40006c00
 8002180:	0000bb7f 	.word	0x0000bb7f
 8002184:	ffffc0ff 	.word	0xffffc0ff
 8002188:	40010000 	.word	0x40010000

0800218c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE>:
    void initialise(GPIO_TypeDef *port,
                    uint16_t pins,
                    Gpio::GpioModeType mode,
                    GPIOSpeed_TypeDef speed,
                    Gpio::GpioPullUpDownType pupdType,
                    Gpio::GpioOutputType outputType) {
 800218c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800218e:	4647      	mov	r7, r8
 8002190:	46ce      	mov	lr, r9
 8002192:	b580      	push	{r7, lr}
 8002194:	b083      	sub	sp, #12
 8002196:	4698      	mov	r8, r3
 8002198:	ab0a      	add	r3, sp, #40	; 0x28
 800219a:	781d      	ldrb	r5, [r3, #0]
 800219c:	ab0b      	add	r3, sp, #44	; 0x2c
 800219e:	781f      	ldrb	r7, [r3, #0]

      GPIO_InitTypeDef init;

      // clock on

      RCC_AHBPeriphClockCmd(port==GPIOA ? RCC_AHBPeriph_GPIOA :
 80021a0:	2390      	movs	r3, #144	; 0x90
                    Gpio::GpioOutputType outputType) {
 80021a2:	0004      	movs	r4, r0
 80021a4:	4689      	mov	r9, r1
 80021a6:	0016      	movs	r6, r2
      RCC_AHBPeriphClockCmd(port==GPIOA ? RCC_AHBPeriph_GPIOA :
 80021a8:	05db      	lsls	r3, r3, #23
 80021aa:	4298      	cmp	r0, r3
 80021ac:	d045      	beq.n	800223a <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0xae>
                             port==GPIOB ? RCC_AHBPeriph_GPIOB :
 80021ae:	4b28      	ldr	r3, [pc, #160]	; (8002250 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0xc4>)
 80021b0:	4298      	cmp	r0, r3
 80021b2:	d045      	beq.n	8002240 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0xb4>
                             port==GPIOC ? RCC_AHBPeriph_GPIOC :
 80021b4:	4b27      	ldr	r3, [pc, #156]	; (8002254 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0xc8>)
 80021b6:	4298      	cmp	r0, r3
 80021b8:	d045      	beq.n	8002246 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0xba>
                             port==GPIOD ? RCC_AHBPeriph_GPIOD :
 80021ba:	4b27      	ldr	r3, [pc, #156]	; (8002258 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0xcc>)
 80021bc:	2080      	movs	r0, #128	; 0x80
 80021be:	429c      	cmp	r4, r3
 80021c0:	d044      	beq.n	800224c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0xc0>
 80021c2:	03c0      	lsls	r0, r0, #15
                             RCC_AHBPeriph_GPIOF
                             ,ENABLE);
 80021c4:	2101      	movs	r1, #1
 80021c6:	f000 fa6f 	bl	80026a8 <RCC_AHBPeriphClockCmd>

      // initialise

      init.GPIO_Pin=pins;
 80021ca:	464b      	mov	r3, r9
      init.GPIO_Speed=speed;
 80021cc:	4642      	mov	r2, r8
      init.GPIO_Pin=pins;
 80021ce:	9300      	str	r3, [sp, #0]
      init.GPIO_Speed=speed;
 80021d0:	466b      	mov	r3, sp
 80021d2:	715a      	strb	r2, [r3, #5]

      switch(mode) {
 80021d4:	2e01      	cmp	r6, #1
 80021d6:	d02c      	beq.n	8002232 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0xa6>
 80021d8:	2e00      	cmp	r6, #0
 80021da:	d026      	beq.n	800222a <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x9e>
 80021dc:	2e02      	cmp	r6, #2
 80021de:	d01c      	beq.n	800221a <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x8e>
 80021e0:	2e03      	cmp	r6, #3
 80021e2:	d102      	bne.n	80021ea <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x5e>
        case Gpio::ANALOG:
          init.GPIO_Mode=GPIO_Mode_AN;
          break;

        case Gpio::ALTERNATE_FUNCTION:
          init.GPIO_Mode=GPIO_Mode_AF;
 80021e4:	2302      	movs	r3, #2
 80021e6:	466a      	mov	r2, sp
 80021e8:	7113      	strb	r3, [r2, #4]
          break;
      }

      switch(pupdType) {
 80021ea:	2d01      	cmp	r5, #1
 80021ec:	d003      	beq.n	80021f6 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x6a>
 80021ee:	2d00      	cmp	r5, #0
 80021f0:	d001      	beq.n	80021f6 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x6a>
 80021f2:	2d02      	cmp	r5, #2
 80021f4:	d101      	bne.n	80021fa <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x6e>
        case Gpio::PUPD_UP:
          init.GPIO_PuPd=GPIO_PuPd_UP;
          break;

        case Gpio::PUPD_DOWN:
          init.GPIO_PuPd=GPIO_PuPd_DOWN;
 80021f6:	466b      	mov	r3, sp
 80021f8:	71dd      	strb	r5, [r3, #7]
          break;
      }

      switch(outputType) {
 80021fa:	2f00      	cmp	r7, #0
 80021fc:	d011      	beq.n	8002222 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x96>
 80021fe:	2f01      	cmp	r7, #1
 8002200:	d102      	bne.n	8002208 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x7c>
        case Gpio::OPEN_DRAIN:
          init.GPIO_OType=GPIO_OType_OD;
          break;

        case Gpio::PUSH_PULL:
          init.GPIO_OType=GPIO_OType_PP;
 8002202:	2300      	movs	r3, #0
 8002204:	466a      	mov	r2, sp
 8002206:	7193      	strb	r3, [r2, #6]
          break;
      }

      GPIO_Init(port,&init);
 8002208:	4669      	mov	r1, sp
 800220a:	0020      	movs	r0, r4
 800220c:	f000 f99e 	bl	800254c <GPIO_Init>
    }
 8002210:	b003      	add	sp, #12
 8002212:	bc0c      	pop	{r2, r3}
 8002214:	4690      	mov	r8, r2
 8002216:	4699      	mov	r9, r3
 8002218:	bdf0      	pop	{r4, r5, r6, r7, pc}
          init.GPIO_Mode=GPIO_Mode_AN;
 800221a:	2303      	movs	r3, #3
 800221c:	466a      	mov	r2, sp
 800221e:	7113      	strb	r3, [r2, #4]
          break;
 8002220:	e7e3      	b.n	80021ea <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x5e>
          init.GPIO_OType=GPIO_OType_OD;
 8002222:	2301      	movs	r3, #1
 8002224:	466a      	mov	r2, sp
 8002226:	7193      	strb	r3, [r2, #6]
          break;
 8002228:	e7ee      	b.n	8002208 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x7c>
          init.GPIO_Mode=GPIO_Mode_OUT;
 800222a:	2301      	movs	r3, #1
 800222c:	466a      	mov	r2, sp
 800222e:	7113      	strb	r3, [r2, #4]
          break;
 8002230:	e7db      	b.n	80021ea <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x5e>
          init.GPIO_Mode=GPIO_Mode_IN;
 8002232:	2300      	movs	r3, #0
 8002234:	466a      	mov	r2, sp
 8002236:	7113      	strb	r3, [r2, #4]
          break;
 8002238:	e7d7      	b.n	80021ea <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x5e>
      RCC_AHBPeriphClockCmd(port==GPIOA ? RCC_AHBPeriph_GPIOA :
 800223a:	2080      	movs	r0, #128	; 0x80
 800223c:	0280      	lsls	r0, r0, #10
 800223e:	e7c1      	b.n	80021c4 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x38>
                             port==GPIOB ? RCC_AHBPeriph_GPIOB :
 8002240:	2080      	movs	r0, #128	; 0x80
 8002242:	02c0      	lsls	r0, r0, #11
 8002244:	e7be      	b.n	80021c4 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x38>
                             port==GPIOC ? RCC_AHBPeriph_GPIOC :
 8002246:	2080      	movs	r0, #128	; 0x80
 8002248:	0300      	lsls	r0, r0, #12
 800224a:	e7bb      	b.n	80021c4 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x38>
                             port==GPIOD ? RCC_AHBPeriph_GPIOD :
 800224c:	0340      	lsls	r0, r0, #13
 800224e:	e7b9      	b.n	80021c4 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x38>
 8002250:	48000400 	.word	0x48000400
 8002254:	48000800 	.word	0x48000800
 8002258:	48000c00 	.word	0x48000c00

0800225c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh>:
                    uint8_t afSelection) {
 800225c:	b570      	push	{r4, r5, r6, lr}
 800225e:	000c      	movs	r4, r1
 8002260:	0005      	movs	r5, r0
 8002262:	b082      	sub	sp, #8
 8002264:	a906      	add	r1, sp, #24
 8002266:	a807      	add	r0, sp, #28
 8002268:	7809      	ldrb	r1, [r1, #0]
 800226a:	7800      	ldrb	r0, [r0, #0]
 800226c:	ae08      	add	r6, sp, #32
 800226e:	7836      	ldrb	r6, [r6, #0]
      initialise(port,pins,mode,speed,pupdType,outputType);
 8002270:	9001      	str	r0, [sp, #4]
 8002272:	9100      	str	r1, [sp, #0]
 8002274:	0028      	movs	r0, r5
 8002276:	0021      	movs	r1, r4
 8002278:	f7ff ff88 	bl	800218c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE>
        if((pins & bit)!=0)
 800227c:	07e3      	lsls	r3, r4, #31
 800227e:	d421      	bmi.n	80022c4 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x68>
 8002280:	07a3      	lsls	r3, r4, #30
 8002282:	d426      	bmi.n	80022d2 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x76>
 8002284:	0763      	lsls	r3, r4, #29
 8002286:	d42b      	bmi.n	80022e0 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x84>
 8002288:	0723      	lsls	r3, r4, #28
 800228a:	d430      	bmi.n	80022ee <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x92>
 800228c:	06e3      	lsls	r3, r4, #27
 800228e:	d435      	bmi.n	80022fc <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0xa0>
 8002290:	06a3      	lsls	r3, r4, #26
 8002292:	d43a      	bmi.n	800230a <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0xae>
 8002294:	0663      	lsls	r3, r4, #25
 8002296:	d43f      	bmi.n	8002318 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0xbc>
 8002298:	0623      	lsls	r3, r4, #24
 800229a:	d444      	bmi.n	8002326 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0xca>
 800229c:	05e3      	lsls	r3, r4, #23
 800229e:	d449      	bmi.n	8002334 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0xd8>
 80022a0:	05a3      	lsls	r3, r4, #22
 80022a2:	d44e      	bmi.n	8002342 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0xe6>
 80022a4:	0563      	lsls	r3, r4, #21
 80022a6:	d453      	bmi.n	8002350 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0xf4>
 80022a8:	0523      	lsls	r3, r4, #20
 80022aa:	d458      	bmi.n	800235e <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x102>
 80022ac:	04e3      	lsls	r3, r4, #19
 80022ae:	d45d      	bmi.n	800236c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x110>
 80022b0:	04a3      	lsls	r3, r4, #18
 80022b2:	d462      	bmi.n	800237a <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x11e>
 80022b4:	0463      	lsls	r3, r4, #17
 80022b6:	d467      	bmi.n	8002388 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x12c>
 80022b8:	b224      	sxth	r4, r4
 80022ba:	2c00      	cmp	r4, #0
 80022bc:	da00      	bge.n	80022c0 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x64>
 80022be:	e06c      	b.n	800239a <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x13e>
    }
 80022c0:	b002      	add	sp, #8
 80022c2:	bd70      	pop	{r4, r5, r6, pc}
          GPIO_PinAFConfig(port,source,afSelection);
 80022c4:	0032      	movs	r2, r6
 80022c6:	2100      	movs	r1, #0
 80022c8:	0028      	movs	r0, r5
 80022ca:	f000 f9af 	bl	800262c <GPIO_PinAFConfig>
        if((pins & bit)!=0)
 80022ce:	07a3      	lsls	r3, r4, #30
 80022d0:	d5d8      	bpl.n	8002284 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x28>
          GPIO_PinAFConfig(port,source,afSelection);
 80022d2:	0032      	movs	r2, r6
 80022d4:	2101      	movs	r1, #1
 80022d6:	0028      	movs	r0, r5
 80022d8:	f000 f9a8 	bl	800262c <GPIO_PinAFConfig>
        if((pins & bit)!=0)
 80022dc:	0763      	lsls	r3, r4, #29
 80022de:	d5d3      	bpl.n	8002288 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x2c>
          GPIO_PinAFConfig(port,source,afSelection);
 80022e0:	0032      	movs	r2, r6
 80022e2:	2102      	movs	r1, #2
 80022e4:	0028      	movs	r0, r5
 80022e6:	f000 f9a1 	bl	800262c <GPIO_PinAFConfig>
        if((pins & bit)!=0)
 80022ea:	0723      	lsls	r3, r4, #28
 80022ec:	d5ce      	bpl.n	800228c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x30>
          GPIO_PinAFConfig(port,source,afSelection);
 80022ee:	0032      	movs	r2, r6
 80022f0:	2103      	movs	r1, #3
 80022f2:	0028      	movs	r0, r5
 80022f4:	f000 f99a 	bl	800262c <GPIO_PinAFConfig>
        if((pins & bit)!=0)
 80022f8:	06e3      	lsls	r3, r4, #27
 80022fa:	d5c9      	bpl.n	8002290 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x34>
          GPIO_PinAFConfig(port,source,afSelection);
 80022fc:	0032      	movs	r2, r6
 80022fe:	2104      	movs	r1, #4
 8002300:	0028      	movs	r0, r5
 8002302:	f000 f993 	bl	800262c <GPIO_PinAFConfig>
        if((pins & bit)!=0)
 8002306:	06a3      	lsls	r3, r4, #26
 8002308:	d5c4      	bpl.n	8002294 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x38>
          GPIO_PinAFConfig(port,source,afSelection);
 800230a:	0032      	movs	r2, r6
 800230c:	2105      	movs	r1, #5
 800230e:	0028      	movs	r0, r5
 8002310:	f000 f98c 	bl	800262c <GPIO_PinAFConfig>
        if((pins & bit)!=0)
 8002314:	0663      	lsls	r3, r4, #25
 8002316:	d5bf      	bpl.n	8002298 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x3c>
          GPIO_PinAFConfig(port,source,afSelection);
 8002318:	0032      	movs	r2, r6
 800231a:	2106      	movs	r1, #6
 800231c:	0028      	movs	r0, r5
 800231e:	f000 f985 	bl	800262c <GPIO_PinAFConfig>
        if((pins & bit)!=0)
 8002322:	0623      	lsls	r3, r4, #24
 8002324:	d5ba      	bpl.n	800229c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x40>
          GPIO_PinAFConfig(port,source,afSelection);
 8002326:	0032      	movs	r2, r6
 8002328:	2107      	movs	r1, #7
 800232a:	0028      	movs	r0, r5
 800232c:	f000 f97e 	bl	800262c <GPIO_PinAFConfig>
        if((pins & bit)!=0)
 8002330:	05e3      	lsls	r3, r4, #23
 8002332:	d5b5      	bpl.n	80022a0 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x44>
          GPIO_PinAFConfig(port,source,afSelection);
 8002334:	0032      	movs	r2, r6
 8002336:	2108      	movs	r1, #8
 8002338:	0028      	movs	r0, r5
 800233a:	f000 f977 	bl	800262c <GPIO_PinAFConfig>
        if((pins & bit)!=0)
 800233e:	05a3      	lsls	r3, r4, #22
 8002340:	d5b0      	bpl.n	80022a4 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x48>
          GPIO_PinAFConfig(port,source,afSelection);
 8002342:	0032      	movs	r2, r6
 8002344:	2109      	movs	r1, #9
 8002346:	0028      	movs	r0, r5
 8002348:	f000 f970 	bl	800262c <GPIO_PinAFConfig>
        if((pins & bit)!=0)
 800234c:	0563      	lsls	r3, r4, #21
 800234e:	d5ab      	bpl.n	80022a8 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x4c>
          GPIO_PinAFConfig(port,source,afSelection);
 8002350:	0032      	movs	r2, r6
 8002352:	210a      	movs	r1, #10
 8002354:	0028      	movs	r0, r5
 8002356:	f000 f969 	bl	800262c <GPIO_PinAFConfig>
        if((pins & bit)!=0)
 800235a:	0523      	lsls	r3, r4, #20
 800235c:	d5a6      	bpl.n	80022ac <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x50>
          GPIO_PinAFConfig(port,source,afSelection);
 800235e:	0032      	movs	r2, r6
 8002360:	210b      	movs	r1, #11
 8002362:	0028      	movs	r0, r5
 8002364:	f000 f962 	bl	800262c <GPIO_PinAFConfig>
        if((pins & bit)!=0)
 8002368:	04e3      	lsls	r3, r4, #19
 800236a:	d5a1      	bpl.n	80022b0 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x54>
          GPIO_PinAFConfig(port,source,afSelection);
 800236c:	0032      	movs	r2, r6
 800236e:	210c      	movs	r1, #12
 8002370:	0028      	movs	r0, r5
 8002372:	f000 f95b 	bl	800262c <GPIO_PinAFConfig>
        if((pins & bit)!=0)
 8002376:	04a3      	lsls	r3, r4, #18
 8002378:	d59c      	bpl.n	80022b4 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x58>
          GPIO_PinAFConfig(port,source,afSelection);
 800237a:	0032      	movs	r2, r6
 800237c:	210d      	movs	r1, #13
 800237e:	0028      	movs	r0, r5
 8002380:	f000 f954 	bl	800262c <GPIO_PinAFConfig>
        if((pins & bit)!=0)
 8002384:	0463      	lsls	r3, r4, #17
 8002386:	d597      	bpl.n	80022b8 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x5c>
          GPIO_PinAFConfig(port,source,afSelection);
 8002388:	0032      	movs	r2, r6
 800238a:	210e      	movs	r1, #14
 800238c:	0028      	movs	r0, r5
        if((pins & bit)!=0)
 800238e:	b224      	sxth	r4, r4
          GPIO_PinAFConfig(port,source,afSelection);
 8002390:	f000 f94c 	bl	800262c <GPIO_PinAFConfig>
        if((pins & bit)!=0)
 8002394:	2c00      	cmp	r4, #0
 8002396:	db00      	blt.n	800239a <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x13e>
 8002398:	e792      	b.n	80022c0 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x64>
          GPIO_PinAFConfig(port,source,afSelection);
 800239a:	0032      	movs	r2, r6
 800239c:	210f      	movs	r1, #15
 800239e:	0028      	movs	r0, r5
 80023a0:	f000 f944 	bl	800262c <GPIO_PinAFConfig>
    }
 80023a4:	e78c      	b.n	80022c0 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x64>
 80023a6:	46c0      	nop			; (mov r8, r8)

080023a8 <__aeabi_uidiv>:
 80023a8:	2900      	cmp	r1, #0
 80023aa:	d100      	bne.n	80023ae <L_no_div0>
 80023ac:	e014      	b.n	80023d8 <__aeabi_idiv0>

080023ae <L_no_div0>:
 80023ae:	2201      	movs	r2, #1
 80023b0:	2300      	movs	r3, #0
 80023b2:	4288      	cmp	r0, r1
 80023b4:	d906      	bls.n	80023c4 <L_sub_loop0>
 80023b6:	3100      	adds	r1, #0
 80023b8:	d404      	bmi.n	80023c4 <L_sub_loop0>

080023ba <L_denom_shift_loop>:
 80023ba:	0052      	lsls	r2, r2, #1
 80023bc:	0049      	lsls	r1, r1, #1
 80023be:	d401      	bmi.n	80023c4 <L_sub_loop0>
 80023c0:	4288      	cmp	r0, r1
 80023c2:	d8fa      	bhi.n	80023ba <L_denom_shift_loop>

080023c4 <L_sub_loop0>:
 80023c4:	4288      	cmp	r0, r1
 80023c6:	d301      	bcc.n	80023cc <L_dont_sub0>
 80023c8:	1a40      	subs	r0, r0, r1
 80023ca:	4313      	orrs	r3, r2

080023cc <L_dont_sub0>:
 80023cc:	0849      	lsrs	r1, r1, #1
 80023ce:	0852      	lsrs	r2, r2, #1
 80023d0:	d1f8      	bne.n	80023c4 <L_sub_loop0>
 80023d2:	4601      	mov	r1, r0
 80023d4:	4618      	mov	r0, r3
 80023d6:	4770      	bx	lr

080023d8 <__aeabi_idiv0>:
 80023d8:	f7ff fffe 	bl	80023d8 <__aeabi_idiv0>

080023dc <_ZN9stm32plus16MillisecondTimer10initialiseEv>:

  /**
   * Initialise SysTick to tick at 1ms by initialising it with SystemCoreClock/1000.
   */

  void MillisecondTimer::initialise() {
 80023dc:	b510      	push	{r4, lr}
    _counter=0;
 80023de:	2400      	movs	r4, #0
    SysTick_Config(SystemCoreClock / 1000);
 80023e0:	21fa      	movs	r1, #250	; 0xfa
    _counter=0;
 80023e2:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <_ZN9stm32plus16MillisecondTimer10initialiseEv+0x38>)
    SysTick_Config(SystemCoreClock / 1000);
 80023e4:	0089      	lsls	r1, r1, #2
    _counter=0;
 80023e6:	601c      	str	r4, [r3, #0]
    SysTick_Config(SystemCoreClock / 1000);
 80023e8:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <_ZN9stm32plus16MillisecondTimer10initialiseEv+0x3c>)
 80023ea:	6818      	ldr	r0, [r3, #0]
 80023ec:	f7ff ffdc 	bl	80023a8 <__aeabi_uidiv>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 80023f0:	4b0a      	ldr	r3, [pc, #40]	; (800241c <_ZN9stm32plus16MillisecondTimer10initialiseEv+0x40>)
 80023f2:	3801      	subs	r0, #1
 80023f4:	4298      	cmp	r0, r3
 80023f6:	d80c      	bhi.n	8002412 <_ZN9stm32plus16MillisecondTimer10initialiseEv+0x36>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80023f8:	21c0      	movs	r1, #192	; 0xc0

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80023fa:	4a09      	ldr	r2, [pc, #36]	; (8002420 <_ZN9stm32plus16MillisecondTimer10initialiseEv+0x44>)
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80023fc:	0609      	lsls	r1, r1, #24
  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80023fe:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8002400:	4808      	ldr	r0, [pc, #32]	; (8002424 <_ZN9stm32plus16MillisecondTimer10initialiseEv+0x48>)
 8002402:	6a03      	ldr	r3, [r0, #32]
 8002404:	021b      	lsls	r3, r3, #8
 8002406:	0a1b      	lsrs	r3, r3, #8
 8002408:	430b      	orrs	r3, r1
 800240a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800240c:	2307      	movs	r3, #7
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800240e:	6094      	str	r4, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002410:	6013      	str	r3, [r2, #0]
  }
 8002412:	bd10      	pop	{r4, pc}
 8002414:	20000880 	.word	0x20000880
 8002418:	20000004 	.word	0x20000004
 800241c:	00ffffff 	.word	0x00ffffff
 8002420:	e000e010 	.word	0xe000e010
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <_ZN9stm32plus16MillisecondTimer5delayEm>:

  void MillisecondTimer::delay(uint32_t millis) {

    uint32_t target;

    target=_counter+millis;
 8002428:	4a03      	ldr	r2, [pc, #12]	; (8002438 <_ZN9stm32plus16MillisecondTimer5delayEm+0x10>)
 800242a:	6813      	ldr	r3, [r2, #0]
 800242c:	1818      	adds	r0, r3, r0
    while(_counter<target);
 800242e:	6813      	ldr	r3, [r2, #0]
 8002430:	4298      	cmp	r0, r3
 8002432:	d8fc      	bhi.n	800242e <_ZN9stm32plus16MillisecondTimer5delayEm+0x6>
  }
 8002434:	4770      	bx	lr
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	20000880 	.word	0x20000880

0800243c <SysTick_Handler>:
 * SysTick interrupt handler
 */

extern "C" {
  void __attribute__ ((weak,interrupt("IRQ"))) SysTick_Handler(void) {
    stm32plus::MillisecondTimer::_counter++;
 800243c:	4a02      	ldr	r2, [pc, #8]	; (8002448 <SysTick_Handler+0xc>)
 800243e:	6813      	ldr	r3, [r2, #0]
 8002440:	3301      	adds	r3, #1
 8002442:	6013      	str	r3, [r2, #0]
  }
 8002444:	4770      	bx	lr
 8002446:	46c0      	nop			; (mov r8, r8)
 8002448:	20000880 	.word	0x20000880

0800244c <_ZN9stm32plus19UsbInterruptHandlerD1Ev>:
   * USB interrupt event handling
   */

  DECLARE_EVENT_SIGNATURE(UsbInterrupt,void());

  struct UsbInterruptHandler {
 800244c:	b570      	push	{r4, r5, r6, lr}
 800244e:	0005      	movs	r5, r0
  _Slist_node<_Tp>* __cur = (_Slist_node<_Tp>*) (__before_first->_M_next);
 8002450:	68c0      	ldr	r0, [r0, #12]
  while (__cur != __last_node) {
 8002452:	2800      	cmp	r0, #0
 8002454:	d004      	beq.n	8002460 <_ZN9stm32plus19UsbInterruptHandlerD1Ev+0x14>
    __cur = (_Slist_node<_Tp>*) __cur->_M_next;
 8002456:	6804      	ldr	r4, [r0, #0]
    stm32_free(__p);
 8002458:	f000 f9e4 	bl	8002824 <free>
 800245c:	1e20      	subs	r0, r4, #0
  while (__cur != __last_node) {
 800245e:	d1fa      	bne.n	8002456 <_ZN9stm32plus19UsbInterruptHandlerD1Ev+0xa>
 8002460:	0028      	movs	r0, r5
 8002462:	bd70      	pop	{r4, r5, r6, pc}

08002464 <USB_IRQHandler>:
  size_type size() const { return __slist_size(this->_M_head._M_next); }
 8002464:	4919      	ldr	r1, [pc, #100]	; (80024cc <USB_IRQHandler+0x68>)

  /*
   * USB interrupt handler
   */

  void __attribute__ ((interrupt("IRQ"))) USB_IRQHandler(void) {
 8002466:	b570      	push	{r4, r5, r6, lr}
 8002468:	68cc      	ldr	r4, [r1, #12]
  for ( ; __node != 0; __node = __node->_M_next)
 800246a:	2c00      	cmp	r4, #0
 800246c:	d013      	beq.n	8002496 <USB_IRQHandler+0x32>
 800246e:	0023      	movs	r3, r4
 8002470:	2200      	movs	r2, #0
 8002472:	681b      	ldr	r3, [r3, #0]
    ++__result;
 8002474:	3201      	adds	r2, #1
  for ( ; __node != 0; __node = __node->_M_next)
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1fb      	bne.n	8002472 <USB_IRQHandler+0xe>
        if(_slots.size()==1)
 800247a:	2a01      	cmp	r2, #1
 800247c:	d017      	beq.n	80024ae <USB_IRQHandler+0x4a>
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(); }
 800247e:	2501      	movs	r5, #1
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8002480:	68e3      	ldr	r3, [r4, #12]
 8002482:	6860      	ldr	r0, [r4, #4]
 8002484:	68a2      	ldr	r2, [r4, #8]
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(); }
 8002486:	421d      	tst	r5, r3
 8002488:	d108      	bne.n	800249c <USB_IRQHandler+0x38>
 800248a:	105b      	asrs	r3, r3, #1
 800248c:	18c0      	adds	r0, r0, r3
 800248e:	4790      	blx	r2
  void _M_incr() { _M_node = _M_node->_M_next; }
 8002490:	6824      	ldr	r4, [r4, #0]
          for(auto it=_slots.begin();it!=_slots.end();it++)
 8002492:	2c00      	cmp	r4, #0
 8002494:	d1f4      	bne.n	8002480 <USB_IRQHandler+0x1c>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
 8002496:	f3bf 8f4f 	dsb	sy
    stm32plus::usbInterrupt.UsbInterruptEventSender.raiseEvent();
    __DSB();
  }
 800249a:	bd70      	pop	{r4, r5, r6, pc}
 800249c:	105b      	asrs	r3, r3, #1
 800249e:	18c0      	adds	r0, r0, r3
 80024a0:	6803      	ldr	r3, [r0, #0]
 80024a2:	589b      	ldr	r3, [r3, r2]
 80024a4:	4798      	blx	r3
 80024a6:	6824      	ldr	r4, [r4, #0]
 80024a8:	2c00      	cmp	r4, #0
 80024aa:	d1e9      	bne.n	8002480 <USB_IRQHandler+0x1c>
 80024ac:	e7f3      	b.n	8002496 <USB_IRQHandler+0x32>
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 80024ae:	688b      	ldr	r3, [r1, #8]
 80024b0:	6808      	ldr	r0, [r1, #0]
 80024b2:	684c      	ldr	r4, [r1, #4]
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(); }
 80024b4:	421a      	tst	r2, r3
 80024b6:	d005      	beq.n	80024c4 <USB_IRQHandler+0x60>
 80024b8:	105b      	asrs	r3, r3, #1
 80024ba:	18c0      	adds	r0, r0, r3
 80024bc:	6803      	ldr	r3, [r0, #0]
 80024be:	591c      	ldr	r4, [r3, r4]
 80024c0:	47a0      	blx	r4
 80024c2:	e7e8      	b.n	8002496 <USB_IRQHandler+0x32>
 80024c4:	105b      	asrs	r3, r3, #1
 80024c6:	18c0      	adds	r0, r0, r3
 80024c8:	47a0      	blx	r4
 80024ca:	e7e4      	b.n	8002496 <USB_IRQHandler+0x32>
 80024cc:	20000884 	.word	0x20000884

080024d0 <_GLOBAL__sub_I__ZN9stm32plus12usbInterruptE>:
  DelegateMemento() : m_pthis(0), m_pFunction(0) {};
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	b510      	push	{r4, lr}
 80024d4:	4804      	ldr	r0, [pc, #16]	; (80024e8 <_GLOBAL__sub_I__ZN9stm32plus12usbInterruptE+0x18>)
  UsbInterruptHandler usbInterrupt;
 80024d6:	4a05      	ldr	r2, [pc, #20]	; (80024ec <_GLOBAL__sub_I__ZN9stm32plus12usbInterruptE+0x1c>)
 80024d8:	6003      	str	r3, [r0, #0]
 80024da:	6043      	str	r3, [r0, #4]
 80024dc:	6083      	str	r3, [r0, #8]
    : _Base(__a) { this->_M_head._M_next = 0; }
 80024de:	60c3      	str	r3, [r0, #12]
 80024e0:	4903      	ldr	r1, [pc, #12]	; (80024f0 <_GLOBAL__sub_I__ZN9stm32plus12usbInterruptE+0x20>)
 80024e2:	f000 f961 	bl	80027a8 <__aeabi_atexit>
}
 80024e6:	bd10      	pop	{r4, pc}
 80024e8:	20000884 	.word	0x20000884
 80024ec:	20000000 	.word	0x20000000
 80024f0:	0800244d 	.word	0x0800244d

080024f4 <DMA_Init>:
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration ----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 80024f4:	6803      	ldr	r3, [r0, #0]

  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 80024f6:	4a0d      	ldr	r2, [pc, #52]	; (800252c <DMA_Init+0x38>)
{
 80024f8:	b510      	push	{r4, lr}
  tmpreg &= CCR_CLEAR_MASK;
 80024fa:	401a      	ands	r2, r3
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80024fc:	6a0c      	ldr	r4, [r1, #32]
 80024fe:	688b      	ldr	r3, [r1, #8]
 8002500:	4323      	orrs	r3, r4
 8002502:	690c      	ldr	r4, [r1, #16]
 8002504:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002506:	694c      	ldr	r4, [r1, #20]
 8002508:	4323      	orrs	r3, r4
 800250a:	698c      	ldr	r4, [r1, #24]
 800250c:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800250e:	69cc      	ldr	r4, [r1, #28]
 8002510:	4323      	orrs	r3, r4
 8002512:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8002514:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8002516:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8002518:	4323      	orrs	r3, r4
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 800251a:	4313      	orrs	r3, r2

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 800251c:	6003      	str	r3, [r0, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 800251e:	68cb      	ldr	r3, [r1, #12]
 8002520:	6043      	str	r3, [r0, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ---------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8002522:	680b      	ldr	r3, [r1, #0]
 8002524:	6083      	str	r3, [r0, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8002526:	684b      	ldr	r3, [r1, #4]
 8002528:	60c3      	str	r3, [r0, #12]
}
 800252a:	bd10      	pop	{r4, pc}
 800252c:	ffff800f 	.word	0xffff800f

08002530 <DMA_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR_EN;
 8002530:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 8002532:	2900      	cmp	r1, #0
 8002534:	d103      	bne.n	800253e <DMA_Cmd+0xe>
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 8002536:	4a04      	ldr	r2, [pc, #16]	; (8002548 <DMA_Cmd+0x18>)
 8002538:	4013      	ands	r3, r2
 800253a:	6003      	str	r3, [r0, #0]
  }
}
 800253c:	4770      	bx	lr
    DMAy_Channelx->CCR |= DMA_CCR_EN;
 800253e:	2201      	movs	r2, #1
 8002540:	4313      	orrs	r3, r2
 8002542:	6003      	str	r3, [r0, #0]
 8002544:	e7fa      	b.n	800253c <DMA_Cmd+0xc>
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	0000fffe 	.word	0x0000fffe

0800254c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800254c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800254e:	4657      	mov	r7, sl
 8002550:	4645      	mov	r5, r8
 8002552:	46de      	mov	lr, fp
 8002554:	464e      	mov	r6, r9
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002556:	2403      	movs	r4, #3
{
 8002558:	b5e0      	push	{r5, r6, r7, lr}
 800255a:	468c      	mov	ip, r1
 800255c:	b083      	sub	sp, #12
 800255e:	6809      	ldr	r1, [r1, #0]
 8002560:	2200      	movs	r2, #0
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002562:	2300      	movs	r3, #0
    pos = ((uint32_t)0x01) << pinpos;
 8002564:	2701      	movs	r7, #1
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002566:	46a0      	mov	r8, r4
 8002568:	e003      	b.n	8002572 <GPIO_Init+0x26>
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800256a:	3301      	adds	r3, #1
 800256c:	3202      	adds	r2, #2
 800256e:	2b10      	cmp	r3, #16
 8002570:	d027      	beq.n	80025c2 <GPIO_Init+0x76>
    pos = ((uint32_t)0x01) << pinpos;
 8002572:	003c      	movs	r4, r7
 8002574:	409c      	lsls	r4, r3
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002576:	0025      	movs	r5, r4
 8002578:	400d      	ands	r5, r1
    if (currentpin == pos)
 800257a:	42ac      	cmp	r4, r5
 800257c:	d1f5      	bne.n	800256a <GPIO_Init+0x1e>
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800257e:	4665      	mov	r5, ip
 8002580:	792d      	ldrb	r5, [r5, #4]
 8002582:	1e6e      	subs	r6, r5, #1
 8002584:	46ab      	mov	fp, r5
 8002586:	2e01      	cmp	r6, #1
 8002588:	d922      	bls.n	80025d0 <GPIO_Init+0x84>
 800258a:	4646      	mov	r6, r8
 800258c:	4096      	lsls	r6, r2
 800258e:	43f4      	mvns	r4, r6
 8002590:	0026      	movs	r6, r4
 8002592:	9401      	str	r4, [sp, #4]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002594:	465d      	mov	r5, fp
 8002596:	4095      	lsls	r5, r2
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002598:	6804      	ldr	r4, [r0, #0]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800259a:	3301      	adds	r3, #1
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800259c:	4026      	ands	r6, r4
 800259e:	6006      	str	r6, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80025a0:	6804      	ldr	r4, [r0, #0]
 80025a2:	4325      	orrs	r5, r4
 80025a4:	6005      	str	r5, [r0, #0]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80025a6:	4645      	mov	r5, r8
 80025a8:	4095      	lsls	r5, r2
 80025aa:	68c4      	ldr	r4, [r0, #12]
 80025ac:	43ac      	bics	r4, r5
 80025ae:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80025b0:	4664      	mov	r4, ip
 80025b2:	79e4      	ldrb	r4, [r4, #7]
 80025b4:	68c5      	ldr	r5, [r0, #12]
 80025b6:	4094      	lsls	r4, r2
 80025b8:	432c      	orrs	r4, r5
 80025ba:	60c4      	str	r4, [r0, #12]
 80025bc:	3202      	adds	r2, #2
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80025be:	2b10      	cmp	r3, #16
 80025c0:	d1d7      	bne.n	8002572 <GPIO_Init+0x26>
    }
  }
}
 80025c2:	b003      	add	sp, #12
 80025c4:	bc3c      	pop	{r2, r3, r4, r5}
 80025c6:	4690      	mov	r8, r2
 80025c8:	4699      	mov	r9, r3
 80025ca:	46a2      	mov	sl, r4
 80025cc:	46ab      	mov	fp, r5
 80025ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80025d0:	4646      	mov	r6, r8
 80025d2:	4096      	lsls	r6, r2
 80025d4:	43f6      	mvns	r6, r6
 80025d6:	6885      	ldr	r5, [r0, #8]
 80025d8:	9601      	str	r6, [sp, #4]
 80025da:	4035      	ands	r5, r6
 80025dc:	6085      	str	r5, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80025de:	6885      	ldr	r5, [r0, #8]
 80025e0:	46aa      	mov	sl, r5
 80025e2:	4665      	mov	r5, ip
 80025e4:	796d      	ldrb	r5, [r5, #5]
 80025e6:	4095      	lsls	r5, r2
 80025e8:	46a9      	mov	r9, r5
 80025ea:	4655      	mov	r5, sl
 80025ec:	464e      	mov	r6, r9
 80025ee:	4335      	orrs	r5, r6
 80025f0:	6085      	str	r5, [r0, #8]
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 80025f2:	8885      	ldrh	r5, [r0, #4]
 80025f4:	9e01      	ldr	r6, [sp, #4]
 80025f6:	43a5      	bics	r5, r4
 80025f8:	8085      	strh	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80025fa:	4665      	mov	r5, ip
 80025fc:	79ad      	ldrb	r5, [r5, #6]
 80025fe:	8884      	ldrh	r4, [r0, #4]
 8002600:	409d      	lsls	r5, r3
 8002602:	432c      	orrs	r4, r5
 8002604:	b2a4      	uxth	r4, r4
 8002606:	8084      	strh	r4, [r0, #4]
 8002608:	e7c4      	b.n	8002594 <GPIO_Init+0x48>
 800260a:	46c0      	nop			; (mov r8, r8)

0800260c <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800260c:	8a00      	ldrh	r0, [r0, #16]
 800260e:	4008      	ands	r0, r1
 8002610:	1e41      	subs	r1, r0, #1
 8002612:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8002614:	b2c0      	uxtb	r0, r0
}
 8002616:	4770      	bx	lr

08002618 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
 8002618:	6181      	str	r1, [r0, #24]
}
 800261a:	4770      	bx	lr

0800261c <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
 800261c:	8501      	strh	r1, [r0, #40]	; 0x28
}
 800261e:	4770      	bx	lr

08002620 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8002620:	2a00      	cmp	r2, #0
 8002622:	d101      	bne.n	8002628 <GPIO_WriteBit+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 8002624:	8501      	strh	r1, [r0, #40]	; 0x28
  }
}
 8002626:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8002628:	6181      	str	r1, [r0, #24]
 800262a:	e7fc      	b.n	8002626 <GPIO_WriteBit+0x6>

0800262c <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 800262c:	2307      	movs	r3, #7
{
 800262e:	b510      	push	{r4, lr}
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8002630:	240f      	movs	r4, #15
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8002632:	400b      	ands	r3, r1
 8002634:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8002636:	409c      	lsls	r4, r3
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8002638:	409a      	lsls	r2, r3
 800263a:	08c9      	lsrs	r1, r1, #3
 800263c:	0089      	lsls	r1, r1, #2
 800263e:	1840      	adds	r0, r0, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8002640:	6a01      	ldr	r1, [r0, #32]
 8002642:	43a1      	bics	r1, r4
 8002644:	6201      	str	r1, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8002646:	6a01      	ldr	r1, [r0, #32]
 8002648:	430a      	orrs	r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800264a:	6202      	str	r2, [r0, #32]
}
 800264c:	bd10      	pop	{r4, pc}
 800264e:	46c0      	nop			; (mov r8, r8)

08002650 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8002650:	b5f0      	push	{r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8002652:	7883      	ldrb	r3, [r0, #2]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d108      	bne.n	800266a <NVIC_Init+0x1a>
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002658:	221f      	movs	r2, #31
 800265a:	7803      	ldrb	r3, [r0, #0]
 800265c:	4911      	ldr	r1, [pc, #68]	; (80026a4 <NVIC_Init+0x54>)
 800265e:	401a      	ands	r2, r3
 8002660:	2301      	movs	r3, #1
 8002662:	4093      	lsls	r3, r2
 8002664:	2280      	movs	r2, #128	; 0x80
 8002666:	508b      	str	r3, [r1, r2]
  }
}
 8002668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800266a:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <NVIC_Init+0x54>)
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 800266c:	2103      	movs	r1, #3
 800266e:	469c      	mov	ip, r3
 8002670:	23ff      	movs	r3, #255	; 0xff
 8002672:	001f      	movs	r7, r3
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 8002674:	7804      	ldrb	r4, [r0, #0]
 8002676:	26c0      	movs	r6, #192	; 0xc0
    tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
 8002678:	7840      	ldrb	r0, [r0, #1]
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 800267a:	4021      	ands	r1, r4
 800267c:	00c9      	lsls	r1, r1, #3
    tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
 800267e:	0180      	lsls	r0, r0, #6
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 8002680:	408f      	lsls	r7, r1
    tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
 8002682:	4003      	ands	r3, r0
 8002684:	408b      	lsls	r3, r1
 8002686:	08a2      	lsrs	r2, r4, #2
 8002688:	0092      	lsls	r2, r2, #2
 800268a:	4462      	add	r2, ip
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 800268c:	00b6      	lsls	r6, r6, #2
 800268e:	5995      	ldr	r5, [r2, r6]
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 8002690:	43bd      	bics	r5, r7
    tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
 8002692:	432b      	orrs	r3, r5
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
 8002694:	5193      	str	r3, [r2, r6]
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002696:	221f      	movs	r2, #31
 8002698:	2301      	movs	r3, #1
 800269a:	4022      	ands	r2, r4
 800269c:	4093      	lsls	r3, r2
 800269e:	4662      	mov	r2, ip
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	e7e1      	b.n	8002668 <NVIC_Init+0x18>
 80026a4:	e000e100 	.word	0xe000e100

080026a8 <RCC_AHBPeriphClockCmd>:
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80026a8:	4a04      	ldr	r2, [pc, #16]	; (80026bc <RCC_AHBPeriphClockCmd+0x14>)
 80026aa:	6953      	ldr	r3, [r2, #20]
  if (NewState != DISABLE)
 80026ac:	2900      	cmp	r1, #0
 80026ae:	d102      	bne.n	80026b6 <RCC_AHBPeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80026b0:	4383      	bics	r3, r0
 80026b2:	6153      	str	r3, [r2, #20]
  }
}
 80026b4:	4770      	bx	lr
    RCC->AHBENR |= RCC_AHBPeriph;
 80026b6:	4318      	orrs	r0, r3
 80026b8:	6150      	str	r0, [r2, #20]
 80026ba:	e7fb      	b.n	80026b4 <RCC_AHBPeriphClockCmd+0xc>
 80026bc:	40021000 	.word	0x40021000

080026c0 <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80026c0:	4a04      	ldr	r2, [pc, #16]	; (80026d4 <RCC_APB2PeriphClockCmd+0x14>)
 80026c2:	6993      	ldr	r3, [r2, #24]
  if (NewState != DISABLE)
 80026c4:	2900      	cmp	r1, #0
 80026c6:	d102      	bne.n	80026ce <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80026c8:	4383      	bics	r3, r0
 80026ca:	6193      	str	r3, [r2, #24]
  }
}
 80026cc:	4770      	bx	lr
    RCC->APB2ENR |= RCC_APB2Periph;
 80026ce:	4318      	orrs	r0, r3
 80026d0:	6190      	str	r0, [r2, #24]
 80026d2:	e7fb      	b.n	80026cc <RCC_APB2PeriphClockCmd+0xc>
 80026d4:	40021000 	.word	0x40021000

080026d8 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80026d8:	4a04      	ldr	r2, [pc, #16]	; (80026ec <RCC_APB1PeriphClockCmd+0x14>)
 80026da:	69d3      	ldr	r3, [r2, #28]
  if (NewState != DISABLE)
 80026dc:	2900      	cmp	r1, #0
 80026de:	d102      	bne.n	80026e6 <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80026e0:	4383      	bics	r3, r0
 80026e2:	61d3      	str	r3, [r2, #28]
  }
}
 80026e4:	4770      	bx	lr
    RCC->APB1ENR |= RCC_APB1Periph;
 80026e6:	4318      	orrs	r0, r3
 80026e8:	61d0      	str	r0, [r2, #28]
 80026ea:	e7fb      	b.n	80026e4 <RCC_APB1PeriphClockCmd+0xc>
 80026ec:	40021000 	.word	0x40021000

080026f0 <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80026f0:	2300      	movs	r3, #0
  /* Initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
  /* Initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 80026f2:	22e0      	movs	r2, #224	; 0xe0
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80026f4:	8003      	strh	r3, [r0, #0]
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 80026f6:	8043      	strh	r3, [r0, #2]
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 80026f8:	00d2      	lsls	r2, r2, #3
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 80026fa:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 80026fc:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 80026fe:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8002700:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8002702:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8002704:	3307      	adds	r3, #7
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8002706:	8082      	strh	r2, [r0, #4]
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8002708:	8203      	strh	r3, [r0, #16]
}
 800270a:	4770      	bx	lr

0800270c <SPI_Init>:

  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 800270c:	23c1      	movs	r3, #193	; 0xc1
  tmpreg = SPIx->CR1;
 800270e:	8802      	ldrh	r2, [r0, #0]
  tmpreg &= CR1_CLEAR_MASK;
 8002710:	019b      	lsls	r3, r3, #6
{
 8002712:	b510      	push	{r4, lr}
  tmpreg &= CR1_CLEAR_MASK;
 8002714:	401a      	ands	r2, r3
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8002716:	89cc      	ldrh	r4, [r1, #14]
 8002718:	880b      	ldrh	r3, [r1, #0]
 800271a:	4323      	orrs	r3, r4
 800271c:	88cc      	ldrh	r4, [r1, #6]
 800271e:	4323      	orrs	r3, r4
 8002720:	890c      	ldrh	r4, [r1, #8]
 8002722:	4323      	orrs	r3, r4
 8002724:	894c      	ldrh	r4, [r1, #10]
 8002726:	4323      	orrs	r3, r4
 8002728:	898c      	ldrh	r4, [r1, #12]
 800272a:	4323      	orrs	r3, r4
 800272c:	4313      	orrs	r3, r2
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800272e:	8003      	strh	r3, [r0, #0]
  /*-------------------------Data Size Configuration -----------------------*/
  /* Get the SPIx CR2 value */
  tmpreg = SPIx->CR2;
 8002730:	8883      	ldrh	r3, [r0, #4]
  /* Clear DS[3:0] bits */
  tmpreg &=(uint16_t)~SPI_CR2_DS;
 8002732:	4a09      	ldr	r2, [pc, #36]	; (8002758 <SPI_Init+0x4c>)
 8002734:	4013      	ands	r3, r2
  /* Configure SPIx: Data Size */
  tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 8002736:	888a      	ldrh	r2, [r1, #4]
 8002738:	4313      	orrs	r3, r2
  
  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear MSTR bit */
  tmpreg &= CR1_CLEAR_MASK2;
 800273a:	2204      	movs	r2, #4
  SPIx->CR2 = tmpreg;
 800273c:	8083      	strh	r3, [r0, #4]
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800273e:	8a0b      	ldrh	r3, [r1, #16]
 8002740:	8203      	strh	r3, [r0, #16]
  tmpreg = SPIx->CR1;
 8002742:	8803      	ldrh	r3, [r0, #0]
  tmpreg &= CR1_CLEAR_MASK2;
 8002744:	4393      	bics	r3, r2
  /* Configure SPIx: master/slave mode */  
  /* Set MSTR bit according to SPI_Mode */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Mode);  
 8002746:	884a      	ldrh	r2, [r1, #2]
 8002748:	4313      	orrs	r3, r2
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;  
 800274a:	8003      	strh	r3, [r0, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 800274c:	8b83      	ldrh	r3, [r0, #28]
 800274e:	4a03      	ldr	r2, [pc, #12]	; (800275c <SPI_Init+0x50>)
 8002750:	4013      	ands	r3, r2
 8002752:	8383      	strh	r3, [r0, #28]
}
 8002754:	bd10      	pop	{r4, pc}
 8002756:	46c0      	nop			; (mov r8, r8)
 8002758:	fffff0ff 	.word	0xfffff0ff
 800275c:	fffff7ff 	.word	0xfffff7ff

08002760 <SPI_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8002760:	8803      	ldrh	r3, [r0, #0]
 8002762:	2240      	movs	r2, #64	; 0x40
  if (NewState != DISABLE)
 8002764:	2900      	cmp	r1, #0
 8002766:	d102      	bne.n	800276e <SPI_Cmd+0xe>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8002768:	4393      	bics	r3, r2
 800276a:	8003      	strh	r3, [r0, #0]
  }
}
 800276c:	4770      	bx	lr
    SPIx->CR1 |= SPI_CR1_SPE;
 800276e:	4313      	orrs	r3, r2
 8002770:	8003      	strh	r3, [r0, #0]
 8002772:	e7fb      	b.n	800276c <SPI_Cmd+0xc>

08002774 <SPI_RxFIFOThresholdConfig>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_RX_FIFO_THRESHOLD(SPI_RxFIFOThreshold));

  /* Clear FRXTH bit */
  SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRXTH);
 8002774:	8883      	ldrh	r3, [r0, #4]
 8002776:	4a03      	ldr	r2, [pc, #12]	; (8002784 <SPI_RxFIFOThresholdConfig+0x10>)
 8002778:	4013      	ands	r3, r2
 800277a:	8083      	strh	r3, [r0, #4]

  /* Set new FRXTH bit value */
  SPIx->CR2 |= SPI_RxFIFOThreshold;
 800277c:	8883      	ldrh	r3, [r0, #4]
 800277e:	4319      	orrs	r1, r3
 8002780:	8081      	strh	r1, [r0, #4]
}
 8002782:	4770      	bx	lr
 8002784:	ffffefff 	.word	0xffffefff

08002788 <SPI_I2S_DMACmd>:
  assert_param(IS_SPI_I2S_DMA_REQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8002788:	8883      	ldrh	r3, [r0, #4]
  if (NewState != DISABLE)
 800278a:	2a00      	cmp	r2, #0
 800278c:	d102      	bne.n	8002794 <SPI_I2S_DMACmd+0xc>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 800278e:	438b      	bics	r3, r1
 8002790:	8083      	strh	r3, [r0, #4]
  }
}
 8002792:	4770      	bx	lr
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8002794:	4319      	orrs	r1, r3
 8002796:	8081      	strh	r1, [r0, #4]
 8002798:	e7fb      	b.n	8002792 <SPI_I2S_DMACmd+0xa>
 800279a:	46c0      	nop			; (mov r8, r8)

0800279c <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800279c:	8900      	ldrh	r0, [r0, #8]
 800279e:	4008      	ands	r0, r1
 80027a0:	1e41      	subs	r1, r0, #1
 80027a2:	4188      	sbcs	r0, r1
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80027a4:	b2c0      	uxtb	r0, r0
}
 80027a6:	4770      	bx	lr

080027a8 <__aeabi_atexit>:
 80027a8:	000b      	movs	r3, r1
 80027aa:	b510      	push	{r4, lr}
 80027ac:	0001      	movs	r1, r0
 80027ae:	0018      	movs	r0, r3
 80027b0:	f000 f802 	bl	80027b8 <__cxa_atexit>
 80027b4:	bd10      	pop	{r4, pc}
 80027b6:	46c0      	nop			; (mov r8, r8)

080027b8 <__cxa_atexit>:
 80027b8:	b510      	push	{r4, lr}
 80027ba:	0013      	movs	r3, r2
 80027bc:	000a      	movs	r2, r1
 80027be:	0001      	movs	r1, r0
 80027c0:	2002      	movs	r0, #2
 80027c2:	f000 fb7f 	bl	8002ec4 <__register_exitproc>
 80027c6:	bd10      	pop	{r4, pc}

080027c8 <__libc_init_array>:
 80027c8:	b570      	push	{r4, r5, r6, lr}
 80027ca:	4e0d      	ldr	r6, [pc, #52]	; (8002800 <__libc_init_array+0x38>)
 80027cc:	4d0d      	ldr	r5, [pc, #52]	; (8002804 <__libc_init_array+0x3c>)
 80027ce:	2400      	movs	r4, #0
 80027d0:	1bad      	subs	r5, r5, r6
 80027d2:	10ad      	asrs	r5, r5, #2
 80027d4:	d005      	beq.n	80027e2 <__libc_init_array+0x1a>
 80027d6:	00a3      	lsls	r3, r4, #2
 80027d8:	58f3      	ldr	r3, [r6, r3]
 80027da:	3401      	adds	r4, #1
 80027dc:	4798      	blx	r3
 80027de:	42a5      	cmp	r5, r4
 80027e0:	d1f9      	bne.n	80027d6 <__libc_init_array+0xe>
 80027e2:	f000 fdf1 	bl	80033c8 <_init>
 80027e6:	4e08      	ldr	r6, [pc, #32]	; (8002808 <__libc_init_array+0x40>)
 80027e8:	4d08      	ldr	r5, [pc, #32]	; (800280c <__libc_init_array+0x44>)
 80027ea:	2400      	movs	r4, #0
 80027ec:	1bad      	subs	r5, r5, r6
 80027ee:	10ad      	asrs	r5, r5, #2
 80027f0:	d005      	beq.n	80027fe <__libc_init_array+0x36>
 80027f2:	00a3      	lsls	r3, r4, #2
 80027f4:	58f3      	ldr	r3, [r6, r3]
 80027f6:	3401      	adds	r4, #1
 80027f8:	4798      	blx	r3
 80027fa:	42a5      	cmp	r5, r4
 80027fc:	d1f9      	bne.n	80027f2 <__libc_init_array+0x2a>
 80027fe:	bd70      	pop	{r4, r5, r6, pc}
 8002800:	080033e8 	.word	0x080033e8
 8002804:	080033e8 	.word	0x080033e8
 8002808:	080033e8 	.word	0x080033e8
 800280c:	080033f4 	.word	0x080033f4

08002810 <malloc>:
 8002810:	b510      	push	{r4, lr}
 8002812:	4b03      	ldr	r3, [pc, #12]	; (8002820 <malloc+0x10>)
 8002814:	0001      	movs	r1, r0
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	f000 f80e 	bl	8002838 <_malloc_r>
 800281c:	bd10      	pop	{r4, pc}
 800281e:	46c0      	nop			; (mov r8, r8)
 8002820:	20000008 	.word	0x20000008

08002824 <free>:
 8002824:	b510      	push	{r4, lr}
 8002826:	4b03      	ldr	r3, [pc, #12]	; (8002834 <free+0x10>)
 8002828:	0001      	movs	r1, r0
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	f000 fc3a 	bl	80030a4 <_free_r>
 8002830:	bd10      	pop	{r4, pc}
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	20000008 	.word	0x20000008

08002838 <_malloc_r>:
 8002838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800283a:	4657      	mov	r7, sl
 800283c:	4645      	mov	r5, r8
 800283e:	46de      	mov	lr, fp
 8002840:	464e      	mov	r6, r9
 8002842:	b5e0      	push	{r5, r6, r7, lr}
 8002844:	000d      	movs	r5, r1
 8002846:	350b      	adds	r5, #11
 8002848:	b083      	sub	sp, #12
 800284a:	0007      	movs	r7, r0
 800284c:	2d16      	cmp	r5, #22
 800284e:	d800      	bhi.n	8002852 <_malloc_r+0x1a>
 8002850:	e09f      	b.n	8002992 <_malloc_r+0x15a>
 8002852:	2307      	movs	r3, #7
 8002854:	439d      	bics	r5, r3
 8002856:	d500      	bpl.n	800285a <_malloc_r+0x22>
 8002858:	e0c4      	b.n	80029e4 <_malloc_r+0x1ac>
 800285a:	42a9      	cmp	r1, r5
 800285c:	d900      	bls.n	8002860 <_malloc_r+0x28>
 800285e:	e0c1      	b.n	80029e4 <_malloc_r+0x1ac>
 8002860:	f000 fb0e 	bl	8002e80 <__malloc_lock>
 8002864:	23f8      	movs	r3, #248	; 0xf8
 8002866:	33ff      	adds	r3, #255	; 0xff
 8002868:	429d      	cmp	r5, r3
 800286a:	d800      	bhi.n	800286e <_malloc_r+0x36>
 800286c:	e28f      	b.n	8002d8e <_malloc_r+0x556>
 800286e:	0a68      	lsrs	r0, r5, #9
 8002870:	d100      	bne.n	8002874 <_malloc_r+0x3c>
 8002872:	e0bb      	b.n	80029ec <_malloc_r+0x1b4>
 8002874:	2804      	cmp	r0, #4
 8002876:	d900      	bls.n	800287a <_malloc_r+0x42>
 8002878:	e162      	b.n	8002b40 <_malloc_r+0x308>
 800287a:	2338      	movs	r3, #56	; 0x38
 800287c:	4698      	mov	r8, r3
 800287e:	09a8      	lsrs	r0, r5, #6
 8002880:	4480      	add	r8, r0
 8002882:	3039      	adds	r0, #57	; 0x39
 8002884:	00c1      	lsls	r1, r0, #3
 8002886:	4ed2      	ldr	r6, [pc, #840]	; (8002bd0 <_malloc_r+0x398>)
 8002888:	1871      	adds	r1, r6, r1
 800288a:	3908      	subs	r1, #8
 800288c:	68cc      	ldr	r4, [r1, #12]
 800288e:	42a1      	cmp	r1, r4
 8002890:	d019      	beq.n	80028c6 <_malloc_r+0x8e>
 8002892:	2303      	movs	r3, #3
 8002894:	6862      	ldr	r2, [r4, #4]
 8002896:	439a      	bics	r2, r3
 8002898:	0013      	movs	r3, r2
 800289a:	1b52      	subs	r2, r2, r5
 800289c:	2a0f      	cmp	r2, #15
 800289e:	dd00      	ble.n	80028a2 <_malloc_r+0x6a>
 80028a0:	e0aa      	b.n	80029f8 <_malloc_r+0x1c0>
 80028a2:	2a00      	cmp	r2, #0
 80028a4:	db00      	blt.n	80028a8 <_malloc_r+0x70>
 80028a6:	e088      	b.n	80029ba <_malloc_r+0x182>
 80028a8:	2303      	movs	r3, #3
 80028aa:	469c      	mov	ip, r3
 80028ac:	e008      	b.n	80028c0 <_malloc_r+0x88>
 80028ae:	4662      	mov	r2, ip
 80028b0:	6863      	ldr	r3, [r4, #4]
 80028b2:	4393      	bics	r3, r2
 80028b4:	1b5a      	subs	r2, r3, r5
 80028b6:	2a0f      	cmp	r2, #15
 80028b8:	dd00      	ble.n	80028bc <_malloc_r+0x84>
 80028ba:	e09d      	b.n	80029f8 <_malloc_r+0x1c0>
 80028bc:	2a00      	cmp	r2, #0
 80028be:	da7c      	bge.n	80029ba <_malloc_r+0x182>
 80028c0:	68e4      	ldr	r4, [r4, #12]
 80028c2:	42a1      	cmp	r1, r4
 80028c4:	d1f3      	bne.n	80028ae <_malloc_r+0x76>
 80028c6:	0032      	movs	r2, r6
 80028c8:	6934      	ldr	r4, [r6, #16]
 80028ca:	3208      	adds	r2, #8
 80028cc:	4294      	cmp	r4, r2
 80028ce:	d100      	bne.n	80028d2 <_malloc_r+0x9a>
 80028d0:	e190      	b.n	8002bf4 <_malloc_r+0x3bc>
 80028d2:	2303      	movs	r3, #3
 80028d4:	6861      	ldr	r1, [r4, #4]
 80028d6:	4399      	bics	r1, r3
 80028d8:	4689      	mov	r9, r1
 80028da:	1b49      	subs	r1, r1, r5
 80028dc:	290f      	cmp	r1, #15
 80028de:	dd00      	ble.n	80028e2 <_malloc_r+0xaa>
 80028e0:	e162      	b.n	8002ba8 <_malloc_r+0x370>
 80028e2:	6172      	str	r2, [r6, #20]
 80028e4:	6132      	str	r2, [r6, #16]
 80028e6:	2900      	cmp	r1, #0
 80028e8:	db00      	blt.n	80028ec <_malloc_r+0xb4>
 80028ea:	e087      	b.n	80029fc <_malloc_r+0x1c4>
 80028ec:	4ab9      	ldr	r2, [pc, #740]	; (8002bd4 <_malloc_r+0x39c>)
 80028ee:	464b      	mov	r3, r9
 80028f0:	4591      	cmp	r9, r2
 80028f2:	d900      	bls.n	80028f6 <_malloc_r+0xbe>
 80028f4:	e130      	b.n	8002b58 <_malloc_r+0x320>
 80028f6:	08db      	lsrs	r3, r3, #3
 80028f8:	3aff      	subs	r2, #255	; 0xff
 80028fa:	1099      	asrs	r1, r3, #2
 80028fc:	3aff      	subs	r2, #255	; 0xff
 80028fe:	408a      	lsls	r2, r1
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	6871      	ldr	r1, [r6, #4]
 8002904:	199b      	adds	r3, r3, r6
 8002906:	430a      	orrs	r2, r1
 8002908:	6899      	ldr	r1, [r3, #8]
 800290a:	6072      	str	r2, [r6, #4]
 800290c:	60e3      	str	r3, [r4, #12]
 800290e:	60a1      	str	r1, [r4, #8]
 8002910:	609c      	str	r4, [r3, #8]
 8002912:	0013      	movs	r3, r2
 8002914:	60cc      	str	r4, [r1, #12]
 8002916:	2101      	movs	r1, #1
 8002918:	1082      	asrs	r2, r0, #2
 800291a:	4091      	lsls	r1, r2
 800291c:	4299      	cmp	r1, r3
 800291e:	d86f      	bhi.n	8002a00 <_malloc_r+0x1c8>
 8002920:	420b      	tst	r3, r1
 8002922:	d105      	bne.n	8002930 <_malloc_r+0xf8>
 8002924:	2203      	movs	r2, #3
 8002926:	4390      	bics	r0, r2
 8002928:	0049      	lsls	r1, r1, #1
 800292a:	3004      	adds	r0, #4
 800292c:	420b      	tst	r3, r1
 800292e:	d0fb      	beq.n	8002928 <_malloc_r+0xf0>
 8002930:	2303      	movs	r3, #3
 8002932:	4698      	mov	r8, r3
 8002934:	00c3      	lsls	r3, r0, #3
 8002936:	4699      	mov	r9, r3
 8002938:	44b1      	add	r9, r6
 800293a:	46cc      	mov	ip, r9
 800293c:	4682      	mov	sl, r0
 800293e:	4663      	mov	r3, ip
 8002940:	68dc      	ldr	r4, [r3, #12]
 8002942:	45a4      	cmp	ip, r4
 8002944:	d107      	bne.n	8002956 <_malloc_r+0x11e>
 8002946:	e157      	b.n	8002bf8 <_malloc_r+0x3c0>
 8002948:	2a00      	cmp	r2, #0
 800294a:	db00      	blt.n	800294e <_malloc_r+0x116>
 800294c:	e166      	b.n	8002c1c <_malloc_r+0x3e4>
 800294e:	68e4      	ldr	r4, [r4, #12]
 8002950:	45a4      	cmp	ip, r4
 8002952:	d100      	bne.n	8002956 <_malloc_r+0x11e>
 8002954:	e150      	b.n	8002bf8 <_malloc_r+0x3c0>
 8002956:	4642      	mov	r2, r8
 8002958:	6863      	ldr	r3, [r4, #4]
 800295a:	4393      	bics	r3, r2
 800295c:	1b5a      	subs	r2, r3, r5
 800295e:	2a0f      	cmp	r2, #15
 8002960:	ddf2      	ble.n	8002948 <_malloc_r+0x110>
 8002962:	2001      	movs	r0, #1
 8002964:	4680      	mov	r8, r0
 8002966:	1961      	adds	r1, r4, r5
 8002968:	4305      	orrs	r5, r0
 800296a:	6065      	str	r5, [r4, #4]
 800296c:	68a0      	ldr	r0, [r4, #8]
 800296e:	68e5      	ldr	r5, [r4, #12]
 8002970:	3608      	adds	r6, #8
 8002972:	60c5      	str	r5, [r0, #12]
 8002974:	60a8      	str	r0, [r5, #8]
 8002976:	4640      	mov	r0, r8
 8002978:	60f1      	str	r1, [r6, #12]
 800297a:	60b1      	str	r1, [r6, #8]
 800297c:	4310      	orrs	r0, r2
 800297e:	6048      	str	r0, [r1, #4]
 8002980:	60ce      	str	r6, [r1, #12]
 8002982:	608e      	str	r6, [r1, #8]
 8002984:	0038      	movs	r0, r7
 8002986:	50e2      	str	r2, [r4, r3]
 8002988:	f000 fa82 	bl	8002e90 <__malloc_unlock>
 800298c:	0020      	movs	r0, r4
 800298e:	3008      	adds	r0, #8
 8002990:	e021      	b.n	80029d6 <_malloc_r+0x19e>
 8002992:	2910      	cmp	r1, #16
 8002994:	d826      	bhi.n	80029e4 <_malloc_r+0x1ac>
 8002996:	0038      	movs	r0, r7
 8002998:	f000 fa72 	bl	8002e80 <__malloc_lock>
 800299c:	2510      	movs	r5, #16
 800299e:	2318      	movs	r3, #24
 80029a0:	2002      	movs	r0, #2
 80029a2:	4e8b      	ldr	r6, [pc, #556]	; (8002bd0 <_malloc_r+0x398>)
 80029a4:	18f3      	adds	r3, r6, r3
 80029a6:	001a      	movs	r2, r3
 80029a8:	685c      	ldr	r4, [r3, #4]
 80029aa:	3a08      	subs	r2, #8
 80029ac:	4294      	cmp	r4, r2
 80029ae:	d100      	bne.n	80029b2 <_malloc_r+0x17a>
 80029b0:	e12e      	b.n	8002c10 <_malloc_r+0x3d8>
 80029b2:	2303      	movs	r3, #3
 80029b4:	6862      	ldr	r2, [r4, #4]
 80029b6:	439a      	bics	r2, r3
 80029b8:	0013      	movs	r3, r2
 80029ba:	68e2      	ldr	r2, [r4, #12]
 80029bc:	68a1      	ldr	r1, [r4, #8]
 80029be:	60ca      	str	r2, [r1, #12]
 80029c0:	6091      	str	r1, [r2, #8]
 80029c2:	2201      	movs	r2, #1
 80029c4:	18e3      	adds	r3, r4, r3
 80029c6:	6859      	ldr	r1, [r3, #4]
 80029c8:	0038      	movs	r0, r7
 80029ca:	430a      	orrs	r2, r1
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	f000 fa5f 	bl	8002e90 <__malloc_unlock>
 80029d2:	0020      	movs	r0, r4
 80029d4:	3008      	adds	r0, #8
 80029d6:	b003      	add	sp, #12
 80029d8:	bc3c      	pop	{r2, r3, r4, r5}
 80029da:	4690      	mov	r8, r2
 80029dc:	4699      	mov	r9, r3
 80029de:	46a2      	mov	sl, r4
 80029e0:	46ab      	mov	fp, r5
 80029e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029e4:	230c      	movs	r3, #12
 80029e6:	2000      	movs	r0, #0
 80029e8:	603b      	str	r3, [r7, #0]
 80029ea:	e7f4      	b.n	80029d6 <_malloc_r+0x19e>
 80029ec:	2180      	movs	r1, #128	; 0x80
 80029ee:	233f      	movs	r3, #63	; 0x3f
 80029f0:	2040      	movs	r0, #64	; 0x40
 80029f2:	0089      	lsls	r1, r1, #2
 80029f4:	4698      	mov	r8, r3
 80029f6:	e746      	b.n	8002886 <_malloc_r+0x4e>
 80029f8:	4640      	mov	r0, r8
 80029fa:	e764      	b.n	80028c6 <_malloc_r+0x8e>
 80029fc:	464b      	mov	r3, r9
 80029fe:	e7e0      	b.n	80029c2 <_malloc_r+0x18a>
 8002a00:	2303      	movs	r3, #3
 8002a02:	68b4      	ldr	r4, [r6, #8]
 8002a04:	6862      	ldr	r2, [r4, #4]
 8002a06:	439a      	bics	r2, r3
 8002a08:	4690      	mov	r8, r2
 8002a0a:	42aa      	cmp	r2, r5
 8002a0c:	d303      	bcc.n	8002a16 <_malloc_r+0x1de>
 8002a0e:	1b53      	subs	r3, r2, r5
 8002a10:	2b0f      	cmp	r3, #15
 8002a12:	dd00      	ble.n	8002a16 <_malloc_r+0x1de>
 8002a14:	e086      	b.n	8002b24 <_malloc_r+0x2ec>
 8002a16:	0023      	movs	r3, r4
 8002a18:	4443      	add	r3, r8
 8002a1a:	4a6f      	ldr	r2, [pc, #444]	; (8002bd8 <_malloc_r+0x3a0>)
 8002a1c:	9301      	str	r3, [sp, #4]
 8002a1e:	4b6f      	ldr	r3, [pc, #444]	; (8002bdc <_malloc_r+0x3a4>)
 8002a20:	4693      	mov	fp, r2
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6812      	ldr	r2, [r2, #0]
 8002a26:	18eb      	adds	r3, r5, r3
 8002a28:	3201      	adds	r2, #1
 8002a2a:	d100      	bne.n	8002a2e <_malloc_r+0x1f6>
 8002a2c:	e168      	b.n	8002d00 <_malloc_r+0x4c8>
 8002a2e:	4a6c      	ldr	r2, [pc, #432]	; (8002be0 <_malloc_r+0x3a8>)
 8002a30:	4694      	mov	ip, r2
 8002a32:	4463      	add	r3, ip
 8002a34:	0b1b      	lsrs	r3, r3, #12
 8002a36:	031b      	lsls	r3, r3, #12
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	9900      	ldr	r1, [sp, #0]
 8002a3c:	0038      	movs	r0, r7
 8002a3e:	f000 fa2f 	bl	8002ea0 <_sbrk_r>
 8002a42:	0003      	movs	r3, r0
 8002a44:	4681      	mov	r9, r0
 8002a46:	3301      	adds	r3, #1
 8002a48:	d061      	beq.n	8002b0e <_malloc_r+0x2d6>
 8002a4a:	9b01      	ldr	r3, [sp, #4]
 8002a4c:	4283      	cmp	r3, r0
 8002a4e:	d900      	bls.n	8002a52 <_malloc_r+0x21a>
 8002a50:	e0ff      	b.n	8002c52 <_malloc_r+0x41a>
 8002a52:	4b64      	ldr	r3, [pc, #400]	; (8002be4 <_malloc_r+0x3ac>)
 8002a54:	9a00      	ldr	r2, [sp, #0]
 8002a56:	469a      	mov	sl, r3
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	469c      	mov	ip, r3
 8002a5c:	4653      	mov	r3, sl
 8002a5e:	4462      	add	r2, ip
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	9b01      	ldr	r3, [sp, #4]
 8002a64:	0011      	movs	r1, r2
 8002a66:	4283      	cmp	r3, r0
 8002a68:	d100      	bne.n	8002a6c <_malloc_r+0x234>
 8002a6a:	e155      	b.n	8002d18 <_malloc_r+0x4e0>
 8002a6c:	465b      	mov	r3, fp
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	3301      	adds	r3, #1
 8002a72:	d100      	bne.n	8002a76 <_malloc_r+0x23e>
 8002a74:	e16c      	b.n	8002d50 <_malloc_r+0x518>
 8002a76:	464b      	mov	r3, r9
 8002a78:	9a01      	ldr	r2, [sp, #4]
 8002a7a:	1a9b      	subs	r3, r3, r2
 8002a7c:	1859      	adds	r1, r3, r1
 8002a7e:	4653      	mov	r3, sl
 8002a80:	6019      	str	r1, [r3, #0]
 8002a82:	2307      	movs	r3, #7
 8002a84:	464a      	mov	r2, r9
 8002a86:	4013      	ands	r3, r2
 8002a88:	d100      	bne.n	8002a8c <_malloc_r+0x254>
 8002a8a:	e124      	b.n	8002cd6 <_malloc_r+0x49e>
 8002a8c:	2108      	movs	r1, #8
 8002a8e:	4689      	mov	r9, r1
 8002a90:	4955      	ldr	r1, [pc, #340]	; (8002be8 <_malloc_r+0x3b0>)
 8002a92:	1ad2      	subs	r2, r2, r3
 8002a94:	4491      	add	r9, r2
 8002a96:	1acb      	subs	r3, r1, r3
 8002a98:	9a00      	ldr	r2, [sp, #0]
 8002a9a:	0038      	movs	r0, r7
 8002a9c:	444a      	add	r2, r9
 8002a9e:	0511      	lsls	r1, r2, #20
 8002aa0:	0d09      	lsrs	r1, r1, #20
 8002aa2:	1a5b      	subs	r3, r3, r1
 8002aa4:	0019      	movs	r1, r3
 8002aa6:	469b      	mov	fp, r3
 8002aa8:	f000 f9fa 	bl	8002ea0 <_sbrk_r>
 8002aac:	1c43      	adds	r3, r0, #1
 8002aae:	d100      	bne.n	8002ab2 <_malloc_r+0x27a>
 8002ab0:	e142      	b.n	8002d38 <_malloc_r+0x500>
 8002ab2:	464b      	mov	r3, r9
 8002ab4:	1ac0      	subs	r0, r0, r3
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	4458      	add	r0, fp
 8002aba:	4318      	orrs	r0, r3
 8002abc:	4653      	mov	r3, sl
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	445b      	add	r3, fp
 8002ac2:	0019      	movs	r1, r3
 8002ac4:	4653      	mov	r3, sl
 8002ac6:	6019      	str	r1, [r3, #0]
 8002ac8:	464b      	mov	r3, r9
 8002aca:	60b3      	str	r3, [r6, #8]
 8002acc:	6058      	str	r0, [r3, #4]
 8002ace:	42b4      	cmp	r4, r6
 8002ad0:	d013      	beq.n	8002afa <_malloc_r+0x2c2>
 8002ad2:	4643      	mov	r3, r8
 8002ad4:	2b0f      	cmp	r3, #15
 8002ad6:	d800      	bhi.n	8002ada <_malloc_r+0x2a2>
 8002ad8:	e0e8      	b.n	8002cac <_malloc_r+0x474>
 8002ada:	4643      	mov	r3, r8
 8002adc:	2207      	movs	r2, #7
 8002ade:	6860      	ldr	r0, [r4, #4]
 8002ae0:	3b0c      	subs	r3, #12
 8002ae2:	4393      	bics	r3, r2
 8002ae4:	3a06      	subs	r2, #6
 8002ae6:	4002      	ands	r2, r0
 8002ae8:	2005      	movs	r0, #5
 8002aea:	431a      	orrs	r2, r3
 8002aec:	6062      	str	r2, [r4, #4]
 8002aee:	18e2      	adds	r2, r4, r3
 8002af0:	6050      	str	r0, [r2, #4]
 8002af2:	6090      	str	r0, [r2, #8]
 8002af4:	2b0f      	cmp	r3, #15
 8002af6:	d900      	bls.n	8002afa <_malloc_r+0x2c2>
 8002af8:	e122      	b.n	8002d40 <_malloc_r+0x508>
 8002afa:	4b3c      	ldr	r3, [pc, #240]	; (8002bec <_malloc_r+0x3b4>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	4291      	cmp	r1, r2
 8002b00:	d900      	bls.n	8002b04 <_malloc_r+0x2cc>
 8002b02:	6019      	str	r1, [r3, #0]
 8002b04:	4b3a      	ldr	r3, [pc, #232]	; (8002bf0 <_malloc_r+0x3b8>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4291      	cmp	r1, r2
 8002b0a:	d900      	bls.n	8002b0e <_malloc_r+0x2d6>
 8002b0c:	6019      	str	r1, [r3, #0]
 8002b0e:	2303      	movs	r3, #3
 8002b10:	68b4      	ldr	r4, [r6, #8]
 8002b12:	6862      	ldr	r2, [r4, #4]
 8002b14:	439a      	bics	r2, r3
 8002b16:	1b53      	subs	r3, r2, r5
 8002b18:	4295      	cmp	r5, r2
 8002b1a:	d900      	bls.n	8002b1e <_malloc_r+0x2e6>
 8002b1c:	e0c9      	b.n	8002cb2 <_malloc_r+0x47a>
 8002b1e:	2b0f      	cmp	r3, #15
 8002b20:	dc00      	bgt.n	8002b24 <_malloc_r+0x2ec>
 8002b22:	e0c6      	b.n	8002cb2 <_malloc_r+0x47a>
 8002b24:	2201      	movs	r2, #1
 8002b26:	0029      	movs	r1, r5
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	4311      	orrs	r1, r2
 8002b2c:	1965      	adds	r5, r4, r5
 8002b2e:	6061      	str	r1, [r4, #4]
 8002b30:	0038      	movs	r0, r7
 8002b32:	60b5      	str	r5, [r6, #8]
 8002b34:	606b      	str	r3, [r5, #4]
 8002b36:	f000 f9ab 	bl	8002e90 <__malloc_unlock>
 8002b3a:	0020      	movs	r0, r4
 8002b3c:	3008      	adds	r0, #8
 8002b3e:	e74a      	b.n	80029d6 <_malloc_r+0x19e>
 8002b40:	2814      	cmp	r0, #20
 8002b42:	d97a      	bls.n	8002c3a <_malloc_r+0x402>
 8002b44:	2854      	cmp	r0, #84	; 0x54
 8002b46:	d900      	bls.n	8002b4a <_malloc_r+0x312>
 8002b48:	e0ba      	b.n	8002cc0 <_malloc_r+0x488>
 8002b4a:	236e      	movs	r3, #110	; 0x6e
 8002b4c:	4698      	mov	r8, r3
 8002b4e:	0b28      	lsrs	r0, r5, #12
 8002b50:	4480      	add	r8, r0
 8002b52:	306f      	adds	r0, #111	; 0x6f
 8002b54:	00c1      	lsls	r1, r0, #3
 8002b56:	e696      	b.n	8002886 <_malloc_r+0x4e>
 8002b58:	0a5a      	lsrs	r2, r3, #9
 8002b5a:	2a04      	cmp	r2, #4
 8002b5c:	d973      	bls.n	8002c46 <_malloc_r+0x40e>
 8002b5e:	2a14      	cmp	r2, #20
 8002b60:	d900      	bls.n	8002b64 <_malloc_r+0x32c>
 8002b62:	e0d0      	b.n	8002d06 <_malloc_r+0x4ce>
 8002b64:	0011      	movs	r1, r2
 8002b66:	325c      	adds	r2, #92	; 0x5c
 8002b68:	315b      	adds	r1, #91	; 0x5b
 8002b6a:	00d2      	lsls	r2, r2, #3
 8002b6c:	2308      	movs	r3, #8
 8002b6e:	425b      	negs	r3, r3
 8002b70:	469c      	mov	ip, r3
 8002b72:	18b2      	adds	r2, r6, r2
 8002b74:	4494      	add	ip, r2
 8002b76:	4663      	mov	r3, ip
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	4698      	mov	r8, r3
 8002b7e:	4594      	cmp	ip, r2
 8002b80:	d100      	bne.n	8002b84 <_malloc_r+0x34c>
 8002b82:	e0ab      	b.n	8002cdc <_malloc_r+0x4a4>
 8002b84:	4643      	mov	r3, r8
 8002b86:	6851      	ldr	r1, [r2, #4]
 8002b88:	4399      	bics	r1, r3
 8002b8a:	4589      	cmp	r9, r1
 8002b8c:	d300      	bcc.n	8002b90 <_malloc_r+0x358>
 8002b8e:	e095      	b.n	8002cbc <_malloc_r+0x484>
 8002b90:	6892      	ldr	r2, [r2, #8]
 8002b92:	4594      	cmp	ip, r2
 8002b94:	d1f6      	bne.n	8002b84 <_malloc_r+0x34c>
 8002b96:	4663      	mov	r3, ip
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	6873      	ldr	r3, [r6, #4]
 8002b9c:	4661      	mov	r1, ip
 8002b9e:	60e2      	str	r2, [r4, #12]
 8002ba0:	60a1      	str	r1, [r4, #8]
 8002ba2:	6094      	str	r4, [r2, #8]
 8002ba4:	60cc      	str	r4, [r1, #12]
 8002ba6:	e6b6      	b.n	8002916 <_malloc_r+0xde>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	1960      	adds	r0, r4, r5
 8002bac:	431d      	orrs	r5, r3
 8002bae:	6065      	str	r5, [r4, #4]
 8002bb0:	6170      	str	r0, [r6, #20]
 8002bb2:	6130      	str	r0, [r6, #16]
 8002bb4:	60c2      	str	r2, [r0, #12]
 8002bb6:	6082      	str	r2, [r0, #8]
 8002bb8:	001a      	movs	r2, r3
 8002bba:	464b      	mov	r3, r9
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	6042      	str	r2, [r0, #4]
 8002bc0:	0038      	movs	r0, r7
 8002bc2:	50e1      	str	r1, [r4, r3]
 8002bc4:	f000 f964 	bl	8002e90 <__malloc_unlock>
 8002bc8:	0020      	movs	r0, r4
 8002bca:	3008      	adds	r0, #8
 8002bcc:	e703      	b.n	80029d6 <_malloc_r+0x19e>
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	20000438 	.word	0x20000438
 8002bd4:	000001ff 	.word	0x000001ff
 8002bd8:	20000840 	.word	0x20000840
 8002bdc:	200008c4 	.word	0x200008c4
 8002be0:	0000100f 	.word	0x0000100f
 8002be4:	20000894 	.word	0x20000894
 8002be8:	00001008 	.word	0x00001008
 8002bec:	200008bc 	.word	0x200008bc
 8002bf0:	200008c0 	.word	0x200008c0
 8002bf4:	6873      	ldr	r3, [r6, #4]
 8002bf6:	e68e      	b.n	8002916 <_malloc_r+0xde>
 8002bf8:	2308      	movs	r3, #8
 8002bfa:	469b      	mov	fp, r3
 8002bfc:	3b07      	subs	r3, #7
 8002bfe:	44dc      	add	ip, fp
 8002c00:	469b      	mov	fp, r3
 8002c02:	44da      	add	sl, fp
 8002c04:	4643      	mov	r3, r8
 8002c06:	4652      	mov	r2, sl
 8002c08:	4213      	tst	r3, r2
 8002c0a:	d000      	beq.n	8002c0e <_malloc_r+0x3d6>
 8002c0c:	e697      	b.n	800293e <_malloc_r+0x106>
 8002c0e:	e037      	b.n	8002c80 <_malloc_r+0x448>
 8002c10:	68dc      	ldr	r4, [r3, #12]
 8002c12:	3002      	adds	r0, #2
 8002c14:	42a3      	cmp	r3, r4
 8002c16:	d100      	bne.n	8002c1a <_malloc_r+0x3e2>
 8002c18:	e655      	b.n	80028c6 <_malloc_r+0x8e>
 8002c1a:	e6ca      	b.n	80029b2 <_malloc_r+0x17a>
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	18e3      	adds	r3, r4, r3
 8002c20:	6859      	ldr	r1, [r3, #4]
 8002c22:	0038      	movs	r0, r7
 8002c24:	430a      	orrs	r2, r1
 8002c26:	605a      	str	r2, [r3, #4]
 8002c28:	68e3      	ldr	r3, [r4, #12]
 8002c2a:	68a2      	ldr	r2, [r4, #8]
 8002c2c:	60d3      	str	r3, [r2, #12]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	f000 f92e 	bl	8002e90 <__malloc_unlock>
 8002c34:	0020      	movs	r0, r4
 8002c36:	3008      	adds	r0, #8
 8002c38:	e6cd      	b.n	80029d6 <_malloc_r+0x19e>
 8002c3a:	235b      	movs	r3, #91	; 0x5b
 8002c3c:	4698      	mov	r8, r3
 8002c3e:	4480      	add	r8, r0
 8002c40:	305c      	adds	r0, #92	; 0x5c
 8002c42:	00c1      	lsls	r1, r0, #3
 8002c44:	e61f      	b.n	8002886 <_malloc_r+0x4e>
 8002c46:	099a      	lsrs	r2, r3, #6
 8002c48:	0011      	movs	r1, r2
 8002c4a:	3239      	adds	r2, #57	; 0x39
 8002c4c:	3138      	adds	r1, #56	; 0x38
 8002c4e:	00d2      	lsls	r2, r2, #3
 8002c50:	e78c      	b.n	8002b6c <_malloc_r+0x334>
 8002c52:	42b4      	cmp	r4, r6
 8002c54:	d000      	beq.n	8002c58 <_malloc_r+0x420>
 8002c56:	e75a      	b.n	8002b0e <_malloc_r+0x2d6>
 8002c58:	4b4f      	ldr	r3, [pc, #316]	; (8002d98 <_malloc_r+0x560>)
 8002c5a:	9a00      	ldr	r2, [sp, #0]
 8002c5c:	469a      	mov	sl, r3
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	469c      	mov	ip, r3
 8002c62:	4653      	mov	r3, sl
 8002c64:	4462      	add	r2, ip
 8002c66:	0011      	movs	r1, r2
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	e6ff      	b.n	8002a6c <_malloc_r+0x234>
 8002c6c:	2308      	movs	r3, #8
 8002c6e:	425b      	negs	r3, r3
 8002c70:	469c      	mov	ip, r3
 8002c72:	44e1      	add	r9, ip
 8002c74:	464b      	mov	r3, r9
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	3801      	subs	r0, #1
 8002c7a:	4599      	cmp	r9, r3
 8002c7c:	d000      	beq.n	8002c80 <_malloc_r+0x448>
 8002c7e:	e084      	b.n	8002d8a <_malloc_r+0x552>
 8002c80:	4643      	mov	r3, r8
 8002c82:	4203      	tst	r3, r0
 8002c84:	d1f2      	bne.n	8002c6c <_malloc_r+0x434>
 8002c86:	6873      	ldr	r3, [r6, #4]
 8002c88:	438b      	bics	r3, r1
 8002c8a:	6073      	str	r3, [r6, #4]
 8002c8c:	0049      	lsls	r1, r1, #1
 8002c8e:	4299      	cmp	r1, r3
 8002c90:	d900      	bls.n	8002c94 <_malloc_r+0x45c>
 8002c92:	e6b5      	b.n	8002a00 <_malloc_r+0x1c8>
 8002c94:	2900      	cmp	r1, #0
 8002c96:	d100      	bne.n	8002c9a <_malloc_r+0x462>
 8002c98:	e6b2      	b.n	8002a00 <_malloc_r+0x1c8>
 8002c9a:	4650      	mov	r0, sl
 8002c9c:	420b      	tst	r3, r1
 8002c9e:	d000      	beq.n	8002ca2 <_malloc_r+0x46a>
 8002ca0:	e648      	b.n	8002934 <_malloc_r+0xfc>
 8002ca2:	0049      	lsls	r1, r1, #1
 8002ca4:	3004      	adds	r0, #4
 8002ca6:	420b      	tst	r3, r1
 8002ca8:	d0fb      	beq.n	8002ca2 <_malloc_r+0x46a>
 8002caa:	e643      	b.n	8002934 <_malloc_r+0xfc>
 8002cac:	2301      	movs	r3, #1
 8002cae:	464a      	mov	r2, r9
 8002cb0:	6053      	str	r3, [r2, #4]
 8002cb2:	0038      	movs	r0, r7
 8002cb4:	f000 f8ec 	bl	8002e90 <__malloc_unlock>
 8002cb8:	2000      	movs	r0, #0
 8002cba:	e68c      	b.n	80029d6 <_malloc_r+0x19e>
 8002cbc:	4694      	mov	ip, r2
 8002cbe:	e76a      	b.n	8002b96 <_malloc_r+0x35e>
 8002cc0:	23aa      	movs	r3, #170	; 0xaa
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	4298      	cmp	r0, r3
 8002cc6:	d811      	bhi.n	8002cec <_malloc_r+0x4b4>
 8002cc8:	3bdd      	subs	r3, #221	; 0xdd
 8002cca:	4698      	mov	r8, r3
 8002ccc:	0be8      	lsrs	r0, r5, #15
 8002cce:	4480      	add	r8, r0
 8002cd0:	3078      	adds	r0, #120	; 0x78
 8002cd2:	00c1      	lsls	r1, r0, #3
 8002cd4:	e5d7      	b.n	8002886 <_malloc_r+0x4e>
 8002cd6:	2380      	movs	r3, #128	; 0x80
 8002cd8:	015b      	lsls	r3, r3, #5
 8002cda:	e6dd      	b.n	8002a98 <_malloc_r+0x260>
 8002cdc:	1089      	asrs	r1, r1, #2
 8002cde:	3b02      	subs	r3, #2
 8002ce0:	408b      	lsls	r3, r1
 8002ce2:	6872      	ldr	r2, [r6, #4]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	6073      	str	r3, [r6, #4]
 8002ce8:	4662      	mov	r2, ip
 8002cea:	e757      	b.n	8002b9c <_malloc_r+0x364>
 8002cec:	4b2b      	ldr	r3, [pc, #172]	; (8002d9c <_malloc_r+0x564>)
 8002cee:	4298      	cmp	r0, r3
 8002cf0:	d81c      	bhi.n	8002d2c <_malloc_r+0x4f4>
 8002cf2:	237c      	movs	r3, #124	; 0x7c
 8002cf4:	4698      	mov	r8, r3
 8002cf6:	0ca8      	lsrs	r0, r5, #18
 8002cf8:	4480      	add	r8, r0
 8002cfa:	307d      	adds	r0, #125	; 0x7d
 8002cfc:	00c1      	lsls	r1, r0, #3
 8002cfe:	e5c2      	b.n	8002886 <_malloc_r+0x4e>
 8002d00:	3310      	adds	r3, #16
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	e699      	b.n	8002a3a <_malloc_r+0x202>
 8002d06:	2a54      	cmp	r2, #84	; 0x54
 8002d08:	d826      	bhi.n	8002d58 <_malloc_r+0x520>
 8002d0a:	464b      	mov	r3, r9
 8002d0c:	0b1a      	lsrs	r2, r3, #12
 8002d0e:	0011      	movs	r1, r2
 8002d10:	326f      	adds	r2, #111	; 0x6f
 8002d12:	316e      	adds	r1, #110	; 0x6e
 8002d14:	00d2      	lsls	r2, r2, #3
 8002d16:	e729      	b.n	8002b6c <_malloc_r+0x334>
 8002d18:	051b      	lsls	r3, r3, #20
 8002d1a:	d000      	beq.n	8002d1e <_malloc_r+0x4e6>
 8002d1c:	e6a6      	b.n	8002a6c <_malloc_r+0x234>
 8002d1e:	2001      	movs	r0, #1
 8002d20:	9b00      	ldr	r3, [sp, #0]
 8002d22:	68b2      	ldr	r2, [r6, #8]
 8002d24:	4443      	add	r3, r8
 8002d26:	4303      	orrs	r3, r0
 8002d28:	6053      	str	r3, [r2, #4]
 8002d2a:	e6e6      	b.n	8002afa <_malloc_r+0x2c2>
 8002d2c:	21fe      	movs	r1, #254	; 0xfe
 8002d2e:	237e      	movs	r3, #126	; 0x7e
 8002d30:	207f      	movs	r0, #127	; 0x7f
 8002d32:	0089      	lsls	r1, r1, #2
 8002d34:	4698      	mov	r8, r3
 8002d36:	e5a6      	b.n	8002886 <_malloc_r+0x4e>
 8002d38:	2300      	movs	r3, #0
 8002d3a:	2001      	movs	r0, #1
 8002d3c:	469b      	mov	fp, r3
 8002d3e:	e6bd      	b.n	8002abc <_malloc_r+0x284>
 8002d40:	0021      	movs	r1, r4
 8002d42:	0038      	movs	r0, r7
 8002d44:	3108      	adds	r1, #8
 8002d46:	f000 f9ad 	bl	80030a4 <_free_r>
 8002d4a:	4653      	mov	r3, sl
 8002d4c:	6819      	ldr	r1, [r3, #0]
 8002d4e:	e6d4      	b.n	8002afa <_malloc_r+0x2c2>
 8002d50:	465b      	mov	r3, fp
 8002d52:	464a      	mov	r2, r9
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	e694      	b.n	8002a82 <_malloc_r+0x24a>
 8002d58:	21aa      	movs	r1, #170	; 0xaa
 8002d5a:	0049      	lsls	r1, r1, #1
 8002d5c:	428a      	cmp	r2, r1
 8002d5e:	d806      	bhi.n	8002d6e <_malloc_r+0x536>
 8002d60:	464b      	mov	r3, r9
 8002d62:	0bda      	lsrs	r2, r3, #15
 8002d64:	0011      	movs	r1, r2
 8002d66:	3278      	adds	r2, #120	; 0x78
 8002d68:	3177      	adds	r1, #119	; 0x77
 8002d6a:	00d2      	lsls	r2, r2, #3
 8002d6c:	e6fe      	b.n	8002b6c <_malloc_r+0x334>
 8002d6e:	490b      	ldr	r1, [pc, #44]	; (8002d9c <_malloc_r+0x564>)
 8002d70:	428a      	cmp	r2, r1
 8002d72:	d806      	bhi.n	8002d82 <_malloc_r+0x54a>
 8002d74:	464b      	mov	r3, r9
 8002d76:	0c9a      	lsrs	r2, r3, #18
 8002d78:	0011      	movs	r1, r2
 8002d7a:	327d      	adds	r2, #125	; 0x7d
 8002d7c:	317c      	adds	r1, #124	; 0x7c
 8002d7e:	00d2      	lsls	r2, r2, #3
 8002d80:	e6f4      	b.n	8002b6c <_malloc_r+0x334>
 8002d82:	22fe      	movs	r2, #254	; 0xfe
 8002d84:	217e      	movs	r1, #126	; 0x7e
 8002d86:	0092      	lsls	r2, r2, #2
 8002d88:	e6f0      	b.n	8002b6c <_malloc_r+0x334>
 8002d8a:	6873      	ldr	r3, [r6, #4]
 8002d8c:	e77e      	b.n	8002c8c <_malloc_r+0x454>
 8002d8e:	002b      	movs	r3, r5
 8002d90:	08e8      	lsrs	r0, r5, #3
 8002d92:	3308      	adds	r3, #8
 8002d94:	e605      	b.n	80029a2 <_malloc_r+0x16a>
 8002d96:	46c0      	nop			; (mov r8, r8)
 8002d98:	20000894 	.word	0x20000894
 8002d9c:	00000554 	.word	0x00000554

08002da0 <memcmp>:
 8002da0:	b510      	push	{r4, lr}
 8002da2:	2a03      	cmp	r2, #3
 8002da4:	d91c      	bls.n	8002de0 <memcmp+0x40>
 8002da6:	0003      	movs	r3, r0
 8002da8:	430b      	orrs	r3, r1
 8002daa:	079b      	lsls	r3, r3, #30
 8002dac:	d00f      	beq.n	8002dce <memcmp+0x2e>
 8002dae:	7803      	ldrb	r3, [r0, #0]
 8002db0:	780c      	ldrb	r4, [r1, #0]
 8002db2:	1882      	adds	r2, r0, r2
 8002db4:	42a3      	cmp	r3, r4
 8002db6:	d004      	beq.n	8002dc2 <memcmp+0x22>
 8002db8:	e015      	b.n	8002de6 <memcmp+0x46>
 8002dba:	7803      	ldrb	r3, [r0, #0]
 8002dbc:	780c      	ldrb	r4, [r1, #0]
 8002dbe:	42a3      	cmp	r3, r4
 8002dc0:	d111      	bne.n	8002de6 <memcmp+0x46>
 8002dc2:	3001      	adds	r0, #1
 8002dc4:	3101      	adds	r1, #1
 8002dc6:	4282      	cmp	r2, r0
 8002dc8:	d1f7      	bne.n	8002dba <memcmp+0x1a>
 8002dca:	2000      	movs	r0, #0
 8002dcc:	bd10      	pop	{r4, pc}
 8002dce:	6803      	ldr	r3, [r0, #0]
 8002dd0:	680c      	ldr	r4, [r1, #0]
 8002dd2:	42a3      	cmp	r3, r4
 8002dd4:	d1eb      	bne.n	8002dae <memcmp+0xe>
 8002dd6:	3a04      	subs	r2, #4
 8002dd8:	3004      	adds	r0, #4
 8002dda:	3104      	adds	r1, #4
 8002ddc:	2a03      	cmp	r2, #3
 8002dde:	d8f6      	bhi.n	8002dce <memcmp+0x2e>
 8002de0:	2a00      	cmp	r2, #0
 8002de2:	d1e4      	bne.n	8002dae <memcmp+0xe>
 8002de4:	e7f1      	b.n	8002dca <memcmp+0x2a>
 8002de6:	1b18      	subs	r0, r3, r4
 8002de8:	e7f0      	b.n	8002dcc <memcmp+0x2c>
 8002dea:	46c0      	nop			; (mov r8, r8)

08002dec <memset>:
 8002dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dee:	0783      	lsls	r3, r0, #30
 8002df0:	d043      	beq.n	8002e7a <memset+0x8e>
 8002df2:	1e54      	subs	r4, r2, #1
 8002df4:	2a00      	cmp	r2, #0
 8002df6:	d03f      	beq.n	8002e78 <memset+0x8c>
 8002df8:	b2ce      	uxtb	r6, r1
 8002dfa:	0002      	movs	r2, r0
 8002dfc:	2503      	movs	r5, #3
 8002dfe:	e002      	b.n	8002e06 <memset+0x1a>
 8002e00:	001a      	movs	r2, r3
 8002e02:	3c01      	subs	r4, #1
 8002e04:	d338      	bcc.n	8002e78 <memset+0x8c>
 8002e06:	1c53      	adds	r3, r2, #1
 8002e08:	7016      	strb	r6, [r2, #0]
 8002e0a:	422b      	tst	r3, r5
 8002e0c:	d1f8      	bne.n	8002e00 <memset+0x14>
 8002e0e:	2c03      	cmp	r4, #3
 8002e10:	d92a      	bls.n	8002e68 <memset+0x7c>
 8002e12:	22ff      	movs	r2, #255	; 0xff
 8002e14:	400a      	ands	r2, r1
 8002e16:	0215      	lsls	r5, r2, #8
 8002e18:	4315      	orrs	r5, r2
 8002e1a:	042a      	lsls	r2, r5, #16
 8002e1c:	4315      	orrs	r5, r2
 8002e1e:	2c0f      	cmp	r4, #15
 8002e20:	d914      	bls.n	8002e4c <memset+0x60>
 8002e22:	0027      	movs	r7, r4
 8002e24:	001a      	movs	r2, r3
 8002e26:	3f10      	subs	r7, #16
 8002e28:	093e      	lsrs	r6, r7, #4
 8002e2a:	3601      	adds	r6, #1
 8002e2c:	0136      	lsls	r6, r6, #4
 8002e2e:	199e      	adds	r6, r3, r6
 8002e30:	6015      	str	r5, [r2, #0]
 8002e32:	6055      	str	r5, [r2, #4]
 8002e34:	6095      	str	r5, [r2, #8]
 8002e36:	60d5      	str	r5, [r2, #12]
 8002e38:	3210      	adds	r2, #16
 8002e3a:	4296      	cmp	r6, r2
 8002e3c:	d1f8      	bne.n	8002e30 <memset+0x44>
 8002e3e:	220f      	movs	r2, #15
 8002e40:	4397      	bics	r7, r2
 8002e42:	3710      	adds	r7, #16
 8002e44:	19db      	adds	r3, r3, r7
 8002e46:	4014      	ands	r4, r2
 8002e48:	2c03      	cmp	r4, #3
 8002e4a:	d90d      	bls.n	8002e68 <memset+0x7c>
 8002e4c:	001a      	movs	r2, r3
 8002e4e:	1f27      	subs	r7, r4, #4
 8002e50:	08be      	lsrs	r6, r7, #2
 8002e52:	3601      	adds	r6, #1
 8002e54:	00b6      	lsls	r6, r6, #2
 8002e56:	199e      	adds	r6, r3, r6
 8002e58:	c220      	stmia	r2!, {r5}
 8002e5a:	42b2      	cmp	r2, r6
 8002e5c:	d1fc      	bne.n	8002e58 <memset+0x6c>
 8002e5e:	2203      	movs	r2, #3
 8002e60:	4397      	bics	r7, r2
 8002e62:	3704      	adds	r7, #4
 8002e64:	19db      	adds	r3, r3, r7
 8002e66:	4014      	ands	r4, r2
 8002e68:	2c00      	cmp	r4, #0
 8002e6a:	d005      	beq.n	8002e78 <memset+0x8c>
 8002e6c:	b2c9      	uxtb	r1, r1
 8002e6e:	191c      	adds	r4, r3, r4
 8002e70:	7019      	strb	r1, [r3, #0]
 8002e72:	3301      	adds	r3, #1
 8002e74:	429c      	cmp	r4, r3
 8002e76:	d1fb      	bne.n	8002e70 <memset+0x84>
 8002e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e7a:	0014      	movs	r4, r2
 8002e7c:	0003      	movs	r3, r0
 8002e7e:	e7c6      	b.n	8002e0e <memset+0x22>

08002e80 <__malloc_lock>:
 8002e80:	b510      	push	{r4, lr}
 8002e82:	4802      	ldr	r0, [pc, #8]	; (8002e8c <__malloc_lock+0xc>)
 8002e84:	f000 f9ec 	bl	8003260 <__retarget_lock_acquire_recursive>
 8002e88:	bd10      	pop	{r4, pc}
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	200008d8 	.word	0x200008d8

08002e90 <__malloc_unlock>:
 8002e90:	b510      	push	{r4, lr}
 8002e92:	4802      	ldr	r0, [pc, #8]	; (8002e9c <__malloc_unlock+0xc>)
 8002e94:	f000 f9e6 	bl	8003264 <__retarget_lock_release_recursive>
 8002e98:	bd10      	pop	{r4, pc}
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	200008d8 	.word	0x200008d8

08002ea0 <_sbrk_r>:
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	b570      	push	{r4, r5, r6, lr}
 8002ea4:	4c06      	ldr	r4, [pc, #24]	; (8002ec0 <_sbrk_r+0x20>)
 8002ea6:	0005      	movs	r5, r0
 8002ea8:	0008      	movs	r0, r1
 8002eaa:	6023      	str	r3, [r4, #0]
 8002eac:	f7ff f866 	bl	8001f7c <_sbrk>
 8002eb0:	1c43      	adds	r3, r0, #1
 8002eb2:	d000      	beq.n	8002eb6 <_sbrk_r+0x16>
 8002eb4:	bd70      	pop	{r4, r5, r6, pc}
 8002eb6:	6823      	ldr	r3, [r4, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0fb      	beq.n	8002eb4 <_sbrk_r+0x14>
 8002ebc:	602b      	str	r3, [r5, #0]
 8002ebe:	e7f9      	b.n	8002eb4 <_sbrk_r+0x14>
 8002ec0:	200008ec 	.word	0x200008ec

08002ec4 <__register_exitproc>:
 8002ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ec6:	464e      	mov	r6, r9
 8002ec8:	4645      	mov	r5, r8
 8002eca:	46de      	mov	lr, fp
 8002ecc:	4657      	mov	r7, sl
 8002ece:	b5e0      	push	{r5, r6, r7, lr}
 8002ed0:	4d36      	ldr	r5, [pc, #216]	; (8002fac <__register_exitproc+0xe8>)
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	0006      	movs	r6, r0
 8002ed6:	6828      	ldr	r0, [r5, #0]
 8002ed8:	4698      	mov	r8, r3
 8002eda:	000f      	movs	r7, r1
 8002edc:	4691      	mov	r9, r2
 8002ede:	f000 f9bf 	bl	8003260 <__retarget_lock_acquire_recursive>
 8002ee2:	4b33      	ldr	r3, [pc, #204]	; (8002fb0 <__register_exitproc+0xec>)
 8002ee4:	681c      	ldr	r4, [r3, #0]
 8002ee6:	23a4      	movs	r3, #164	; 0xa4
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	58e0      	ldr	r0, [r4, r3]
 8002eec:	2800      	cmp	r0, #0
 8002eee:	d052      	beq.n	8002f96 <__register_exitproc+0xd2>
 8002ef0:	6843      	ldr	r3, [r0, #4]
 8002ef2:	2b1f      	cmp	r3, #31
 8002ef4:	dc13      	bgt.n	8002f1e <__register_exitproc+0x5a>
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	9201      	str	r2, [sp, #4]
 8002efa:	2e00      	cmp	r6, #0
 8002efc:	d128      	bne.n	8002f50 <__register_exitproc+0x8c>
 8002efe:	9a01      	ldr	r2, [sp, #4]
 8002f00:	3302      	adds	r3, #2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	6042      	str	r2, [r0, #4]
 8002f06:	501f      	str	r7, [r3, r0]
 8002f08:	6828      	ldr	r0, [r5, #0]
 8002f0a:	f000 f9ab 	bl	8003264 <__retarget_lock_release_recursive>
 8002f0e:	2000      	movs	r0, #0
 8002f10:	b003      	add	sp, #12
 8002f12:	bc3c      	pop	{r2, r3, r4, r5}
 8002f14:	4690      	mov	r8, r2
 8002f16:	4699      	mov	r9, r3
 8002f18:	46a2      	mov	sl, r4
 8002f1a:	46ab      	mov	fp, r5
 8002f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f1e:	4b25      	ldr	r3, [pc, #148]	; (8002fb4 <__register_exitproc+0xf0>)
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d03d      	beq.n	8002fa0 <__register_exitproc+0xdc>
 8002f24:	20c8      	movs	r0, #200	; 0xc8
 8002f26:	0040      	lsls	r0, r0, #1
 8002f28:	f7ff fc72 	bl	8002810 <malloc>
 8002f2c:	2800      	cmp	r0, #0
 8002f2e:	d037      	beq.n	8002fa0 <__register_exitproc+0xdc>
 8002f30:	22a4      	movs	r2, #164	; 0xa4
 8002f32:	2300      	movs	r3, #0
 8002f34:	0052      	lsls	r2, r2, #1
 8002f36:	58a1      	ldr	r1, [r4, r2]
 8002f38:	6043      	str	r3, [r0, #4]
 8002f3a:	6001      	str	r1, [r0, #0]
 8002f3c:	50a0      	str	r0, [r4, r2]
 8002f3e:	3240      	adds	r2, #64	; 0x40
 8002f40:	5083      	str	r3, [r0, r2]
 8002f42:	3204      	adds	r2, #4
 8002f44:	5083      	str	r3, [r0, r2]
 8002f46:	3301      	adds	r3, #1
 8002f48:	9301      	str	r3, [sp, #4]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	2e00      	cmp	r6, #0
 8002f4e:	d0d6      	beq.n	8002efe <__register_exitproc+0x3a>
 8002f50:	009a      	lsls	r2, r3, #2
 8002f52:	4692      	mov	sl, r2
 8002f54:	4482      	add	sl, r0
 8002f56:	464a      	mov	r2, r9
 8002f58:	2188      	movs	r1, #136	; 0x88
 8002f5a:	4654      	mov	r4, sl
 8002f5c:	5062      	str	r2, [r4, r1]
 8002f5e:	22c4      	movs	r2, #196	; 0xc4
 8002f60:	0052      	lsls	r2, r2, #1
 8002f62:	4691      	mov	r9, r2
 8002f64:	4481      	add	r9, r0
 8002f66:	464a      	mov	r2, r9
 8002f68:	3987      	subs	r1, #135	; 0x87
 8002f6a:	4099      	lsls	r1, r3
 8002f6c:	6812      	ldr	r2, [r2, #0]
 8002f6e:	468b      	mov	fp, r1
 8002f70:	430a      	orrs	r2, r1
 8002f72:	4694      	mov	ip, r2
 8002f74:	464a      	mov	r2, r9
 8002f76:	4661      	mov	r1, ip
 8002f78:	6011      	str	r1, [r2, #0]
 8002f7a:	2284      	movs	r2, #132	; 0x84
 8002f7c:	4641      	mov	r1, r8
 8002f7e:	0052      	lsls	r2, r2, #1
 8002f80:	50a1      	str	r1, [r4, r2]
 8002f82:	2e02      	cmp	r6, #2
 8002f84:	d1bb      	bne.n	8002efe <__register_exitproc+0x3a>
 8002f86:	0002      	movs	r2, r0
 8002f88:	465c      	mov	r4, fp
 8002f8a:	328d      	adds	r2, #141	; 0x8d
 8002f8c:	32ff      	adds	r2, #255	; 0xff
 8002f8e:	6811      	ldr	r1, [r2, #0]
 8002f90:	430c      	orrs	r4, r1
 8002f92:	6014      	str	r4, [r2, #0]
 8002f94:	e7b3      	b.n	8002efe <__register_exitproc+0x3a>
 8002f96:	0020      	movs	r0, r4
 8002f98:	304d      	adds	r0, #77	; 0x4d
 8002f9a:	30ff      	adds	r0, #255	; 0xff
 8002f9c:	50e0      	str	r0, [r4, r3]
 8002f9e:	e7a7      	b.n	8002ef0 <__register_exitproc+0x2c>
 8002fa0:	6828      	ldr	r0, [r5, #0]
 8002fa2:	f000 f95f 	bl	8003264 <__retarget_lock_release_recursive>
 8002fa6:	2001      	movs	r0, #1
 8002fa8:	4240      	negs	r0, r0
 8002faa:	e7b1      	b.n	8002f10 <__register_exitproc+0x4c>
 8002fac:	20000848 	.word	0x20000848
 8002fb0:	080033c4 	.word	0x080033c4
 8002fb4:	08002811 	.word	0x08002811

08002fb8 <register_fini>:
 8002fb8:	4b03      	ldr	r3, [pc, #12]	; (8002fc8 <register_fini+0x10>)
 8002fba:	b510      	push	{r4, lr}
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d002      	beq.n	8002fc6 <register_fini+0xe>
 8002fc0:	4802      	ldr	r0, [pc, #8]	; (8002fcc <register_fini+0x14>)
 8002fc2:	f7fe ffe9 	bl	8001f98 <__wrap_atexit>
 8002fc6:	bd10      	pop	{r4, pc}
 8002fc8:	00000000 	.word	0x00000000
 8002fcc:	08002fd1 	.word	0x08002fd1

08002fd0 <__libc_fini_array>:
 8002fd0:	b570      	push	{r4, r5, r6, lr}
 8002fd2:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <__libc_fini_array+0x28>)
 8002fd4:	4c09      	ldr	r4, [pc, #36]	; (8002ffc <__libc_fini_array+0x2c>)
 8002fd6:	1ae4      	subs	r4, r4, r3
 8002fd8:	10a4      	asrs	r4, r4, #2
 8002fda:	d009      	beq.n	8002ff0 <__libc_fini_array+0x20>
 8002fdc:	4a08      	ldr	r2, [pc, #32]	; (8003000 <__libc_fini_array+0x30>)
 8002fde:	18a5      	adds	r5, r4, r2
 8002fe0:	00ad      	lsls	r5, r5, #2
 8002fe2:	18ed      	adds	r5, r5, r3
 8002fe4:	682b      	ldr	r3, [r5, #0]
 8002fe6:	3c01      	subs	r4, #1
 8002fe8:	4798      	blx	r3
 8002fea:	3d04      	subs	r5, #4
 8002fec:	2c00      	cmp	r4, #0
 8002fee:	d1f9      	bne.n	8002fe4 <__libc_fini_array+0x14>
 8002ff0:	f000 f9f0 	bl	80033d4 <_fini>
 8002ff4:	bd70      	pop	{r4, r5, r6, pc}
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	080033f4 	.word	0x080033f4
 8002ffc:	080033f8 	.word	0x080033f8
 8003000:	3fffffff 	.word	0x3fffffff

08003004 <_malloc_trim_r>:
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003006:	000c      	movs	r4, r1
 8003008:	0006      	movs	r6, r0
 800300a:	f7ff ff39 	bl	8002e80 <__malloc_lock>
 800300e:	4f20      	ldr	r7, [pc, #128]	; (8003090 <_malloc_trim_r+0x8c>)
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	685d      	ldr	r5, [r3, #4]
 8003014:	2303      	movs	r3, #3
 8003016:	439d      	bics	r5, r3
 8003018:	4b1e      	ldr	r3, [pc, #120]	; (8003094 <_malloc_trim_r+0x90>)
 800301a:	1b2c      	subs	r4, r5, r4
 800301c:	469c      	mov	ip, r3
 800301e:	4464      	add	r4, ip
 8003020:	0b24      	lsrs	r4, r4, #12
 8003022:	4b1d      	ldr	r3, [pc, #116]	; (8003098 <_malloc_trim_r+0x94>)
 8003024:	3c01      	subs	r4, #1
 8003026:	0324      	lsls	r4, r4, #12
 8003028:	429c      	cmp	r4, r3
 800302a:	dd07      	ble.n	800303c <_malloc_trim_r+0x38>
 800302c:	2100      	movs	r1, #0
 800302e:	0030      	movs	r0, r6
 8003030:	f7ff ff36 	bl	8002ea0 <_sbrk_r>
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	195b      	adds	r3, r3, r5
 8003038:	4298      	cmp	r0, r3
 800303a:	d004      	beq.n	8003046 <_malloc_trim_r+0x42>
 800303c:	0030      	movs	r0, r6
 800303e:	f7ff ff27 	bl	8002e90 <__malloc_unlock>
 8003042:	2000      	movs	r0, #0
 8003044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003046:	4261      	negs	r1, r4
 8003048:	0030      	movs	r0, r6
 800304a:	f7ff ff29 	bl	8002ea0 <_sbrk_r>
 800304e:	1c43      	adds	r3, r0, #1
 8003050:	d00d      	beq.n	800306e <_malloc_trim_r+0x6a>
 8003052:	2201      	movs	r2, #1
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	1b2d      	subs	r5, r5, r4
 8003058:	4315      	orrs	r5, r2
 800305a:	605d      	str	r5, [r3, #4]
 800305c:	4b0f      	ldr	r3, [pc, #60]	; (800309c <_malloc_trim_r+0x98>)
 800305e:	0030      	movs	r0, r6
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	1b14      	subs	r4, r2, r4
 8003064:	601c      	str	r4, [r3, #0]
 8003066:	f7ff ff13 	bl	8002e90 <__malloc_unlock>
 800306a:	2001      	movs	r0, #1
 800306c:	e7ea      	b.n	8003044 <_malloc_trim_r+0x40>
 800306e:	2100      	movs	r1, #0
 8003070:	0030      	movs	r0, r6
 8003072:	f7ff ff15 	bl	8002ea0 <_sbrk_r>
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	1a83      	subs	r3, r0, r2
 800307a:	2b0f      	cmp	r3, #15
 800307c:	ddde      	ble.n	800303c <_malloc_trim_r+0x38>
 800307e:	4908      	ldr	r1, [pc, #32]	; (80030a0 <_malloc_trim_r+0x9c>)
 8003080:	6809      	ldr	r1, [r1, #0]
 8003082:	1a40      	subs	r0, r0, r1
 8003084:	4905      	ldr	r1, [pc, #20]	; (800309c <_malloc_trim_r+0x98>)
 8003086:	6008      	str	r0, [r1, #0]
 8003088:	2101      	movs	r1, #1
 800308a:	430b      	orrs	r3, r1
 800308c:	6053      	str	r3, [r2, #4]
 800308e:	e7d5      	b.n	800303c <_malloc_trim_r+0x38>
 8003090:	20000438 	.word	0x20000438
 8003094:	00000fef 	.word	0x00000fef
 8003098:	00000fff 	.word	0x00000fff
 800309c:	20000894 	.word	0x20000894
 80030a0:	20000840 	.word	0x20000840

080030a4 <_free_r>:
 80030a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030a6:	0004      	movs	r4, r0
 80030a8:	1e0d      	subs	r5, r1, #0
 80030aa:	d03c      	beq.n	8003126 <_free_r+0x82>
 80030ac:	f7ff fee8 	bl	8002e80 <__malloc_lock>
 80030b0:	0029      	movs	r1, r5
 80030b2:	3908      	subs	r1, #8
 80030b4:	6848      	ldr	r0, [r1, #4]
 80030b6:	2301      	movs	r3, #1
 80030b8:	0005      	movs	r5, r0
 80030ba:	2603      	movs	r6, #3
 80030bc:	439d      	bics	r5, r3
 80030be:	194a      	adds	r2, r1, r5
 80030c0:	469c      	mov	ip, r3
 80030c2:	4f61      	ldr	r7, [pc, #388]	; (8003248 <_free_r+0x1a4>)
 80030c4:	6853      	ldr	r3, [r2, #4]
 80030c6:	43b3      	bics	r3, r6
 80030c8:	68be      	ldr	r6, [r7, #8]
 80030ca:	42b2      	cmp	r2, r6
 80030cc:	d056      	beq.n	800317c <_free_r+0xd8>
 80030ce:	4666      	mov	r6, ip
 80030d0:	6053      	str	r3, [r2, #4]
 80030d2:	4206      	tst	r6, r0
 80030d4:	d10a      	bne.n	80030ec <_free_r+0x48>
 80030d6:	003e      	movs	r6, r7
 80030d8:	6808      	ldr	r0, [r1, #0]
 80030da:	3608      	adds	r6, #8
 80030dc:	1a09      	subs	r1, r1, r0
 80030de:	182d      	adds	r5, r5, r0
 80030e0:	6888      	ldr	r0, [r1, #8]
 80030e2:	42b0      	cmp	r0, r6
 80030e4:	d065      	beq.n	80031b2 <_free_r+0x10e>
 80030e6:	68ce      	ldr	r6, [r1, #12]
 80030e8:	60c6      	str	r6, [r0, #12]
 80030ea:	60b0      	str	r0, [r6, #8]
 80030ec:	2001      	movs	r0, #1
 80030ee:	18d6      	adds	r6, r2, r3
 80030f0:	6876      	ldr	r6, [r6, #4]
 80030f2:	4206      	tst	r6, r0
 80030f4:	d033      	beq.n	800315e <_free_r+0xba>
 80030f6:	4b55      	ldr	r3, [pc, #340]	; (800324c <_free_r+0x1a8>)
 80030f8:	4328      	orrs	r0, r5
 80030fa:	6048      	str	r0, [r1, #4]
 80030fc:	514d      	str	r5, [r1, r5]
 80030fe:	429d      	cmp	r5, r3
 8003100:	d812      	bhi.n	8003128 <_free_r+0x84>
 8003102:	08ed      	lsrs	r5, r5, #3
 8003104:	3bff      	subs	r3, #255	; 0xff
 8003106:	10aa      	asrs	r2, r5, #2
 8003108:	3bff      	subs	r3, #255	; 0xff
 800310a:	4093      	lsls	r3, r2
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	00ed      	lsls	r5, r5, #3
 8003110:	4313      	orrs	r3, r2
 8003112:	607b      	str	r3, [r7, #4]
 8003114:	19ef      	adds	r7, r5, r7
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	60cf      	str	r7, [r1, #12]
 800311a:	608b      	str	r3, [r1, #8]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	60d9      	str	r1, [r3, #12]
 8003120:	0020      	movs	r0, r4
 8003122:	f7ff feb5 	bl	8002e90 <__malloc_unlock>
 8003126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003128:	0a68      	lsrs	r0, r5, #9
 800312a:	2804      	cmp	r0, #4
 800312c:	d850      	bhi.n	80031d0 <_free_r+0x12c>
 800312e:	09a8      	lsrs	r0, r5, #6
 8003130:	0002      	movs	r2, r0
 8003132:	3039      	adds	r0, #57	; 0x39
 8003134:	3238      	adds	r2, #56	; 0x38
 8003136:	00c0      	lsls	r0, r0, #3
 8003138:	1838      	adds	r0, r7, r0
 800313a:	3808      	subs	r0, #8
 800313c:	6883      	ldr	r3, [r0, #8]
 800313e:	2603      	movs	r6, #3
 8003140:	4298      	cmp	r0, r3
 8003142:	d04c      	beq.n	80031de <_free_r+0x13a>
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	43b2      	bics	r2, r6
 8003148:	4295      	cmp	r5, r2
 800314a:	d230      	bcs.n	80031ae <_free_r+0x10a>
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	4298      	cmp	r0, r3
 8003150:	d1f8      	bne.n	8003144 <_free_r+0xa0>
 8003152:	68c3      	ldr	r3, [r0, #12]
 8003154:	60cb      	str	r3, [r1, #12]
 8003156:	6088      	str	r0, [r1, #8]
 8003158:	6099      	str	r1, [r3, #8]
 800315a:	60c1      	str	r1, [r0, #12]
 800315c:	e7e0      	b.n	8003120 <_free_r+0x7c>
 800315e:	18ed      	adds	r5, r5, r3
 8003160:	4e3b      	ldr	r6, [pc, #236]	; (8003250 <_free_r+0x1ac>)
 8003162:	6893      	ldr	r3, [r2, #8]
 8003164:	42b3      	cmp	r3, r6
 8003166:	d042      	beq.n	80031ee <_free_r+0x14a>
 8003168:	68d2      	ldr	r2, [r2, #12]
 800316a:	4328      	orrs	r0, r5
 800316c:	60da      	str	r2, [r3, #12]
 800316e:	6093      	str	r3, [r2, #8]
 8003170:	4b36      	ldr	r3, [pc, #216]	; (800324c <_free_r+0x1a8>)
 8003172:	6048      	str	r0, [r1, #4]
 8003174:	514d      	str	r5, [r1, r5]
 8003176:	429d      	cmp	r5, r3
 8003178:	d8d6      	bhi.n	8003128 <_free_r+0x84>
 800317a:	e7c2      	b.n	8003102 <_free_r+0x5e>
 800317c:	4662      	mov	r2, ip
 800317e:	18eb      	adds	r3, r5, r3
 8003180:	4202      	tst	r2, r0
 8003182:	d106      	bne.n	8003192 <_free_r+0xee>
 8003184:	680a      	ldr	r2, [r1, #0]
 8003186:	1a89      	subs	r1, r1, r2
 8003188:	6888      	ldr	r0, [r1, #8]
 800318a:	189b      	adds	r3, r3, r2
 800318c:	68ca      	ldr	r2, [r1, #12]
 800318e:	60c2      	str	r2, [r0, #12]
 8003190:	6090      	str	r0, [r2, #8]
 8003192:	2201      	movs	r2, #1
 8003194:	431a      	orrs	r2, r3
 8003196:	604a      	str	r2, [r1, #4]
 8003198:	4a2e      	ldr	r2, [pc, #184]	; (8003254 <_free_r+0x1b0>)
 800319a:	60b9      	str	r1, [r7, #8]
 800319c:	6812      	ldr	r2, [r2, #0]
 800319e:	4293      	cmp	r3, r2
 80031a0:	d3be      	bcc.n	8003120 <_free_r+0x7c>
 80031a2:	4b2d      	ldr	r3, [pc, #180]	; (8003258 <_free_r+0x1b4>)
 80031a4:	0020      	movs	r0, r4
 80031a6:	6819      	ldr	r1, [r3, #0]
 80031a8:	f7ff ff2c 	bl	8003004 <_malloc_trim_r>
 80031ac:	e7b8      	b.n	8003120 <_free_r+0x7c>
 80031ae:	0018      	movs	r0, r3
 80031b0:	e7cf      	b.n	8003152 <_free_r+0xae>
 80031b2:	4666      	mov	r6, ip
 80031b4:	18d0      	adds	r0, r2, r3
 80031b6:	6840      	ldr	r0, [r0, #4]
 80031b8:	4230      	tst	r0, r6
 80031ba:	d13f      	bne.n	800323c <_free_r+0x198>
 80031bc:	6890      	ldr	r0, [r2, #8]
 80031be:	195d      	adds	r5, r3, r5
 80031c0:	68d3      	ldr	r3, [r2, #12]
 80031c2:	60c3      	str	r3, [r0, #12]
 80031c4:	6098      	str	r0, [r3, #8]
 80031c6:	4663      	mov	r3, ip
 80031c8:	432b      	orrs	r3, r5
 80031ca:	604b      	str	r3, [r1, #4]
 80031cc:	514d      	str	r5, [r1, r5]
 80031ce:	e7a7      	b.n	8003120 <_free_r+0x7c>
 80031d0:	2814      	cmp	r0, #20
 80031d2:	d814      	bhi.n	80031fe <_free_r+0x15a>
 80031d4:	0002      	movs	r2, r0
 80031d6:	305c      	adds	r0, #92	; 0x5c
 80031d8:	325b      	adds	r2, #91	; 0x5b
 80031da:	00c0      	lsls	r0, r0, #3
 80031dc:	e7ac      	b.n	8003138 <_free_r+0x94>
 80031de:	2301      	movs	r3, #1
 80031e0:	1092      	asrs	r2, r2, #2
 80031e2:	4093      	lsls	r3, r2
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	607b      	str	r3, [r7, #4]
 80031ea:	0003      	movs	r3, r0
 80031ec:	e7b2      	b.n	8003154 <_free_r+0xb0>
 80031ee:	4328      	orrs	r0, r5
 80031f0:	60d9      	str	r1, [r3, #12]
 80031f2:	6099      	str	r1, [r3, #8]
 80031f4:	60cb      	str	r3, [r1, #12]
 80031f6:	608b      	str	r3, [r1, #8]
 80031f8:	6048      	str	r0, [r1, #4]
 80031fa:	514d      	str	r5, [r1, r5]
 80031fc:	e790      	b.n	8003120 <_free_r+0x7c>
 80031fe:	2854      	cmp	r0, #84	; 0x54
 8003200:	d805      	bhi.n	800320e <_free_r+0x16a>
 8003202:	0b28      	lsrs	r0, r5, #12
 8003204:	0002      	movs	r2, r0
 8003206:	306f      	adds	r0, #111	; 0x6f
 8003208:	326e      	adds	r2, #110	; 0x6e
 800320a:	00c0      	lsls	r0, r0, #3
 800320c:	e794      	b.n	8003138 <_free_r+0x94>
 800320e:	22aa      	movs	r2, #170	; 0xaa
 8003210:	0052      	lsls	r2, r2, #1
 8003212:	4290      	cmp	r0, r2
 8003214:	d805      	bhi.n	8003222 <_free_r+0x17e>
 8003216:	0be8      	lsrs	r0, r5, #15
 8003218:	0002      	movs	r2, r0
 800321a:	3078      	adds	r0, #120	; 0x78
 800321c:	3277      	adds	r2, #119	; 0x77
 800321e:	00c0      	lsls	r0, r0, #3
 8003220:	e78a      	b.n	8003138 <_free_r+0x94>
 8003222:	4a0e      	ldr	r2, [pc, #56]	; (800325c <_free_r+0x1b8>)
 8003224:	4290      	cmp	r0, r2
 8003226:	d805      	bhi.n	8003234 <_free_r+0x190>
 8003228:	0ca8      	lsrs	r0, r5, #18
 800322a:	0002      	movs	r2, r0
 800322c:	307d      	adds	r0, #125	; 0x7d
 800322e:	327c      	adds	r2, #124	; 0x7c
 8003230:	00c0      	lsls	r0, r0, #3
 8003232:	e781      	b.n	8003138 <_free_r+0x94>
 8003234:	20fe      	movs	r0, #254	; 0xfe
 8003236:	227e      	movs	r2, #126	; 0x7e
 8003238:	0080      	lsls	r0, r0, #2
 800323a:	e77d      	b.n	8003138 <_free_r+0x94>
 800323c:	4663      	mov	r3, ip
 800323e:	432b      	orrs	r3, r5
 8003240:	604b      	str	r3, [r1, #4]
 8003242:	6015      	str	r5, [r2, #0]
 8003244:	e76c      	b.n	8003120 <_free_r+0x7c>
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	20000438 	.word	0x20000438
 800324c:	000001ff 	.word	0x000001ff
 8003250:	20000440 	.word	0x20000440
 8003254:	20000844 	.word	0x20000844
 8003258:	200008c4 	.word	0x200008c4
 800325c:	00000554 	.word	0x00000554

08003260 <__retarget_lock_acquire_recursive>:
 8003260:	4770      	bx	lr
 8003262:	46c0      	nop			; (mov r8, r8)

08003264 <__retarget_lock_release_recursive>:
 8003264:	4770      	bx	lr
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	e0f0fea0 	.word	0xe0f0fea0
 800326c:	08000dc4 	.word	0x08000dc4
 8003270:	08000dc4 	.word	0x08000dc4
 8003274:	08000da0 	.word	0x08000da0
 8003278:	08000d54 	.word	0x08000d54
 800327c:	08000dc4 	.word	0x08000dc4
 8003280:	08000dc4 	.word	0x08000dc4
 8003284:	08000dc4 	.word	0x08000dc4
 8003288:	08000dc4 	.word	0x08000dc4
 800328c:	08000dc4 	.word	0x08000dc4
 8003290:	08000cec 	.word	0x08000cec
 8003294:	08000e28 	.word	0x08000e28
 8003298:	08000e1a 	.word	0x08000e1a
 800329c:	0800199c 	.word	0x0800199c
 80032a0:	080019c0 	.word	0x080019c0
 80032a4:	08001858 	.word	0x08001858
 80032a8:	08001942 	.word	0x08001942
 80032ac:	08001858 	.word	0x08001858
 80032b0:	080018e0 	.word	0x080018e0
 80032b4:	080018a2 	.word	0x080018a2
 80032b8:	08001858 	.word	0x08001858
 80032bc:	08001882 	.word	0x08001882
 80032c0:	0800184c 	.word	0x0800184c
 80032c4:	08001f0a 	.word	0x08001f0a
 80032c8:	08001f04 	.word	0x08001f04
 80032cc:	08001efe 	.word	0x08001efe
 80032d0:	08001ef8 	.word	0x08001ef8
 80032d4:	08001ef2 	.word	0x08001ef2
 80032d8:	08001f10 	.word	0x08001f10

080032dc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE17_langIdDescriptorE>:
 80032dc:	04090304                                ....

080032e0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE14_hidDescriptorE>:
 80032e0:	01112109 3f220100 00000000              .!...."?....

080032ec <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE17_reportDescriptorE>:
 80032ec:	06090105 017501a1 07050895 e729e019     ......u.......).
 80032fc:	01250015 01950281 03810875 01750595     ..%.....u.....u.
 800330c:	01190805 02910529 03750195 06950391     ....).....u.....
 800331c:	00150875 07056525 65290019 00c00081     u...%e....)e....

0800332c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE24_configurationDescriptorE>:
 800332c:	00290209 80000101 000409fa 00030200     ..).............
 800333c:	21090001 01000111 07003f22 09038105     ...!...."?......
 800334c:	05070a00 00020301 0000000a              ............

08003358 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE17_deviceDescriptorE>:
 8003358:	02000112 40000000 deadcafe 02010200     .......@........
 8003368:	00000103                                ....

0800336c <_ZN9OneButton14UsbHidKeyboard12SerialStringE>:
 800336c:	0031030c 0030002e 0030002e              ..1...0...0.

08003378 <_ZN9OneButton14UsbHidKeyboard13ProductStringE>:
 8003378:	004f0316 0045004e 00420020 00540055     ..O.N.E. .B.U.T.
 8003388:	004f0054 0000004e                       T.O.N...

08003390 <_ZN9OneButton14UsbHidKeyboard15InterfaceStringE>:
 8003390:	00690308 00660074                       ..i.t.f.

08003398 <_ZN9OneButton14UsbHidKeyboard18ManufacturerStringE>:
 8003398:	004f0320 0045004e 00420020 00540055      .O.N.E. .B.U.T.
 80033a8:	004f0054 0000004e 00000000 00000000     T.O.N...........

080033b8 <_ZN9OneButton14UsbHidKeyboard19ConfigurationStringE>:
 80033b8:	00630308 00670066 00000102              ..c.f.g.....

080033c4 <_global_impure_ptr>:
 80033c4:	20000010                                ... 

080033c8 <_init>:
 80033c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ce:	bc08      	pop	{r3}
 80033d0:	469e      	mov	lr, r3
 80033d2:	4770      	bx	lr

080033d4 <_fini>:
 80033d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033da:	bc08      	pop	{r3}
 80033dc:	469e      	mov	lr, r3
 80033de:	4770      	bx	lr
