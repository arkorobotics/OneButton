
src/build/fast-f042-48000000i/onebutton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032c0  080000c4  080000c4  000100c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM          00000008  08003384  08003384  00013384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   0000000c  0800338c  0800338c  0001338c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003398  08003398  00013398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000084c  20000000  0800339c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000a4  2000084c  08003be8  0002084c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  200008f0  08003c8c  0002084c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002084c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00022ac6  00000000  00000000  00020874  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002e5a  00000000  00000000  0004333a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ae95  00000000  00000000  00046194  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000528  00000000  00000000  00051029  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001ea0  00000000  00000000  00051551  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000041bc  00000000  00000000  000533f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000173b1  00000000  00000000  000575ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007f  00000000  00000000  0006e95e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000ed8  00000000  00000000  0006e9e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c4 <__do_global_dtors_aux>:
 80000c4:	b510      	push	{r4, lr}
 80000c6:	4c06      	ldr	r4, [pc, #24]	; (80000e0 <__do_global_dtors_aux+0x1c>)
 80000c8:	7823      	ldrb	r3, [r4, #0]
 80000ca:	2b00      	cmp	r3, #0
 80000cc:	d107      	bne.n	80000de <__do_global_dtors_aux+0x1a>
 80000ce:	4b05      	ldr	r3, [pc, #20]	; (80000e4 <__do_global_dtors_aux+0x20>)
 80000d0:	2b00      	cmp	r3, #0
 80000d2:	d002      	beq.n	80000da <__do_global_dtors_aux+0x16>
 80000d4:	4804      	ldr	r0, [pc, #16]	; (80000e8 <__do_global_dtors_aux+0x24>)
 80000d6:	e000      	b.n	80000da <__do_global_dtors_aux+0x16>
 80000d8:	bf00      	nop
 80000da:	2301      	movs	r3, #1
 80000dc:	7023      	strb	r3, [r4, #0]
 80000de:	bd10      	pop	{r4, pc}
 80000e0:	2000084c 	.word	0x2000084c
 80000e4:	00000000 	.word	0x00000000
 80000e8:	0800336c 	.word	0x0800336c

080000ec <frame_dummy>:
 80000ec:	4b08      	ldr	r3, [pc, #32]	; (8000110 <frame_dummy+0x24>)
 80000ee:	b510      	push	{r4, lr}
 80000f0:	2b00      	cmp	r3, #0
 80000f2:	d003      	beq.n	80000fc <frame_dummy+0x10>
 80000f4:	4907      	ldr	r1, [pc, #28]	; (8000114 <frame_dummy+0x28>)
 80000f6:	4808      	ldr	r0, [pc, #32]	; (8000118 <frame_dummy+0x2c>)
 80000f8:	e000      	b.n	80000fc <frame_dummy+0x10>
 80000fa:	bf00      	nop
 80000fc:	4807      	ldr	r0, [pc, #28]	; (800011c <frame_dummy+0x30>)
 80000fe:	6803      	ldr	r3, [r0, #0]
 8000100:	2b00      	cmp	r3, #0
 8000102:	d100      	bne.n	8000106 <frame_dummy+0x1a>
 8000104:	bd10      	pop	{r4, pc}
 8000106:	4b06      	ldr	r3, [pc, #24]	; (8000120 <frame_dummy+0x34>)
 8000108:	2b00      	cmp	r3, #0
 800010a:	d0fb      	beq.n	8000104 <frame_dummy+0x18>
 800010c:	4798      	blx	r3
 800010e:	e7f9      	b.n	8000104 <frame_dummy+0x18>
 8000110:	00000000 	.word	0x00000000
 8000114:	20000850 	.word	0x20000850
 8000118:	0800336c 	.word	0x0800336c
 800011c:	2000084c 	.word	0x2000084c
 8000120:	00000000 	.word	0x00000000

08000124 <_ZN9OneButton18onTransmitCompleteEht>:
     * Finished sending data to the host
     */

    void onTransmitComplete(uint8_t /* endpointIndex */,uint16_t /* size */) {
      // ACK received from the host
    }
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <_ZN9OneButton14onStatusChangeEN9stm32plus13UsbStatusTypeE>:
     * Device status change event
     */

    void onStatusChange(UsbStatusType newStatus) {

      switch(newStatus) {
 8000128:	2907      	cmp	r1, #7
 800012a:	d00a      	beq.n	8000142 <_ZN9OneButton14onStatusChangeEN9stm32plus13UsbStatusTypeE+0x1a>
 800012c:	dc02      	bgt.n	8000134 <_ZN9OneButton14onStatusChangeEN9stm32plus13UsbStatusTypeE+0xc>
 800012e:	2905      	cmp	r1, #5
 8000130:	da02      	bge.n	8000138 <_ZN9OneButton14onStatusChangeEN9stm32plus13UsbStatusTypeE+0x10>
          break;

        default:
          break;
      }
    }
 8000132:	4770      	bx	lr
      switch(newStatus) {
 8000134:	2908      	cmp	r1, #8
 8000136:	d1fc      	bne.n	8000132 <_ZN9OneButton14onStatusChangeEN9stm32plus13UsbStatusTypeE+0xa>
          _deviceConfigured=false;
 8000138:	23a0      	movs	r3, #160	; 0xa0
 800013a:	2200      	movs	r2, #0
 800013c:	005b      	lsls	r3, r3, #1
 800013e:	54c2      	strb	r2, [r0, r3]
    }
 8000140:	e7f7      	b.n	8000132 <_ZN9OneButton14onStatusChangeEN9stm32plus13UsbStatusTypeE+0xa>
        _deviceConfigured=true;
 8000142:	23a0      	movs	r3, #160	; 0xa0
 8000144:	2201      	movs	r2, #1
 8000146:	005b      	lsls	r3, r3, #1
 8000148:	54c2      	strb	r2, [r0, r3]
        _lastTransmitTime=MillisecondTimer::millis()+5000;    // 5 second delay before starting to send
 800014a:	4a04      	ldr	r2, [pc, #16]	; (800015c <_ZN9OneButton14onStatusChangeEN9stm32plus13UsbStatusTypeE+0x34>)
   * Get the current value of the systick counter.
   * @return The current value of the counter.
   */

  inline uint32_t MillisecondTimer::millis() {
    return _counter;
 800014c:	4b04      	ldr	r3, [pc, #16]	; (8000160 <_ZN9OneButton14onStatusChangeEN9stm32plus13UsbStatusTypeE+0x38>)
 800014e:	4694      	mov	ip, r2
 8000150:	22a4      	movs	r2, #164	; 0xa4
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	0052      	lsls	r2, r2, #1
 8000156:	4463      	add	r3, ip
 8000158:	5083      	str	r3, [r0, r2]
        break;
 800015a:	e7ea      	b.n	8000132 <_ZN9OneButton14onStatusChangeEN9stm32plus13UsbStatusTypeE+0xa>
 800015c:	00001388 	.word	0x00001388
 8000160:	20000880 	.word	0x20000880

08000164 <_ZN9OneButton9onReceiveEhPKtt>:
    void onReceive(uint8_t endpointIndex,const uint16_t *data,uint16_t size) {
 8000164:	b510      	push	{r4, lr}
 8000166:	0004      	movs	r4, r0
 8000168:	0010      	movs	r0, r2
      if(endpointIndex==1 && size==2 && memcmp(data,"\x02\x01",size)==0)
 800016a:	2901      	cmp	r1, #1
 800016c:	d000      	beq.n	8000170 <_ZN9OneButton9onReceiveEhPKtt+0xc>
    }
 800016e:	bd10      	pop	{r4, pc}
      if(endpointIndex==1 && size==2 && memcmp(data,"\x02\x01",size)==0)
 8000170:	2b02      	cmp	r3, #2
 8000172:	d1fc      	bne.n	800016e <_ZN9OneButton9onReceiveEhPKtt+0xa>
 8000174:	2202      	movs	r2, #2
 8000176:	4905      	ldr	r1, [pc, #20]	; (800018c <_ZN9OneButton9onReceiveEhPKtt+0x28>)
 8000178:	f002 fde6 	bl	8002d48 <memcmp>
 800017c:	2800      	cmp	r0, #0
 800017e:	d1f6      	bne.n	800016e <_ZN9OneButton9onReceiveEhPKtt+0xa>
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <_ZN9OneButton9onReceiveEhPKtt+0x2c>)
 8000182:	681a      	ldr	r2, [r3, #0]
        _receivedReportTime=MillisecondTimer::millis();
 8000184:	23a2      	movs	r3, #162	; 0xa2
 8000186:	005b      	lsls	r3, r3, #1
 8000188:	50e2      	str	r2, [r4, r3]
    }
 800018a:	e7f0      	b.n	800016e <_ZN9OneButton9onReceiveEhPKtt+0xa>
 800018c:	08003364 	.word	0x08003364
 8000190:	20000880 	.word	0x20000880

08000194 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE16continueSendDataEh.constprop.82>:
    const uint8_t *dataBytes;
    UsbInEndpointData& ep(_inEndpointData[endpointIndex]);

    // cut down the length if this will be a multi-packet transfer

    if((length=ep.remaining)>ep.maxPacketSize)
 8000194:	2340      	movs	r3, #64	; 0x40
 8000196:	5ac2      	ldrh	r2, [r0, r3]
 8000198:	3304      	adds	r3, #4
  inline void UsbKeyboard<TConfiguration,Features...>::continueSendData(uint8_t endpointIndex) {
 800019a:	b570      	push	{r4, r5, r6, lr}
    if((length=ep.remaining)>ep.maxPacketSize)
 800019c:	5ac6      	ldrh	r6, [r0, r3]
 800019e:	0034      	movs	r4, r6
 80001a0:	42b2      	cmp	r2, r6
 80001a2:	dc01      	bgt.n	80001a8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE16continueSendDataEh.constprop.82+0x14>
 80001a4:	0014      	movs	r4, r2
      length=ep.maxPacketSize;
    else
      length=ep.remaining;
 80001a6:	0016      	movs	r6, r2

    n=(length+1)/2;
    pdwVal=reinterpret_cast<uint16_t *>(BTABLE_BASE+ep.pmaAddress);
 80001a8:	2346      	movs	r3, #70	; 0x46
 80001aa:	5ac5      	ldrh	r5, [r0, r3]
 80001ac:	4b13      	ldr	r3, [pc, #76]	; (80001fc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE16continueSendDataEh.constprop.82+0x68>)
    n=(length+1)/2;
 80001ae:	3401      	adds	r4, #1
    pdwVal=reinterpret_cast<uint16_t *>(BTABLE_BASE+ep.pmaAddress);
 80001b0:	469c      	mov	ip, r3
    n=(length+1)/2;
 80001b2:	1064      	asrs	r4, r4, #1
    pdwVal=reinterpret_cast<uint16_t *>(BTABLE_BASE+ep.pmaAddress);
 80001b4:	4465      	add	r5, ip
    dataBytes=ep.ptr;
 80001b6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

    for(i=n;i!=0;i--) {
 80001b8:	2c00      	cmp	r4, #0
 80001ba:	d00c      	beq.n	80001d6 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE16continueSendDataEh.constprop.82+0x42>
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 80001bc:	7859      	ldrb	r1, [r3, #1]
 80001be:	781a      	ldrb	r2, [r3, #0]
 80001c0:	0209      	lsls	r1, r1, #8
 80001c2:	430a      	orrs	r2, r1
    for(i=n;i!=0;i--) {
 80001c4:	3c01      	subs	r4, #1
      *pdwVal++=word;
 80001c6:	802a      	strh	r2, [r5, #0]
      dataBytes+=2;
 80001c8:	3302      	adds	r3, #2
 80001ca:	3502      	adds	r5, #2
    for(i=n;i!=0;i--) {
 80001cc:	2c00      	cmp	r4, #0
 80001ce:	d1f5      	bne.n	80001bc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE16continueSendDataEh.constprop.82+0x28>
 80001d0:	2240      	movs	r2, #64	; 0x40
 80001d2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80001d4:	5a82      	ldrh	r2, [r0, r2]
    }

    // update status

    ep.ptr+=length;
 80001d6:	199b      	adds	r3, r3, r6
 80001d8:	63c3      	str	r3, [r0, #60]	; 0x3c
    ep.remaining-=length;
 80001da:	2340      	movs	r3, #64	; 0x40
 80001dc:	1b92      	subs	r2, r2, r6
 80001de:	52c2      	strh	r2, [r0, r3]

    // now that the PMA memory is prepared, set the length and tell the peripheral to send it

    USBR_BDT[endpointIndex].tx.count=length;
 80001e0:	4b06      	ldr	r3, [pc, #24]	; (80001fc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE16continueSendDataEh.constprop.82+0x68>)
    value=*epreg & USB_EPTX_DTOGMASK;
 80001e2:	4907      	ldr	r1, [pc, #28]	; (8000200 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE16continueSendDataEh.constprop.82+0x6c>)
    USBR_BDT[endpointIndex].tx.count=length;
 80001e4:	805e      	strh	r6, [r3, #2]
    value=*epreg & USB_EPTX_DTOGMASK;
 80001e6:	880b      	ldrh	r3, [r1, #0]
 80001e8:	4a06      	ldr	r2, [pc, #24]	; (8000204 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE16continueSendDataEh.constprop.82+0x70>)
 80001ea:	4013      	ands	r3, r2
      reg^=USB_EPTX_DTOG2;
 80001ec:	2230      	movs	r2, #48	; 0x30
 80001ee:	405a      	eors	r2, r3
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 80001f0:	4b05      	ldr	r3, [pc, #20]	; (8000208 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE16continueSendDataEh.constprop.82+0x74>)
 80001f2:	4313      	orrs	r3, r2
 80001f4:	b29b      	uxth	r3, r3
 80001f6:	800b      	strh	r3, [r1, #0]
    setTxEndpointStatus(&USBR->EP0R+endpointIndex*2,USB_EP_TX_VALID);
  }
 80001f8:	bd70      	pop	{r4, r5, r6, pc}
 80001fa:	46c0      	nop			; (mov r8, r8)
 80001fc:	40006000 	.word	0x40006000
 8000200:	40005c00 	.word	0x40005c00
 8000204:	ffff8fbf 	.word	0xffff8fbf
 8000208:	ffff8080 	.word	0xffff8080

0800020c <_ZNK9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE13stallEndpointEh.isra.42>:
  template<class TConfiguration,class... Features>
  inline void UsbKeyboard<TConfiguration,Features...>::stallEndpoint(uint8_t epAddr) const {

    uint8_t endpointIndex;

    endpointIndex=epAddr & 0x7f;
 800020c:	237f      	movs	r3, #127	; 0x7f
 800020e:	4a17      	ldr	r2, [pc, #92]	; (800026c <_ZNK9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE13stallEndpointEh.isra.42+0x60>)
 8000210:	4003      	ands	r3, r0

    if(endpointIndex==0)
 8000212:	d112      	bne.n	800023a <_ZNK9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE13stallEndpointEh.isra.42+0x2e>
    value=*epreg & USB_EPRX_DTOGMASK;
 8000214:	4916      	ldr	r1, [pc, #88]	; (8000270 <_ZNK9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE13stallEndpointEh.isra.42+0x64>)
 8000216:	4817      	ldr	r0, [pc, #92]	; (8000274 <_ZNK9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE13stallEndpointEh.isra.42+0x68>)
 8000218:	880b      	ldrh	r3, [r1, #0]
 800021a:	4018      	ands	r0, r3
      reg^=USB_EPRX_DTOG1;
 800021c:	2380      	movs	r3, #128	; 0x80
 800021e:	015b      	lsls	r3, r3, #5
 8000220:	4043      	eors	r3, r0
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8000222:	4313      	orrs	r3, r2
 8000224:	b29b      	uxth	r3, r3
 8000226:	800b      	strh	r3, [r1, #0]
    value=*epreg & USB_EPTX_DTOGMASK;
 8000228:	880b      	ldrh	r3, [r1, #0]
 800022a:	4813      	ldr	r0, [pc, #76]	; (8000278 <_ZNK9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE13stallEndpointEh.isra.42+0x6c>)
 800022c:	4018      	ands	r0, r3
      reg^=USB_EPTX_DTOG1;
 800022e:	2310      	movs	r3, #16
 8000230:	4043      	eors	r3, r0
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8000232:	431a      	orrs	r2, r3
 8000234:	b292      	uxth	r2, r2
 8000236:	800a      	strh	r2, [r1, #0]
 8000238:	e017      	b.n	800026a <_ZNK9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE13stallEndpointEh.isra.42+0x5e>
 800023a:	4910      	ldr	r1, [pc, #64]	; (800027c <_ZNK9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE13stallEndpointEh.isra.42+0x70>)
      controlEndpointError();
    else {

      if((epAddr & 0x80)==0x80)
 800023c:	b240      	sxtb	r0, r0
 800023e:	468c      	mov	ip, r1
 8000240:	4463      	add	r3, ip
        setTxEndpointStatus(&USBR->EP0R+endpointIndex*2,USB_EP_TX_STALL);
 8000242:	009b      	lsls	r3, r3, #2
    value=*epreg & USB_EPTX_DTOGMASK;
 8000244:	8819      	ldrh	r1, [r3, #0]
      if((epAddr & 0x80)==0x80)
 8000246:	2800      	cmp	r0, #0
 8000248:	da07      	bge.n	800025a <_ZNK9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE13stallEndpointEh.isra.42+0x4e>
    value=*epreg & USB_EPTX_DTOGMASK;
 800024a:	480b      	ldr	r0, [pc, #44]	; (8000278 <_ZNK9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE13stallEndpointEh.isra.42+0x6c>)
 800024c:	4008      	ands	r0, r1
      reg^=USB_EPTX_DTOG1;
 800024e:	2110      	movs	r1, #16
 8000250:	4041      	eors	r1, r0
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8000252:	430a      	orrs	r2, r1
 8000254:	b292      	uxth	r2, r2
 8000256:	801a      	strh	r2, [r3, #0]
 8000258:	e007      	b.n	800026a <_ZNK9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE13stallEndpointEh.isra.42+0x5e>
    value=*epreg & USB_EPRX_DTOGMASK;
 800025a:	4806      	ldr	r0, [pc, #24]	; (8000274 <_ZNK9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE13stallEndpointEh.isra.42+0x68>)
 800025c:	4008      	ands	r0, r1
      reg^=USB_EPRX_DTOG1;
 800025e:	2180      	movs	r1, #128	; 0x80
 8000260:	0149      	lsls	r1, r1, #5
 8000262:	4041      	eors	r1, r0
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8000264:	430a      	orrs	r2, r1
 8000266:	b292      	uxth	r2, r2
 8000268:	801a      	strh	r2, [r3, #0]
      else
        setRxEndpointStatus(&USBR->EP0R+endpointIndex*2,USB_EP_RX_STALL);
    }
  }
 800026a:	4770      	bx	lr
 800026c:	ffff8080 	.word	0xffff8080
 8000270:	40005c00 	.word	0x40005c00
 8000274:	ffffbf8f 	.word	0xffffbf8f
 8000278:	ffff8fbf 	.word	0xffff8fbf
 800027c:	10001700 	.word	0x10001700

08000280 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEEC1Ev>:
  inline UsbKeyboard<TConfiguration,Features...>::UsbKeyboard() {
 8000280:	b5f0      	push	{r4, r5, r6, r7, lr}
  DelegateMemento() : m_pthis(0), m_pFunction(0), m_pStaticFunction(0) {};
  void clear() {
    m_pthis=0; m_pFunction=0; m_pStaticFunction=0;
  }
#else
  DelegateMemento() : m_pthis(0), m_pFunction(0) {};
 8000282:	2300      	movs	r3, #0
     * Zero out the contents on construction
     */

    UsbInEndpointData()
      : ptr(nullptr),
        remaining(0) {
 8000284:	2240      	movs	r2, #64	; 0x40
 8000286:	46c6      	mov	lr, r8
 8000288:	b500      	push	{lr}
 800028a:	6043      	str	r3, [r0, #4]
 800028c:	6083      	str	r3, [r0, #8]
 800028e:	6003      	str	r3, [r0, #0]
                            _Alloc_traits<_Tp, _Alloc>::_S_instanceless>
          _Base;
  typedef typename _Base::allocator_type allocator_type;

  _Slist_base(const allocator_type& __a)
    : _Base(__a) { this->_M_head._M_next = 0; }
 8000290:	60c3      	str	r3, [r0, #12]
 8000292:	6103      	str	r3, [r0, #16]
 8000294:	6143      	str	r3, [r0, #20]
 8000296:	6183      	str	r3, [r0, #24]
 8000298:	61c3      	str	r3, [r0, #28]
 800029a:	6203      	str	r3, [r0, #32]
 800029c:	6243      	str	r3, [r0, #36]	; 0x24
 800029e:	6283      	str	r3, [r0, #40]	; 0x28
 80002a0:	62c3      	str	r3, [r0, #44]	; 0x2c
 80002a2:	63c3      	str	r3, [r0, #60]	; 0x3c
 80002a4:	5283      	strh	r3, [r0, r2]
 80002a6:	0002      	movs	r2, r0
 80002a8:	3248      	adds	r2, #72	; 0x48
 80002aa:	b08a      	sub	sp, #40	; 0x28
 80002ac:	6483      	str	r3, [r0, #72]	; 0x48
 80002ae:	8093      	strh	r3, [r2, #4]
        bound_func = reinterpret_cast<GenericMemFuncType>(function_to_bind);
 80002b0:	4a25      	ldr	r2, [pc, #148]	; (8000348 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEEC1Ev+0xc8>)
 80002b2:	ad08      	add	r5, sp, #32
 80002b4:	9205      	str	r2, [sp, #20]
 80002b6:	002a      	movs	r2, r5
    _deviceState=DeviceStateType::NONE;
 80002b8:	6303      	str	r3, [r0, #48]	; 0x30
 80002ba:	9306      	str	r3, [sp, #24]
 80002bc:	ab05      	add	r3, sp, #20
  inline UsbKeyboard<TConfiguration,Features...>::UsbKeyboard() {
 80002be:	0004      	movs	r4, r0
 80002c0:	cb03      	ldmia	r3!, {r0, r1}
 80002c2:	c203      	stmia	r2!, {r0, r1}
  // obtain end().
  iterator before_begin() { return iterator((_Node*) &this->_M_head); }
  const_iterator before_begin() const
    { return const_iterator((_Node*) &this->_M_head); }

  size_type size() const { return __slist_size(this->_M_head._M_next); }
 80002c4:	4f21      	ldr	r7, [pc, #132]	; (800034c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEEC1Ev+0xcc>)
 80002c6:	68fb      	ldr	r3, [r7, #12]
  for ( ; __node != 0; __node = __node->_M_next)
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d006      	beq.n	80002da <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEEC1Ev+0x5a>
 80002cc:	2200      	movs	r2, #0
 80002ce:	681b      	ldr	r3, [r3, #0]
    ++__result;
 80002d0:	3201      	adds	r2, #1
  for ( ; __node != 0; __node = __node->_M_next)
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d1fb      	bne.n	80002ce <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEEC1Ev+0x4e>
      /// \param slot The slot you wish to connect
      /// \see bind To bind a slot to a function

      void insertSubscriber(const slot_type& slot) {

        if(_slots.size()==0)
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d104      	bne.n	80002e4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEEC1Ev+0x64>
    , m_pStaticFunction (right.m_pStaticFunction)
#endif
    {}
protected:
  void SetMementoFrom(const DelegateMemento &right)  {
    m_pFunction = right.m_pFunction;
 80002da:	002a      	movs	r2, r5
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	ca03      	ldmia	r2!, {r0, r1}
 80002e0:	c303      	stmia	r3!, {r0, r1}
    m_pthis = right.m_pthis;
 80002e2:	603c      	str	r4, [r7, #0]

public:

  static void* allocate(size_t __n)
  {
    void* __result = stm32_malloc(__n);
 80002e4:	2010      	movs	r0, #16
 80002e6:	f002 fa67 	bl	80027b8 <malloc>
 80002ea:	1e06      	subs	r6, r0, #0
    if (0 == __result) __result = _S_oom_malloc(__n);
 80002ec:	d01d      	beq.n	800032a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEEC1Ev+0xaa>
      construct(&__node->_M_data, __x);
 80002ee:	1d31      	adds	r1, r6, #4

// Internal names

template <class _T1, class _T2>
inline void _Construct(_T1* __p, const _T2& __value) {
  new ((void*) __p) _T1(__value);
 80002f0:	200c      	movs	r0, #12
 80002f2:	f001 fe15 	bl	8001f20 <_ZnwjPv>
    m_pFunction = right.m_pFunction;
 80002f6:	1d03      	adds	r3, r0, #4
 80002f8:	cd06      	ldmia	r5!, {r1, r2}
 80002fa:	c306      	stmia	r3!, {r1, r2}
  __new_node->_M_next = __prev_node->_M_next;
 80002fc:	68fb      	ldr	r3, [r7, #12]
    m_pthis = right.m_pthis;
 80002fe:	6004      	str	r4, [r0, #0]
 8000300:	6033      	str	r3, [r6, #0]
    GpioPinInitialiser::initialise(GPIOA,
 8000302:	2302      	movs	r3, #2
  __prev_node->_M_next = __new_node;
 8000304:	60fe      	str	r6, [r7, #12]
 8000306:	9302      	str	r3, [sp, #8]
 8000308:	3b01      	subs	r3, #1
 800030a:	9301      	str	r3, [sp, #4]
 800030c:	21c0      	movs	r1, #192	; 0xc0
 800030e:	2300      	movs	r3, #0
 8000310:	2090      	movs	r0, #144	; 0x90
 8000312:	9300      	str	r3, [sp, #0]
 8000314:	2203      	movs	r2, #3
 8000316:	3303      	adds	r3, #3
 8000318:	0149      	lsls	r1, r1, #5
 800031a:	05c0      	lsls	r0, r0, #23
 800031c:	f001 ff72 	bl	8002204 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh>
  }
 8000320:	0020      	movs	r0, r4
 8000322:	b00a      	add	sp, #40	; 0x28
 8000324:	bc04      	pop	{r2}
 8000326:	4690      	mov	r8, r2
 8000328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800032a:	4b09      	ldr	r3, [pc, #36]	; (8000350 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEEC1Ev+0xd0>)
 800032c:	4698      	mov	r8, r3
 800032e:	e005      	b.n	800033c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEEC1Ev+0xbc>
    void* __result;

    for (;;) {
        __my_malloc_handler = __malloc_alloc_oom_handler;
        if (0 == __my_malloc_handler) { __THROW_BAD_ALLOC; }
        (*__my_malloc_handler)();
 8000330:	4798      	blx	r3
        __result = malloc(__n);
 8000332:	2010      	movs	r0, #16
 8000334:	f002 fa40 	bl	80027b8 <malloc>
 8000338:	1e06      	subs	r6, r0, #0
        if (__result) return(__result);
 800033a:	d1d8      	bne.n	80002ee <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEEC1Ev+0x6e>
        __my_malloc_handler = __malloc_alloc_oom_handler;
 800033c:	4643      	mov	r3, r8
 800033e:	681b      	ldr	r3, [r3, #0]
        if (0 == __my_malloc_handler) { __THROW_BAD_ALLOC; }
 8000340:	2b00      	cmp	r3, #0
 8000342:	d1f5      	bne.n	8000330 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEEC1Ev+0xb0>
 8000344:	e7fe      	b.n	8000344 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEEC1Ev+0xc4>
 8000346:	46c0      	nop			; (mov r8, r8)
 8000348:	08000ebd 	.word	0x08000ebd
 800034c:	20000884 	.word	0x20000884
 8000350:	20000868 	.word	0x20000868

08000354 <_ZN9OneButton3runEv>:
      _deviceConfigured=false;
 8000354:	23a0      	movs	r3, #160	; 0xa0
    void run() {
 8000356:	b5f0      	push	{r4, r5, r6, r7, lr}
      _deviceConfigured=false;
 8000358:	2400      	movs	r4, #0
    void run() {
 800035a:	46de      	mov	lr, fp
 800035c:	464e      	mov	r6, r9
 800035e:	4645      	mov	r5, r8
 8000360:	4657      	mov	r7, sl
      _receivedReportTime=UINT32_MAX-1000;
 8000362:	4adf      	ldr	r2, [pc, #892]	; (80006e0 <_ZN9OneButton3runEv+0x38c>)
      _deviceConfigured=false;
 8000364:	005b      	lsls	r3, r3, #1
    void run() {
 8000366:	b5e0      	push	{r5, r6, r7, lr}
      _deviceConfigured=false;
 8000368:	54c4      	strb	r4, [r0, r3]
      _receivedReportTime=UINT32_MAX-1000;
 800036a:	3304      	adds	r3, #4
 800036c:	50c2      	str	r2, [r0, r3]
      _lastTransmitTime=0;
 800036e:	3304      	adds	r3, #4
 8000370:	50c4      	str	r4, [r0, r3]

  template<>
  struct ClockControl<PERIPHERAL_SPI1> {

    static void On() {
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1,ENABLE);
 8000372:	2380      	movs	r3, #128	; 0x80
   */

  template<class TPinPackage,PeripheralName TPeripheralName>
  inline void SpiPinInitialiser<TPinPackage,TPeripheralName>::initialise(uint16_t mode,uint16_t direction) {

    GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_SCK,
 8000374:	2590      	movs	r5, #144	; 0x90
 8000376:	2601      	movs	r6, #1
 8000378:	2702      	movs	r7, #2
 800037a:	015b      	lsls	r3, r3, #5
    void run() {
 800037c:	b0ef      	sub	sp, #444	; 0x1bc
 800037e:	05ed      	lsls	r5, r5, #23
 8000380:	2101      	movs	r1, #1
 8000382:	4681      	mov	r9, r0
 8000384:	0018      	movs	r0, r3
 8000386:	4698      	mov	r8, r3
 8000388:	f002 f96e 	bl	8002668 <RCC_APB2PeriphClockCmd>
 800038c:	9402      	str	r4, [sp, #8]
 800038e:	9601      	str	r6, [sp, #4]
 8000390:	2303      	movs	r3, #3
 8000392:	2203      	movs	r2, #3
 8000394:	2120      	movs	r1, #32
 8000396:	0028      	movs	r0, r5
 8000398:	9700      	str	r7, [sp, #0]
 800039a:	f001 ff33 	bl	8002204 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh>
                                   GpioAlternateFunctionMapper<TPeripheralName,TPinPackage::Port_SCK,TPinPackage::Pin_SCK>::GPIO_AF);

    // in uni-directional mode slave MOSI is free

    if(mode==SPI_Mode_Master || direction==SPI_Direction_2Lines_FullDuplex)
      GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_MOSI,
 800039e:	9402      	str	r4, [sp, #8]
 80003a0:	9601      	str	r6, [sp, #4]
 80003a2:	2303      	movs	r3, #3
 80003a4:	2203      	movs	r2, #3
 80003a6:	2180      	movs	r1, #128	; 0x80
 80003a8:	0028      	movs	r0, r5
 80003aa:	9700      	str	r7, [sp, #0]
 80003ac:	f001 ff2a 	bl	8002204 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh>
                                     GpioAlternateFunctionMapper<TPeripheralName,TPinPackage::Port_MOSI,TPinPackage::Pin_MOSI>::GPIO_AF);

    // in uni-directional mode master MISO is free

    if(mode==SPI_Mode_Slave || direction==SPI_Direction_2Lines_FullDuplex)
      GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_MISO,
 80003b0:	9402      	str	r4, [sp, #8]
 80003b2:	9601      	str	r6, [sp, #4]
 80003b4:	2303      	movs	r3, #3
 80003b6:	2203      	movs	r2, #3
 80003b8:	2140      	movs	r1, #64	; 0x40
 80003ba:	0028      	movs	r0, r5
 80003bc:	9700      	str	r7, [sp, #0]
 80003be:	f001 ff21 	bl	8002204 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh>

    if(mode==SPI_Mode_Master) {

      // in master mode NSS is an output

      GpioPinInitialiser::initialise((GPIO_TypeDef *)TPinPackage::Port_NSS,
 80003c2:	9400      	str	r4, [sp, #0]
 80003c4:	2303      	movs	r3, #3
 80003c6:	2200      	movs	r2, #0
 80003c8:	2110      	movs	r1, #16
 80003ca:	9601      	str	r6, [sp, #4]
 80003cc:	0028      	movs	r0, r5
 80003ce:	f001 feb1 	bl	8002134 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE>

    SpiPinInitialiser<TPinPackage,TPeripheralName>::initialise(params.spi_mode,params.spi_direction);

    // initialise the peripheral

    SPI_StructInit(&init);
 80003d2:	a856      	add	r0, sp, #344	; 0x158
 80003d4:	f002 f960 	bl	8002698 <SPI_StructInit>

    init.SPI_Direction=params.spi_direction;
 80003d8:	22a4      	movs	r2, #164	; 0xa4
 80003da:	ab04      	add	r3, sp, #16
 80003dc:	0052      	lsls	r2, r2, #1
 80003de:	189b      	adds	r3, r3, r2
    init.SPI_Mode=params.spi_mode;
 80003e0:	21a5      	movs	r1, #165	; 0xa5
    init.SPI_Direction=params.spi_direction;
 80003e2:	801c      	strh	r4, [r3, #0]
    init.SPI_Mode=params.spi_mode;
 80003e4:	2382      	movs	r3, #130	; 0x82
 80003e6:	0049      	lsls	r1, r1, #1
 80003e8:	aa04      	add	r2, sp, #16
 80003ea:	1852      	adds	r2, r2, r1
 80003ec:	005b      	lsls	r3, r3, #1
 80003ee:	8013      	strh	r3, [r2, #0]
    init.SPI_DataSize=params.spi_dataSize;
 80003f0:	23e0      	movs	r3, #224	; 0xe0
 80003f2:	3102      	adds	r1, #2
 80003f4:	aa04      	add	r2, sp, #16
 80003f6:	1852      	adds	r2, r2, r1
 80003f8:	00db      	lsls	r3, r3, #3
 80003fa:	8013      	strh	r3, [r2, #0]
    init.SPI_CPOL=params.spi_cpol;
 80003fc:	22a7      	movs	r2, #167	; 0xa7
 80003fe:	ab04      	add	r3, sp, #16
 8000400:	0052      	lsls	r2, r2, #1
 8000402:	189b      	adds	r3, r3, r2
 8000404:	801f      	strh	r7, [r3, #0]
    init.SPI_CPHA=params.spi_cpha;
 8000406:	3202      	adds	r2, #2
 8000408:	ab04      	add	r3, sp, #16
 800040a:	189b      	adds	r3, r3, r2
 800040c:	801e      	strh	r6, [r3, #0]
    init.SPI_NSS=SPI_NSS_Soft;
 800040e:	2680      	movs	r6, #128	; 0x80
 8000410:	3202      	adds	r2, #2
 8000412:	ab04      	add	r3, sp, #16
 8000414:	00b6      	lsls	r6, r6, #2
 8000416:	189b      	adds	r3, r3, r2
 8000418:	801e      	strh	r6, [r3, #0]
    init.SPI_BaudRatePrescaler=params.spi_baudRatePrescaler;
 800041a:	2308      	movs	r3, #8
 800041c:	3108      	adds	r1, #8
 800041e:	aa04      	add	r2, sp, #16
 8000420:	1852      	adds	r2, r2, r1
 8000422:	8013      	strh	r3, [r2, #0]
    init.SPI_FirstBit=params.spi_firstBit;
 8000424:	22ab      	movs	r2, #171	; 0xab
 8000426:	ab04      	add	r3, sp, #16
 8000428:	0052      	lsls	r2, r2, #1
 800042a:	189b      	adds	r3, r3, r2
 800042c:	801c      	strh	r4, [r3, #0]
    init.SPI_CRCPolynomial=params.spi_polynomial;
 800042e:	2307      	movs	r3, #7
 8000430:	3104      	adds	r1, #4
 8000432:	aa04      	add	r2, sp, #16
 8000434:	1852      	adds	r2, r2, r1

    SPI_Init(_peripheralAddress,&init);
 8000436:	48ab      	ldr	r0, [pc, #684]	; (80006e4 <_ZN9OneButton3runEv+0x390>)
 8000438:	a956      	add	r1, sp, #344	; 0x158
    init.SPI_CRCPolynomial=params.spi_polynomial;
 800043a:	8013      	strh	r3, [r2, #0]
    SPI_Init(_peripheralAddress,&init);
 800043c:	f002 f93a 	bl	80026b4 <SPI_Init>
   * @param value true = high, false = low
   */

  inline void Spi::setNss(bool value) const {
    if(value)
      GPIO_SetBits(_nssPort,_nssPin);
 8000440:	2110      	movs	r1, #16
 8000442:	0028      	movs	r0, r5
 8000444:	f002 f8bc 	bl	80025c0 <GPIO_SetBits>
    setNss(true);

    // set a default quarter-full threshold for the FIFO to be compatible with the
    // other families - override with the SpiFifoNotifyFeature.

    SPI_RxFIFOThresholdConfig(_peripheralAddress,SPI_RxFIFOThreshold_QF);
 8000448:	4641      	mov	r1, r8
 800044a:	48a6      	ldr	r0, [pc, #664]	; (80006e4 <_ZN9OneButton3runEv+0x390>)
 800044c:	f002 f966 	bl	800271c <SPI_RxFIFOThresholdConfig>
    SPI_Cmd(_peripheralAddress,ENABLE);
 8000450:	2101      	movs	r1, #1
 8000452:	48a4      	ldr	r0, [pc, #656]	; (80006e4 <_ZN9OneButton3runEv+0x390>)
 8000454:	f002 f958 	bl	8002708 <SPI_Cmd>

  inline Dma::Dma(DMA_PeripheralType *peripheralAddress,uint32_t completeFlag,uint32_t halfCompleteFlag,uint32_t errorFlag) {

    // save channel and get peripheral index

    _peripheralAddress=peripheralAddress;
 8000458:	4ba3      	ldr	r3, [pc, #652]	; (80006e8 <_ZN9OneButton3runEv+0x394>)
    _init.DMA_MemoryInc=DMA_MemoryInc_Enable;                 // memory is incremented
    _init.DMA_Mode=DMA_Mode_Normal;                           // not a circular buffer
    _init.DMA_Priority=TPriority;                             // user-configurable priority
    _init.DMA_M2M=DMA_M2M_Disable;                            // memory->peripheral configuration

    SPI_I2S_DMACmd(spi,SPI_I2S_DMAReq_Tx,ENABLE);
 800045a:	2201      	movs	r2, #1
 800045c:	931c      	str	r3, [sp, #112]	; 0x70
    _completeFlag=completeFlag;
    _halfCompleteFlag=halfCompleteFlag;
 800045e:	2380      	movs	r3, #128	; 0x80
 8000460:	00db      	lsls	r3, r3, #3
 8000462:	931e      	str	r3, [sp, #120]	; 0x78
    _errorFlag=errorFlag;
 8000464:	2380      	movs	r3, #128	; 0x80
 8000466:	011b      	lsls	r3, r3, #4
 8000468:	931f      	str	r3, [sp, #124]	; 0x7c
   * Constructor
   * @param dma
   */

  inline DmaFeatureBase::DmaFeatureBase(Dma& dma)
    : _dma(dma) {
 800046a:	ab1c      	add	r3, sp, #112	; 0x70
 800046c:	9320      	str	r3, [sp, #128]	; 0x80
    _init.DMA_PeripheralBaseAddr=reinterpret_cast<uint32_t>(&(spi->DR));
 800046e:	4b9f      	ldr	r3, [pc, #636]	; (80006ec <_ZN9OneButton3runEv+0x398>)
    SPI_I2S_DMACmd(spi,SPI_I2S_DMAReq_Tx,ENABLE);
 8000470:	2102      	movs	r1, #2
    _init.DMA_PeripheralBaseAddr=reinterpret_cast<uint32_t>(&(spi->DR));
 8000472:	9321      	str	r3, [sp, #132]	; 0x84
    _init.DMA_DIR=DMA_DIR_PeripheralDST;                      // 'peripheral' is destination
 8000474:	2310      	movs	r3, #16
 8000476:	9323      	str	r3, [sp, #140]	; 0x8c
    _init.DMA_MemoryInc=DMA_MemoryInc_Enable;                 // memory is incremented
 8000478:	3370      	adds	r3, #112	; 0x70
 800047a:	9326      	str	r3, [sp, #152]	; 0x98
    _init.DMA_Priority=TPriority;                             // user-configurable priority
 800047c:	4643      	mov	r3, r8
    SPI_I2S_DMACmd(spi,SPI_I2S_DMAReq_Tx,ENABLE);
 800047e:	4899      	ldr	r0, [pc, #612]	; (80006e4 <_ZN9OneButton3runEv+0x390>)
      _init.DMA_PeripheralDataSize=DMA_PeripheralDataSize_Byte; // transferring bytes
 8000480:	9427      	str	r4, [sp, #156]	; 0x9c
      _init.DMA_MemoryDataSize=DMA_MemoryDataSize_Byte;         // transferring bytes
 8000482:	9428      	str	r4, [sp, #160]	; 0xa0
    _init.DMA_PeripheralInc=DMA_PeripheralInc_Disable;        // 'peripheral' does not increment
 8000484:	9425      	str	r4, [sp, #148]	; 0x94
    _init.DMA_Mode=DMA_Mode_Normal;                           // not a circular buffer
 8000486:	9429      	str	r4, [sp, #164]	; 0xa4
    _init.DMA_Priority=TPriority;                             // user-configurable priority
 8000488:	932a      	str	r3, [sp, #168]	; 0xa8
    _init.DMA_M2M=DMA_M2M_Disable;                            // memory->peripheral configuration
 800048a:	942b      	str	r4, [sp, #172]	; 0xac
    _completeFlag=completeFlag;
 800048c:	961d      	str	r6, [sp, #116]	; 0x74
    SPI_I2S_DMACmd(spi,SPI_I2S_DMAReq_Tx,ENABLE);
 800048e:	f002 f94f 	bl	8002730 <SPI_I2S_DMACmd>
      RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1,ENABLE);
 8000492:	2101      	movs	r1, #1
 8000494:	2001      	movs	r0, #1
 8000496:	f002 f8db 	bl	8002650 <RCC_AHBPeriphClockCmd>
       * Init clock and return port address
       * @return the peripheral port address
       */

      GPIO_TypeDef *initClock() {
        RCC_AHBPeriphClockCmd(gpioHelper::getPeripheral<TPortAddress>(),ENABLE);
 800049a:	2080      	movs	r0, #128	; 0x80
   * Constructor
   * @param peripheralAddress
   */

  inline GpioPortBase::GpioPortBase(GPIO_TypeDef *peripheralAddress)
    : _peripheralAddress(peripheralAddress) {
 800049c:	ac2c      	add	r4, sp, #176	; 0xb0
 800049e:	2101      	movs	r1, #1
 80004a0:	0280      	lsls	r0, r0, #10
 80004a2:	f002 f8d5 	bl	8002650 <RCC_AHBPeriphClockCmd>
    memset(_pinHandlers,'\0',sizeof(_pinHandlers));
 80004a6:	2240      	movs	r2, #64	; 0x40
 80004a8:	2100      	movs	r1, #0
    : _peripheralAddress(peripheralAddress) {
 80004aa:	6425      	str	r5, [r4, #64]	; 0x40
    memset(_pinHandlers,'\0',sizeof(_pinHandlers));
 80004ac:	0020      	movs	r0, r4
 80004ae:	f002 fc71 	bl	8002d94 <memset>
    _low=15;
 80004b2:	230f      	movs	r3, #15
        uint8_t i;
        GPIO_InitTypeDef init;

        (void)pullUpDownType;

        this->_pinIds=pinIds;
 80004b4:	2250      	movs	r2, #80	; 0x50
 80004b6:	3ebd      	subs	r6, #189	; 0xbd
 80004b8:	3eff      	subs	r6, #255	; 0xff
 80004ba:	55a3      	strb	r3, [r4, r6]
 80004bc:	3311      	adds	r3, #17
 80004be:	52a3      	strh	r3, [r4, r2]

        init.GPIO_Speed=speed;
        init.GPIO_Mode=GPIO_Mode_OUT;
 80004c0:	4a8b      	ldr	r2, [pc, #556]	; (80006f0 <_ZN9OneButton3runEv+0x39c>)
   * @param port
   */

  inline Gpio::Gpio(GpioPortBase& portBase)
    : _portBase(portBase),
      _peripheralAddress(portBase.getPeripheralAddress()) {
 80004c2:	64a4      	str	r4, [r4, #72]	; 0x48
 80004c4:	64e5      	str	r5, [r4, #76]	; 0x4c
        init.GPIO_OType=outputType==Gpio::PUSH_PULL ? GPIO_OType_PP : GPIO_OType_OD;
        init.GPIO_PuPd=pullUpDownType==PUPD_NONE ? GPIO_PuPd_NOPULL : (pullUpDownType==PUPD_UP ? GPIO_PuPd_UP : GPIO_PuPd_DOWN);
        init.GPIO_Pin=pinIds;

        GPIO_Init(_peripheralAddress,&init);
 80004c6:	a956      	add	r1, sp, #344	; 0x158
 80004c8:	0028      	movs	r0, r5
        init.GPIO_Mode=GPIO_Mode_OUT;
 80004ca:	9257      	str	r2, [sp, #348]	; 0x15c
        init.GPIO_Pin=pinIds;
 80004cc:	9356      	str	r3, [sp, #344]	; 0x158
        GPIO_Init(_peripheralAddress,&init);
 80004ce:	f002 f811 	bl	80024f4 <GPIO_Init>

        // set ourselves as the pin handler in the port base

        for(i=0;i<16;i++)
          if((pinIds & (1<<i))!=0)
            _portBase.setPinHandler(i,this);
 80004d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   * @param pinHandler The handler for that position
   */

  inline void GpioPortBase::setPinHandler(uint8_t index,Gpio *pinHandler) {

    _pinHandlers[index]=pinHandler;
 80004d4:	aa3e      	add	r2, sp, #248	; 0xf8
 80004d6:	615a      	str	r2, [r3, #20]

    if(index<_low)
 80004d8:	5d9a      	ldrb	r2, [r3, r6]
 80004da:	2a05      	cmp	r2, #5
 80004dc:	dd01      	ble.n	80004e2 <_ZN9OneButton3runEv+0x18e>
      _low=index;
 80004de:	2205      	movs	r2, #5
 80004e0:	559a      	strb	r2, [r3, r6]
   * Set the selected pin number to one of those that you initialised this class with
   * @param pinNumber The pin number (0..15)
   */

  inline void Gpio::setSelectedPin(uint8_t pinNumber) {
    _selectedPin=1 << pinNumber;
 80004e2:	2220      	movs	r2, #32
       * @param selectedPin The pin to select
       * @return A reference to the pin that you can call operations such as set(), reset() on.
       */

      Gpio& operator[](uint8_t selectedPin) {
        _pinHandlers[selectedPin]->setSelectedPin(selectedPin);
 80004e4:	6963      	ldr	r3, [r4, #20]
  /**
   * Set the selected pin to LOW.
   */

  inline void Gpio::reset() const {
    GPIO_WriteBit(_peripheralAddress,_selectedPin,Bit_RESET);
 80004e6:	2120      	movs	r1, #32
    _selectedPin=1 << pinNumber;
 80004e8:	815a      	strh	r2, [r3, #10]
    GPIO_WriteBit(_peripheralAddress,_selectedPin,Bit_RESET);
 80004ea:	6858      	ldr	r0, [r3, #4]
 80004ec:	2200      	movs	r2, #0
 80004ee:	f002 f86b 	bl	80025c8 <GPIO_WriteBit>
   * Allow setting/resetting of the selected pin from a variable.
   * @param[in] state The new state of the pin.
   */

  inline void Gpio::setState(bool state) const {
    GPIO_WriteBit(_peripheralAddress,_selectedPin,state ? Bit_SET : Bit_RESET);
 80004f2:	2352      	movs	r3, #82	; 0x52
 80004f4:	2200      	movs	r2, #0
 80004f6:	5ae1      	ldrh	r1, [r4, r3]
 80004f8:	983f      	ldr	r0, [sp, #252]	; 0xfc
 80004fa:	f002 f865 	bl	80025c8 <GPIO_WriteBit>
        RCC_AHBPeriphClockCmd(gpioHelper::getPeripheral<TPortAddress>(),ENABLE);
 80004fe:	2080      	movs	r0, #128	; 0x80
    : _peripheralAddress(peripheralAddress) {
 8000500:	2590      	movs	r5, #144	; 0x90
 8000502:	2101      	movs	r1, #1
 8000504:	0280      	lsls	r0, r0, #10
 8000506:	f002 f8a3 	bl	8002650 <RCC_AHBPeriphClockCmd>
 800050a:	05ed      	lsls	r5, r5, #23
    memset(_pinHandlers,'\0',sizeof(_pinHandlers));
 800050c:	2240      	movs	r2, #64	; 0x40
 800050e:	2100      	movs	r1, #0
 8000510:	a841      	add	r0, sp, #260	; 0x104
    : _peripheralAddress(peripheralAddress) {
 8000512:	9551      	str	r5, [sp, #324]	; 0x144
    memset(_pinHandlers,'\0',sizeof(_pinHandlers));
 8000514:	f002 fc3e 	bl	8002d94 <memset>
    _low=15;
 8000518:	21f4      	movs	r1, #244	; 0xf4
 800051a:	2444      	movs	r4, #68	; 0x44
 800051c:	230f      	movs	r3, #15
 800051e:	aa04      	add	r2, sp, #16
 8000520:	1852      	adds	r2, r2, r1
 8000522:	5513      	strb	r3, [r2, r4]
      _peripheralAddress(portBase.getPeripheralAddress()) {
 8000524:	ab41      	add	r3, sp, #260	; 0x104
                      GPIOSpeed_TypeDef speed=GPIO_Speed_Level_3,
                      Gpio::GpioPullUpDownType pullUpDownType=Gpio::PUPD_NONE) {
        uint8_t i;
        GPIO_InitTypeDef init;

        this->_pinIds=pinIds;
 8000526:	aa04      	add	r2, sp, #16
 8000528:	1852      	adds	r2, r2, r1
    memset(_pinHandlers,'\0',sizeof(_pinHandlers));
 800052a:	2640      	movs	r6, #64	; 0x40
 800052c:	9353      	str	r3, [sp, #332]	; 0x14c

        init.GPIO_Speed=speed;
 800052e:	214e      	movs	r1, #78	; 0x4e
        this->_pinIds=pinIds;
 8000530:	2350      	movs	r3, #80	; 0x50
        init.GPIO_Speed=speed;
 8000532:	31ff      	adds	r1, #255	; 0xff
        this->_pinIds=pinIds;
 8000534:	52d6      	strh	r6, [r2, r3]
        init.GPIO_Speed=speed;
 8000536:	aa04      	add	r2, sp, #16
 8000538:	1852      	adds	r2, r2, r1
 800053a:	3b4d      	subs	r3, #77	; 0x4d
 800053c:	7013      	strb	r3, [r2, #0]
        init.GPIO_Mode=GPIO_Mode_IN;
 800053e:	3901      	subs	r1, #1
 8000540:	aa04      	add	r2, sp, #16
 8000542:	2300      	movs	r3, #0
 8000544:	1852      	adds	r2, r2, r1
        init.GPIO_PuPd=pullUpDownType==PUPD_NONE ? GPIO_PuPd_NOPULL : (pullUpDownType==PUPD_UP ? GPIO_PuPd_UP : GPIO_PuPd_DOWN);
 8000546:	2150      	movs	r1, #80	; 0x50
        init.GPIO_Mode=GPIO_Mode_IN;
 8000548:	7013      	strb	r3, [r2, #0]
        init.GPIO_PuPd=pullUpDownType==PUPD_NONE ? GPIO_PuPd_NOPULL : (pullUpDownType==PUPD_UP ? GPIO_PuPd_UP : GPIO_PuPd_DOWN);
 800054a:	31ff      	adds	r1, #255	; 0xff
 800054c:	aa04      	add	r2, sp, #16
 800054e:	1852      	adds	r2, r2, r1
        init.GPIO_Pin=pinIds;

        GPIO_Init(_peripheralAddress,&init);
 8000550:	0028      	movs	r0, r5
 8000552:	a956      	add	r1, sp, #344	; 0x158
        init.GPIO_PuPd=pullUpDownType==PUPD_NONE ? GPIO_PuPd_NOPULL : (pullUpDownType==PUPD_UP ? GPIO_PuPd_UP : GPIO_PuPd_DOWN);
 8000554:	7013      	strb	r3, [r2, #0]
 8000556:	9554      	str	r5, [sp, #336]	; 0x150
        init.GPIO_Pin=pinIds;
 8000558:	9656      	str	r6, [sp, #344]	; 0x158
        GPIO_Init(_peripheralAddress,&init);
 800055a:	f001 ffcb 	bl	80024f4 <GPIO_Init>

        // set ourselves as the pin handler in the port base

        for(i=0;i<16;i++)
          if((pinIds & (1<<i))!=0)
            _portBase.setPinHandler(i,this);
 800055e:	9b53      	ldr	r3, [sp, #332]	; 0x14c
    _pinHandlers[index]=pinHandler;
 8000560:	aa53      	add	r2, sp, #332	; 0x14c
 8000562:	619a      	str	r2, [r3, #24]
    if(index<_low)
 8000564:	5d1a      	ldrb	r2, [r3, r4]
 8000566:	2a06      	cmp	r2, #6
 8000568:	dd01      	ble.n	800056e <_ZN9OneButton3runEv+0x21a>
      _low=index;
 800056a:	2206      	movs	r2, #6
 800056c:	551a      	strb	r2, [r3, r4]
    _selectedPin=1 << pinNumber;
 800056e:	2240      	movs	r2, #64	; 0x40
        _pinHandlers[selectedPin]->setSelectedPin(selectedPin);
 8000570:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    GPIO_WriteBit(_peripheralAddress,_selectedPin,Bit_RESET);
 8000572:	2140      	movs	r1, #64	; 0x40
    _selectedPin=1 << pinNumber;
 8000574:	815a      	strh	r2, [r3, #10]
    GPIO_WriteBit(_peripheralAddress,_selectedPin,Bit_RESET);
 8000576:	6858      	ldr	r0, [r3, #4]
 8000578:	2200      	movs	r2, #0
 800057a:	f002 f825 	bl	80025c8 <GPIO_WriteBit>
      UsbKeyboard<UsbHidKeyboard> usb;
 800057e:	a856      	add	r0, sp, #344	; 0x158
 8000580:	f7ff fe7e 	bl	8000280 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEEC1Ev>
        bound_func = reinterpret_cast<GenericMemFuncType>(function_to_bind);
 8000584:	4b5b      	ldr	r3, [pc, #364]	; (80006f4 <_ZN9OneButton3runEv+0x3a0>)
 8000586:	ad1a      	add	r5, sp, #104	; 0x68
 8000588:	9311      	str	r3, [sp, #68]	; 0x44
 800058a:	2300      	movs	r3, #0
 800058c:	002a      	movs	r2, r5
 800058e:	9312      	str	r3, [sp, #72]	; 0x48
 8000590:	ab11      	add	r3, sp, #68	; 0x44
 8000592:	cb03      	ldmia	r3!, {r0, r1}
 8000594:	c203      	stmia	r2!, {r0, r1}
  size_type size() const { return __slist_size(this->_M_head._M_next); }
 8000596:	9b5d      	ldr	r3, [sp, #372]	; 0x174
  for ( ; __node != 0; __node = __node->_M_next)
 8000598:	2b00      	cmp	r3, #0
 800059a:	d006      	beq.n	80005aa <_ZN9OneButton3runEv+0x256>
 800059c:	2200      	movs	r2, #0
 800059e:	681b      	ldr	r3, [r3, #0]
    ++__result;
 80005a0:	3201      	adds	r2, #1
  for ( ; __node != 0; __node = __node->_M_next)
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d1fb      	bne.n	800059e <_ZN9OneButton3runEv+0x24a>
 80005a6:	2a00      	cmp	r2, #0
 80005a8:	d105      	bne.n	80005b6 <_ZN9OneButton3runEv+0x262>
    m_pFunction = right.m_pFunction;
 80005aa:	002a      	movs	r2, r5
 80005ac:	ab5b      	add	r3, sp, #364	; 0x16c
 80005ae:	ca03      	ldmia	r2!, {r0, r1}
 80005b0:	c303      	stmia	r3!, {r0, r1}
    m_pthis = right.m_pthis;
 80005b2:	464b      	mov	r3, r9
 80005b4:	935a      	str	r3, [sp, #360]	; 0x168
    void* __result = stm32_malloc(__n);
 80005b6:	2010      	movs	r0, #16
 80005b8:	f002 f8fe 	bl	80027b8 <malloc>
 80005bc:	4f4e      	ldr	r7, [pc, #312]	; (80006f8 <_ZN9OneButton3runEv+0x3a4>)
 80005be:	1e04      	subs	r4, r0, #0
    if (0 == __result) __result = _S_oom_malloc(__n);
 80005c0:	d076      	beq.n	80006b0 <_ZN9OneButton3runEv+0x35c>
      construct(&__node->_M_data, __x);
 80005c2:	1d21      	adds	r1, r4, #4
 80005c4:	200c      	movs	r0, #12
 80005c6:	f001 fcab 	bl	8001f20 <_ZnwjPv>
    m_pFunction = right.m_pFunction;
 80005ca:	1d03      	adds	r3, r0, #4
 80005cc:	cd06      	ldmia	r5!, {r1, r2}
 80005ce:	c306      	stmia	r3!, {r1, r2}
    m_pthis = right.m_pthis;
 80005d0:	464b      	mov	r3, r9
 80005d2:	6003      	str	r3, [r0, #0]
  __new_node->_M_next = __prev_node->_M_next;
 80005d4:	9b5d      	ldr	r3, [sp, #372]	; 0x174
        bound_func = reinterpret_cast<GenericMemFuncType>(function_to_bind);
 80005d6:	ad1a      	add	r5, sp, #104	; 0x68
 80005d8:	9304      	str	r3, [sp, #16]
 80005da:	6023      	str	r3, [r4, #0]
 80005dc:	4b47      	ldr	r3, [pc, #284]	; (80006fc <_ZN9OneButton3runEv+0x3a8>)
 80005de:	002a      	movs	r2, r5
 80005e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80005e2:	2300      	movs	r3, #0
  __prev_node->_M_next = __new_node;
 80005e4:	945d      	str	r4, [sp, #372]	; 0x174
 80005e6:	9310      	str	r3, [sp, #64]	; 0x40
 80005e8:	ab0f      	add	r3, sp, #60	; 0x3c
 80005ea:	cb03      	ldmia	r3!, {r0, r1}
 80005ec:	c203      	stmia	r2!, {r0, r1}
  size_type size() const { return __slist_size(this->_M_head._M_next); }
 80005ee:	9b59      	ldr	r3, [sp, #356]	; 0x164
  for ( ; __node != 0; __node = __node->_M_next)
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d006      	beq.n	8000602 <_ZN9OneButton3runEv+0x2ae>
 80005f4:	2200      	movs	r2, #0
 80005f6:	681b      	ldr	r3, [r3, #0]
    ++__result;
 80005f8:	3201      	adds	r2, #1
  for ( ; __node != 0; __node = __node->_M_next)
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d1fb      	bne.n	80005f6 <_ZN9OneButton3runEv+0x2a2>
 80005fe:	2a00      	cmp	r2, #0
 8000600:	d105      	bne.n	800060e <_ZN9OneButton3runEv+0x2ba>
    m_pFunction = right.m_pFunction;
 8000602:	002a      	movs	r2, r5
 8000604:	ab57      	add	r3, sp, #348	; 0x15c
 8000606:	ca03      	ldmia	r2!, {r0, r1}
 8000608:	c303      	stmia	r3!, {r0, r1}
    m_pthis = right.m_pthis;
 800060a:	464b      	mov	r3, r9
 800060c:	9356      	str	r3, [sp, #344]	; 0x158
    void* __result = stm32_malloc(__n);
 800060e:	2010      	movs	r0, #16
 8000610:	f002 f8d2 	bl	80027b8 <malloc>
 8000614:	1e04      	subs	r4, r0, #0
    if (0 == __result) __result = _S_oom_malloc(__n);
 8000616:	d057      	beq.n	80006c8 <_ZN9OneButton3runEv+0x374>
      construct(&__node->_M_data, __x);
 8000618:	1d21      	adds	r1, r4, #4
 800061a:	200c      	movs	r0, #12
 800061c:	f001 fc80 	bl	8001f20 <_ZnwjPv>
    m_pFunction = right.m_pFunction;
 8000620:	1d03      	adds	r3, r0, #4
 8000622:	cd06      	ldmia	r5!, {r1, r2}
 8000624:	c306      	stmia	r3!, {r1, r2}
    m_pthis = right.m_pthis;
 8000626:	464b      	mov	r3, r9
 8000628:	6003      	str	r3, [r0, #0]
  __new_node->_M_next = __prev_node->_M_next;
 800062a:	9b59      	ldr	r3, [sp, #356]	; 0x164
        bound_func = reinterpret_cast<GenericMemFuncType>(function_to_bind);
 800062c:	ad1a      	add	r5, sp, #104	; 0x68
 800062e:	9304      	str	r3, [sp, #16]
 8000630:	6023      	str	r3, [r4, #0]
 8000632:	4b33      	ldr	r3, [pc, #204]	; (8000700 <_ZN9OneButton3runEv+0x3ac>)
  __prev_node->_M_next = __new_node;
 8000634:	9459      	str	r4, [sp, #356]	; 0x164
 8000636:	930d      	str	r3, [sp, #52]	; 0x34
 8000638:	2300      	movs	r3, #0
 800063a:	930e      	str	r3, [sp, #56]	; 0x38
 800063c:	002b      	movs	r3, r5
 800063e:	aa0d      	add	r2, sp, #52	; 0x34
 8000640:	ca03      	ldmia	r2!, {r0, r1}
 8000642:	c303      	stmia	r3!, {r0, r1}
  size_type size() const { return __slist_size(this->_M_head._M_next); }
 8000644:	9b61      	ldr	r3, [sp, #388]	; 0x184
  for ( ; __node != 0; __node = __node->_M_next)
 8000646:	2b00      	cmp	r3, #0
 8000648:	d007      	beq.n	800065a <_ZN9OneButton3runEv+0x306>
 800064a:	2200      	movs	r2, #0
 800064c:	681b      	ldr	r3, [r3, #0]
    ++__result;
 800064e:	3201      	adds	r2, #1
  for ( ; __node != 0; __node = __node->_M_next)
 8000650:	2b00      	cmp	r3, #0
 8000652:	d1fb      	bne.n	800064c <_ZN9OneButton3runEv+0x2f8>
 8000654:	ac5f      	add	r4, sp, #380	; 0x17c
 8000656:	2a00      	cmp	r2, #0
 8000658:	d106      	bne.n	8000668 <_ZN9OneButton3runEv+0x314>
    m_pFunction = right.m_pFunction;
 800065a:	ac5f      	add	r4, sp, #380	; 0x17c
 800065c:	0023      	movs	r3, r4
 800065e:	002a      	movs	r2, r5
 8000660:	ca03      	ldmia	r2!, {r0, r1}
 8000662:	c303      	stmia	r3!, {r0, r1}
    m_pthis = right.m_pthis;
 8000664:	464b      	mov	r3, r9
 8000666:	935e      	str	r3, [sp, #376]	; 0x178
    void* __result = stm32_malloc(__n);
 8000668:	2010      	movs	r0, #16
 800066a:	f002 f8a5 	bl	80027b8 <malloc>
 800066e:	1e06      	subs	r6, r0, #0
    if (0 == __result) __result = _S_oom_malloc(__n);
 8000670:	d100      	bne.n	8000674 <_ZN9OneButton3runEv+0x320>
 8000672:	e138      	b.n	80008e6 <_ZN9OneButton3runEv+0x592>
      construct(&__node->_M_data, __x);
 8000674:	1d31      	adds	r1, r6, #4
 8000676:	200c      	movs	r0, #12
 8000678:	f001 fc52 	bl	8001f20 <_ZnwjPv>
    m_pFunction = right.m_pFunction;
 800067c:	1d03      	adds	r3, r0, #4
 800067e:	cd06      	ldmia	r5!, {r1, r2}
 8000680:	c306      	stmia	r3!, {r1, r2}
    m_pthis = right.m_pthis;
 8000682:	464b      	mov	r3, r9
    _address=0;
 8000684:	25a4      	movs	r5, #164	; 0xa4
 8000686:	2259      	movs	r2, #89	; 0x59
 8000688:	2100      	movs	r1, #0
 800068a:	6003      	str	r3, [r0, #0]
 800068c:	006d      	lsls	r5, r5, #1
 800068e:	a804      	add	r0, sp, #16
 8000690:	1940      	adds	r0, r0, r5
  __new_node->_M_next = __prev_node->_M_next;
 8000692:	9b61      	ldr	r3, [sp, #388]	; 0x184
  __prev_node->_M_next = __new_node;
 8000694:	9661      	str	r6, [sp, #388]	; 0x184
 8000696:	5481      	strb	r1, [r0, r2]
  template<class TConfiguration,class... Features>
  inline void UsbKeyboard<TConfiguration,Features...>::setDeviceState(DeviceStateType newState) {

    UsbStatusType notify;

    if(_deviceState!=newState) {
 8000698:	9a62      	ldr	r2, [sp, #392]	; 0x188
  __new_node->_M_next = __prev_node->_M_next;
 800069a:	6033      	str	r3, [r6, #0]
 800069c:	9204      	str	r2, [sp, #16]
 800069e:	2a01      	cmp	r2, #1
 80006a0:	d063      	beq.n	800076a <_ZN9OneButton3runEv+0x416>

      _deviceState=newState;
 80006a2:	2201      	movs	r2, #1
 80006a4:	9262      	str	r2, [sp, #392]	; 0x188
    ++__result;
 80006a6:	3101      	adds	r1, #1
  for ( ; __node != 0; __node = __node->_M_next)
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d02b      	beq.n	8000704 <_ZN9OneButton3runEv+0x3b0>
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	e7fa      	b.n	80006a6 <_ZN9OneButton3runEv+0x352>
        __my_malloc_handler = __malloc_alloc_oom_handler;
 80006b0:	683b      	ldr	r3, [r7, #0]
        if (0 == __my_malloc_handler) { __THROW_BAD_ALLOC; }
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d007      	beq.n	80006c6 <_ZN9OneButton3runEv+0x372>
        (*__my_malloc_handler)();
 80006b6:	4798      	blx	r3
        __result = malloc(__n);
 80006b8:	2010      	movs	r0, #16
 80006ba:	f002 f87d 	bl	80027b8 <malloc>
        if (__result) return(__result);
 80006be:	2800      	cmp	r0, #0
 80006c0:	d0f6      	beq.n	80006b0 <_ZN9OneButton3runEv+0x35c>
 80006c2:	0004      	movs	r4, r0
 80006c4:	e77d      	b.n	80005c2 <_ZN9OneButton3runEv+0x26e>
 80006c6:	e7fe      	b.n	80006c6 <_ZN9OneButton3runEv+0x372>
        __my_malloc_handler = __malloc_alloc_oom_handler;
 80006c8:	683b      	ldr	r3, [r7, #0]
        if (0 == __my_malloc_handler) { __THROW_BAD_ALLOC; }
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d007      	beq.n	80006de <_ZN9OneButton3runEv+0x38a>
        (*__my_malloc_handler)();
 80006ce:	4798      	blx	r3
        __result = malloc(__n);
 80006d0:	2010      	movs	r0, #16
 80006d2:	f002 f871 	bl	80027b8 <malloc>
        if (__result) return(__result);
 80006d6:	2800      	cmp	r0, #0
 80006d8:	d0f6      	beq.n	80006c8 <_ZN9OneButton3runEv+0x374>
 80006da:	0004      	movs	r4, r0
 80006dc:	e79c      	b.n	8000618 <_ZN9OneButton3runEv+0x2c4>
 80006de:	e7fe      	b.n	80006de <_ZN9OneButton3runEv+0x38a>
 80006e0:	fffffc17 	.word	0xfffffc17
 80006e4:	40013000 	.word	0x40013000
 80006e8:	40020030 	.word	0x40020030
 80006ec:	4001300c 	.word	0x4001300c
 80006f0:	00000301 	.word	0x00000301
 80006f4:	08000165 	.word	0x08000165
 80006f8:	20000868 	.word	0x20000868
 80006fc:	08000125 	.word	0x08000125
 8000700:	08000129 	.word	0x08000129
      /// Emits the events you wish to send to the call-backs
      /// \param args The arguments to emit to the slots connected to the signal
      template <class ...Args>
      void raiseEvent(Args&&... args) const {

        if(_slots.size()==1)
 8000704:	2901      	cmp	r1, #1
 8000706:	d020      	beq.n	800074a <_ZN9OneButton3runEv+0x3f6>
  inline void bind(DesiredRetType (*function_to_bind)(Param1 p1)) {
    m_Closure.bindstaticfunc(this, &FastDelegate1::InvokeStaticFunction, 
      function_to_bind); }
  // Invoke the delegate
  RetType operator() (Param1 p1) const {
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8000708:	2301      	movs	r3, #1
 800070a:	4698      	mov	r8, r3
 800070c:	0035      	movs	r5, r6
 800070e:	ae15      	add	r6, sp, #84	; 0x54
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8000710:	002b      	movs	r3, r5
 8000712:	0032      	movs	r2, r6
 8000714:	3308      	adds	r3, #8
 8000716:	6868      	ldr	r0, [r5, #4]
 8000718:	cb82      	ldmia	r3!, {r1, r7}
 800071a:	c282      	stmia	r2!, {r1, r7}
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 800071c:	4641      	mov	r1, r8
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 800071e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8000720:	9a15      	ldr	r2, [sp, #84]	; 0x54
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8000722:	4219      	tst	r1, r3
 8000724:	d009      	beq.n	800073a <_ZN9OneButton3runEv+0x3e6>
 8000726:	105b      	asrs	r3, r3, #1
 8000728:	18c0      	adds	r0, r0, r3
 800072a:	6803      	ldr	r3, [r0, #0]
 800072c:	2105      	movs	r1, #5
 800072e:	589b      	ldr	r3, [r3, r2]
 8000730:	4798      	blx	r3
  void _M_incr() { _M_node = _M_node->_M_next; }
 8000732:	682d      	ldr	r5, [r5, #0]
          _firstSlot(args...);
        else {
          for(auto it=_slots.begin();it!=_slots.end();it++)
 8000734:	2d00      	cmp	r5, #0
 8000736:	d1eb      	bne.n	8000710 <_ZN9OneButton3runEv+0x3bc>
 8000738:	e017      	b.n	800076a <_ZN9OneButton3runEv+0x416>
 800073a:	105b      	asrs	r3, r3, #1
 800073c:	18c0      	adds	r0, r0, r3
 800073e:	2105      	movs	r1, #5
 8000740:	4790      	blx	r2
 8000742:	682d      	ldr	r5, [r5, #0]
 8000744:	2d00      	cmp	r5, #0
 8000746:	d1e3      	bne.n	8000710 <_ZN9OneButton3runEv+0x3bc>
 8000748:	e00f      	b.n	800076a <_ZN9OneButton3runEv+0x416>
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 800074a:	0022      	movs	r2, r4
 800074c:	ab13      	add	r3, sp, #76	; 0x4c
 800074e:	985e      	ldr	r0, [sp, #376]	; 0x178
 8000750:	ca60      	ldmia	r2!, {r5, r6}
 8000752:	c360      	stmia	r3!, {r5, r6}
 8000754:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8000756:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8000758:	4219      	tst	r1, r3
 800075a:	d100      	bne.n	800075e <_ZN9OneButton3runEv+0x40a>
 800075c:	e219      	b.n	8000b92 <_ZN9OneButton3runEv+0x83e>
 800075e:	105b      	asrs	r3, r3, #1
 8000760:	18c0      	adds	r0, r0, r3
 8000762:	6803      	ldr	r3, [r0, #0]
 8000764:	589a      	ldr	r2, [r3, r2]
 8000766:	2105      	movs	r1, #5
 8000768:	4790      	blx	r2
    _remoteWakeup=false;
 800076a:	21a4      	movs	r1, #164	; 0xa4
 800076c:	2700      	movs	r7, #0
 800076e:	235b      	movs	r3, #91	; 0x5b
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB,ENABLE);
 8000770:	2080      	movs	r0, #128	; 0x80
    _remoteWakeup=false;
 8000772:	0049      	lsls	r1, r1, #1
 8000774:	aa04      	add	r2, sp, #16
    USBR->BTABLE=0;
 8000776:	4ece      	ldr	r6, [pc, #824]	; (8000ab0 <_ZN9OneButton3runEv+0x75c>)
    _remoteWakeup=false;
 8000778:	1852      	adds	r2, r2, r1
 800077a:	54d7      	strb	r7, [r2, r3]
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB,ENABLE);
 800077c:	3948      	subs	r1, #72	; 0x48
    USBR->BTABLE=0;
 800077e:	3b0b      	subs	r3, #11
 8000780:	52f7      	strh	r7, [r6, r3]
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB,ENABLE);
 8000782:	39ff      	subs	r1, #255	; 0xff
 8000784:	0400      	lsls	r0, r0, #16
 8000786:	f001 ff7b 	bl	8002680 <RCC_APB1PeriphClockCmd>

  inline void Nvic::configureIrq(uint8_t interrupt,FunctionalState state,uint8_t preemptionPriority,uint8_t /* subPriority */) {

    NVIC_InitTypeDef nit;

    nit.NVIC_IRQChannel=interrupt;
 800078a:	231f      	movs	r3, #31
 800078c:	ad19      	add	r5, sp, #100	; 0x64
 800078e:	702b      	strb	r3, [r5, #0]
    nit.NVIC_IRQChannelPriority=preemptionPriority;
 8000790:	2300      	movs	r3, #0
 8000792:	706b      	strb	r3, [r5, #1]
    nit.NVIC_IRQChannelCmd=state;
 8000794:	2301      	movs	r3, #1
 8000796:	4698      	mov	r8, r3

    NVIC_Init(&nit);
 8000798:	0028      	movs	r0, r5
    nit.NVIC_IRQChannelCmd=state;
 800079a:	70ab      	strb	r3, [r5, #2]
    NVIC_Init(&nit);
 800079c:	f001 ff2c 	bl	80025f8 <NVIC_Init>
    USBR->CNTR=USB_CNTR_FRES;
 80007a0:	2340      	movs	r3, #64	; 0x40
 80007a2:	4642      	mov	r2, r8
 80007a4:	52f2      	strh	r2, [r6, r3]
    USBR->ISTR=0;
 80007a6:	2244      	movs	r2, #68	; 0x44
    USBR->CNTR=0;
 80007a8:	52f7      	strh	r7, [r6, r3]
    USBR->ISTR=0;
 80007aa:	52b7      	strh	r7, [r6, r2]
    USBR->CNTR=USB_CNTR_CTRM          // correct transfer
 80007ac:	4ac1      	ldr	r2, [pc, #772]	; (8000ab4 <_ZN9OneButton3runEv+0x760>)
    USBR->BCDR |= USB_BCDR_DPPU;
 80007ae:	2180      	movs	r1, #128	; 0x80
    USBR->CNTR=USB_CNTR_CTRM          // correct transfer
 80007b0:	52f2      	strh	r2, [r6, r3]
    USBR->BCDR |= USB_BCDR_DPPU;
 80007b2:	2258      	movs	r2, #88	; 0x58
 80007b4:	5ab3      	ldrh	r3, [r6, r2]
 80007b6:	0209      	lsls	r1, r1, #8
 80007b8:	430b      	orrs	r3, r1
 80007ba:	52b3      	strh	r3, [r6, r2]
  size_type size() const { return __slist_size(this->_M_head._M_next); }
 80007bc:	9e61      	ldr	r6, [sp, #388]	; 0x184
  for ( ; __node != 0; __node = __node->_M_next)
 80007be:	2e00      	cmp	r6, #0
 80007c0:	d01d      	beq.n	80007fe <_ZN9OneButton3runEv+0x4aa>
 80007c2:	0033      	movs	r3, r6
 80007c4:	2100      	movs	r1, #0
 80007c6:	681b      	ldr	r3, [r3, #0]
    ++__result;
 80007c8:	3101      	adds	r1, #1
  for ( ; __node != 0; __node = __node->_M_next)
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d1fb      	bne.n	80007c6 <_ZN9OneButton3runEv+0x472>
        if(_slots.size()==1)
 80007ce:	2901      	cmp	r1, #1
 80007d0:	d100      	bne.n	80007d4 <_ZN9OneButton3runEv+0x480>
 80007d2:	e1cf      	b.n	8000b74 <_ZN9OneButton3runEv+0x820>
 80007d4:	2401      	movs	r4, #1
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 80007d6:	0033      	movs	r3, r6
 80007d8:	002a      	movs	r2, r5
 80007da:	3308      	adds	r3, #8
 80007dc:	6870      	ldr	r0, [r6, #4]
 80007de:	cb82      	ldmia	r3!, {r1, r7}
 80007e0:	c282      	stmia	r2!, {r1, r7}
 80007e2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80007e4:	9a19      	ldr	r2, [sp, #100]	; 0x64
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 80007e6:	421c      	tst	r4, r3
 80007e8:	d100      	bne.n	80007ec <_ZN9OneButton3runEv+0x498>
 80007ea:	e1ba      	b.n	8000b62 <_ZN9OneButton3runEv+0x80e>
 80007ec:	105b      	asrs	r3, r3, #1
 80007ee:	18c0      	adds	r0, r0, r3
 80007f0:	6803      	ldr	r3, [r0, #0]
 80007f2:	2105      	movs	r1, #5
 80007f4:	589b      	ldr	r3, [r3, r2]
 80007f6:	4798      	blx	r3
  void _M_incr() { _M_node = _M_node->_M_next; }
 80007f8:	6836      	ldr	r6, [r6, #0]
          for(auto it=_slots.begin();it!=_slots.end();it++)
 80007fa:	2e00      	cmp	r6, #0
 80007fc:	d1eb      	bne.n	80007d6 <_ZN9OneButton3runEv+0x482>
 80007fe:	2318      	movs	r3, #24
 8000800:	444b      	add	r3, r9
 8000802:	469a      	mov	sl, r3
 8000804:	239c      	movs	r3, #156	; 0x9c
            dataToSend[data_idx+1] = (0xF0 & (uint16_t)(led_bit_1 << 8)) + (0x0F & (uint16_t)(led_bit_2 >> 8));
 8000806:	240f      	movs	r4, #15
 8000808:	464d      	mov	r5, r9
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	444b      	add	r3, r9
 800080e:	9307      	str	r3, [sp, #28]
   * Read the selected pin state.
   * @return The pin state.
   */

  inline bool Gpio::read() const {
    return GPIO_ReadInputDataBit(_peripheralAddress,_selectedPin);
 8000810:	21f4      	movs	r1, #244	; 0xf4
 8000812:	2252      	movs	r2, #82	; 0x52
 8000814:	ab04      	add	r3, sp, #16
 8000816:	185b      	adds	r3, r3, r1
 8000818:	5a99      	ldrh	r1, [r3, r2]
 800081a:	9854      	ldr	r0, [sp, #336]	; 0x150
 800081c:	f001 feca 	bl	80025b4 <GPIO_ReadInputDataBit>
        if(keyin.read()==0 && _debounce == 0)
 8000820:	2800      	cmp	r0, #0
 8000822:	d13a      	bne.n	800089a <_ZN9OneButton3runEv+0x546>
 8000824:	23a6      	movs	r3, #166	; 0xa6
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	5ceb      	ldrb	r3, [r5, r3]
 800082a:	b2db      	uxtb	r3, r3
 800082c:	2b00      	cmp	r3, #0
 800082e:	d134      	bne.n	800089a <_ZN9OneButton3runEv+0x546>
          uint8_t usb_key_report[8] = {2, 0, 5, 0, 0, 0, 0, 0};
 8000830:	4aa1      	ldr	r2, [pc, #644]	; (8000ab8 <_ZN9OneButton3runEv+0x764>)
 8000832:	930a      	str	r3, [sp, #40]	; 0x28
 8000834:	9209      	str	r2, [sp, #36]	; 0x24
    if(_deviceState!=DeviceStateType::CONFIGURED)
 8000836:	9a62      	ldr	r2, [sp, #392]	; 0x188
 8000838:	9204      	str	r2, [sp, #16]
 800083a:	2a03      	cmp	r2, #3
 800083c:	d100      	bne.n	8000840 <_ZN9OneButton3runEv+0x4ec>
 800083e:	e157      	b.n	8000af0 <_ZN9OneButton3runEv+0x79c>
       * @param[in] errorCause Optional 32-bit value associated with this error.
       * @return false, which is the convention for the return value of a method that wants to indicate to its caller that it has failed.
       */

      bool set(uint32_t errorProviderCode,uint32_t errorCode,uint32_t errorCause=0) {
        _provider=errorProviderCode;
 8000840:	2246      	movs	r2, #70	; 0x46
 8000842:	499e      	ldr	r1, [pc, #632]	; (8000abc <_ZN9OneButton3runEv+0x768>)
 8000844:	608a      	str	r2, [r1, #8]
        _errorCode=errorCode | (errorProviderCode << 16);
 8000846:	4a9e      	ldr	r2, [pc, #632]	; (8000ac0 <_ZN9OneButton3runEv+0x76c>)
        _errorCause=errorCause;
 8000848:	604b      	str	r3, [r1, #4]
        _errorCode=errorCode | (errorProviderCode << 16);
 800084a:	600a      	str	r2, [r1, #0]
          MillisecondTimer::delay(10);
 800084c:	200a      	movs	r0, #10
 800084e:	f001 fdbf 	bl	80023d0 <_ZN9stm32plus16MillisecondTimer5delayEm>
          uint8_t usb_key_report_2[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8000852:	2208      	movs	r2, #8
 8000854:	2100      	movs	r1, #0
 8000856:	a80b      	add	r0, sp, #44	; 0x2c
 8000858:	f002 fa9c 	bl	8002d94 <memset>
 800085c:	9b62      	ldr	r3, [sp, #392]	; 0x188
 800085e:	9304      	str	r3, [sp, #16]
 8000860:	2b03      	cmp	r3, #3
 8000862:	d100      	bne.n	8000866 <_ZN9OneButton3runEv+0x512>
 8000864:	e0e3      	b.n	8000a2e <_ZN9OneButton3runEv+0x6da>
        _provider=errorProviderCode;
 8000866:	2346      	movs	r3, #70	; 0x46
 8000868:	4a94      	ldr	r2, [pc, #592]	; (8000abc <_ZN9OneButton3runEv+0x768>)
        _errorCause=errorCause;
 800086a:	4995      	ldr	r1, [pc, #596]	; (8000ac0 <_ZN9OneButton3runEv+0x76c>)
        _provider=errorProviderCode;
 800086c:	6093      	str	r3, [r2, #8]
        _errorCause=errorCause;
 800086e:	2300      	movs	r3, #0
 8000870:	c20a      	stmia	r2!, {r1, r3}
          MillisecondTimer::delay(10);
 8000872:	200a      	movs	r0, #10
 8000874:	f001 fdac 	bl	80023d0 <_ZN9stm32plus16MillisecondTimer5delayEm>
          _debounce = 1;
 8000878:	23a6      	movs	r3, #166	; 0xa6
 800087a:	2201      	movs	r2, #1
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	54ea      	strb	r2, [r5, r3]
          MillisecondTimer::delay(200);
 8000880:	20c8      	movs	r0, #200	; 0xc8
 8000882:	f001 fda5 	bl	80023d0 <_ZN9stm32plus16MillisecondTimer5delayEm>
          if(estop == 1)
 8000886:	239e      	movs	r3, #158	; 0x9e
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	58eb      	ldr	r3, [r5, r3]
 800088c:	9304      	str	r3, [sp, #16]
 800088e:	3b01      	subs	r3, #1
 8000890:	1e5a      	subs	r2, r3, #1
 8000892:	4193      	sbcs	r3, r2
 8000894:	229e      	movs	r2, #158	; 0x9e
 8000896:	0052      	lsls	r2, r2, #1
 8000898:	50ab      	str	r3, [r5, r2]
 800089a:	21f4      	movs	r1, #244	; 0xf4
 800089c:	2252      	movs	r2, #82	; 0x52
 800089e:	ab04      	add	r3, sp, #16
 80008a0:	185b      	adds	r3, r3, r1
 80008a2:	5a99      	ldrh	r1, [r3, r2]
 80008a4:	9854      	ldr	r0, [sp, #336]	; 0x150
 80008a6:	f001 fe85 	bl	80025b4 <GPIO_ReadInputDataBit>
        if(keyin.read() == 1)
 80008aa:	2800      	cmp	r0, #0
 80008ac:	d003      	beq.n	80008b6 <_ZN9OneButton3runEv+0x562>
          _debounce = 0;
 80008ae:	23a6      	movs	r3, #166	; 0xa6
 80008b0:	2200      	movs	r2, #0
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	54ea      	strb	r2, [r5, r3]
 80008b6:	239e      	movs	r3, #158	; 0x9e
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	58ee      	ldr	r6, [r5, r3]
 80008bc:	002f      	movs	r7, r5
  for ( ; __node != 0; __node = __node->_M_next)
 80008be:	002b      	movs	r3, r5
 80008c0:	46ac      	mov	ip, r5
 80008c2:	2200      	movs	r2, #0
 80008c4:	4655      	mov	r5, sl
 80008c6:	e009      	b.n	80008dc <_ZN9OneButton3runEv+0x588>
 80008c8:	7019      	strb	r1, [r3, #0]
            color++;
 80008ca:	1c50      	adds	r0, r2, #1
 80008cc:	2100      	movs	r1, #0
 80008ce:	2a01      	cmp	r2, #1
 80008d0:	d800      	bhi.n	80008d4 <_ZN9OneButton3runEv+0x580>
 80008d2:	0001      	movs	r1, r0
 80008d4:	3301      	adds	r3, #1
 80008d6:	000a      	movs	r2, r1
        for(led_bytes_idx = 0; led_bytes_idx < 24; led_bytes_idx++)
 80008d8:	429d      	cmp	r5, r3
 80008da:	d010      	beq.n	80008fe <_ZN9OneButton3runEv+0x5aa>
 80008dc:	2100      	movs	r1, #0
 80008de:	4296      	cmp	r6, r2
 80008e0:	d1f2      	bne.n	80008c8 <_ZN9OneButton3runEv+0x574>
 80008e2:	210f      	movs	r1, #15
 80008e4:	e7f0      	b.n	80008c8 <_ZN9OneButton3runEv+0x574>
        __my_malloc_handler = __malloc_alloc_oom_handler;
 80008e6:	683b      	ldr	r3, [r7, #0]
        if (0 == __my_malloc_handler) { __THROW_BAD_ALLOC; }
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d007      	beq.n	80008fc <_ZN9OneButton3runEv+0x5a8>
        (*__my_malloc_handler)();
 80008ec:	4798      	blx	r3
        __result = malloc(__n);
 80008ee:	2010      	movs	r0, #16
 80008f0:	f001 ff62 	bl	80027b8 <malloc>
        if (__result) return(__result);
 80008f4:	2800      	cmp	r0, #0
 80008f6:	d0f6      	beq.n	80008e6 <_ZN9OneButton3runEv+0x592>
 80008f8:	0006      	movs	r6, r0
 80008fa:	e6bb      	b.n	8000674 <_ZN9OneButton3runEv+0x320>
 80008fc:	e7fe      	b.n	80008fc <_ZN9OneButton3runEv+0x5a8>
 80008fe:	46aa      	mov	sl, r5
            dataToSend[data_idx+2] = (0xFF & (uint16_t)(led_bit_2));
 8000900:	22e0      	movs	r2, #224	; 0xe0
 8000902:	4691      	mov	r9, r2
 8000904:	4652      	mov	r2, sl
        for(led_bytes_idx = 0; led_bytes_idx < 24; led_bytes_idx++)
 8000906:	2006      	movs	r0, #6
 8000908:	2109      	movs	r1, #9
            dataToSend[data_idx+2] = (0xFF & (uint16_t)(led_bit_2));
 800090a:	9206      	str	r2, [sp, #24]
 800090c:	9a07      	ldr	r2, [sp, #28]
 800090e:	4665      	mov	r5, ip
        for(led_bytes_idx = 0; led_bytes_idx < 24; led_bytes_idx++)
 8000910:	2603      	movs	r6, #3
            dataToSend[data_idx+2] = (0xFF & (uint16_t)(led_bit_2));
 8000912:	9104      	str	r1, [sp, #16]
 8000914:	9005      	str	r0, [sp, #20]
 8000916:	4692      	mov	sl, r2
 8000918:	e038      	b.n	800098c <_ZN9OneButton3runEv+0x638>
            if( ((led_byte >> (b+1)) && 0x01) == 1)
 800091a:	1051      	asrs	r1, r2, #1
 800091c:	d100      	bne.n	8000920 <_ZN9OneButton3runEv+0x5cc>
 800091e:	e11d      	b.n	8000b5c <_ZN9OneButton3runEv+0x808>
            dataToSend[data_idx]   = (0xFF & (uint16_t)(led_bit_1 >> 4));
 8000920:	21fe      	movs	r1, #254	; 0xfe
 8000922:	7019      	strb	r1, [r3, #0]
            dataToSend[data_idx+2] = (0xFF & (uint16_t)(led_bit_2));
 8000924:	4649      	mov	r1, r9
 8000926:	7099      	strb	r1, [r3, #2]
 8000928:	21fe      	movs	r1, #254	; 0xfe
 800092a:	4688      	mov	r8, r1
            if( ((led_byte >> (b+1)) && 0x01) == 1)
 800092c:	1091      	asrs	r1, r2, #2
            dataToSend[data_idx+1] = (0xF0 & (uint16_t)(led_bit_1 << 8)) + (0x0F & (uint16_t)(led_bit_2 >> 8));
 800092e:	705c      	strb	r4, [r3, #1]
            if( ((led_byte >> (b+1)) && 0x01) == 1)
 8000930:	468c      	mov	ip, r1
 8000932:	d03a      	beq.n	80009aa <_ZN9OneButton3runEv+0x656>
            dataToSend[data_idx]   = (0xFF & (uint16_t)(led_bit_1 >> 4));
 8000934:	4640      	mov	r0, r8
 8000936:	19a9      	adds	r1, r5, r6
 8000938:	7608      	strb	r0, [r1, #24]
            dataToSend[data_idx+2] = (0xFF & (uint16_t)(led_bit_2));
 800093a:	4649      	mov	r1, r9
 800093c:	7159      	strb	r1, [r3, #5]
 800093e:	21fe      	movs	r1, #254	; 0xfe
 8000940:	4688      	mov	r8, r1
            if( ((led_byte >> (b+1)) && 0x01) == 1)
 8000942:	10d1      	asrs	r1, r2, #3
            dataToSend[data_idx+1] = (0xF0 & (uint16_t)(led_bit_1 << 8)) + (0x0F & (uint16_t)(led_bit_2 >> 8));
 8000944:	711c      	strb	r4, [r3, #4]
            if( ((led_byte >> (b+1)) && 0x01) == 1)
 8000946:	468c      	mov	ip, r1
 8000948:	d03a      	beq.n	80009c0 <_ZN9OneButton3runEv+0x66c>
            dataToSend[data_idx]   = (0xFF & (uint16_t)(led_bit_1 >> 4));
 800094a:	4640      	mov	r0, r8
 800094c:	9905      	ldr	r1, [sp, #20]
 800094e:	1869      	adds	r1, r5, r1
 8000950:	7608      	strb	r0, [r1, #24]
            dataToSend[data_idx+2] = (0xFF & (uint16_t)(led_bit_2));
 8000952:	4649      	mov	r1, r9
 8000954:	7219      	strb	r1, [r3, #8]
 8000956:	21fe      	movs	r1, #254	; 0xfe
 8000958:	468c      	mov	ip, r1
            dataToSend[data_idx+1] = (0xF0 & (uint16_t)(led_bit_1 << 8)) + (0x0F & (uint16_t)(led_bit_2 >> 8));
 800095a:	71dc      	strb	r4, [r3, #7]
            if( ((led_byte >> (b+1)) && 0x01) == 1)
 800095c:	1112      	asrs	r2, r2, #4
 800095e:	4690      	mov	r8, r2
 8000960:	4641      	mov	r1, r8
 8000962:	2200      	movs	r2, #0
 8000964:	2900      	cmp	r1, #0
 8000966:	d000      	beq.n	800096a <_ZN9OneButton3runEv+0x616>
 8000968:	32e0      	adds	r2, #224	; 0xe0
            dataToSend[data_idx]   = (0xFF & (uint16_t)(led_bit_1 >> 4));
 800096a:	4660      	mov	r0, ip
 800096c:	9904      	ldr	r1, [sp, #16]
 800096e:	3701      	adds	r7, #1
 8000970:	1869      	adds	r1, r5, r1
 8000972:	7608      	strb	r0, [r1, #24]
            dataToSend[data_idx+2] = (0xFF & (uint16_t)(led_bit_2));
 8000974:	72da      	strb	r2, [r3, #11]
 8000976:	9a04      	ldr	r2, [sp, #16]
            dataToSend[data_idx+1] = (0xF0 & (uint16_t)(led_bit_1 << 8)) + (0x0F & (uint16_t)(led_bit_2 >> 8));
 8000978:	729c      	strb	r4, [r3, #10]
 800097a:	320c      	adds	r2, #12
 800097c:	9204      	str	r2, [sp, #16]
 800097e:	9a05      	ldr	r2, [sp, #20]
 8000980:	330c      	adds	r3, #12
 8000982:	320c      	adds	r2, #12
 8000984:	9205      	str	r2, [sp, #20]
 8000986:	360c      	adds	r6, #12
        for(int a=0; a<24; a++)
 8000988:	459a      	cmp	sl, r3
 800098a:	d023      	beq.n	80009d4 <_ZN9OneButton3runEv+0x680>
            if( ((led_byte >> b) && 0x01) == 1)
 800098c:	783a      	ldrb	r2, [r7, #0]
 800098e:	2a00      	cmp	r2, #0
 8000990:	d1c3      	bne.n	800091a <_ZN9OneButton3runEv+0x5c6>
 8000992:	21f0      	movs	r1, #240	; 0xf0
 8000994:	468c      	mov	ip, r1
            dataToSend[data_idx]   = (0xFF & (uint16_t)(led_bit_1 >> 4));
 8000996:	4661      	mov	r1, ip
 8000998:	7019      	strb	r1, [r3, #0]
            dataToSend[data_idx+2] = (0xFF & (uint16_t)(led_bit_2));
 800099a:	2100      	movs	r1, #0
 800099c:	7099      	strb	r1, [r3, #2]
 800099e:	21f0      	movs	r1, #240	; 0xf0
 80009a0:	4688      	mov	r8, r1
            if( ((led_byte >> (b+1)) && 0x01) == 1)
 80009a2:	1091      	asrs	r1, r2, #2
            dataToSend[data_idx+1] = (0xF0 & (uint16_t)(led_bit_1 << 8)) + (0x0F & (uint16_t)(led_bit_2 >> 8));
 80009a4:	705c      	strb	r4, [r3, #1]
            if( ((led_byte >> (b+1)) && 0x01) == 1)
 80009a6:	468c      	mov	ip, r1
 80009a8:	d1c4      	bne.n	8000934 <_ZN9OneButton3runEv+0x5e0>
            dataToSend[data_idx]   = (0xFF & (uint16_t)(led_bit_1 >> 4));
 80009aa:	4640      	mov	r0, r8
 80009ac:	19a9      	adds	r1, r5, r6
 80009ae:	7608      	strb	r0, [r1, #24]
            dataToSend[data_idx+2] = (0xFF & (uint16_t)(led_bit_2));
 80009b0:	4661      	mov	r1, ip
 80009b2:	7159      	strb	r1, [r3, #5]
 80009b4:	21f0      	movs	r1, #240	; 0xf0
 80009b6:	4688      	mov	r8, r1
            if( ((led_byte >> (b+1)) && 0x01) == 1)
 80009b8:	10d1      	asrs	r1, r2, #3
            dataToSend[data_idx+1] = (0xF0 & (uint16_t)(led_bit_1 << 8)) + (0x0F & (uint16_t)(led_bit_2 >> 8));
 80009ba:	711c      	strb	r4, [r3, #4]
            if( ((led_byte >> (b+1)) && 0x01) == 1)
 80009bc:	468c      	mov	ip, r1
 80009be:	d1c4      	bne.n	800094a <_ZN9OneButton3runEv+0x5f6>
            dataToSend[data_idx]   = (0xFF & (uint16_t)(led_bit_1 >> 4));
 80009c0:	4640      	mov	r0, r8
 80009c2:	9905      	ldr	r1, [sp, #20]
 80009c4:	1869      	adds	r1, r5, r1
 80009c6:	7608      	strb	r0, [r1, #24]
            dataToSend[data_idx+2] = (0xFF & (uint16_t)(led_bit_2));
 80009c8:	4661      	mov	r1, ip
 80009ca:	7219      	strb	r1, [r3, #8]
 80009cc:	21f0      	movs	r1, #240	; 0xf0
            dataToSend[data_idx+1] = (0xF0 & (uint16_t)(led_bit_1 << 8)) + (0x0F & (uint16_t)(led_bit_2 >> 8));
 80009ce:	71dc      	strb	r4, [r3, #7]
            dataToSend[data_idx+2] = (0xFF & (uint16_t)(led_bit_2));
 80009d0:	468c      	mov	ip, r1
 80009d2:	e7c3      	b.n	800095c <_ZN9OneButton3runEv+0x608>
 80009d4:	9b06      	ldr	r3, [sp, #24]
        dataToSend[288] = 0;
 80009d6:	2200      	movs	r2, #0
 80009d8:	469a      	mov	sl, r3
 80009da:	239c      	movs	r3, #156	; 0x9c
    else
      GPIO_ResetBits(_nssPort,_nssPin);
 80009dc:	2090      	movs	r0, #144	; 0x90
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	54ea      	strb	r2, [r5, r3]
 80009e2:	2110      	movs	r1, #16
 80009e4:	05c0      	lsls	r0, r0, #23
 80009e6:	f001 fded 	bl	80025c4 <GPIO_ResetBits>

    DMA_Channel_TypeDef *peripheralAddress;

    // set up the parameters for this transfer

    _init.DMA_MemoryBaseAddr=reinterpret_cast<uint32_t>(source);
 80009ea:	4653      	mov	r3, sl
 80009ec:	9322      	str	r3, [sp, #136]	; 0x88
    _init.DMA_BufferSize=count;
 80009ee:	2322      	movs	r3, #34	; 0x22
 80009f0:	33ff      	adds	r3, #255	; 0xff
 80009f2:	9324      	str	r3, [sp, #144]	; 0x90
 80009f4:	9b20      	ldr	r3, [sp, #128]	; 0x80

    peripheralAddress=_dma;

      // disable and then re-enable

    DMA_Cmd(peripheralAddress,DISABLE);
 80009f6:	2100      	movs	r1, #0
 80009f8:	681e      	ldr	r6, [r3, #0]
 80009fa:	0030      	movs	r0, r6
 80009fc:	f001 fd6c 	bl	80024d8 <DMA_Cmd>
    DMA_Init(peripheralAddress,&_init);
 8000a00:	a921      	add	r1, sp, #132	; 0x84
 8000a02:	0030      	movs	r0, r6
 8000a04:	f001 fd4a 	bl	800249c <DMA_Init>
    DMA_Cmd(peripheralAddress,ENABLE);
 8000a08:	2101      	movs	r1, #1
 8000a0a:	0030      	movs	r0, r6
 8000a0c:	f001 fd64 	bl	80024d8 <DMA_Cmd>
   * Wait for the peripheral to become idle. If transmitting then the peripheral becomes
   * idle when the last word written to the TX register has been shifted out to the bus.
   */

  inline void Spi::waitForIdle() const {
    while(SPI_I2S_GetFlagStatus(_peripheralAddress,SPI_I2S_FLAG_BSY)==SET);
 8000a10:	2180      	movs	r1, #128	; 0x80
 8000a12:	482c      	ldr	r0, [pc, #176]	; (8000ac4 <_ZN9OneButton3runEv+0x770>)
 8000a14:	f001 fe96 	bl	8002744 <SPI_I2S_GetFlagStatus>
 8000a18:	2801      	cmp	r0, #1
 8000a1a:	d0f9      	beq.n	8000a10 <_ZN9OneButton3runEv+0x6bc>
      GPIO_SetBits(_nssPort,_nssPin);
 8000a1c:	2090      	movs	r0, #144	; 0x90
 8000a1e:	2110      	movs	r1, #16
 8000a20:	05c0      	lsls	r0, r0, #23
 8000a22:	f001 fdcd 	bl	80025c0 <GPIO_SetBits>
        MillisecondTimer::delay(1);
 8000a26:	2001      	movs	r0, #1
 8000a28:	f001 fcd2 	bl	80023d0 <_ZN9stm32plus16MillisecondTimer5delayEm>
      }
 8000a2c:	e6f0      	b.n	8000810 <_ZN9OneButton3runEv+0x4bc>
    _inEndpointData[endpointIndex].remaining=length;
 8000a2e:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <_ZN9OneButton3runEv+0x774>)
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 8000a30:	2120      	movs	r1, #32
    _inEndpointData[endpointIndex].remaining=length;
 8000a32:	9369      	str	r3, [sp, #420]	; 0x1a4
 8000a34:	4b25      	ldr	r3, [pc, #148]	; (8000acc <_ZN9OneButton3runEv+0x778>)
    ep.remaining-=length;
 8000a36:	20a4      	movs	r0, #164	; 0xa4
    _inEndpointData[endpointIndex].remaining=length;
 8000a38:	936a      	str	r3, [sp, #424]	; 0x1a8
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 8000a3a:	ab04      	add	r3, sp, #16
 8000a3c:	7f5a      	ldrb	r2, [r3, #29]
 8000a3e:	7f1b      	ldrb	r3, [r3, #28]
 8000a40:	0212      	lsls	r2, r2, #8
 8000a42:	4313      	orrs	r3, r2
      *pdwVal++=word;
 8000a44:	4a22      	ldr	r2, [pc, #136]	; (8000ad0 <_ZN9OneButton3runEv+0x77c>)
    ep.remaining-=length;
 8000a46:	0040      	lsls	r0, r0, #1
      *pdwVal++=word;
 8000a48:	8013      	strh	r3, [r2, #0]
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 8000a4a:	ab04      	add	r3, sp, #16
 8000a4c:	7fda      	ldrb	r2, [r3, #31]
 8000a4e:	7f9b      	ldrb	r3, [r3, #30]
 8000a50:	0212      	lsls	r2, r2, #8
 8000a52:	4313      	orrs	r3, r2
      *pdwVal++=word;
 8000a54:	4a1f      	ldr	r2, [pc, #124]	; (8000ad4 <_ZN9OneButton3runEv+0x780>)
 8000a56:	8013      	strh	r3, [r2, #0]
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 8000a58:	2221      	movs	r2, #33	; 0x21
 8000a5a:	ab04      	add	r3, sp, #16
 8000a5c:	189b      	adds	r3, r3, r2
 8000a5e:	781a      	ldrb	r2, [r3, #0]
 8000a60:	ab04      	add	r3, sp, #16
 8000a62:	185b      	adds	r3, r3, r1
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	0212      	lsls	r2, r2, #8
 8000a68:	4313      	orrs	r3, r2
      *pdwVal++=word;
 8000a6a:	4a1b      	ldr	r2, [pc, #108]	; (8000ad8 <_ZN9OneButton3runEv+0x784>)
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 8000a6c:	3102      	adds	r1, #2
      *pdwVal++=word;
 8000a6e:	8013      	strh	r3, [r2, #0]
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 8000a70:	2223      	movs	r2, #35	; 0x23
 8000a72:	ab04      	add	r3, sp, #16
 8000a74:	189b      	adds	r3, r3, r2
 8000a76:	781a      	ldrb	r2, [r3, #0]
 8000a78:	ab04      	add	r3, sp, #16
 8000a7a:	185b      	adds	r3, r3, r1
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	0212      	lsls	r2, r2, #8
 8000a80:	4313      	orrs	r3, r2
      *pdwVal++=word;
 8000a82:	4a16      	ldr	r2, [pc, #88]	; (8000adc <_ZN9OneButton3runEv+0x788>)
    ep.remaining-=length;
 8000a84:	a904      	add	r1, sp, #16
      *pdwVal++=word;
 8000a86:	8013      	strh	r3, [r2, #0]
    ep.ptr+=length;
 8000a88:	ab0d      	add	r3, sp, #52	; 0x34
 8000a8a:	9368      	str	r3, [sp, #416]	; 0x1a0
    ep.remaining-=length;
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	234c      	movs	r3, #76	; 0x4c
 8000a90:	1809      	adds	r1, r1, r0
 8000a92:	52ca      	strh	r2, [r1, r3]
    USBR_BDT[endpointIndex].tx.count=length;
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <_ZN9OneButton3runEv+0x78c>)
 8000a96:	3208      	adds	r2, #8
    value=*epreg & USB_EPTX_DTOGMASK;
 8000a98:	4912      	ldr	r1, [pc, #72]	; (8000ae4 <_ZN9OneButton3runEv+0x790>)
    USBR_BDT[endpointIndex].tx.count=length;
 8000a9a:	805a      	strh	r2, [r3, #2]
    value=*epreg & USB_EPTX_DTOGMASK;
 8000a9c:	880b      	ldrh	r3, [r1, #0]
 8000a9e:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <_ZN9OneButton3runEv+0x794>)
 8000aa0:	4013      	ands	r3, r2
      reg^=USB_EPTX_DTOG2;
 8000aa2:	2230      	movs	r2, #48	; 0x30
 8000aa4:	405a      	eors	r2, r3
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <_ZN9OneButton3runEv+0x798>)
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	800b      	strh	r3, [r1, #0]
 8000aae:	e6e0      	b.n	8000872 <_ZN9OneButton3runEv+0x51e>
 8000ab0:	40005c00 	.word	0x40005c00
 8000ab4:	ffffbd00 	.word	0xffffbd00
 8000ab8:	00050002 	.word	0x00050002
 8000abc:	20000874 	.word	0x20000874
 8000ac0:	00460001 	.word	0x00460001
 8000ac4:	40013000 	.word	0x40013000
 8000ac8:	00080008 	.word	0x00080008
 8000acc:	00980009 	.word	0x00980009
 8000ad0:	40006098 	.word	0x40006098
 8000ad4:	4000609a 	.word	0x4000609a
 8000ad8:	4000609c 	.word	0x4000609c
 8000adc:	4000609e 	.word	0x4000609e
 8000ae0:	40006008 	.word	0x40006008
 8000ae4:	40005c04 	.word	0x40005c04
 8000ae8:	ffff8fbf 	.word	0xffff8fbf
 8000aec:	ffff8080 	.word	0xffff8080
    _inEndpointData[endpointIndex].remaining=length;
 8000af0:	4a2b      	ldr	r2, [pc, #172]	; (8000ba0 <_ZN9OneButton3runEv+0x84c>)
    ep.remaining-=length;
 8000af2:	20a4      	movs	r0, #164	; 0xa4
    _inEndpointData[endpointIndex].remaining=length;
 8000af4:	9269      	str	r2, [sp, #420]	; 0x1a4
 8000af6:	4a2b      	ldr	r2, [pc, #172]	; (8000ba4 <_ZN9OneButton3runEv+0x850>)
    ep.remaining-=length;
 8000af8:	0040      	lsls	r0, r0, #1
    _inEndpointData[endpointIndex].remaining=length;
 8000afa:	926a      	str	r2, [sp, #424]	; 0x1a8
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 8000afc:	aa04      	add	r2, sp, #16
 8000afe:	7d51      	ldrb	r1, [r2, #21]
 8000b00:	7d12      	ldrb	r2, [r2, #20]
 8000b02:	0209      	lsls	r1, r1, #8
 8000b04:	430a      	orrs	r2, r1
      *pdwVal++=word;
 8000b06:	4928      	ldr	r1, [pc, #160]	; (8000ba8 <_ZN9OneButton3runEv+0x854>)
 8000b08:	800a      	strh	r2, [r1, #0]
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 8000b0a:	aa04      	add	r2, sp, #16
 8000b0c:	7dd1      	ldrb	r1, [r2, #23]
 8000b0e:	7d92      	ldrb	r2, [r2, #22]
 8000b10:	0209      	lsls	r1, r1, #8
 8000b12:	430a      	orrs	r2, r1
      *pdwVal++=word;
 8000b14:	4925      	ldr	r1, [pc, #148]	; (8000bac <_ZN9OneButton3runEv+0x858>)
 8000b16:	800a      	strh	r2, [r1, #0]
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 8000b18:	aa04      	add	r2, sp, #16
 8000b1a:	7e51      	ldrb	r1, [r2, #25]
 8000b1c:	7e12      	ldrb	r2, [r2, #24]
 8000b1e:	0209      	lsls	r1, r1, #8
 8000b20:	430a      	orrs	r2, r1
      *pdwVal++=word;
 8000b22:	4923      	ldr	r1, [pc, #140]	; (8000bb0 <_ZN9OneButton3runEv+0x85c>)
 8000b24:	800a      	strh	r2, [r1, #0]
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 8000b26:	aa04      	add	r2, sp, #16
 8000b28:	7ed1      	ldrb	r1, [r2, #27]
 8000b2a:	7e92      	ldrb	r2, [r2, #26]
 8000b2c:	0209      	lsls	r1, r1, #8
 8000b2e:	430a      	orrs	r2, r1
      *pdwVal++=word;
 8000b30:	4920      	ldr	r1, [pc, #128]	; (8000bb4 <_ZN9OneButton3runEv+0x860>)
 8000b32:	800a      	strh	r2, [r1, #0]
    ep.ptr+=length;
 8000b34:	aa0b      	add	r2, sp, #44	; 0x2c
 8000b36:	9268      	str	r2, [sp, #416]	; 0x1a0
    ep.remaining-=length;
 8000b38:	224c      	movs	r2, #76	; 0x4c
 8000b3a:	a904      	add	r1, sp, #16
 8000b3c:	1809      	adds	r1, r1, r0
 8000b3e:	528b      	strh	r3, [r1, r2]
    USBR_BDT[endpointIndex].tx.count=length;
 8000b40:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <_ZN9OneButton3runEv+0x864>)
 8000b42:	3a44      	subs	r2, #68	; 0x44
    value=*epreg & USB_EPTX_DTOGMASK;
 8000b44:	491d      	ldr	r1, [pc, #116]	; (8000bbc <_ZN9OneButton3runEv+0x868>)
    USBR_BDT[endpointIndex].tx.count=length;
 8000b46:	805a      	strh	r2, [r3, #2]
    value=*epreg & USB_EPTX_DTOGMASK;
 8000b48:	880b      	ldrh	r3, [r1, #0]
 8000b4a:	4a1d      	ldr	r2, [pc, #116]	; (8000bc0 <_ZN9OneButton3runEv+0x86c>)
 8000b4c:	4013      	ands	r3, r2
      reg^=USB_EPTX_DTOG2;
 8000b4e:	2230      	movs	r2, #48	; 0x30
 8000b50:	405a      	eors	r2, r3
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8000b52:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <_ZN9OneButton3runEv+0x870>)
 8000b54:	4313      	orrs	r3, r2
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	800b      	strh	r3, [r1, #0]
 8000b5a:	e677      	b.n	800084c <_ZN9OneButton3runEv+0x4f8>
            if( ((led_byte >> (b+1)) && 0x01) == 1)
 8000b5c:	31fe      	adds	r1, #254	; 0xfe
 8000b5e:	468c      	mov	ip, r1
 8000b60:	e719      	b.n	8000996 <_ZN9OneButton3runEv+0x642>
 8000b62:	105b      	asrs	r3, r3, #1
 8000b64:	18c0      	adds	r0, r0, r3
 8000b66:	2105      	movs	r1, #5
 8000b68:	4790      	blx	r2
  void _M_incr() { _M_node = _M_node->_M_next; }
 8000b6a:	6836      	ldr	r6, [r6, #0]
 8000b6c:	2e00      	cmp	r6, #0
 8000b6e:	d000      	beq.n	8000b72 <_ZN9OneButton3runEv+0x81e>
 8000b70:	e631      	b.n	80007d6 <_ZN9OneButton3runEv+0x482>
 8000b72:	e644      	b.n	80007fe <_ZN9OneButton3runEv+0x4aa>
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8000b74:	ab17      	add	r3, sp, #92	; 0x5c
 8000b76:	985e      	ldr	r0, [sp, #376]	; 0x178
 8000b78:	cc24      	ldmia	r4!, {r2, r5}
 8000b7a:	c324      	stmia	r3!, {r2, r5}
 8000b7c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8000b7e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8000b80:	4219      	tst	r1, r3
 8000b82:	d009      	beq.n	8000b98 <_ZN9OneButton3runEv+0x844>
 8000b84:	105b      	asrs	r3, r3, #1
 8000b86:	18c0      	adds	r0, r0, r3
 8000b88:	6803      	ldr	r3, [r0, #0]
 8000b8a:	589a      	ldr	r2, [r3, r2]
 8000b8c:	2105      	movs	r1, #5
 8000b8e:	4790      	blx	r2
 8000b90:	e635      	b.n	80007fe <_ZN9OneButton3runEv+0x4aa>
 8000b92:	105b      	asrs	r3, r3, #1
 8000b94:	18c0      	adds	r0, r0, r3
 8000b96:	e5e6      	b.n	8000766 <_ZN9OneButton3runEv+0x412>
 8000b98:	105b      	asrs	r3, r3, #1
 8000b9a:	18c0      	adds	r0, r0, r3
 8000b9c:	e7f6      	b.n	8000b8c <_ZN9OneButton3runEv+0x838>
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	00080008 	.word	0x00080008
 8000ba4:	00980009 	.word	0x00980009
 8000ba8:	40006098 	.word	0x40006098
 8000bac:	4000609a 	.word	0x4000609a
 8000bb0:	4000609c 	.word	0x4000609c
 8000bb4:	4000609e 	.word	0x4000609e
 8000bb8:	40006008 	.word	0x40006008
 8000bbc:	40005c04 	.word	0x40005c04
 8000bc0:	ffff8fbf 	.word	0xffff8fbf
 8000bc4:	ffff8080 	.word	0xffff8080

08000bc8 <main>:

/*
 * Main entry point
 */

int main() {
 8000bc8:	b500      	push	{lr}
 8000bca:	b0d5      	sub	sp, #340	; 0x154

  Nvic::initialise();

  // set up SysTick at 1ms resolution
  MillisecondTimer::initialise();
 8000bcc:	f001 fbda 	bl	8002384 <_ZN9stm32plus16MillisecondTimer10initialiseEv>
class OneButton {
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	4669      	mov	r1, sp
 8000bd6:	934f      	str	r3, [sp, #316]	; 0x13c
 8000bd8:	334c      	adds	r3, #76	; 0x4c
 8000bda:	33ff      	adds	r3, #255	; 0xff

  OneButton onebutton;
  onebutton.run();
 8000bdc:	4668      	mov	r0, sp
class OneButton {
 8000bde:	54ca      	strb	r2, [r1, r3]
  onebutton.run();
 8000be0:	f7ff fbb8 	bl	8000354 <_ZN9OneButton3runEv>

08000be4 <_ZNK4wink6signalINS_4slotIFvN9stm32plus13UsbStatusTypeEEEEE10raiseEventIJRS3_EEEvDpOT_>:
      void raiseEvent(Args&&... args) const {
 8000be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000be6:	46ce      	mov	lr, r9
 8000be8:	4647      	mov	r7, r8
 8000bea:	b580      	push	{r7, lr}
  size_type size() const { return __slist_size(this->_M_head._M_next); }
 8000bec:	68c4      	ldr	r4, [r0, #12]
 8000bee:	b085      	sub	sp, #20
 8000bf0:	000e      	movs	r6, r1
  for ( ; __node != 0; __node = __node->_M_next)
 8000bf2:	2c00      	cmp	r4, #0
 8000bf4:	d01f      	beq.n	8000c36 <_ZNK4wink6signalINS_4slotIFvN9stm32plus13UsbStatusTypeEEEEE10raiseEventIJRS3_EEEvDpOT_+0x52>
 8000bf6:	0023      	movs	r3, r4
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	681b      	ldr	r3, [r3, #0]
    ++__result;
 8000bfc:	3201      	adds	r2, #1
  for ( ; __node != 0; __node = __node->_M_next)
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d1fb      	bne.n	8000bfa <_ZNK4wink6signalINS_4slotIFvN9stm32plus13UsbStatusTypeEEEEE10raiseEventIJRS3_EEEvDpOT_+0x16>
        if(_slots.size()==1)
 8000c02:	2a01      	cmp	r2, #1
 8000c04:	d023      	beq.n	8000c4e <_ZNK4wink6signalINS_4slotIFvN9stm32plus13UsbStatusTypeEEEEE10raiseEventIJRS3_EEEvDpOT_+0x6a>
 8000c06:	ab02      	add	r3, sp, #8
 8000c08:	4699      	mov	r9, r3
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	4698      	mov	r8, r3
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8000c0e:	0023      	movs	r3, r4
 8000c10:	464a      	mov	r2, r9
 8000c12:	3308      	adds	r3, #8
 8000c14:	6831      	ldr	r1, [r6, #0]
 8000c16:	6860      	ldr	r0, [r4, #4]
 8000c18:	cba0      	ldmia	r3!, {r5, r7}
 8000c1a:	c2a0      	stmia	r2!, {r5, r7}
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8000c1c:	4645      	mov	r5, r8
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8000c1e:	9b03      	ldr	r3, [sp, #12]
 8000c20:	9a02      	ldr	r2, [sp, #8]
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8000c22:	421d      	tst	r5, r3
 8000c24:	d00c      	beq.n	8000c40 <_ZNK4wink6signalINS_4slotIFvN9stm32plus13UsbStatusTypeEEEEE10raiseEventIJRS3_EEEvDpOT_+0x5c>
 8000c26:	105b      	asrs	r3, r3, #1
 8000c28:	18c0      	adds	r0, r0, r3
 8000c2a:	6803      	ldr	r3, [r0, #0]
 8000c2c:	589b      	ldr	r3, [r3, r2]
 8000c2e:	4798      	blx	r3
  void _M_incr() { _M_node = _M_node->_M_next; }
 8000c30:	6824      	ldr	r4, [r4, #0]
          for(auto it=_slots.begin();it!=_slots.end();it++)
 8000c32:	2c00      	cmp	r4, #0
 8000c34:	d1eb      	bne.n	8000c0e <_ZNK4wink6signalINS_4slotIFvN9stm32plus13UsbStatusTypeEEEEE10raiseEventIJRS3_EEEvDpOT_+0x2a>
            (*it)(args...);
        }
      }
 8000c36:	b005      	add	sp, #20
 8000c38:	bc0c      	pop	{r2, r3}
 8000c3a:	4690      	mov	r8, r2
 8000c3c:	4699      	mov	r9, r3
 8000c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c40:	105b      	asrs	r3, r3, #1
 8000c42:	18c0      	adds	r0, r0, r3
 8000c44:	4790      	blx	r2
 8000c46:	6824      	ldr	r4, [r4, #0]
          for(auto it=_slots.begin();it!=_slots.end();it++)
 8000c48:	2c00      	cmp	r4, #0
 8000c4a:	d1e0      	bne.n	8000c0e <_ZNK4wink6signalINS_4slotIFvN9stm32plus13UsbStatusTypeEEEEE10raiseEventIJRS3_EEEvDpOT_+0x2a>
 8000c4c:	e7f3      	b.n	8000c36 <_ZNK4wink6signalINS_4slotIFvN9stm32plus13UsbStatusTypeEEEEE10raiseEventIJRS3_EEEvDpOT_+0x52>
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8000c4e:	466b      	mov	r3, sp
 8000c50:	c810      	ldmia	r0!, {r4}
 8000c52:	6831      	ldr	r1, [r6, #0]
 8000c54:	c860      	ldmia	r0!, {r5, r6}
 8000c56:	c360      	stmia	r3!, {r5, r6}
 8000c58:	9b01      	ldr	r3, [sp, #4]
 8000c5a:	9d00      	ldr	r5, [sp, #0]
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8000c5c:	421a      	tst	r2, r3
 8000c5e:	d005      	beq.n	8000c6c <_ZNK4wink6signalINS_4slotIFvN9stm32plus13UsbStatusTypeEEEEE10raiseEventIJRS3_EEEvDpOT_+0x88>
 8000c60:	105b      	asrs	r3, r3, #1
 8000c62:	18e0      	adds	r0, r4, r3
 8000c64:	6803      	ldr	r3, [r0, #0]
 8000c66:	595d      	ldr	r5, [r3, r5]
 8000c68:	47a8      	blx	r5
 8000c6a:	e7e4      	b.n	8000c36 <_ZNK4wink6signalINS_4slotIFvN9stm32plus13UsbStatusTypeEEEEE10raiseEventIJRS3_EEEvDpOT_+0x52>
 8000c6c:	105b      	asrs	r3, r3, #1
 8000c6e:	18e0      	adds	r0, r4, r3
 8000c70:	47a8      	blx	r5
 8000c72:	e7e0      	b.n	8000c36 <_ZNK4wink6signalINS_4slotIFvN9stm32plus13UsbStatusTypeEEEEE10raiseEventIJRS3_EEEvDpOT_+0x52>

08000c74 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE>:
    switch(header.bmRequest & USB_REQ_TYPE_MASK) {
 8000c74:	2360      	movs	r3, #96	; 0x60
 8000c76:	780a      	ldrb	r2, [r1, #0]
  inline void UsbKeyboard<TConfiguration,Features...>::handleSetup(const UsbSetupHeader& header) {
 8000c78:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch(header.bmRequest & USB_REQ_TYPE_MASK) {
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	d100      	bne.n	8000c80 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0xc>
 8000c7e:	e06e      	b.n	8000d5e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0xea>
 8000c80:	2b20      	cmp	r3, #32
 8000c82:	d13a      	bne.n	8000cfa <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x86>
    switch(header.bRequest) {
 8000c84:	784b      	ldrb	r3, [r1, #1]
 8000c86:	2b0b      	cmp	r3, #11
 8000c88:	d900      	bls.n	8000c8c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x18>
 8000c8a:	e06f      	b.n	8000d6c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0xf8>
 8000c8c:	4a7e      	ldr	r2, [pc, #504]	; (8000e88 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x214>)
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	58d3      	ldr	r3, [r2, r3]
 8000c92:	469f      	mov	pc, r3
        _reportAvailable=true;            // incoming report
 8000c94:	235c      	movs	r3, #92	; 0x5c
 8000c96:	2401      	movs	r4, #1
 8000c98:	54c4      	strb	r4, [r0, r3]
        _controlEndpointState=ControlEndpointStateType::DATA_OUT;
 8000c9a:	3b59      	subs	r3, #89	; 0x59
 8000c9c:	6383      	str	r3, [r0, #56]	; 0x38
        USBR_BDT[0].rx.setRxCount(header.wLength);
 8000c9e:	88cb      	ldrh	r3, [r1, #6]

    void setRxCount(int length) volatile {

      uint16_t wNBlocks;

      if((length)>62) {
 8000ca0:	2b3e      	cmp	r3, #62	; 0x3e
 8000ca2:	dd00      	ble.n	8000ca6 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x32>
 8000ca4:	e0b2      	b.n	8000e0c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x198>

        count=(wNBlocks << 10) | 0x8000;
      }
      else {

        wNBlocks=length >> 1;
 8000ca6:	085a      	lsrs	r2, r3, #1

        if((length & 0x1)!=0)
 8000ca8:	421c      	tst	r4, r3
 8000caa:	d000      	beq.n	8000cae <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x3a>
          wNBlocks++;
 8000cac:	3201      	adds	r2, #1

        count=wNBlocks << 10;
 8000cae:	0292      	lsls	r2, r2, #10
 8000cb0:	4b76      	ldr	r3, [pc, #472]	; (8000e8c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x218>)
 8000cb2:	b292      	uxth	r2, r2
 8000cb4:	805a      	strh	r2, [r3, #2]
    value=*epreg & USB_EPRX_DTOGMASK;
 8000cb6:	4976      	ldr	r1, [pc, #472]	; (8000e90 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x21c>)
 8000cb8:	4a76      	ldr	r2, [pc, #472]	; (8000e94 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x220>)
 8000cba:	880b      	ldrh	r3, [r1, #0]
    _inEndpointData[endpointIndex].total=length;
 8000cbc:	2442      	movs	r4, #66	; 0x42
    value=*epreg & USB_EPRX_DTOGMASK;
 8000cbe:	401a      	ands	r2, r3
      reg^=USB_EPRX_DTOG2;
 8000cc0:	23c0      	movs	r3, #192	; 0xc0
 8000cc2:	019b      	lsls	r3, r3, #6
 8000cc4:	4053      	eors	r3, r2
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8000cc6:	4a74      	ldr	r2, [pc, #464]	; (8000e98 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x224>)
    _inEndpointData[endpointIndex].pmaAddress=pmaInAddress;
 8000cc8:	2546      	movs	r5, #70	; 0x46
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	800b      	strh	r3, [r1, #0]
    _controlEndpointState=ControlEndpointStateType::STATUS_IN;
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	6383      	str	r3, [r0, #56]	; 0x38
    _inEndpointData[endpointIndex].total=length;
 8000cd4:	2300      	movs	r3, #0
    _inEndpointData[endpointIndex].pmaAddress=pmaInAddress;
 8000cd6:	2658      	movs	r6, #88	; 0x58
    _inEndpointData[endpointIndex].total=length;
 8000cd8:	5303      	strh	r3, [r0, r4]
    _inEndpointData[endpointIndex].remaining=length;
 8000cda:	3c02      	subs	r4, #2
 8000cdc:	5303      	strh	r3, [r0, r4]
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 8000cde:	63c3      	str	r3, [r0, #60]	; 0x3c
    _inEndpointData[endpointIndex].pmaAddress=pmaInAddress;
 8000ce0:	5346      	strh	r6, [r0, r5]
    _inEndpointData[endpointIndex].maxPacketSize=maxPacketSize;
 8000ce2:	3d02      	subs	r5, #2
 8000ce4:	5344      	strh	r4, [r0, r5]
    USBR_BDT[endpointIndex].tx.count=length;
 8000ce6:	486d      	ldr	r0, [pc, #436]	; (8000e9c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x228>)
 8000ce8:	8043      	strh	r3, [r0, #2]
    value=*epreg & USB_EPTX_DTOGMASK;
 8000cea:	880b      	ldrh	r3, [r1, #0]
 8000cec:	486c      	ldr	r0, [pc, #432]	; (8000ea0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x22c>)
 8000cee:	4003      	ands	r3, r0
      reg^=USB_EPTX_DTOG2;
 8000cf0:	2030      	movs	r0, #48	; 0x30
 8000cf2:	4043      	eors	r3, r0
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	b292      	uxth	r2, r2
 8000cf8:	800a      	strh	r2, [r1, #0]
  }
 8000cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    _controlEndpointState=ControlEndpointStateType::DATA_IN;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	6383      	str	r3, [r0, #56]	; 0x38
        sendControlData(&_protocol,1);
 8000d00:	0003      	movs	r3, r0
 8000d02:	3356      	adds	r3, #86	; 0x56
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 8000d04:	63c3      	str	r3, [r0, #60]	; 0x3c
    _inEndpointData[endpointIndex].remaining=length;
 8000d06:	4b67      	ldr	r3, [pc, #412]	; (8000ea4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x230>)
 8000d08:	6403      	str	r3, [r0, #64]	; 0x40
 8000d0a:	4b67      	ldr	r3, [pc, #412]	; (8000ea8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x234>)
 8000d0c:	6443      	str	r3, [r0, #68]	; 0x44
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 8000d0e:	2357      	movs	r3, #87	; 0x57
 8000d10:	5cc2      	ldrb	r2, [r0, r3]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	5cc3      	ldrb	r3, [r0, r3]
 8000d16:	0212      	lsls	r2, r2, #8
 8000d18:	4313      	orrs	r3, r2
      *pdwVal++=word;
 8000d1a:	4a64      	ldr	r2, [pc, #400]	; (8000eac <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x238>)
 8000d1c:	8013      	strh	r3, [r2, #0]
    ep.remaining-=length;
 8000d1e:	2240      	movs	r2, #64	; 0x40
    ep.ptr+=length;
 8000d20:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000d22:	3301      	adds	r3, #1
 8000d24:	63c3      	str	r3, [r0, #60]	; 0x3c
    ep.remaining-=length;
 8000d26:	5a83      	ldrh	r3, [r0, r2]
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	5283      	strh	r3, [r0, r2]
    USBR_BDT[endpointIndex].tx.count=length;
 8000d2c:	4b5b      	ldr	r3, [pc, #364]	; (8000e9c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x228>)
 8000d2e:	3a3f      	subs	r2, #63	; 0x3f
 8000d30:	805a      	strh	r2, [r3, #2]
    value=*epreg & USB_EPTX_DTOGMASK;
 8000d32:	4957      	ldr	r1, [pc, #348]	; (8000e90 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x21c>)
 8000d34:	4a5a      	ldr	r2, [pc, #360]	; (8000ea0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x22c>)
 8000d36:	880b      	ldrh	r3, [r1, #0]
 8000d38:	4013      	ands	r3, r2
      reg^=USB_EPTX_DTOG2;
 8000d3a:	2230      	movs	r2, #48	; 0x30
 8000d3c:	405a      	eors	r2, r3
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8000d3e:	4b56      	ldr	r3, [pc, #344]	; (8000e98 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x224>)
 8000d40:	4313      	orrs	r3, r2
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	800b      	strh	r3, [r1, #0]
 8000d46:	e7d8      	b.n	8000cfa <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x86>
    _controlEndpointState=ControlEndpointStateType::DATA_IN;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	6383      	str	r3, [r0, #56]	; 0x38
        sendControlData(&_idleState,1);
 8000d4c:	0003      	movs	r3, r0
 8000d4e:	3357      	adds	r3, #87	; 0x57
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 8000d50:	63c3      	str	r3, [r0, #60]	; 0x3c
    _inEndpointData[endpointIndex].remaining=length;
 8000d52:	4b54      	ldr	r3, [pc, #336]	; (8000ea4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x230>)
 8000d54:	6403      	str	r3, [r0, #64]	; 0x40
 8000d56:	4b54      	ldr	r3, [pc, #336]	; (8000ea8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x234>)
 8000d58:	6443      	str	r3, [r0, #68]	; 0x44
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 8000d5a:	2358      	movs	r3, #88	; 0x58
 8000d5c:	e7d8      	b.n	8000d10 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x9c>
    switch(header.bRequest) {
 8000d5e:	784a      	ldrb	r2, [r1, #1]
 8000d60:	2a0a      	cmp	r2, #10
 8000d62:	d017      	beq.n	8000d94 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x120>
 8000d64:	2a0b      	cmp	r2, #11
 8000d66:	d020      	beq.n	8000daa <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x136>
 8000d68:	2a06      	cmp	r2, #6
 8000d6a:	d039      	beq.n	8000de0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x16c>
    value=*epreg & USB_EPRX_DTOGMASK;
 8000d6c:	4948      	ldr	r1, [pc, #288]	; (8000e90 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x21c>)
 8000d6e:	4a49      	ldr	r2, [pc, #292]	; (8000e94 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x220>)
 8000d70:	880b      	ldrh	r3, [r1, #0]
    value=*epreg & USB_EPTX_DTOGMASK;
 8000d72:	484b      	ldr	r0, [pc, #300]	; (8000ea0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x22c>)
    value=*epreg & USB_EPRX_DTOGMASK;
 8000d74:	401a      	ands	r2, r3
      reg^=USB_EPRX_DTOG1;
 8000d76:	2380      	movs	r3, #128	; 0x80
 8000d78:	015b      	lsls	r3, r3, #5
 8000d7a:	4053      	eors	r3, r2
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8000d7c:	4a46      	ldr	r2, [pc, #280]	; (8000e98 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x224>)
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	800b      	strh	r3, [r1, #0]
    value=*epreg & USB_EPTX_DTOGMASK;
 8000d84:	880b      	ldrh	r3, [r1, #0]
 8000d86:	4003      	ands	r3, r0
      reg^=USB_EPTX_DTOG1;
 8000d88:	2010      	movs	r0, #16
 8000d8a:	4043      	eors	r3, r0
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	b292      	uxth	r2, r2
 8000d90:	800a      	strh	r2, [r1, #0]
  }
 8000d92:	e7b2      	b.n	8000cfa <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x86>
    _controlEndpointState=ControlEndpointStateType::DATA_IN;
 8000d94:	2302      	movs	r3, #2
 8000d96:	6383      	str	r3, [r0, #56]	; 0x38
        sendControlData(&_altSetting,1);
 8000d98:	0003      	movs	r3, r0
 8000d9a:	3358      	adds	r3, #88	; 0x58
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 8000d9c:	63c3      	str	r3, [r0, #60]	; 0x3c
    _inEndpointData[endpointIndex].remaining=length;
 8000d9e:	4b41      	ldr	r3, [pc, #260]	; (8000ea4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x230>)
 8000da0:	6403      	str	r3, [r0, #64]	; 0x40
 8000da2:	4b41      	ldr	r3, [pc, #260]	; (8000ea8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x234>)
 8000da4:	6443      	str	r3, [r0, #68]	; 0x44
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 8000da6:	2359      	movs	r3, #89	; 0x59
 8000da8:	e7b2      	b.n	8000d10 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x9c>
        _altSetting=header.wValue;
 8000daa:	2258      	movs	r2, #88	; 0x58
 8000dac:	8849      	ldrh	r1, [r1, #2]
 8000dae:	5481      	strb	r1, [r0, r2]
    _controlEndpointState=ControlEndpointStateType::STATUS_IN;
 8000db0:	3a54      	subs	r2, #84	; 0x54
 8000db2:	6382      	str	r2, [r0, #56]	; 0x38
    _inEndpointData[endpointIndex].remaining=length;
 8000db4:	4a3c      	ldr	r2, [pc, #240]	; (8000ea8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x234>)
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 8000db6:	63c3      	str	r3, [r0, #60]	; 0x3c
    _inEndpointData[endpointIndex].remaining=length;
 8000db8:	6442      	str	r2, [r0, #68]	; 0x44
    USBR_BDT[endpointIndex].tx.count=length;
 8000dba:	4a38      	ldr	r2, [pc, #224]	; (8000e9c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x228>)
    _inEndpointData[endpointIndex].remaining=length;
 8000dbc:	6403      	str	r3, [r0, #64]	; 0x40
    USBR_BDT[endpointIndex].tx.count=length;
 8000dbe:	8053      	strh	r3, [r2, #2]
 8000dc0:	e7b7      	b.n	8000d32 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0xbe>
        _protocol=header.wValue;
 8000dc2:	2356      	movs	r3, #86	; 0x56
 8000dc4:	884a      	ldrh	r2, [r1, #2]
 8000dc6:	54c2      	strb	r2, [r0, r3]
    _controlEndpointState=ControlEndpointStateType::STATUS_IN;
 8000dc8:	3b52      	subs	r3, #82	; 0x52
 8000dca:	6383      	str	r3, [r0, #56]	; 0x38
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 8000dcc:	2300      	movs	r3, #0
 8000dce:	e7f1      	b.n	8000db4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x140>
        _idleState=header.wValue >> 8;
 8000dd0:	2257      	movs	r2, #87	; 0x57
 8000dd2:	884b      	ldrh	r3, [r1, #2]
 8000dd4:	121b      	asrs	r3, r3, #8
 8000dd6:	5483      	strb	r3, [r0, r2]
    _controlEndpointState=ControlEndpointStateType::STATUS_IN;
 8000dd8:	2304      	movs	r3, #4
 8000dda:	6383      	str	r3, [r0, #56]	; 0x38
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 8000ddc:	2300      	movs	r3, #0
 8000dde:	e7e9      	b.n	8000db4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x140>
        if(header.wValue >> 8==USB_DESC_TYPE_HID_REPORT) {
 8000de0:	884a      	ldrh	r2, [r1, #2]
 8000de2:	1212      	asrs	r2, r2, #8
 8000de4:	2a22      	cmp	r2, #34	; 0x22
 8000de6:	d047      	beq.n	8000e78 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x204>
        else if(header.wValue >> 8==USB_DESC_TYPE_HID_DESCRIPTOR) {
 8000de8:	2a21      	cmp	r2, #33	; 0x21
 8000dea:	d01b      	beq.n	8000e24 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x1b0>
    _controlEndpointState=ControlEndpointStateType::DATA_IN;
 8000dec:	2202      	movs	r2, #2
    _inEndpointData[endpointIndex].remaining=length;
 8000dee:	6403      	str	r3, [r0, #64]	; 0x40
 8000df0:	4b2d      	ldr	r3, [pc, #180]	; (8000ea8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x234>)
    _controlEndpointState=ControlEndpointStateType::DATA_IN;
 8000df2:	6382      	str	r2, [r0, #56]	; 0x38
    _inEndpointData[endpointIndex].remaining=length;
 8000df4:	6443      	str	r3, [r0, #68]	; 0x44
 8000df6:	2200      	movs	r2, #0
 8000df8:	2700      	movs	r7, #0
          pbuf=nullptr;
 8000dfa:	2300      	movs	r3, #0
          len=0;
 8000dfc:	2600      	movs	r6, #0
    ep.ptr+=length;
 8000dfe:	19db      	adds	r3, r3, r7
 8000e00:	63c3      	str	r3, [r0, #60]	; 0x3c
    ep.remaining-=length;
 8000e02:	2340      	movs	r3, #64	; 0x40
 8000e04:	52c2      	strh	r2, [r0, r3]
    USBR_BDT[endpointIndex].tx.count=length;
 8000e06:	4b25      	ldr	r3, [pc, #148]	; (8000e9c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x228>)
 8000e08:	805e      	strh	r6, [r3, #2]
 8000e0a:	e792      	b.n	8000d32 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0xbe>
        wNBlocks = length >> 5;
 8000e0c:	095a      	lsrs	r2, r3, #5
        if((length & 0x1f)==0)
 8000e0e:	06db      	lsls	r3, r3, #27
 8000e10:	d101      	bne.n	8000e16 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x1a2>
          wNBlocks--;
 8000e12:	3a01      	subs	r2, #1
 8000e14:	b292      	uxth	r2, r2
        count=(wNBlocks << 10) | 0x8000;
 8000e16:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x23c>)
 8000e18:	0292      	lsls	r2, r2, #10
 8000e1a:	431a      	orrs	r2, r3
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x218>)
 8000e1e:	b292      	uxth	r2, r2
 8000e20:	805a      	strh	r2, [r3, #2]
 8000e22:	e748      	b.n	8000cb6 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x42>
          len=sizeof(_hidDescriptor);
 8000e24:	2509      	movs	r5, #9
          pbuf=const_cast<uint8_t *>(_hidDescriptor);
 8000e26:	4b23      	ldr	r3, [pc, #140]	; (8000eb4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x240>)
        else if(header.wValue >> 8==USB_DESC_TYPE_HID_DESCRIPTOR) {
 8000e28:	3a18      	subs	r2, #24
        sendControlData(pbuf,header.wLength<len ? header.wLength : len);
 8000e2a:	88ce      	ldrh	r6, [r1, #6]
 8000e2c:	0034      	movs	r4, r6
 8000e2e:	4296      	cmp	r6, r2
 8000e30:	da26      	bge.n	8000e80 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x20c>
    _controlEndpointState=ControlEndpointStateType::DATA_IN;
 8000e32:	2202      	movs	r2, #2
    _inEndpointData[endpointIndex].pmaAddress=pmaInAddress;
 8000e34:	2146      	movs	r1, #70	; 0x46
 8000e36:	2558      	movs	r5, #88	; 0x58
    _controlEndpointState=ControlEndpointStateType::DATA_IN;
 8000e38:	6382      	str	r2, [r0, #56]	; 0x38
    _inEndpointData[endpointIndex].total=length;
 8000e3a:	3240      	adds	r2, #64	; 0x40
 8000e3c:	5286      	strh	r6, [r0, r2]
    _inEndpointData[endpointIndex].remaining=length;
 8000e3e:	3a02      	subs	r2, #2
 8000e40:	5286      	strh	r6, [r0, r2]
 8000e42:	3401      	adds	r4, #1
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 8000e44:	63c3      	str	r3, [r0, #60]	; 0x3c
    _inEndpointData[endpointIndex].pmaAddress=pmaInAddress;
 8000e46:	5245      	strh	r5, [r0, r1]
    _inEndpointData[endpointIndex].maxPacketSize=maxPacketSize;
 8000e48:	3902      	subs	r1, #2
 8000e4a:	5242      	strh	r2, [r0, r1]
 8000e4c:	1064      	asrs	r4, r4, #1
 8000e4e:	0037      	movs	r7, r6
    for(i=n;i!=0;i--) {
 8000e50:	2200      	movs	r2, #0
 8000e52:	2c00      	cmp	r4, #0
 8000e54:	d0d3      	beq.n	8000dfe <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x18a>
      *pdwVal++=word;
 8000e56:	4d15      	ldr	r5, [pc, #84]	; (8000eac <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x238>)
 8000e58:	1aed      	subs	r5, r5, r3
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 8000e5a:	7859      	ldrb	r1, [r3, #1]
 8000e5c:	781a      	ldrb	r2, [r3, #0]
 8000e5e:	0209      	lsls	r1, r1, #8
 8000e60:	430a      	orrs	r2, r1
    for(i=n;i!=0;i--) {
 8000e62:	3c01      	subs	r4, #1
      *pdwVal++=word;
 8000e64:	535a      	strh	r2, [r3, r5]
      dataBytes+=2;
 8000e66:	3302      	adds	r3, #2
    for(i=n;i!=0;i--) {
 8000e68:	2c00      	cmp	r4, #0
 8000e6a:	d1f6      	bne.n	8000e5a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x1e6>
 8000e6c:	2240      	movs	r2, #64	; 0x40
 8000e6e:	5a82      	ldrh	r2, [r0, r2]
 8000e70:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000e72:	1b92      	subs	r2, r2, r6
 8000e74:	b292      	uxth	r2, r2
 8000e76:	e7c2      	b.n	8000dfe <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x18a>
        if(header.wValue >> 8==USB_DESC_TYPE_HID_REPORT) {
 8000e78:	223f      	movs	r2, #63	; 0x3f
          len=sizeof(_reportDescriptor);
 8000e7a:	253f      	movs	r5, #63	; 0x3f
          pbuf=const_cast<uint8_t *>(_reportDescriptor);
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x244>)
 8000e7e:	e7d4      	b.n	8000e2a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x1b6>
        sendControlData(pbuf,header.wLength<len ? header.wLength : len);
 8000e80:	0014      	movs	r4, r2
 8000e82:	002e      	movs	r6, r5
 8000e84:	e7d5      	b.n	8000e32 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE+0x1be>
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	08003210 	.word	0x08003210
 8000e8c:	40006004 	.word	0x40006004
 8000e90:	40005c00 	.word	0x40005c00
 8000e94:	ffffbf8f 	.word	0xffffbf8f
 8000e98:	ffff8080 	.word	0xffff8080
 8000e9c:	40006000 	.word	0x40006000
 8000ea0:	ffff8fbf 	.word	0xffff8fbf
 8000ea4:	00010001 	.word	0x00010001
 8000ea8:	00580040 	.word	0x00580040
 8000eac:	40006058 	.word	0x40006058
 8000eb0:	ffff8000 	.word	0xffff8000
 8000eb4:	08003284 	.word	0x08003284
 8000eb8:	08003290 	.word	0x08003290

08000ebc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv>:
  inline void UsbKeyboard<TConfiguration,Features...>::onInterrupt() {
 8000ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ebe:	4645      	mov	r5, r8
 8000ec0:	46de      	mov	lr, fp
 8000ec2:	4657      	mov	r7, sl
 8000ec4:	464e      	mov	r6, r9
    if((USBR->ISTR & USB_ISTR_CTR)!=0)
 8000ec6:	2344      	movs	r3, #68	; 0x44
  inline void UsbKeyboard<TConfiguration,Features...>::onInterrupt() {
 8000ec8:	b5e0      	push	{r5, r6, r7, lr}
    if((USBR->ISTR & USB_ISTR_CTR)!=0)
 8000eca:	4abc      	ldr	r2, [pc, #752]	; (80011bc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x300>)
  inline void UsbKeyboard<TConfiguration,Features...>::onInterrupt() {
 8000ecc:	b0b5      	sub	sp, #212	; 0xd4
    if((USBR->ISTR & USB_ISTR_CTR)!=0)
 8000ece:	5ad3      	ldrh	r3, [r2, r3]
  inline void UsbKeyboard<TConfiguration,Features...>::onInterrupt() {
 8000ed0:	0005      	movs	r5, r0
    if((USBR->ISTR & USB_ISTR_CTR)!=0)
 8000ed2:	b21b      	sxth	r3, r3
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	da00      	bge.n	8000eda <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1e>
 8000ed8:	e082      	b.n	8000fe0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
    if((USBR->ISTR & USB_ISTR_RESET)!=0)
 8000eda:	2244      	movs	r2, #68	; 0x44
 8000edc:	4bb7      	ldr	r3, [pc, #732]	; (80011bc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x300>)
 8000ede:	5a99      	ldrh	r1, [r3, r2]
 8000ee0:	0549      	lsls	r1, r1, #21
 8000ee2:	d500      	bpl.n	8000ee6 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x2a>
 8000ee4:	e2a0      	b.n	8001428 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x56c>
    if((USBR->ISTR & USB_ISTR_PMAOVR)!=0)
 8000ee6:	2344      	movs	r3, #68	; 0x44
 8000ee8:	4ab4      	ldr	r2, [pc, #720]	; (80011bc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x300>)
 8000eea:	5ad1      	ldrh	r1, [r2, r3]
 8000eec:	0449      	lsls	r1, r1, #17
 8000eee:	d500      	bpl.n	8000ef2 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x36>
 8000ef0:	e17c      	b.n	80011ec <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x330>
    if((USBR->ISTR & USB_ISTR_ERR)!=0)
 8000ef2:	2344      	movs	r3, #68	; 0x44
 8000ef4:	4ab1      	ldr	r2, [pc, #708]	; (80011bc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x300>)
 8000ef6:	5ad1      	ldrh	r1, [r2, r3]
 8000ef8:	0489      	lsls	r1, r1, #18
 8000efa:	d500      	bpl.n	8000efe <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x42>
 8000efc:	e1a6      	b.n	800124c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x390>
    if((USBR->ISTR & USB_ISTR_WKUP)!=0)
 8000efe:	2244      	movs	r2, #68	; 0x44
 8000f00:	4bae      	ldr	r3, [pc, #696]	; (80011bc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x300>)
 8000f02:	5a99      	ldrh	r1, [r3, r2]
 8000f04:	04c9      	lsls	r1, r1, #19
 8000f06:	d500      	bpl.n	8000f0a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x4e>
 8000f08:	e1d0      	b.n	80012ac <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x3f0>
    if((USBR->ISTR & USB_ISTR_SUSP)!=0)
 8000f0a:	2244      	movs	r2, #68	; 0x44
 8000f0c:	4bab      	ldr	r3, [pc, #684]	; (80011bc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x300>)
 8000f0e:	5a99      	ldrh	r1, [r3, r2]
 8000f10:	0509      	lsls	r1, r1, #20
 8000f12:	d500      	bpl.n	8000f16 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x5a>
 8000f14:	e215      	b.n	8001342 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x486>
    if((USBR->ISTR & USB_ISTR_SOF)!=0)
 8000f16:	2344      	movs	r3, #68	; 0x44
 8000f18:	4aa8      	ldr	r2, [pc, #672]	; (80011bc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x300>)
 8000f1a:	5ad1      	ldrh	r1, [r2, r3]
 8000f1c:	0589      	lsls	r1, r1, #22
 8000f1e:	d500      	bpl.n	8000f22 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x66>
 8000f20:	e24e      	b.n	80013c0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x504>
    if((USBR->ISTR & USB_ISTR_ESOF)!=0)
 8000f22:	2344      	movs	r3, #68	; 0x44
 8000f24:	4aa5      	ldr	r2, [pc, #660]	; (80011bc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x300>)
 8000f26:	5ad1      	ldrh	r1, [r2, r3]
 8000f28:	05c9      	lsls	r1, r1, #23
 8000f2a:	d500      	bpl.n	8000f2e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x72>
 8000f2c:	e115      	b.n	800115a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x29e>
  }
 8000f2e:	b035      	add	sp, #212	; 0xd4
 8000f30:	bc3c      	pop	{r2, r3, r4, r5}
 8000f32:	4690      	mov	r8, r2
 8000f34:	4699      	mov	r9, r3
 8000f36:	46a2      	mov	sl, r4
 8000f38:	46ab      	mov	fp, r5
 8000f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f3c:	ac28      	add	r4, sp, #160	; 0xa0
    USBR->EP0R=USBR->EP0R & (~USB_EP_CTR_RX) & USB_EPREG_MASK;
 8000f3e:	4a9f      	ldr	r2, [pc, #636]	; (80011bc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x300>)
 8000f40:	499f      	ldr	r1, [pc, #636]	; (80011c0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x304>)
 8000f42:	8813      	ldrh	r3, [r2, #0]

      const uint8_t *ptr;

      ptr=reinterpret_cast<const uint8_t *>(vptr);

      bmRequest=ptr[0];
 8000f44:	ae26      	add	r6, sp, #152	; 0x98
 8000f46:	400b      	ands	r3, r1
 8000f48:	8013      	strh	r3, [r2, #0]
      bRequest=ptr[1];
      wValue=*reinterpret_cast<const uint16_t *>(ptr+2);
      wIndex=*reinterpret_cast<const uint16_t *>(ptr+4);
 8000f4a:	88a3      	ldrh	r3, [r4, #4]
      bmRequest=ptr[0];
 8000f4c:	7821      	ldrb	r1, [r4, #0]
      wIndex=*reinterpret_cast<const uint16_t *>(ptr+4);
 8000f4e:	469c      	mov	ip, r3
 8000f50:	80b3      	strh	r3, [r6, #4]
    switch(header.bmRequest & 0x1f) {
 8000f52:	231f      	movs	r3, #31
      bRequest=ptr[1];
 8000f54:	7860      	ldrb	r0, [r4, #1]
      wValue=*reinterpret_cast<const uint16_t *>(ptr+2);
 8000f56:	8867      	ldrh	r7, [r4, #2]
      wLength=*reinterpret_cast<const uint16_t *>(ptr+6);
 8000f58:	88e4      	ldrh	r4, [r4, #6]
      bmRequest=ptr[0];
 8000f5a:	7031      	strb	r1, [r6, #0]
      bRequest=ptr[1];
 8000f5c:	7070      	strb	r0, [r6, #1]
      wValue=*reinterpret_cast<const uint16_t *>(ptr+2);
 8000f5e:	8077      	strh	r7, [r6, #2]
      wLength=*reinterpret_cast<const uint16_t *>(ptr+6);
 8000f60:	80f4      	strh	r4, [r6, #6]
 8000f62:	400b      	ands	r3, r1
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d101      	bne.n	8000f6c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xb0>
 8000f68:	f000 fdc5 	bl	8001af6 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc3a>
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d101      	bne.n	8000f74 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xb8>
 8000f70:	f000 fc3a 	bl	80017e8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x92c>
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d001      	beq.n	8000f7c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc0>
 8000f78:	f000 fda0 	bl	8001abc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc00>
    if((header.bmRequest & 0x60)==0x20)
 8000f7c:	2360      	movs	r3, #96	; 0x60
 8000f7e:	4019      	ands	r1, r3
 8000f80:	2920      	cmp	r1, #32
 8000f82:	d101      	bne.n	8000f88 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xcc>
 8000f84:	f000 fdc1 	bl	8001b0a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc4e>
      ep_addr=header.wIndex;
 8000f88:	4669      	mov	r1, sp
 8000f8a:	4663      	mov	r3, ip
 8000f8c:	710b      	strb	r3, [r1, #4]
 8000f8e:	7909      	ldrb	r1, [r1, #4]
      switch(header.bRequest) {
 8000f90:	2801      	cmp	r0, #1
 8000f92:	d101      	bne.n	8000f98 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xdc>
 8000f94:	f000 fe3e 	bl	8001c14 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xd58>
 8000f98:	2800      	cmp	r0, #0
 8000f9a:	d101      	bne.n	8000fa0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xe4>
 8000f9c:	f000 fe18 	bl	8001bd0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xd14>
 8000fa0:	2803      	cmp	r0, #3
 8000fa2:	d11d      	bne.n	8000fe0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
          switch(_deviceState) {
 8000fa4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d101      	bne.n	8000fae <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf2>
 8000faa:	f000 fe08 	bl	8001bbe <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xd02>
 8000fae:	2b03      	cmp	r3, #3
 8000fb0:	d001      	beq.n	8000fb6 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xfa>
 8000fb2:	f000 fdf0 	bl	8001b96 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xcda>
              if(header.wValue==USB_FEATURE_EP_HALT && (ep_addr & 0x7f)!=0)
 8000fb6:	2f00      	cmp	r7, #0
 8000fb8:	d104      	bne.n	8000fc4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x108>
 8000fba:	064b      	lsls	r3, r1, #25
 8000fbc:	d002      	beq.n	8000fc4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x108>
                stallEndpoint(ep_addr);
 8000fbe:	0008      	movs	r0, r1
 8000fc0:	f7ff f924 	bl	800020c <_ZNK9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE13stallEndpointEh.isra.42>
              handleSetup(header);
 8000fc4:	0031      	movs	r1, r6
 8000fc6:	0028      	movs	r0, r5
 8000fc8:	f7ff fe54 	bl	8000c74 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE>
    _controlEndpointState=ControlEndpointStateType::STATUS_IN;
 8000fcc:	2304      	movs	r3, #4
 8000fce:	63ab      	str	r3, [r5, #56]	; 0x38
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	63eb      	str	r3, [r5, #60]	; 0x3c
    _inEndpointData[endpointIndex].remaining=length;
 8000fd4:	642b      	str	r3, [r5, #64]	; 0x40
 8000fd6:	4b7b      	ldr	r3, [pc, #492]	; (80011c4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x308>)
    continueSendData(endpointIndex);
 8000fd8:	0028      	movs	r0, r5
    _inEndpointData[endpointIndex].remaining=length;
 8000fda:	646b      	str	r3, [r5, #68]	; 0x44
    continueSendData(endpointIndex);
 8000fdc:	f7ff f8da 	bl	8000194 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE16continueSendDataEh.constprop.82>
    while(((irq=USBR->ISTR) & USB_ISTR_CTR)!=0) {
 8000fe0:	2144      	movs	r1, #68	; 0x44
 8000fe2:	4a76      	ldr	r2, [pc, #472]	; (80011bc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x300>)
 8000fe4:	5a53      	ldrh	r3, [r2, r1]
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	b218      	sxth	r0, r3
 8000fea:	2800      	cmp	r0, #0
 8000fec:	db00      	blt.n	8000ff0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x134>
 8000fee:	e774      	b.n	8000eda <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1e>
      endpointIndex=irq & USB_ISTR_EP_ID;
 8000ff0:	240f      	movs	r4, #15
 8000ff2:	401c      	ands	r4, r3
      if(endpointIndex==0) {
 8000ff4:	d118      	bne.n	8001028 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x16c>
        if(isOut)
 8000ff6:	06db      	lsls	r3, r3, #27
 8000ff8:	d470      	bmi.n	80010dc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x220>
    USBR->EP0R=USBR->EP0R & (~USB_EP_CTR_TX) & USB_EPREG_MASK;
 8000ffa:	8813      	ldrh	r3, [r2, #0]
 8000ffc:	4872      	ldr	r0, [pc, #456]	; (80011c8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x30c>)
 8000ffe:	4003      	ands	r3, r0
 8001000:	8013      	strh	r3, [r2, #0]
    if(_controlEndpointState==ControlEndpointStateType::DATA_IN) {
 8001002:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001004:	2b02      	cmp	r3, #2
 8001006:	d100      	bne.n	800100a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x14e>
 8001008:	e2fb      	b.n	8001602 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x746>
    if(_address>0 && _inEndpointData[0].remaining==0) {
 800100a:	2259      	movs	r2, #89	; 0x59
 800100c:	5cab      	ldrb	r3, [r5, r2]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0e6      	beq.n	8000fe0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
 8001012:	2140      	movs	r1, #64	; 0x40
 8001014:	5a69      	ldrh	r1, [r5, r1]
 8001016:	2900      	cmp	r1, #0
 8001018:	d1e2      	bne.n	8000fe0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
      USBR->DADDR=_address | USB_DADDR_EF;
 800101a:	2080      	movs	r0, #128	; 0x80
 800101c:	4c67      	ldr	r4, [pc, #412]	; (80011bc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x300>)
 800101e:	4303      	orrs	r3, r0
 8001020:	3834      	subs	r0, #52	; 0x34
 8001022:	5223      	strh	r3, [r4, r0]
      _address=0;
 8001024:	54a9      	strb	r1, [r5, r2]
 8001026:	e7db      	b.n	8000fe0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
        reg=&USBR->EP0R+2*endpointIndex;
 8001028:	4b68      	ldr	r3, [pc, #416]	; (80011cc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x310>)
 800102a:	18e6      	adds	r6, r4, r3
 800102c:	00b6      	lsls	r6, r6, #2
        if((*reg & USB_EP_CTR_RX)!=0)
 800102e:	8833      	ldrh	r3, [r6, #0]
 8001030:	b21b      	sxth	r3, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	da00      	bge.n	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x17c>
 8001036:	e31f      	b.n	8001678 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x7bc>
        if((*reg & USB_EP_CTR_TX)!=0)
 8001038:	8833      	ldrh	r3, [r6, #0]
 800103a:	061b      	lsls	r3, r3, #24
 800103c:	d5d0      	bpl.n	8000fe0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
    *reg=*reg & (~USB_EP_CTR_TX) & USB_EPREG_MASK;
 800103e:	8833      	ldrh	r3, [r6, #0]
 8001040:	4a61      	ldr	r2, [pc, #388]	; (80011c8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x30c>)
 8001042:	4013      	ands	r3, r2
 8001044:	8033      	strh	r3, [r6, #0]
    if(_inEndpointData[endpointIndex].remaining==0)
 8001046:	0063      	lsls	r3, r4, #1
 8001048:	469c      	mov	ip, r3
 800104a:	191b      	adds	r3, r3, r4
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	18eb      	adds	r3, r5, r3
 8001050:	001a      	movs	r2, r3
 8001052:	3240      	adds	r2, #64	; 0x40
 8001054:	8812      	ldrh	r2, [r2, #0]
 8001056:	2a00      	cmp	r2, #0
 8001058:	d100      	bne.n	800105c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1a0>
 800105a:	e366      	b.n	800172a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x86e>
    if((length=ep.remaining)>ep.maxPacketSize)
 800105c:	3344      	adds	r3, #68	; 0x44
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	4698      	mov	r8, r3
 8001062:	0018      	movs	r0, r3
 8001064:	429a      	cmp	r2, r3
 8001066:	dc01      	bgt.n	800106c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1b0>
 8001068:	0010      	movs	r0, r2
 800106a:	4690      	mov	r8, r2
    pdwVal=reinterpret_cast<uint16_t *>(BTABLE_BASE+ep.pmaAddress);
 800106c:	4663      	mov	r3, ip
 800106e:	191b      	adds	r3, r3, r4
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	18eb      	adds	r3, r5, r3
 8001074:	001a      	movs	r2, r3
 8001076:	3246      	adds	r2, #70	; 0x46
 8001078:	8817      	ldrh	r7, [r2, #0]
 800107a:	4a55      	ldr	r2, [pc, #340]	; (80011d0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x314>)
    n=(length+1)/2;
 800107c:	3001      	adds	r0, #1
    pdwVal=reinterpret_cast<uint16_t *>(BTABLE_BASE+ep.pmaAddress);
 800107e:	4691      	mov	r9, r2
    n=(length+1)/2;
 8001080:	1040      	asrs	r0, r0, #1
    pdwVal=reinterpret_cast<uint16_t *>(BTABLE_BASE+ep.pmaAddress);
 8001082:	444f      	add	r7, r9
    dataBytes=ep.ptr;
 8001084:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    for(i=n;i!=0;i--) {
 8001086:	2800      	cmp	r0, #0
 8001088:	d00e      	beq.n	80010a8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1ec>
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 800108a:	784a      	ldrb	r2, [r1, #1]
 800108c:	780b      	ldrb	r3, [r1, #0]
 800108e:	0212      	lsls	r2, r2, #8
 8001090:	4313      	orrs	r3, r2
    for(i=n;i!=0;i--) {
 8001092:	3801      	subs	r0, #1
      *pdwVal++=word;
 8001094:	803b      	strh	r3, [r7, #0]
      dataBytes+=2;
 8001096:	3102      	adds	r1, #2
 8001098:	3702      	adds	r7, #2
    for(i=n;i!=0;i--) {
 800109a:	2800      	cmp	r0, #0
 800109c:	d1f5      	bne.n	800108a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1ce>
 800109e:	4663      	mov	r3, ip
 80010a0:	191b      	adds	r3, r3, r4
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	18eb      	adds	r3, r5, r3
 80010a6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    ep.ptr+=length;
 80010a8:	4663      	mov	r3, ip
 80010aa:	191b      	adds	r3, r3, r4
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	18eb      	adds	r3, r5, r3
 80010b0:	4441      	add	r1, r8
 80010b2:	63d9      	str	r1, [r3, #60]	; 0x3c
    ep.remaining-=length;
 80010b4:	4641      	mov	r1, r8
 80010b6:	3340      	adds	r3, #64	; 0x40
 80010b8:	881a      	ldrh	r2, [r3, #0]
 80010ba:	1a52      	subs	r2, r2, r1
 80010bc:	801a      	strh	r2, [r3, #0]
    USBR_BDT[endpointIndex].tx.count=length;
 80010be:	4b45      	ldr	r3, [pc, #276]	; (80011d4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x318>)
    value=*epreg & USB_EPTX_DTOGMASK;
 80010c0:	4a45      	ldr	r2, [pc, #276]	; (80011d8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x31c>)
    USBR_BDT[endpointIndex].tx.count=length;
 80010c2:	469c      	mov	ip, r3
 80010c4:	4464      	add	r4, ip
 80010c6:	00e4      	lsls	r4, r4, #3
 80010c8:	8061      	strh	r1, [r4, #2]
    value=*epreg & USB_EPTX_DTOGMASK;
 80010ca:	8833      	ldrh	r3, [r6, #0]
 80010cc:	4013      	ands	r3, r2
      reg^=USB_EPTX_DTOG2;
 80010ce:	2230      	movs	r2, #48	; 0x30
 80010d0:	405a      	eors	r2, r3
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 80010d2:	4b42      	ldr	r3, [pc, #264]	; (80011dc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x320>)
 80010d4:	4313      	orrs	r3, r2
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	8033      	strh	r3, [r6, #0]
 80010da:	e781      	b.n	8000fe0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
    if((USBR->EP0R & USB_EP_SETUP)!=0)
 80010dc:	8813      	ldrh	r3, [r2, #0]
 80010de:	051b      	lsls	r3, r3, #20
 80010e0:	d500      	bpl.n	80010e4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x228>
 80010e2:	e366      	b.n	80017b2 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x8f6>
    else if((USBR->EP0R & USB_EP_CTR_RX)!=0)
 80010e4:	8813      	ldrh	r3, [r2, #0]
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	db00      	blt.n	80010ee <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x232>
 80010ec:	e778      	b.n	8000fe0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
    USBR->EP0R=USBR->EP0R & ~(USB_EP_CTR_RX) & USB_EPREG_MASK;
 80010ee:	8813      	ldrh	r3, [r2, #0]
 80010f0:	4933      	ldr	r1, [pc, #204]	; (80011c0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x304>)
 80010f2:	400b      	ands	r3, r1
 80010f4:	8013      	strh	r3, [r2, #0]
      return count & 0x3ff;
 80010f6:	4b3a      	ldr	r3, [pc, #232]	; (80011e0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x324>)
 80010f8:	885f      	ldrh	r7, [r3, #2]
 80010fa:	05bf      	lsls	r7, r7, #22
 80010fc:	0dbf      	lsrs	r7, r7, #22
    if((count=USBR_BDT[0].rx.getCount())>0) {
 80010fe:	d100      	bne.n	8001102 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x246>
 8001100:	e25d      	b.n	80015be <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x702>
  size_type size() const { return __slist_size(this->_M_head._M_next); }
 8001102:	69ec      	ldr	r4, [r5, #28]
  for ( ; __node != 0; __node = __node->_M_next)
 8001104:	2c00      	cmp	r4, #0
 8001106:	d100      	bne.n	800110a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x24e>
 8001108:	e259      	b.n	80015be <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x702>
 800110a:	0023      	movs	r3, r4
 800110c:	2200      	movs	r2, #0
 800110e:	681b      	ldr	r3, [r3, #0]
    ++__result;
 8001110:	3201      	adds	r2, #1
  for ( ; __node != 0; __node = __node->_M_next)
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1fb      	bne.n	800110e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x252>
        if(_slots.size()==1)
 8001116:	2a01      	cmp	r2, #1
 8001118:	d100      	bne.n	800111c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x260>
 800111a:	e23d      	b.n	8001598 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6dc>
  inline void bind(DesiredRetType (*function_to_bind)(Param1 p1, Param2 p2, Param3 p3)) {
    m_Closure.bindstaticfunc(this, &FastDelegate3::InvokeStaticFunction, 
      function_to_bind); }
  // Invoke the delegate
  RetType operator() (Param1 p1, Param2 p2, Param3 p3) const {
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1, p2, p3); }
 800111c:	2301      	movs	r3, #1
 800111e:	ae04      	add	r6, sp, #16
 8001120:	4699      	mov	r9, r3
 8001122:	46b8      	mov	r8, r7
 8001124:	e00b      	b.n	800113e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x282>
 8001126:	105b      	asrs	r3, r3, #1
 8001128:	18c0      	adds	r0, r0, r3
 800112a:	6803      	ldr	r3, [r0, #0]
 800112c:	59df      	ldr	r7, [r3, r7]
 800112e:	4643      	mov	r3, r8
 8001130:	4a2c      	ldr	r2, [pc, #176]	; (80011e4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x328>)
 8001132:	2100      	movs	r1, #0
 8001134:	47b8      	blx	r7
  void _M_incr() { _M_node = _M_node->_M_next; }
 8001136:	6824      	ldr	r4, [r4, #0]
          for(auto it=_slots.begin();it!=_slots.end();it++)
 8001138:	2c00      	cmp	r4, #0
 800113a:	d100      	bne.n	800113e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x282>
 800113c:	e23f      	b.n	80015be <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x702>
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 800113e:	0021      	movs	r1, r4
 8001140:	0033      	movs	r3, r6
 8001142:	3108      	adds	r1, #8
 8001144:	6860      	ldr	r0, [r4, #4]
 8001146:	c984      	ldmia	r1!, {r2, r7}
 8001148:	c384      	stmia	r3!, {r2, r7}
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1, p2, p3); }
 800114a:	464a      	mov	r2, r9
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 800114c:	9b05      	ldr	r3, [sp, #20]
 800114e:	9f04      	ldr	r7, [sp, #16]
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1, p2, p3); }
 8001150:	421a      	tst	r2, r3
 8001152:	d1e8      	bne.n	8001126 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x26a>
 8001154:	105b      	asrs	r3, r3, #1
 8001156:	18c0      	adds	r0, r0, r3
 8001158:	e7e9      	b.n	800112e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x272>
    USBR->ISTR &= ~USB_ISTR_ESOF;
 800115a:	5ad1      	ldrh	r1, [r2, r3]
 800115c:	4822      	ldr	r0, [pc, #136]	; (80011e8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x32c>)
  size_type size() const { return __slist_size(this->_M_head._M_next); }
 800115e:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8001160:	4001      	ands	r1, r0
 8001162:	52d1      	strh	r1, [r2, r3]
  for ( ; __node != 0; __node = __node->_M_next)
 8001164:	2c00      	cmp	r4, #0
 8001166:	d100      	bne.n	800116a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x2ae>
 8001168:	e6e1      	b.n	8000f2e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x72>
 800116a:	0023      	movs	r3, r4
 800116c:	2200      	movs	r2, #0
 800116e:	681b      	ldr	r3, [r3, #0]
    ++__result;
 8001170:	3201      	adds	r2, #1
  for ( ; __node != 0; __node = __node->_M_next)
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1fb      	bne.n	800116e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x2b2>
        if(_slots.size()==1)
 8001176:	2a01      	cmp	r2, #1
 8001178:	d101      	bne.n	800117e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x2c2>
 800117a:	f000 fc08 	bl	800198e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xad2>
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 800117e:	2601      	movs	r6, #1
 8001180:	ad28      	add	r5, sp, #160	; 0xa0
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8001182:	0023      	movs	r3, r4
 8001184:	002a      	movs	r2, r5
 8001186:	3308      	adds	r3, #8
 8001188:	6860      	ldr	r0, [r4, #4]
 800118a:	cb82      	ldmia	r3!, {r1, r7}
 800118c:	c282      	stmia	r2!, {r1, r7}
 800118e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8001190:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8001192:	421e      	tst	r6, r3
 8001194:	d009      	beq.n	80011aa <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x2ee>
 8001196:	105b      	asrs	r3, r3, #1
 8001198:	18c0      	adds	r0, r0, r3
 800119a:	6803      	ldr	r3, [r0, #0]
 800119c:	2104      	movs	r1, #4
 800119e:	589b      	ldr	r3, [r3, r2]
 80011a0:	4798      	blx	r3
  void _M_incr() { _M_node = _M_node->_M_next; }
 80011a2:	6824      	ldr	r4, [r4, #0]
          for(auto it=_slots.begin();it!=_slots.end();it++)
 80011a4:	2c00      	cmp	r4, #0
 80011a6:	d1ec      	bne.n	8001182 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x2c6>
 80011a8:	e6c1      	b.n	8000f2e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x72>
 80011aa:	105b      	asrs	r3, r3, #1
 80011ac:	18c0      	adds	r0, r0, r3
 80011ae:	2104      	movs	r1, #4
 80011b0:	4790      	blx	r2
 80011b2:	6824      	ldr	r4, [r4, #0]
 80011b4:	2c00      	cmp	r4, #0
 80011b6:	d1e4      	bne.n	8001182 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x2c6>
 80011b8:	e6b9      	b.n	8000f2e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x72>
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	40005c00 	.word	0x40005c00
 80011c0:	00000f8f 	.word	0x00000f8f
 80011c4:	00580040 	.word	0x00580040
 80011c8:	ffff8f0f 	.word	0xffff8f0f
 80011cc:	10001700 	.word	0x10001700
 80011d0:	40006000 	.word	0x40006000
 80011d4:	08000c00 	.word	0x08000c00
 80011d8:	ffff8fbf 	.word	0xffff8fbf
 80011dc:	ffff8080 	.word	0xffff8080
 80011e0:	40006004 	.word	0x40006004
 80011e4:	40006018 	.word	0x40006018
 80011e8:	fffffeff 	.word	0xfffffeff
    USBR->ISTR &= ~USB_ISTR_PMAOVR;
 80011ec:	5ad1      	ldrh	r1, [r2, r3]
 80011ee:	48d3      	ldr	r0, [pc, #844]	; (800153c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x680>)
  size_type size() const { return __slist_size(this->_M_head._M_next); }
 80011f0:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 80011f2:	4001      	ands	r1, r0
 80011f4:	52d1      	strh	r1, [r2, r3]
  for ( ; __node != 0; __node = __node->_M_next)
 80011f6:	2c00      	cmp	r4, #0
 80011f8:	d100      	bne.n	80011fc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x340>
 80011fa:	e67a      	b.n	8000ef2 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x36>
 80011fc:	0023      	movs	r3, r4
 80011fe:	2200      	movs	r2, #0
 8001200:	681b      	ldr	r3, [r3, #0]
    ++__result;
 8001202:	3201      	adds	r2, #1
  for ( ; __node != 0; __node = __node->_M_next)
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1fb      	bne.n	8001200 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x344>
        if(_slots.size()==1)
 8001208:	2a01      	cmp	r2, #1
 800120a:	d101      	bne.n	8001210 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x354>
 800120c:	f000 fc32 	bl	8001a74 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xbb8>
 8001210:	2701      	movs	r7, #1
 8001212:	46a8      	mov	r8, r5
 8001214:	ae14      	add	r6, sp, #80	; 0x50
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8001216:	0023      	movs	r3, r4
 8001218:	0032      	movs	r2, r6
 800121a:	3308      	adds	r3, #8
 800121c:	6860      	ldr	r0, [r4, #4]
 800121e:	cb22      	ldmia	r3!, {r1, r5}
 8001220:	c222      	stmia	r2!, {r1, r5}
 8001222:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001224:	9a14      	ldr	r2, [sp, #80]	; 0x50
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8001226:	421f      	tst	r7, r3
 8001228:	d100      	bne.n	800122c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x370>
 800122a:	e0f3      	b.n	8001414 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x558>
 800122c:	105b      	asrs	r3, r3, #1
 800122e:	18c0      	adds	r0, r0, r3
 8001230:	6803      	ldr	r3, [r0, #0]
 8001232:	2101      	movs	r1, #1
 8001234:	589b      	ldr	r3, [r3, r2]
 8001236:	4798      	blx	r3
  void _M_incr() { _M_node = _M_node->_M_next; }
 8001238:	6824      	ldr	r4, [r4, #0]
          for(auto it=_slots.begin();it!=_slots.end();it++)
 800123a:	2c00      	cmp	r4, #0
 800123c:	d1eb      	bne.n	8001216 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x35a>
 800123e:	4645      	mov	r5, r8
    if((USBR->ISTR & USB_ISTR_ERR)!=0)
 8001240:	2344      	movs	r3, #68	; 0x44
 8001242:	4abf      	ldr	r2, [pc, #764]	; (8001540 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x684>)
 8001244:	5ad1      	ldrh	r1, [r2, r3]
 8001246:	0489      	lsls	r1, r1, #18
 8001248:	d400      	bmi.n	800124c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x390>
 800124a:	e658      	b.n	8000efe <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x42>
    USBR->ISTR &= ~USB_ISTR_ERR;
 800124c:	5ad1      	ldrh	r1, [r2, r3]
 800124e:	48bd      	ldr	r0, [pc, #756]	; (8001544 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x688>)
  size_type size() const { return __slist_size(this->_M_head._M_next); }
 8001250:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8001252:	4001      	ands	r1, r0
 8001254:	52d1      	strh	r1, [r2, r3]
  for ( ; __node != 0; __node = __node->_M_next)
 8001256:	2c00      	cmp	r4, #0
 8001258:	d100      	bne.n	800125c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x3a0>
 800125a:	e650      	b.n	8000efe <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x42>
 800125c:	0023      	movs	r3, r4
 800125e:	2200      	movs	r2, #0
 8001260:	681b      	ldr	r3, [r3, #0]
    ++__result;
 8001262:	3201      	adds	r2, #1
  for ( ; __node != 0; __node = __node->_M_next)
 8001264:	2b00      	cmp	r3, #0
 8001266:	d1fb      	bne.n	8001260 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x3a4>
        if(_slots.size()==1)
 8001268:	2a01      	cmp	r2, #1
 800126a:	d101      	bne.n	8001270 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x3b4>
 800126c:	f000 fc14 	bl	8001a98 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xbdc>
 8001270:	2701      	movs	r7, #1
 8001272:	46a8      	mov	r8, r5
 8001274:	ae18      	add	r6, sp, #96	; 0x60
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8001276:	0023      	movs	r3, r4
 8001278:	0032      	movs	r2, r6
 800127a:	3308      	adds	r3, #8
 800127c:	6860      	ldr	r0, [r4, #4]
 800127e:	cb22      	ldmia	r3!, {r1, r5}
 8001280:	c222      	stmia	r2!, {r1, r5}
 8001282:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8001284:	9a18      	ldr	r2, [sp, #96]	; 0x60
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8001286:	421f      	tst	r7, r3
 8001288:	d100      	bne.n	800128c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x3d0>
 800128a:	e17b      	b.n	8001584 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6c8>
 800128c:	105b      	asrs	r3, r3, #1
 800128e:	18c0      	adds	r0, r0, r3
 8001290:	6803      	ldr	r3, [r0, #0]
 8001292:	2101      	movs	r1, #1
 8001294:	589b      	ldr	r3, [r3, r2]
 8001296:	4798      	blx	r3
  void _M_incr() { _M_node = _M_node->_M_next; }
 8001298:	6824      	ldr	r4, [r4, #0]
          for(auto it=_slots.begin();it!=_slots.end();it++)
 800129a:	2c00      	cmp	r4, #0
 800129c:	d1eb      	bne.n	8001276 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x3ba>
 800129e:	4645      	mov	r5, r8
    if((USBR->ISTR & USB_ISTR_WKUP)!=0)
 80012a0:	2244      	movs	r2, #68	; 0x44
 80012a2:	4ba7      	ldr	r3, [pc, #668]	; (8001540 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x684>)
 80012a4:	5a99      	ldrh	r1, [r3, r2]
 80012a6:	04c9      	lsls	r1, r1, #19
 80012a8:	d400      	bmi.n	80012ac <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x3f0>
 80012aa:	e62e      	b.n	8000f0a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x4e>
    USBR->CNTR &= ~USB_CNTR_LPMODE;
 80012ac:	2140      	movs	r1, #64	; 0x40
 80012ae:	2404      	movs	r4, #4
 80012b0:	5a58      	ldrh	r0, [r3, r1]
 80012b2:	43a0      	bics	r0, r4
 80012b4:	5258      	strh	r0, [r3, r1]
    USBR->CNTR=USB_CNTR_CTRM          // correct transfer
 80012b6:	48a4      	ldr	r0, [pc, #656]	; (8001548 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x68c>)
 80012b8:	5258      	strh	r0, [r3, r1]
    USBR->ISTR &= ~USB_ISTR_WKUP;
 80012ba:	5a99      	ldrh	r1, [r3, r2]
 80012bc:	48a3      	ldr	r0, [pc, #652]	; (800154c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x690>)
 80012be:	4001      	ands	r1, r0
 80012c0:	5299      	strh	r1, [r3, r2]
    setDeviceState(_savedState);
 80012c2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    if(_deviceState!=newState) {
 80012c4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d100      	bne.n	80012cc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x410>
 80012ca:	e61e      	b.n	8000f0a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x4e>
      _deviceState=newState;
 80012cc:	632b      	str	r3, [r5, #48]	; 0x30

      switch(newState) {
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d100      	bne.n	80012d4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x418>
 80012d2:	e287      	b.n	80017e4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x928>
 80012d4:	dc00      	bgt.n	80012d8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x41c>
 80012d6:	e266      	b.n	80017a6 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x8ea>
 80012d8:	2b03      	cmp	r3, #3
 80012da:	d100      	bne.n	80012de <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x422>
 80012dc:	e355      	b.n	800198a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xace>
        case DeviceStateType::CONFIGURED:
          notify=UsbStatusType::STATE_CONFIGURED;
          break;

        case DeviceStateType::SUSPENDED:
          notify=UsbStatusType::STATE_SUSPENDED;
 80012de:	2708      	movs	r7, #8
      switch(newState) {
 80012e0:	2b04      	cmp	r3, #4
 80012e2:	d000      	beq.n	80012e6 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x42a>
 80012e4:	e611      	b.n	8000f0a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x4e>
  size_type size() const { return __slist_size(this->_M_head._M_next); }
 80012e6:	6aec      	ldr	r4, [r5, #44]	; 0x2c
  for ( ; __node != 0; __node = __node->_M_next)
 80012e8:	2c00      	cmp	r4, #0
 80012ea:	d100      	bne.n	80012ee <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x432>
 80012ec:	e60d      	b.n	8000f0a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x4e>
 80012ee:	0023      	movs	r3, r4
 80012f0:	2200      	movs	r2, #0
 80012f2:	681b      	ldr	r3, [r3, #0]
    ++__result;
 80012f4:	3201      	adds	r2, #1
  for ( ; __node != 0; __node = __node->_M_next)
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1fb      	bne.n	80012f2 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x436>
        if(_slots.size()==1)
 80012fa:	2a01      	cmp	r2, #1
 80012fc:	d101      	bne.n	8001302 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x446>
 80012fe:	f000 fbe8 	bl	8001ad2 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc16>
 8001302:	2301      	movs	r3, #1
 8001304:	46a9      	mov	r9, r5
 8001306:	4698      	mov	r8, r3
 8001308:	ae1c      	add	r6, sp, #112	; 0x70
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 800130a:	0021      	movs	r1, r4
 800130c:	0033      	movs	r3, r6
 800130e:	3108      	adds	r1, #8
 8001310:	6860      	ldr	r0, [r4, #4]
 8001312:	c924      	ldmia	r1!, {r2, r5}
 8001314:	c324      	stmia	r3!, {r2, r5}
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8001316:	4641      	mov	r1, r8
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8001318:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800131a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 800131c:	4219      	tst	r1, r3
 800131e:	d100      	bne.n	8001322 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x466>
 8001320:	e15b      	b.n	80015da <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x71e>
 8001322:	105b      	asrs	r3, r3, #1
 8001324:	18c0      	adds	r0, r0, r3
 8001326:	6803      	ldr	r3, [r0, #0]
 8001328:	0039      	movs	r1, r7
 800132a:	589b      	ldr	r3, [r3, r2]
 800132c:	4798      	blx	r3
  void _M_incr() { _M_node = _M_node->_M_next; }
 800132e:	6824      	ldr	r4, [r4, #0]
          for(auto it=_slots.begin();it!=_slots.end();it++)
 8001330:	2c00      	cmp	r4, #0
 8001332:	d1ea      	bne.n	800130a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x44e>
 8001334:	464d      	mov	r5, r9
    if((USBR->ISTR & USB_ISTR_SUSP)!=0)
 8001336:	2244      	movs	r2, #68	; 0x44
 8001338:	4b81      	ldr	r3, [pc, #516]	; (8001540 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x684>)
 800133a:	5a99      	ldrh	r1, [r3, r2]
 800133c:	0509      	lsls	r1, r1, #20
 800133e:	d400      	bmi.n	8001342 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x486>
 8001340:	e5e9      	b.n	8000f16 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x5a>
    USBR->ISTR &= ~USB_ISTR_SUSP;
 8001342:	5a99      	ldrh	r1, [r3, r2]
 8001344:	4882      	ldr	r0, [pc, #520]	; (8001550 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x694>)
 8001346:	4001      	ands	r1, r0
    USBR->CNTR |= USB_CNTR_FSUSP;
 8001348:	2008      	movs	r0, #8
    USBR->ISTR &= ~USB_ISTR_SUSP;
 800134a:	5299      	strh	r1, [r3, r2]
    USBR->CNTR |= USB_CNTR_FSUSP;
 800134c:	3a04      	subs	r2, #4
 800134e:	5a99      	ldrh	r1, [r3, r2]
 8001350:	4301      	orrs	r1, r0
 8001352:	5299      	strh	r1, [r3, r2]
    USBR->CNTR |= USB_CNTR_LPMODE;
 8001354:	5a99      	ldrh	r1, [r3, r2]
 8001356:	3804      	subs	r0, #4
 8001358:	4301      	orrs	r1, r0
 800135a:	5299      	strh	r1, [r3, r2]
    _savedState=_deviceState;
 800135c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800135e:	636b      	str	r3, [r5, #52]	; 0x34
    if(_deviceState!=newState) {
 8001360:	2b04      	cmp	r3, #4
 8001362:	d100      	bne.n	8001366 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x4aa>
 8001364:	e5d7      	b.n	8000f16 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x5a>
      _deviceState=newState;
 8001366:	2304      	movs	r3, #4
  size_type size() const { return __slist_size(this->_M_head._M_next); }
 8001368:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 800136a:	632b      	str	r3, [r5, #48]	; 0x30
  for ( ; __node != 0; __node = __node->_M_next)
 800136c:	2c00      	cmp	r4, #0
 800136e:	d100      	bne.n	8001372 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x4b6>
 8001370:	e5d1      	b.n	8000f16 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x5a>
 8001372:	0023      	movs	r3, r4
 8001374:	2200      	movs	r2, #0
 8001376:	681b      	ldr	r3, [r3, #0]
    ++__result;
 8001378:	3201      	adds	r2, #1
  for ( ; __node != 0; __node = __node->_M_next)
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1fb      	bne.n	8001376 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x4ba>
        if(_slots.size()==1)
 800137e:	2a01      	cmp	r2, #1
 8001380:	d100      	bne.n	8001384 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x4c8>
 8001382:	e3c8      	b.n	8001b16 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc5a>
 8001384:	2701      	movs	r7, #1
 8001386:	46a8      	mov	r8, r5
 8001388:	ae20      	add	r6, sp, #128	; 0x80
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 800138a:	0021      	movs	r1, r4
 800138c:	0033      	movs	r3, r6
 800138e:	3108      	adds	r1, #8
 8001390:	6860      	ldr	r0, [r4, #4]
 8001392:	c924      	ldmia	r1!, {r2, r5}
 8001394:	c324      	stmia	r3!, {r2, r5}
 8001396:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8001398:	9a20      	ldr	r2, [sp, #128]	; 0x80
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 800139a:	421f      	tst	r7, r3
 800139c:	d100      	bne.n	80013a0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x4e4>
 800139e:	e126      	b.n	80015ee <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x732>
 80013a0:	105b      	asrs	r3, r3, #1
 80013a2:	18c0      	adds	r0, r0, r3
 80013a4:	6803      	ldr	r3, [r0, #0]
 80013a6:	2108      	movs	r1, #8
 80013a8:	589b      	ldr	r3, [r3, r2]
 80013aa:	4798      	blx	r3
  void _M_incr() { _M_node = _M_node->_M_next; }
 80013ac:	6824      	ldr	r4, [r4, #0]
          for(auto it=_slots.begin();it!=_slots.end();it++)
 80013ae:	2c00      	cmp	r4, #0
 80013b0:	d1eb      	bne.n	800138a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x4ce>
 80013b2:	4645      	mov	r5, r8
    if((USBR->ISTR & USB_ISTR_SOF)!=0)
 80013b4:	2344      	movs	r3, #68	; 0x44
 80013b6:	4a62      	ldr	r2, [pc, #392]	; (8001540 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x684>)
 80013b8:	5ad1      	ldrh	r1, [r2, r3]
 80013ba:	0589      	lsls	r1, r1, #22
 80013bc:	d400      	bmi.n	80013c0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x504>
 80013be:	e5b0      	b.n	8000f22 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x66>
    USBR->ISTR &= ~USB_ISTR_SOF;
 80013c0:	5ad1      	ldrh	r1, [r2, r3]
 80013c2:	4864      	ldr	r0, [pc, #400]	; (8001554 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x698>)
  size_type size() const { return __slist_size(this->_M_head._M_next); }
 80013c4:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 80013c6:	4001      	ands	r1, r0
 80013c8:	52d1      	strh	r1, [r2, r3]
  for ( ; __node != 0; __node = __node->_M_next)
 80013ca:	2c00      	cmp	r4, #0
 80013cc:	d100      	bne.n	80013d0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x514>
 80013ce:	e5a8      	b.n	8000f22 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x66>
 80013d0:	0023      	movs	r3, r4
 80013d2:	2200      	movs	r2, #0
 80013d4:	681b      	ldr	r3, [r3, #0]
    ++__result;
 80013d6:	3201      	adds	r2, #1
  for ( ; __node != 0; __node = __node->_M_next)
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1fb      	bne.n	80013d4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x518>
        if(_slots.size()==1)
 80013dc:	2a01      	cmp	r2, #1
 80013de:	d100      	bne.n	80013e2 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x526>
 80013e0:	e336      	b.n	8001a50 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xb94>
 80013e2:	2701      	movs	r7, #1
 80013e4:	46a8      	mov	r8, r5
 80013e6:	ae24      	add	r6, sp, #144	; 0x90
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 80013e8:	0023      	movs	r3, r4
 80013ea:	0032      	movs	r2, r6
 80013ec:	3308      	adds	r3, #8
 80013ee:	6860      	ldr	r0, [r4, #4]
 80013f0:	cb22      	ldmia	r3!, {r1, r5}
 80013f2:	c222      	stmia	r2!, {r1, r5}
 80013f4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80013f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 80013f8:	421f      	tst	r7, r3
 80013fa:	d100      	bne.n	80013fe <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x542>
 80013fc:	e093      	b.n	8001526 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x66a>
 80013fe:	105b      	asrs	r3, r3, #1
 8001400:	18c0      	adds	r0, r0, r3
 8001402:	6803      	ldr	r3, [r0, #0]
 8001404:	2103      	movs	r1, #3
 8001406:	589b      	ldr	r3, [r3, r2]
 8001408:	4798      	blx	r3
  void _M_incr() { _M_node = _M_node->_M_next; }
 800140a:	6824      	ldr	r4, [r4, #0]
          for(auto it=_slots.begin();it!=_slots.end();it++)
 800140c:	2c00      	cmp	r4, #0
 800140e:	d1eb      	bne.n	80013e8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x52c>
 8001410:	4645      	mov	r5, r8
 8001412:	e586      	b.n	8000f22 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x66>
 8001414:	105b      	asrs	r3, r3, #1
 8001416:	18c0      	adds	r0, r0, r3
 8001418:	2101      	movs	r1, #1
 800141a:	4790      	blx	r2
 800141c:	6824      	ldr	r4, [r4, #0]
 800141e:	2c00      	cmp	r4, #0
 8001420:	d000      	beq.n	8001424 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x568>
 8001422:	e6f8      	b.n	8001216 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x35a>
 8001424:	4645      	mov	r5, r8
 8001426:	e70b      	b.n	8001240 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x384>
    USBR->ISTR &= ~USB_ISTR_RESET;
 8001428:	5a99      	ldrh	r1, [r3, r2]
 800142a:	484b      	ldr	r0, [pc, #300]	; (8001558 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x69c>)
 800142c:	4001      	ands	r1, r0
 800142e:	5299      	strh	r1, [r3, r2]
      USBR->DADDR=USB_DADDR_EF;
 8001430:	2180      	movs	r1, #128	; 0x80
 8001432:	3208      	adds	r2, #8
 8001434:	5299      	strh	r1, [r3, r2]
    *reg=(*reg & USB_EP_T_MASK) | type;
 8001436:	881a      	ldrh	r2, [r3, #0]
 8001438:	4948      	ldr	r1, [pc, #288]	; (800155c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6a0>)
 800143a:	4011      	ands	r1, r2
 800143c:	2280      	movs	r2, #128	; 0x80
 800143e:	0092      	lsls	r2, r2, #2
 8001440:	430a      	orrs	r2, r1
 8001442:	801a      	strh	r2, [r3, #0]
    *reg=(*reg & USB_EPREG_MASK) | addr | USB_EP_CTR_TX;
 8001444:	881a      	ldrh	r2, [r3, #0]
 8001446:	4946      	ldr	r1, [pc, #280]	; (8001560 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6a4>)
 8001448:	400a      	ands	r2, r1
 800144a:	2180      	movs	r1, #128	; 0x80
 800144c:	430a      	orrs	r2, r1
 800144e:	801a      	strh	r2, [r3, #0]
    USBR_BDT[addr].tx.addr=pmaAddress;
 8001450:	4a44      	ldr	r2, [pc, #272]	; (8001564 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6a8>)
 8001452:	3928      	subs	r1, #40	; 0x28
 8001454:	8011      	strh	r1, [r2, #0]
    if((*reg & USB_EP_DTOG_TX)!=0)
 8001456:	881a      	ldrh	r2, [r3, #0]
 8001458:	0652      	lsls	r2, r2, #25
 800145a:	d505      	bpl.n	8001468 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x5ac>
      *reg=(*reg & USB_EPREG_MASK) | USB_EP_CTR_TX | USB_EP_DTOG_TX;
 800145c:	881a      	ldrh	r2, [r3, #0]
 800145e:	4942      	ldr	r1, [pc, #264]	; (8001568 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6ac>)
 8001460:	400a      	ands	r2, r1
 8001462:	21c0      	movs	r1, #192	; 0xc0
 8001464:	430a      	orrs	r2, r1
 8001466:	801a      	strh	r2, [r3, #0]
    value=*epreg & USB_EPTX_DTOGMASK;
 8001468:	4b35      	ldr	r3, [pc, #212]	; (8001540 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x684>)
 800146a:	4940      	ldr	r1, [pc, #256]	; (800156c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6b0>)
 800146c:	881a      	ldrh	r2, [r3, #0]
 800146e:	400a      	ands	r2, r1
      reg^=USB_EPTX_DTOG2;
 8001470:	2120      	movs	r1, #32
 8001472:	4051      	eors	r1, r2
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001474:	4a3e      	ldr	r2, [pc, #248]	; (8001570 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6b4>)
 8001476:	430a      	orrs	r2, r1
 8001478:	b292      	uxth	r2, r2
 800147a:	801a      	strh	r2, [r3, #0]
    *reg=(*reg & USB_EP_T_MASK) | type;
 800147c:	881a      	ldrh	r2, [r3, #0]
 800147e:	4937      	ldr	r1, [pc, #220]	; (800155c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6a0>)
 8001480:	4011      	ands	r1, r2
 8001482:	2280      	movs	r2, #128	; 0x80
 8001484:	0092      	lsls	r2, r2, #2
 8001486:	430a      	orrs	r2, r1
 8001488:	801a      	strh	r2, [r3, #0]
    *reg=(*reg & USB_EPREG_MASK) | addr | USB_EP_CTR_RX;
 800148a:	881a      	ldrh	r2, [r3, #0]
 800148c:	4934      	ldr	r1, [pc, #208]	; (8001560 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6a4>)
 800148e:	400a      	ands	r2, r1
 8001490:	2180      	movs	r1, #128	; 0x80
 8001492:	0209      	lsls	r1, r1, #8
 8001494:	430a      	orrs	r2, r1
    USBR_BDT[addr].rx.addr=pmaAddress;
 8001496:	2118      	movs	r1, #24
    *reg=(*reg & USB_EPREG_MASK) | addr | USB_EP_CTR_RX;
 8001498:	801a      	strh	r2, [r3, #0]
    USBR_BDT[addr].rx.addr=pmaAddress;
 800149a:	4a32      	ldr	r2, [pc, #200]	; (8001564 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6a8>)
 800149c:	8091      	strh	r1, [r2, #4]
        count=(wNBlocks << 10) | 0x8000;
 800149e:	4935      	ldr	r1, [pc, #212]	; (8001574 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6b8>)
 80014a0:	80d1      	strh	r1, [r2, #6]
    if((*reg & USB_EP_DTOG_RX)!=0)
 80014a2:	881a      	ldrh	r2, [r3, #0]
 80014a4:	0452      	lsls	r2, r2, #17
 80014a6:	d506      	bpl.n	80014b6 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x5fa>
      *reg=(*reg & USB_EPREG_MASK) | USB_EP_CTR_RX | USB_EP_DTOG_RX;
 80014a8:	881a      	ldrh	r2, [r3, #0]
 80014aa:	4933      	ldr	r1, [pc, #204]	; (8001578 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6bc>)
 80014ac:	400a      	ands	r2, r1
 80014ae:	21c0      	movs	r1, #192	; 0xc0
 80014b0:	0209      	lsls	r1, r1, #8
 80014b2:	430a      	orrs	r2, r1
 80014b4:	801a      	strh	r2, [r3, #0]
    value=*epreg & USB_EPRX_DTOGMASK;
 80014b6:	4922      	ldr	r1, [pc, #136]	; (8001540 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x684>)
 80014b8:	4a30      	ldr	r2, [pc, #192]	; (800157c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6c0>)
 80014ba:	880b      	ldrh	r3, [r1, #0]
  size_type size() const { return __slist_size(this->_M_head._M_next); }
 80014bc:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 80014be:	401a      	ands	r2, r3
      reg^=USB_EPRX_DTOG2;
 80014c0:	23c0      	movs	r3, #192	; 0xc0
 80014c2:	019b      	lsls	r3, r3, #6
 80014c4:	4053      	eors	r3, r2
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 80014c6:	4a2e      	ldr	r2, [pc, #184]	; (8001580 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6c4>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	800b      	strh	r3, [r1, #0]
  for ( ; __node != 0; __node = __node->_M_next)
 80014cc:	2c00      	cmp	r4, #0
 80014ce:	d100      	bne.n	80014d2 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x616>
 80014d0:	e509      	b.n	8000ee6 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x2a>
 80014d2:	0023      	movs	r3, r4
 80014d4:	2200      	movs	r2, #0
 80014d6:	681b      	ldr	r3, [r3, #0]
    ++__result;
 80014d8:	3201      	adds	r2, #1
  for ( ; __node != 0; __node = __node->_M_next)
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1fb      	bne.n	80014d6 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x61a>
        if(_slots.size()==1)
 80014de:	2a01      	cmp	r2, #1
 80014e0:	d100      	bne.n	80014e4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x628>
 80014e2:	e266      	b.n	80019b2 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xaf6>
 80014e4:	2701      	movs	r7, #1
 80014e6:	46a8      	mov	r8, r5
 80014e8:	ae10      	add	r6, sp, #64	; 0x40
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 80014ea:	0023      	movs	r3, r4
 80014ec:	0032      	movs	r2, r6
 80014ee:	3308      	adds	r3, #8
 80014f0:	6860      	ldr	r0, [r4, #4]
 80014f2:	cb22      	ldmia	r3!, {r1, r5}
 80014f4:	c222      	stmia	r2!, {r1, r5}
 80014f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80014f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 80014fa:	421f      	tst	r7, r3
 80014fc:	d00a      	beq.n	8001514 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x658>
 80014fe:	105b      	asrs	r3, r3, #1
 8001500:	18c0      	adds	r0, r0, r3
 8001502:	6803      	ldr	r3, [r0, #0]
 8001504:	2100      	movs	r1, #0
 8001506:	589b      	ldr	r3, [r3, r2]
 8001508:	4798      	blx	r3
  void _M_incr() { _M_node = _M_node->_M_next; }
 800150a:	6824      	ldr	r4, [r4, #0]
          for(auto it=_slots.begin();it!=_slots.end();it++)
 800150c:	2c00      	cmp	r4, #0
 800150e:	d1ec      	bne.n	80014ea <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x62e>
 8001510:	4645      	mov	r5, r8
 8001512:	e4e8      	b.n	8000ee6 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x2a>
 8001514:	105b      	asrs	r3, r3, #1
 8001516:	18c0      	adds	r0, r0, r3
 8001518:	2100      	movs	r1, #0
 800151a:	4790      	blx	r2
 800151c:	6824      	ldr	r4, [r4, #0]
 800151e:	2c00      	cmp	r4, #0
 8001520:	d1e3      	bne.n	80014ea <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x62e>
 8001522:	4645      	mov	r5, r8
 8001524:	e4df      	b.n	8000ee6 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x2a>
 8001526:	105b      	asrs	r3, r3, #1
 8001528:	18c0      	adds	r0, r0, r3
 800152a:	2103      	movs	r1, #3
 800152c:	4790      	blx	r2
 800152e:	6824      	ldr	r4, [r4, #0]
 8001530:	2c00      	cmp	r4, #0
 8001532:	d000      	beq.n	8001536 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x67a>
 8001534:	e758      	b.n	80013e8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x52c>
 8001536:	4645      	mov	r5, r8
 8001538:	e4f3      	b.n	8000f22 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x66>
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	ffffbfff 	.word	0xffffbfff
 8001540:	40005c00 	.word	0x40005c00
 8001544:	ffffdfff 	.word	0xffffdfff
 8001548:	ffffbd00 	.word	0xffffbd00
 800154c:	ffffefff 	.word	0xffffefff
 8001550:	fffff7ff 	.word	0xfffff7ff
 8001554:	fffffdff 	.word	0xfffffdff
 8001558:	fffffbff 	.word	0xfffffbff
 800155c:	ffff898f 	.word	0xffff898f
 8001560:	ffff8f8f 	.word	0xffff8f8f
 8001564:	40006000 	.word	0x40006000
 8001568:	ffff8f0f 	.word	0xffff8f0f
 800156c:	ffff8fbf 	.word	0xffff8fbf
 8001570:	ffff8080 	.word	0xffff8080
 8001574:	ffff8400 	.word	0xffff8400
 8001578:	00000f8f 	.word	0x00000f8f
 800157c:	ffffbf8f 	.word	0xffffbf8f
 8001580:	00008080 	.word	0x00008080
 8001584:	105b      	asrs	r3, r3, #1
 8001586:	18c0      	adds	r0, r0, r3
 8001588:	2101      	movs	r1, #1
 800158a:	4790      	blx	r2
 800158c:	6824      	ldr	r4, [r4, #0]
 800158e:	2c00      	cmp	r4, #0
 8001590:	d000      	beq.n	8001594 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6d8>
 8001592:	e670      	b.n	8001276 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x3ba>
 8001594:	4645      	mov	r5, r8
 8001596:	e683      	b.n	80012a0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x3e4>
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8001598:	002b      	movs	r3, r5
 800159a:	a902      	add	r1, sp, #8
 800159c:	3314      	adds	r3, #20
 800159e:	6928      	ldr	r0, [r5, #16]
 80015a0:	cb50      	ldmia	r3!, {r4, r6}
 80015a2:	c150      	stmia	r1!, {r4, r6}
 80015a4:	9b03      	ldr	r3, [sp, #12]
 80015a6:	9c02      	ldr	r4, [sp, #8]
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1, p2, p3); }
 80015a8:	421a      	tst	r2, r3
 80015aa:	d100      	bne.n	80015ae <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6f2>
 80015ac:	e359      	b.n	8001c62 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xda6>
 80015ae:	105b      	asrs	r3, r3, #1
 80015b0:	18c0      	adds	r0, r0, r3
 80015b2:	6803      	ldr	r3, [r0, #0]
 80015b4:	591c      	ldr	r4, [r3, r4]
 80015b6:	003b      	movs	r3, r7
 80015b8:	4ad2      	ldr	r2, [pc, #840]	; (8001904 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa48>)
 80015ba:	2100      	movs	r1, #0
 80015bc:	47a0      	blx	r4
 80015be:	4ad2      	ldr	r2, [pc, #840]	; (8001908 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa4c>)
 80015c0:	4bd2      	ldr	r3, [pc, #840]	; (800190c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa50>)
    value=*epreg & USB_EPRX_DTOGMASK;
 80015c2:	49d3      	ldr	r1, [pc, #844]	; (8001910 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa54>)
 80015c4:	805a      	strh	r2, [r3, #2]
 80015c6:	880b      	ldrh	r3, [r1, #0]
 80015c8:	4ad2      	ldr	r2, [pc, #840]	; (8001914 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa58>)
 80015ca:	401a      	ands	r2, r3
      reg^=USB_EPRX_DTOG2;
 80015cc:	23c0      	movs	r3, #192	; 0xc0
 80015ce:	019b      	lsls	r3, r3, #6
 80015d0:	4053      	eors	r3, r2
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 80015d2:	4ad1      	ldr	r2, [pc, #836]	; (8001918 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa5c>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	800b      	strh	r3, [r1, #0]
 80015d8:	e502      	b.n	8000fe0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 80015da:	105b      	asrs	r3, r3, #1
 80015dc:	18c0      	adds	r0, r0, r3
 80015de:	0039      	movs	r1, r7
 80015e0:	4790      	blx	r2
 80015e2:	6824      	ldr	r4, [r4, #0]
 80015e4:	2c00      	cmp	r4, #0
 80015e6:	d000      	beq.n	80015ea <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x72e>
 80015e8:	e68f      	b.n	800130a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x44e>
 80015ea:	464d      	mov	r5, r9
 80015ec:	e6a3      	b.n	8001336 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x47a>
 80015ee:	105b      	asrs	r3, r3, #1
 80015f0:	18c0      	adds	r0, r0, r3
 80015f2:	2108      	movs	r1, #8
 80015f4:	4790      	blx	r2
 80015f6:	6824      	ldr	r4, [r4, #0]
 80015f8:	2c00      	cmp	r4, #0
 80015fa:	d000      	beq.n	80015fe <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x742>
 80015fc:	e6c5      	b.n	800138a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x4ce>
 80015fe:	4645      	mov	r5, r8
 8001600:	e6d8      	b.n	80013b4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x4f8>
      if(_inEndpointData[0].remaining) {
 8001602:	333e      	adds	r3, #62	; 0x3e
 8001604:	5aeb      	ldrh	r3, [r5, r3]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d000      	beq.n	800160c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x750>
 800160a:	e1e5      	b.n	80019d8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xb1c>
        if((_inEndpointData[0].total % CONTROL_MAX_PACKET_SIZE)==0 &&
 800160c:	2342      	movs	r3, #66	; 0x42
 800160e:	5ae9      	ldrh	r1, [r5, r3]
 8001610:	3b03      	subs	r3, #3
 8001612:	400b      	ands	r3, r1
 8001614:	d120      	bne.n	8001658 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x79c>
 8001616:	2940      	cmp	r1, #64	; 0x40
 8001618:	d91e      	bls.n	8001658 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x79c>
            _inEndpointData[0].total<_setupDataLength) {
 800161a:	2054      	movs	r0, #84	; 0x54
 800161c:	5a28      	ldrh	r0, [r5, r0]
            _inEndpointData[0].total>CONTROL_MAX_PACKET_SIZE &&
 800161e:	4281      	cmp	r1, r0
 8001620:	da1a      	bge.n	8001658 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x79c>
    _inEndpointData[endpointIndex].remaining=length;
 8001622:	49be      	ldr	r1, [pc, #760]	; (800191c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa60>)
 8001624:	642b      	str	r3, [r5, #64]	; 0x40
 8001626:	6469      	str	r1, [r5, #68]	; 0x44
    USBR_BDT[endpointIndex].tx.count=length;
 8001628:	49bd      	ldr	r1, [pc, #756]	; (8001920 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa64>)
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 800162a:	63eb      	str	r3, [r5, #60]	; 0x3c
    USBR_BDT[endpointIndex].tx.count=length;
 800162c:	804b      	strh	r3, [r1, #2]
    value=*epreg & USB_EPTX_DTOGMASK;
 800162e:	8811      	ldrh	r1, [r2, #0]
 8001630:	48bc      	ldr	r0, [pc, #752]	; (8001924 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa68>)
 8001632:	4001      	ands	r1, r0
      reg^=USB_EPTX_DTOG2;
 8001634:	2030      	movs	r0, #48	; 0x30
 8001636:	4041      	eors	r1, r0
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001638:	48bb      	ldr	r0, [pc, #748]	; (8001928 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa6c>)
 800163a:	4301      	orrs	r1, r0
 800163c:	b289      	uxth	r1, r1
 800163e:	8011      	strh	r1, [r2, #0]
        count=wNBlocks << 10;
 8001640:	49b2      	ldr	r1, [pc, #712]	; (800190c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa50>)
 8001642:	804b      	strh	r3, [r1, #2]
    value=*epreg & USB_EPRX_DTOGMASK;
 8001644:	8813      	ldrh	r3, [r2, #0]
 8001646:	49b3      	ldr	r1, [pc, #716]	; (8001914 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa58>)
 8001648:	4019      	ands	r1, r3
      reg^=USB_EPRX_DTOG2;
 800164a:	23c0      	movs	r3, #192	; 0xc0
 800164c:	019b      	lsls	r3, r3, #6
 800164e:	404b      	eors	r3, r1
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001650:	4318      	orrs	r0, r3
 8001652:	b280      	uxth	r0, r0
 8001654:	8010      	strh	r0, [r2, #0]
 8001656:	e4d8      	b.n	800100a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x14e>
          _controlEndpointState=ControlEndpointStateType::STATUS_OUT;
 8001658:	2305      	movs	r3, #5
 800165a:	2200      	movs	r2, #0
 800165c:	63ab      	str	r3, [r5, #56]	; 0x38
 800165e:	4bab      	ldr	r3, [pc, #684]	; (800190c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa50>)
    value=*epreg & USB_EPRX_DTOGMASK;
 8001660:	49ab      	ldr	r1, [pc, #684]	; (8001910 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa54>)
 8001662:	805a      	strh	r2, [r3, #2]
 8001664:	880b      	ldrh	r3, [r1, #0]
 8001666:	4aab      	ldr	r2, [pc, #684]	; (8001914 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa58>)
 8001668:	401a      	ands	r2, r3
      reg^=USB_EPRX_DTOG2;
 800166a:	23c0      	movs	r3, #192	; 0xc0
 800166c:	019b      	lsls	r3, r3, #6
 800166e:	4053      	eors	r3, r2
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001670:	4aa9      	ldr	r2, [pc, #676]	; (8001918 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa5c>)
 8001672:	4313      	orrs	r3, r2
 8001674:	800b      	strh	r3, [r1, #0]
 8001676:	e4c8      	b.n	800100a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x14e>
    *reg=*reg & (~USB_EP_CTR_RX) & USB_EPREG_MASK;
 8001678:	8833      	ldrh	r3, [r6, #0]
 800167a:	4aac      	ldr	r2, [pc, #688]	; (800192c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa70>)
  size_type size() const { return __slist_size(this->_M_head._M_next); }
 800167c:	69ef      	ldr	r7, [r5, #28]
 800167e:	4013      	ands	r3, r2
 8001680:	8033      	strh	r3, [r6, #0]
        static_cast<uint16_t>(USBR_BDT[endpointIndex].rx.getCount()));
 8001682:	4bab      	ldr	r3, [pc, #684]	; (8001930 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa74>)
 8001684:	18e3      	adds	r3, r4, r3
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	9301      	str	r3, [sp, #4]
      return count & 0x3ff;
 800168a:	88db      	ldrh	r3, [r3, #6]
 800168c:	059b      	lsls	r3, r3, #22
 800168e:	0d9b      	lsrs	r3, r3, #22
 8001690:	469a      	mov	sl, r3
  for ( ; __node != 0; __node = __node->_M_next)
 8001692:	2f00      	cmp	r7, #0
 8001694:	d03b      	beq.n	800170e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x852>
 8001696:	003b      	movs	r3, r7
 8001698:	2200      	movs	r2, #0
 800169a:	681b      	ldr	r3, [r3, #0]
    ++__result;
 800169c:	3201      	adds	r2, #1
  for ( ; __node != 0; __node = __node->_M_next)
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1fb      	bne.n	800169a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x7de>
        if(_slots.size()==1)
 80016a2:	2a01      	cmp	r2, #1
 80016a4:	d01e      	beq.n	80016e4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x828>
 80016a6:	ab08      	add	r3, sp, #32
 80016a8:	4698      	mov	r8, r3
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1, p2, p3); }
 80016aa:	2301      	movs	r3, #1
 80016ac:	46a1      	mov	r9, r4
 80016ae:	469b      	mov	fp, r3
 80016b0:	e00a      	b.n	80016c8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x80c>
 80016b2:	105b      	asrs	r3, r3, #1
 80016b4:	18c8      	adds	r0, r1, r3
 80016b6:	6803      	ldr	r3, [r0, #0]
 80016b8:	591c      	ldr	r4, [r3, r4]
 80016ba:	4653      	mov	r3, sl
 80016bc:	4a9d      	ldr	r2, [pc, #628]	; (8001934 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa78>)
 80016be:	4649      	mov	r1, r9
 80016c0:	47a0      	blx	r4
  void _M_incr() { _M_node = _M_node->_M_next; }
 80016c2:	683f      	ldr	r7, [r7, #0]
          for(auto it=_slots.begin();it!=_slots.end();it++)
 80016c4:	2f00      	cmp	r7, #0
 80016c6:	d06c      	beq.n	80017a2 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x8e6>
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 80016c8:	003a      	movs	r2, r7
 80016ca:	4643      	mov	r3, r8
 80016cc:	3208      	adds	r2, #8
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	ca11      	ldmia	r2!, {r0, r4}
 80016d2:	c311      	stmia	r3!, {r0, r4}
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1, p2, p3); }
 80016d4:	465a      	mov	r2, fp
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 80016d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80016d8:	9c08      	ldr	r4, [sp, #32]
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1, p2, p3); }
 80016da:	421a      	tst	r2, r3
 80016dc:	d1e9      	bne.n	80016b2 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x7f6>
 80016de:	1058      	asrs	r0, r3, #1
 80016e0:	1808      	adds	r0, r1, r0
 80016e2:	e7ea      	b.n	80016ba <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x7fe>
 80016e4:	692b      	ldr	r3, [r5, #16]
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 80016e6:	a906      	add	r1, sp, #24
 80016e8:	469c      	mov	ip, r3
 80016ea:	002b      	movs	r3, r5
 80016ec:	3314      	adds	r3, #20
 80016ee:	cb81      	ldmia	r3!, {r0, r7}
 80016f0:	c181      	stmia	r1!, {r0, r7}
 80016f2:	9b07      	ldr	r3, [sp, #28]
 80016f4:	9f06      	ldr	r7, [sp, #24]
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1, p2, p3); }
 80016f6:	421a      	tst	r2, r3
 80016f8:	d100      	bne.n	80016fc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x840>
 80016fa:	e2ab      	b.n	8001c54 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xd98>
 80016fc:	105b      	asrs	r3, r3, #1
 80016fe:	4463      	add	r3, ip
 8001700:	0018      	movs	r0, r3
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	59df      	ldr	r7, [r3, r7]
 8001706:	4653      	mov	r3, sl
 8001708:	4a8a      	ldr	r2, [pc, #552]	; (8001934 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa78>)
 800170a:	0021      	movs	r1, r4
 800170c:	47b8      	blx	r7
        count=wNBlocks << 10;
 800170e:	2380      	movs	r3, #128	; 0x80
 8001710:	9a01      	ldr	r2, [sp, #4]
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	80d3      	strh	r3, [r2, #6]
    value=*epreg & USB_EPRX_DTOGMASK;
 8001716:	8833      	ldrh	r3, [r6, #0]
 8001718:	4a7e      	ldr	r2, [pc, #504]	; (8001914 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa58>)
 800171a:	401a      	ands	r2, r3
      reg^=USB_EPRX_DTOG2;
 800171c:	23c0      	movs	r3, #192	; 0xc0
 800171e:	019b      	lsls	r3, r3, #6
 8001720:	4053      	eors	r3, r2
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001722:	4a7d      	ldr	r2, [pc, #500]	; (8001918 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa5c>)
 8001724:	4313      	orrs	r3, r2
 8001726:	8033      	strh	r3, [r6, #0]
 8001728:	e486      	b.n	8001038 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x17c>
  size_type size() const { return __slist_size(this->_M_head._M_next); }
 800172a:	68ee      	ldr	r6, [r5, #12]
  for ( ; __node != 0; __node = __node->_M_next)
 800172c:	2e00      	cmp	r6, #0
 800172e:	d100      	bne.n	8001732 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x876>
 8001730:	e456      	b.n	8000fe0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
 8001732:	0033      	movs	r3, r6
 8001734:	2100      	movs	r1, #0
 8001736:	681b      	ldr	r3, [r3, #0]
    ++__result;
 8001738:	3101      	adds	r1, #1
  for ( ; __node != 0; __node = __node->_M_next)
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1fb      	bne.n	8001736 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x87a>
        if(_slots.size()==1)
 800173e:	2901      	cmp	r1, #1
 8001740:	d100      	bne.n	8001744 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x888>
 8001742:	e209      	b.n	8001b58 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc9c>
 8001744:	ab0c      	add	r3, sp, #48	; 0x30
 8001746:	4698      	mov	r8, r3
 8001748:	4663      	mov	r3, ip
 800174a:	191f      	adds	r7, r3, r4
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1, p2); }
 800174c:	2301      	movs	r3, #1
 800174e:	46a3      	mov	fp, r4
 8001750:	4699      	mov	r9, r3
 8001752:	00bf      	lsls	r7, r7, #2
 8001754:	19ef      	adds	r7, r5, r7
 8001756:	3742      	adds	r7, #66	; 0x42
 8001758:	9501      	str	r5, [sp, #4]
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 800175a:	0031      	movs	r1, r6
 800175c:	4643      	mov	r3, r8
 800175e:	3108      	adds	r1, #8
 8001760:	883a      	ldrh	r2, [r7, #0]
 8001762:	6870      	ldr	r0, [r6, #4]
 8001764:	c930      	ldmia	r1!, {r4, r5}
 8001766:	c330      	stmia	r3!, {r4, r5}
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1, p2); }
 8001768:	4649      	mov	r1, r9
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 800176a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800176c:	469a      	mov	sl, r3
 800176e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1, p2); }
 8001770:	4219      	tst	r1, r3
 8001772:	d00c      	beq.n	800178e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x8d2>
 8001774:	4651      	mov	r1, sl
 8001776:	105b      	asrs	r3, r3, #1
 8001778:	18c0      	adds	r0, r0, r3
 800177a:	6803      	ldr	r3, [r0, #0]
 800177c:	585b      	ldr	r3, [r3, r1]
 800177e:	4659      	mov	r1, fp
 8001780:	4798      	blx	r3
  void _M_incr() { _M_node = _M_node->_M_next; }
 8001782:	6836      	ldr	r6, [r6, #0]
          for(auto it=_slots.begin();it!=_slots.end();it++)
 8001784:	2e00      	cmp	r6, #0
 8001786:	d1e8      	bne.n	800175a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x89e>
 8001788:	9d01      	ldr	r5, [sp, #4]
 800178a:	f7ff fc29 	bl	8000fe0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
 800178e:	105b      	asrs	r3, r3, #1
 8001790:	18c0      	adds	r0, r0, r3
 8001792:	4659      	mov	r1, fp
 8001794:	47d0      	blx	sl
 8001796:	6836      	ldr	r6, [r6, #0]
 8001798:	2e00      	cmp	r6, #0
 800179a:	d1de      	bne.n	800175a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x89e>
 800179c:	9d01      	ldr	r5, [sp, #4]
 800179e:	f7ff fc1f 	bl	8000fe0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
 80017a2:	464c      	mov	r4, r9
 80017a4:	e7b3      	b.n	800170e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x852>
          notify=UsbStatusType::STATE_DEFAULT;
 80017a6:	2705      	movs	r7, #5
      switch(newState) {
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d100      	bne.n	80017ae <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x8f2>
 80017ac:	e59b      	b.n	80012e6 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x42a>
 80017ae:	f7ff fbac 	bl	8000f0a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x4e>
      return count & 0x3ff;
 80017b2:	4b56      	ldr	r3, [pc, #344]	; (800190c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa50>)
 80017b4:	885a      	ldrh	r2, [r3, #2]
    _setupDataLength=USBR_BDT[0].rx.getCount();
 80017b6:	2354      	movs	r3, #84	; 0x54
 80017b8:	0592      	lsls	r2, r2, #22
 80017ba:	0d92      	lsrs	r2, r2, #22
 80017bc:	52ea      	strh	r2, [r5, r3]
    _controlEndpointState=ControlEndpointStateType::SETUP;
 80017be:	3b53      	subs	r3, #83	; 0x53
    for(i=(byteCount+1)/2;i>0;i--)
 80017c0:	3201      	adds	r2, #1
    _controlEndpointState=ControlEndpointStateType::SETUP;
 80017c2:	63ab      	str	r3, [r5, #56]	; 0x38
    for(i=(byteCount+1)/2;i>0;i--)
 80017c4:	1052      	asrs	r2, r2, #1
 80017c6:	d101      	bne.n	80017cc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x910>
 80017c8:	f7ff fbb8 	bl	8000f3c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x80>
 80017cc:	4b4d      	ldr	r3, [pc, #308]	; (8001904 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa48>)
 80017ce:	ac28      	add	r4, sp, #160	; 0xa0
      *destptr++=*srcptr++;
 80017d0:	4959      	ldr	r1, [pc, #356]	; (8001938 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa7c>)
 80017d2:	8818      	ldrh	r0, [r3, #0]
 80017d4:	1859      	adds	r1, r3, r1
    for(i=(byteCount+1)/2;i>0;i--)
 80017d6:	3a01      	subs	r2, #1
      *destptr++=*srcptr++;
 80017d8:	5260      	strh	r0, [r4, r1]
 80017da:	3302      	adds	r3, #2
    for(i=(byteCount+1)/2;i>0;i--)
 80017dc:	2a00      	cmp	r2, #0
 80017de:	d1f7      	bne.n	80017d0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x914>
 80017e0:	f7ff fbad 	bl	8000f3e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x82>
          notify=UsbStatusType::STATE_ADDRESSED;
 80017e4:	2706      	movs	r7, #6
 80017e6:	e57e      	b.n	80012e6 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x42a>
    switch(header.bRequest) {
 80017e8:	2809      	cmp	r0, #9
 80017ea:	d809      	bhi.n	8001800 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x944>
 80017ec:	4b53      	ldr	r3, [pc, #332]	; (800193c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa80>)
 80017ee:	0080      	lsls	r0, r0, #2
 80017f0:	581b      	ldr	r3, [r3, r0]
 80017f2:	469f      	mov	pc, r3
    if((_configurationIndex=header.wValue)>1)    // just one configuration here
 80017f4:	235a      	movs	r3, #90	; 0x5a
 80017f6:	b2ff      	uxtb	r7, r7
 80017f8:	54ef      	strb	r7, [r5, r3]
 80017fa:	2f01      	cmp	r7, #1
 80017fc:	d800      	bhi.n	8001800 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x944>
 80017fe:	e257      	b.n	8001cb0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xdf4>
    value=*epreg & USB_EPRX_DTOGMASK;
 8001800:	4943      	ldr	r1, [pc, #268]	; (8001910 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa54>)
 8001802:	4a44      	ldr	r2, [pc, #272]	; (8001914 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa58>)
 8001804:	880b      	ldrh	r3, [r1, #0]
    value=*epreg & USB_EPTX_DTOGMASK;
 8001806:	4847      	ldr	r0, [pc, #284]	; (8001924 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa68>)
    value=*epreg & USB_EPRX_DTOGMASK;
 8001808:	401a      	ands	r2, r3
      reg^=USB_EPRX_DTOG1;
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	015b      	lsls	r3, r3, #5
 800180e:	4053      	eors	r3, r2
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001810:	4a45      	ldr	r2, [pc, #276]	; (8001928 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa6c>)
 8001812:	4313      	orrs	r3, r2
 8001814:	b29b      	uxth	r3, r3
 8001816:	800b      	strh	r3, [r1, #0]
    value=*epreg & USB_EPTX_DTOGMASK;
 8001818:	880b      	ldrh	r3, [r1, #0]
 800181a:	4003      	ands	r3, r0
      reg^=USB_EPTX_DTOG1;
 800181c:	2010      	movs	r0, #16
 800181e:	4043      	eors	r3, r0
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001820:	431a      	orrs	r2, r3
 8001822:	b292      	uxth	r2, r2
 8001824:	800a      	strh	r2, [r1, #0]
 8001826:	f7ff fbdb 	bl	8000fe0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
    if(header.wLength!=1)
 800182a:	2c01      	cmp	r4, #1
 800182c:	d1e8      	bne.n	8001800 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x944>
      switch(_deviceState) {
 800182e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001830:	2b02      	cmp	r3, #2
 8001832:	d100      	bne.n	8001836 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x97a>
 8001834:	e30b      	b.n	8001e4e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf92>
 8001836:	2b03      	cmp	r3, #3
 8001838:	d111      	bne.n	800185e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x9a2>
    _controlEndpointState=ControlEndpointStateType::DATA_IN;
 800183a:	2302      	movs	r3, #2
 800183c:	63ab      	str	r3, [r5, #56]	; 0x38
          sendControlData(&_configurationIndex,1);
 800183e:	002b      	movs	r3, r5
 8001840:	335a      	adds	r3, #90	; 0x5a
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 8001842:	63eb      	str	r3, [r5, #60]	; 0x3c
    _inEndpointData[endpointIndex].remaining=length;
 8001844:	4b3e      	ldr	r3, [pc, #248]	; (8001940 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa84>)
 8001846:	f7ff fbc5 	bl	8000fd4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x118>
    switch(header.wValue >> 8) {
 800184a:	123b      	asrs	r3, r7, #8
 800184c:	2b02      	cmp	r3, #2
 800184e:	d100      	bne.n	8001852 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x996>
 8001850:	e2fa      	b.n	8001e48 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf8c>
 8001852:	2b03      	cmp	r3, #3
 8001854:	d100      	bne.n	8001858 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x99c>
 8001856:	e2ef      	b.n	8001e38 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf7c>
 8001858:	2b01      	cmp	r3, #1
 800185a:	d100      	bne.n	800185e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x9a2>
 800185c:	e2d2      	b.n	8001e04 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf48>
    value=*epreg & USB_EPRX_DTOGMASK;
 800185e:	492c      	ldr	r1, [pc, #176]	; (8001910 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa54>)
 8001860:	4a2c      	ldr	r2, [pc, #176]	; (8001914 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa58>)
 8001862:	880b      	ldrh	r3, [r1, #0]
    value=*epreg & USB_EPTX_DTOGMASK;
 8001864:	482f      	ldr	r0, [pc, #188]	; (8001924 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa68>)
    value=*epreg & USB_EPRX_DTOGMASK;
 8001866:	401a      	ands	r2, r3
      reg^=USB_EPRX_DTOG1;
 8001868:	2380      	movs	r3, #128	; 0x80
 800186a:	015b      	lsls	r3, r3, #5
 800186c:	4053      	eors	r3, r2
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 800186e:	4a2e      	ldr	r2, [pc, #184]	; (8001928 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa6c>)
 8001870:	4313      	orrs	r3, r2
 8001872:	b29b      	uxth	r3, r3
 8001874:	800b      	strh	r3, [r1, #0]
    value=*epreg & USB_EPTX_DTOGMASK;
 8001876:	880b      	ldrh	r3, [r1, #0]
 8001878:	4018      	ands	r0, r3
      reg^=USB_EPTX_DTOG1;
 800187a:	2310      	movs	r3, #16
 800187c:	4043      	eors	r3, r0
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 800187e:	431a      	orrs	r2, r3
 8001880:	b292      	uxth	r2, r2
 8001882:	800a      	strh	r2, [r1, #0]
 8001884:	f7ff fbac 	bl	8000fe0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
    if(header.wIndex==0 && header.wLength==0) {
 8001888:	4663      	mov	r3, ip
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1b8      	bne.n	8001800 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x944>
 800188e:	2c00      	cmp	r4, #0
 8001890:	d1b6      	bne.n	8001800 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x944>
      if(_deviceState==DeviceStateType::CONFIGURED)
 8001892:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001894:	2b03      	cmp	r3, #3
 8001896:	d0e2      	beq.n	800185e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x9a2>
        address=header.wValue & 0x7F;
 8001898:	237f      	movs	r3, #127	; 0x7f
 800189a:	401f      	ands	r7, r3
    if(address==0)
 800189c:	d000      	beq.n	80018a0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x9e4>
 800189e:	e2e7      	b.n	8001e70 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xfb4>
      USBR->DADDR=USB_DADDR_EF;
 80018a0:	2180      	movs	r1, #128	; 0x80
 80018a2:	4a1b      	ldr	r2, [pc, #108]	; (8001910 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa54>)
 80018a4:	3b33      	subs	r3, #51	; 0x33
 80018a6:	52d1      	strh	r1, [r2, r3]
    _inEndpointData[endpointIndex].total=length;
 80018a8:	4662      	mov	r2, ip
    _controlEndpointState=ControlEndpointStateType::STATUS_IN;
 80018aa:	3b48      	subs	r3, #72	; 0x48
 80018ac:	63ab      	str	r3, [r5, #56]	; 0x38
    _inEndpointData[endpointIndex].total=length;
 80018ae:	333e      	adds	r3, #62	; 0x3e
 80018b0:	52ea      	strh	r2, [r5, r3]
    _inEndpointData[endpointIndex].remaining=length;
 80018b2:	3b02      	subs	r3, #2
 80018b4:	52ea      	strh	r2, [r5, r3]
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 80018b6:	4662      	mov	r2, ip
 80018b8:	63ea      	str	r2, [r5, #60]	; 0x3c
    _inEndpointData[endpointIndex].pmaAddress=pmaInAddress;
 80018ba:	2246      	movs	r2, #70	; 0x46
 80018bc:	3928      	subs	r1, #40	; 0x28
 80018be:	52a9      	strh	r1, [r5, r2]
    _inEndpointData[endpointIndex].maxPacketSize=maxPacketSize;
 80018c0:	3a02      	subs	r2, #2
 80018c2:	52ab      	strh	r3, [r5, r2]
    continueSendData(endpointIndex);
 80018c4:	0028      	movs	r0, r5
 80018c6:	f7fe fc65 	bl	8000194 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE16continueSendDataEh.constprop.82>
    if(_deviceState!=newState) {
 80018ca:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d101      	bne.n	80018d4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa18>
 80018d0:	f7ff fb86 	bl	8000fe0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
      _deviceState=newState;
 80018d4:	2301      	movs	r3, #1
 80018d6:	632b      	str	r3, [r5, #48]	; 0x30
          notify=UsbStatusType::STATE_DEFAULT;
 80018d8:	3304      	adds	r3, #4
 80018da:	9324      	str	r3, [sp, #144]	; 0x90

        default:
          return;
      }

      UsbStatusEventSender.raiseEvent(notify);
 80018dc:	0028      	movs	r0, r5
 80018de:	a924      	add	r1, sp, #144	; 0x90
 80018e0:	3020      	adds	r0, #32
 80018e2:	f7ff f97f 	bl	8000be4 <_ZNK4wink6signalINS_4slotIFvN9stm32plus13UsbStatusTypeEEEEE10raiseEventIJRS3_EEEvDpOT_>
 80018e6:	f7ff fb7b 	bl	8000fe0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
    if(header.wValue==USB_FEATURE_REMOTE_WAKEUP) {
 80018ea:	2f01      	cmp	r7, #1
 80018ec:	d001      	beq.n	80018f2 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa36>
 80018ee:	f7ff fb77 	bl	8000fe0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
      _remoteWakeup=true;
 80018f2:	235b      	movs	r3, #91	; 0x5b
 80018f4:	54ef      	strb	r7, [r5, r3]
    _controlEndpointState=ControlEndpointStateType::STATUS_IN;
 80018f6:	3b57      	subs	r3, #87	; 0x57
 80018f8:	63ab      	str	r3, [r5, #56]	; 0x38
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 80018fa:	2300      	movs	r3, #0
 80018fc:	63eb      	str	r3, [r5, #60]	; 0x3c
 80018fe:	f7ff fb69 	bl	8000fd4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x118>
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	40006018 	.word	0x40006018
 8001908:	ffff8400 	.word	0xffff8400
 800190c:	40006004 	.word	0x40006004
 8001910:	40005c00 	.word	0x40005c00
 8001914:	ffffbf8f 	.word	0xffffbf8f
 8001918:	00008080 	.word	0x00008080
 800191c:	00580040 	.word	0x00580040
 8001920:	40006000 	.word	0x40006000
 8001924:	ffff8fbf 	.word	0xffff8fbf
 8001928:	ffff8080 	.word	0xffff8080
 800192c:	00000f8f 	.word	0x00000f8f
 8001930:	08000c00 	.word	0x08000c00
 8001934:	400060d8 	.word	0x400060d8
 8001938:	bfff9fe8 	.word	0xbfff9fe8
 800193c:	08003240 	.word	0x08003240
 8001940:	00010001 	.word	0x00010001
    if(_deviceState==DeviceStateType::ADDRESSED || _deviceState==DeviceStateType::CONFIGURED) {
 8001944:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001946:	3b02      	subs	r3, #2
 8001948:	2b01      	cmp	r3, #1
 800194a:	d901      	bls.n	8001950 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa94>
 800194c:	f7ff fb48 	bl	8000fe0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
      status=0;
 8001950:	2200      	movs	r2, #0
 8001952:	4bcb      	ldr	r3, [pc, #812]	; (8001c80 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xdc4>)
 8001954:	701a      	strb	r2, [r3, #0]
      if(_remoteWakeup)
 8001956:	325b      	adds	r2, #91	; 0x5b
 8001958:	5caa      	ldrb	r2, [r5, r2]
 800195a:	2a00      	cmp	r2, #0
 800195c:	d001      	beq.n	8001962 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xaa6>
        status|=USB_CONFIG_REMOTE_WAKEUP;
 800195e:	2202      	movs	r2, #2
 8001960:	701a      	strb	r2, [r3, #0]
    _controlEndpointState=ControlEndpointStateType::DATA_IN;
 8001962:	2202      	movs	r2, #2
 8001964:	63aa      	str	r2, [r5, #56]	; 0x38
 8001966:	e76c      	b.n	8001842 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x986>
    if(_deviceState==DeviceStateType::ADDRESSED || _deviceState==DeviceStateType::CONFIGURED) {
 8001968:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800196a:	3b02      	subs	r3, #2
 800196c:	2b01      	cmp	r3, #1
 800196e:	d900      	bls.n	8001972 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xab6>
 8001970:	e746      	b.n	8001800 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x944>
      if(header.wValue==USB_FEATURE_REMOTE_WAKEUP) {
 8001972:	2f01      	cmp	r7, #1
 8001974:	d001      	beq.n	800197a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xabe>
 8001976:	f7ff fb33 	bl	8000fe0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
        _remoteWakeup=false;
 800197a:	2300      	movs	r3, #0
 800197c:	225b      	movs	r2, #91	; 0x5b
 800197e:	54ab      	strb	r3, [r5, r2]
    _controlEndpointState=ControlEndpointStateType::STATUS_IN;
 8001980:	3a57      	subs	r2, #87	; 0x57
 8001982:	63aa      	str	r2, [r5, #56]	; 0x38
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 8001984:	63eb      	str	r3, [r5, #60]	; 0x3c
 8001986:	f7ff fb25 	bl	8000fd4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x118>
          notify=UsbStatusType::STATE_CONFIGURED;
 800198a:	2707      	movs	r7, #7
 800198c:	e4ab      	b.n	80012e6 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x42a>
 800198e:	6a28      	ldr	r0, [r5, #32]
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8001990:	ab26      	add	r3, sp, #152	; 0x98
 8001992:	3524      	adds	r5, #36	; 0x24
 8001994:	cd12      	ldmia	r5!, {r1, r4}
 8001996:	c312      	stmia	r3!, {r1, r4}
 8001998:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800199a:	9c26      	ldr	r4, [sp, #152]	; 0x98
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 800199c:	421a      	tst	r2, r3
 800199e:	d100      	bne.n	80019a2 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xae6>
 80019a0:	e0cb      	b.n	8001b3a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc7e>
 80019a2:	105b      	asrs	r3, r3, #1
 80019a4:	18c0      	adds	r0, r0, r3
 80019a6:	6803      	ldr	r3, [r0, #0]
 80019a8:	591c      	ldr	r4, [r3, r4]
 80019aa:	2104      	movs	r1, #4
 80019ac:	47a0      	blx	r4
 80019ae:	f7ff fabe 	bl	8000f2e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x72>
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 80019b2:	002b      	movs	r3, r5
 80019b4:	a90e      	add	r1, sp, #56	; 0x38
 80019b6:	3324      	adds	r3, #36	; 0x24
 80019b8:	6a28      	ldr	r0, [r5, #32]
 80019ba:	cb50      	ldmia	r3!, {r4, r6}
 80019bc:	c150      	stmia	r1!, {r4, r6}
 80019be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80019c0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 80019c2:	421a      	tst	r2, r3
 80019c4:	d100      	bne.n	80019c8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xb0c>
 80019c6:	e0bb      	b.n	8001b40 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc84>
 80019c8:	105b      	asrs	r3, r3, #1
 80019ca:	18c0      	adds	r0, r0, r3
 80019cc:	6803      	ldr	r3, [r0, #0]
 80019ce:	591c      	ldr	r4, [r3, r4]
 80019d0:	2100      	movs	r1, #0
 80019d2:	47a0      	blx	r4
 80019d4:	f7ff fa87 	bl	8000ee6 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x2a>
    if((length=ep.remaining)>ep.maxPacketSize)
 80019d8:	5a6e      	ldrh	r6, [r5, r1]
 80019da:	0030      	movs	r0, r6
 80019dc:	42b3      	cmp	r3, r6
 80019de:	dc01      	bgt.n	80019e4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xb28>
 80019e0:	0018      	movs	r0, r3
 80019e2:	001e      	movs	r6, r3
    pdwVal=reinterpret_cast<uint16_t *>(BTABLE_BASE+ep.pmaAddress);
 80019e4:	2246      	movs	r2, #70	; 0x46
 80019e6:	5aac      	ldrh	r4, [r5, r2]
 80019e8:	4aa6      	ldr	r2, [pc, #664]	; (8001c84 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xdc8>)
    n=(length+1)/2;
 80019ea:	3001      	adds	r0, #1
    pdwVal=reinterpret_cast<uint16_t *>(BTABLE_BASE+ep.pmaAddress);
 80019ec:	4694      	mov	ip, r2
    n=(length+1)/2;
 80019ee:	1040      	asrs	r0, r0, #1
    pdwVal=reinterpret_cast<uint16_t *>(BTABLE_BASE+ep.pmaAddress);
 80019f0:	4464      	add	r4, ip
    dataBytes=ep.ptr;
 80019f2:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    for(i=n;i!=0;i--) {
 80019f4:	2800      	cmp	r0, #0
 80019f6:	d00c      	beq.n	8001a12 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xb56>
      word=dataBytes[0] | ((uint16_t)dataBytes[1] << 8);
 80019f8:	784a      	ldrb	r2, [r1, #1]
 80019fa:	780b      	ldrb	r3, [r1, #0]
 80019fc:	0212      	lsls	r2, r2, #8
 80019fe:	4313      	orrs	r3, r2
    for(i=n;i!=0;i--) {
 8001a00:	3801      	subs	r0, #1
      *pdwVal++=word;
 8001a02:	8023      	strh	r3, [r4, #0]
      dataBytes+=2;
 8001a04:	3102      	adds	r1, #2
 8001a06:	3402      	adds	r4, #2
    for(i=n;i!=0;i--) {
 8001a08:	2800      	cmp	r0, #0
 8001a0a:	d1f5      	bne.n	80019f8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xb3c>
 8001a0c:	2340      	movs	r3, #64	; 0x40
 8001a0e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8001a10:	5aeb      	ldrh	r3, [r5, r3]
    ep.remaining-=length;
 8001a12:	2240      	movs	r2, #64	; 0x40
    ep.ptr+=length;
 8001a14:	1989      	adds	r1, r1, r6
    ep.remaining-=length;
 8001a16:	1b9b      	subs	r3, r3, r6
    ep.ptr+=length;
 8001a18:	63e9      	str	r1, [r5, #60]	; 0x3c
    ep.remaining-=length;
 8001a1a:	52ab      	strh	r3, [r5, r2]
    USBR_BDT[endpointIndex].tx.count=length;
 8001a1c:	4b99      	ldr	r3, [pc, #612]	; (8001c84 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xdc8>)
    value=*epreg & USB_EPTX_DTOGMASK;
 8001a1e:	499a      	ldr	r1, [pc, #616]	; (8001c88 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xdcc>)
    USBR_BDT[endpointIndex].tx.count=length;
 8001a20:	805e      	strh	r6, [r3, #2]
    value=*epreg & USB_EPTX_DTOGMASK;
 8001a22:	880b      	ldrh	r3, [r1, #0]
 8001a24:	4a99      	ldr	r2, [pc, #612]	; (8001c8c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xdd0>)
        count=wNBlocks << 10;
 8001a26:	2000      	movs	r0, #0
 8001a28:	4013      	ands	r3, r2
      reg^=USB_EPTX_DTOG2;
 8001a2a:	2230      	movs	r2, #48	; 0x30
 8001a2c:	4053      	eors	r3, r2
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001a2e:	4a98      	ldr	r2, [pc, #608]	; (8001c90 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xdd4>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	800b      	strh	r3, [r1, #0]
 8001a36:	4b97      	ldr	r3, [pc, #604]	; (8001c94 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xdd8>)
 8001a38:	8058      	strh	r0, [r3, #2]
    value=*epreg & USB_EPRX_DTOGMASK;
 8001a3a:	880b      	ldrh	r3, [r1, #0]
 8001a3c:	4896      	ldr	r0, [pc, #600]	; (8001c98 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xddc>)
 8001a3e:	4018      	ands	r0, r3
      reg^=USB_EPRX_DTOG2;
 8001a40:	23c0      	movs	r3, #192	; 0xc0
 8001a42:	019b      	lsls	r3, r3, #6
 8001a44:	4043      	eors	r3, r0
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001a46:	431a      	orrs	r2, r3
 8001a48:	b292      	uxth	r2, r2
 8001a4a:	800a      	strh	r2, [r1, #0]
 8001a4c:	f7ff fadd 	bl	800100a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x14e>
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8001a50:	002b      	movs	r3, r5
 8001a52:	a922      	add	r1, sp, #136	; 0x88
 8001a54:	3324      	adds	r3, #36	; 0x24
 8001a56:	6a28      	ldr	r0, [r5, #32]
 8001a58:	cb50      	ldmia	r3!, {r4, r6}
 8001a5a:	c150      	stmia	r1!, {r4, r6}
 8001a5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8001a5e:	9c22      	ldr	r4, [sp, #136]	; 0x88
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8001a60:	421a      	tst	r2, r3
 8001a62:	d076      	beq.n	8001b52 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc96>
 8001a64:	105b      	asrs	r3, r3, #1
 8001a66:	18c0      	adds	r0, r0, r3
 8001a68:	6803      	ldr	r3, [r0, #0]
 8001a6a:	591c      	ldr	r4, [r3, r4]
 8001a6c:	2103      	movs	r1, #3
 8001a6e:	47a0      	blx	r4
 8001a70:	f7ff fa57 	bl	8000f22 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x66>
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8001a74:	002b      	movs	r3, r5
 8001a76:	a912      	add	r1, sp, #72	; 0x48
 8001a78:	3324      	adds	r3, #36	; 0x24
 8001a7a:	6a28      	ldr	r0, [r5, #32]
 8001a7c:	cb50      	ldmia	r3!, {r4, r6}
 8001a7e:	c150      	stmia	r1!, {r4, r6}
 8001a80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001a82:	9c12      	ldr	r4, [sp, #72]	; 0x48
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8001a84:	421a      	tst	r2, r3
 8001a86:	d05e      	beq.n	8001b46 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc8a>
 8001a88:	105b      	asrs	r3, r3, #1
 8001a8a:	18c0      	adds	r0, r0, r3
 8001a8c:	6803      	ldr	r3, [r0, #0]
 8001a8e:	591c      	ldr	r4, [r3, r4]
 8001a90:	2101      	movs	r1, #1
 8001a92:	47a0      	blx	r4
 8001a94:	f7ff fa2d 	bl	8000ef2 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x36>
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8001a98:	002b      	movs	r3, r5
 8001a9a:	a916      	add	r1, sp, #88	; 0x58
 8001a9c:	3324      	adds	r3, #36	; 0x24
 8001a9e:	6a28      	ldr	r0, [r5, #32]
 8001aa0:	cb50      	ldmia	r3!, {r4, r6}
 8001aa2:	c150      	stmia	r1!, {r4, r6}
 8001aa4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001aa6:	9c16      	ldr	r4, [sp, #88]	; 0x58
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8001aa8:	421a      	tst	r2, r3
 8001aaa:	d04f      	beq.n	8001b4c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc90>
 8001aac:	105b      	asrs	r3, r3, #1
 8001aae:	18c0      	adds	r0, r0, r3
 8001ab0:	6803      	ldr	r3, [r0, #0]
 8001ab2:	591c      	ldr	r4, [r3, r4]
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	47a0      	blx	r4
 8001ab8:	f7ff fa21 	bl	8000efe <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x42>
    value=*epreg & USB_EPRX_DTOGMASK;
 8001abc:	8813      	ldrh	r3, [r2, #0]
 8001abe:	4976      	ldr	r1, [pc, #472]	; (8001c98 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xddc>)
 8001ac0:	4019      	ands	r1, r3
      reg^=USB_EPRX_DTOG1;
 8001ac2:	2380      	movs	r3, #128	; 0x80
 8001ac4:	015b      	lsls	r3, r3, #5
 8001ac6:	404b      	eors	r3, r1
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001ac8:	4974      	ldr	r1, [pc, #464]	; (8001c9c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xde0>)
 8001aca:	430b      	orrs	r3, r1
 8001acc:	8013      	strh	r3, [r2, #0]
 8001ace:	f7ff fa87 	bl	8000fe0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	a91a      	add	r1, sp, #104	; 0x68
 8001ad6:	3324      	adds	r3, #36	; 0x24
 8001ad8:	6a28      	ldr	r0, [r5, #32]
 8001ada:	cb50      	ldmia	r3!, {r4, r6}
 8001adc:	c150      	stmia	r1!, {r4, r6}
 8001ade:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001ae0:	9c1a      	ldr	r4, [sp, #104]	; 0x68
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8001ae2:	421a      	tst	r2, r3
 8001ae4:	d051      	beq.n	8001b8a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xcce>
 8001ae6:	105b      	asrs	r3, r3, #1
 8001ae8:	18c0      	adds	r0, r0, r3
 8001aea:	6803      	ldr	r3, [r0, #0]
 8001aec:	591c      	ldr	r4, [r3, r4]
 8001aee:	0039      	movs	r1, r7
 8001af0:	47a0      	blx	r4
 8001af2:	f7ff fa0a 	bl	8000f0a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x4e>
    if(_deviceState==DeviceStateType::CONFIGURED && (header.wIndex & 0xff)<=1)
 8001af6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d000      	beq.n	8001afe <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc42>
 8001afc:	e680      	b.n	8001800 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x944>
 8001afe:	4662      	mov	r2, ip
 8001b00:	33fc      	adds	r3, #252	; 0xfc
 8001b02:	4013      	ands	r3, r2
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d900      	bls.n	8001b0a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc4e>
 8001b08:	e67a      	b.n	8001800 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x944>
      handleSetup(header);
 8001b0a:	0031      	movs	r1, r6
 8001b0c:	0028      	movs	r0, r5
 8001b0e:	f7ff f8b1 	bl	8000c74 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11handleSetupERKNS_14UsbSetupHeaderE>
 8001b12:	f7ff fa65 	bl	8000fe0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8001b16:	0029      	movs	r1, r5
 8001b18:	ab1e      	add	r3, sp, #120	; 0x78
 8001b1a:	3124      	adds	r1, #36	; 0x24
 8001b1c:	6a28      	ldr	r0, [r5, #32]
 8001b1e:	c950      	ldmia	r1!, {r4, r6}
 8001b20:	c350      	stmia	r3!, {r4, r6}
 8001b22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001b24:	9c1e      	ldr	r4, [sp, #120]	; 0x78
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1); }
 8001b26:	421a      	tst	r2, r3
 8001b28:	d032      	beq.n	8001b90 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xcd4>
 8001b2a:	105b      	asrs	r3, r3, #1
 8001b2c:	18c0      	adds	r0, r0, r3
 8001b2e:	6803      	ldr	r3, [r0, #0]
 8001b30:	591c      	ldr	r4, [r3, r4]
 8001b32:	2108      	movs	r1, #8
 8001b34:	47a0      	blx	r4
 8001b36:	f7ff f9ee 	bl	8000f16 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x5a>
 8001b3a:	105b      	asrs	r3, r3, #1
 8001b3c:	18c0      	adds	r0, r0, r3
 8001b3e:	e734      	b.n	80019aa <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xaee>
 8001b40:	105b      	asrs	r3, r3, #1
 8001b42:	18c0      	adds	r0, r0, r3
 8001b44:	e744      	b.n	80019d0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xb14>
 8001b46:	105b      	asrs	r3, r3, #1
 8001b48:	18c0      	adds	r0, r0, r3
 8001b4a:	e7a1      	b.n	8001a90 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xbd4>
 8001b4c:	105b      	asrs	r3, r3, #1
 8001b4e:	18c0      	adds	r0, r0, r3
 8001b50:	e7b0      	b.n	8001ab4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xbf8>
 8001b52:	105b      	asrs	r3, r3, #1
 8001b54:	18c0      	adds	r0, r0, r3
 8001b56:	e789      	b.n	8001a6c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xbb0>
 8001b58:	4663      	mov	r3, ip
 8001b5a:	191b      	adds	r3, r3, r4
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	18eb      	adds	r3, r5, r3
 8001b60:	3342      	adds	r3, #66	; 0x42
 8001b62:	881b      	ldrh	r3, [r3, #0]
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8001b64:	ae0a      	add	r6, sp, #40	; 0x28
 8001b66:	469c      	mov	ip, r3
 8001b68:	002b      	movs	r3, r5
 8001b6a:	cb01      	ldmia	r3!, {r0}
 8001b6c:	cb84      	ldmia	r3!, {r2, r7}
 8001b6e:	c684      	stmia	r6!, {r2, r7}
 8001b70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001b72:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1, p2); }
 8001b74:	4219      	tst	r1, r3
 8001b76:	d071      	beq.n	8001c5c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xda0>
 8001b78:	105b      	asrs	r3, r3, #1
 8001b7a:	18c0      	adds	r0, r0, r3
 8001b7c:	6803      	ldr	r3, [r0, #0]
 8001b7e:	599e      	ldr	r6, [r3, r6]
 8001b80:	4662      	mov	r2, ip
 8001b82:	0021      	movs	r1, r4
 8001b84:	47b0      	blx	r6
 8001b86:	f7ff fa2b 	bl	8000fe0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
 8001b8a:	105b      	asrs	r3, r3, #1
 8001b8c:	18c0      	adds	r0, r0, r3
 8001b8e:	e7ae      	b.n	8001aee <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc32>
 8001b90:	105b      	asrs	r3, r3, #1
 8001b92:	18c0      	adds	r0, r0, r3
 8001b94:	e7cd      	b.n	8001b32 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc76>
    value=*epreg & USB_EPRX_DTOGMASK;
 8001b96:	8813      	ldrh	r3, [r2, #0]
 8001b98:	493f      	ldr	r1, [pc, #252]	; (8001c98 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xddc>)
    value=*epreg & USB_EPTX_DTOGMASK;
 8001b9a:	483c      	ldr	r0, [pc, #240]	; (8001c8c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xdd0>)
    value=*epreg & USB_EPRX_DTOGMASK;
 8001b9c:	4019      	ands	r1, r3
      reg^=USB_EPRX_DTOG1;
 8001b9e:	2380      	movs	r3, #128	; 0x80
 8001ba0:	015b      	lsls	r3, r3, #5
 8001ba2:	404b      	eors	r3, r1
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001ba4:	493a      	ldr	r1, [pc, #232]	; (8001c90 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xdd4>)
 8001ba6:	430b      	orrs	r3, r1
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	8013      	strh	r3, [r2, #0]
    value=*epreg & USB_EPTX_DTOGMASK;
 8001bac:	8813      	ldrh	r3, [r2, #0]
 8001bae:	4003      	ands	r3, r0
      reg^=USB_EPTX_DTOG1;
 8001bb0:	2010      	movs	r0, #16
 8001bb2:	4043      	eors	r3, r0
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001bb4:	4319      	orrs	r1, r3
 8001bb6:	b289      	uxth	r1, r1
 8001bb8:	8011      	strh	r1, [r2, #0]
 8001bba:	f7ff fa11 	bl	8000fe0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
              if((ep_addr & 0x7f)!=0)
 8001bbe:	064b      	lsls	r3, r1, #25
 8001bc0:	d101      	bne.n	8001bc6 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xd0a>
 8001bc2:	f7ff fa0d 	bl	8000fe0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
                stallEndpoint(ep_addr);
 8001bc6:	0008      	movs	r0, r1
 8001bc8:	f7fe fb20 	bl	800020c <_ZNK9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE13stallEndpointEh.isra.42>
 8001bcc:	f7ff fa08 	bl	8000fe0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
          switch (_deviceState) {
 8001bd0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d0f3      	beq.n	8001bbe <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xd02>
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	d1dd      	bne.n	8001b96 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xcda>
    endpointIndex=epAddr & 0x7f;
 8001bda:	207f      	movs	r0, #127	; 0x7f
    if((epAddr & 0x80)==0x80 || endpointIndex==0) {
 8001bdc:	4663      	mov	r3, ip
    endpointIndex=epAddr & 0x7f;
 8001bde:	4008      	ands	r0, r1
    if((epAddr & 0x80)==0x80 || endpointIndex==0) {
 8001be0:	061b      	lsls	r3, r3, #24
 8001be2:	d441      	bmi.n	8001c68 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xdac>
 8001be4:	2800      	cmp	r0, #0
 8001be6:	d03f      	beq.n	8001c68 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xdac>
      status=getRxEndpointStatus(&USBR->EP0R+endpointIndex*2);
 8001be8:	4b2d      	ldr	r3, [pc, #180]	; (8001ca0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xde4>)
      return status==USB_EP_RX_STALL;
 8001bea:	22c0      	movs	r2, #192	; 0xc0
      status=getRxEndpointStatus(&USBR->EP0R+endpointIndex*2);
 8001bec:	469c      	mov	ip, r3
 8001bee:	4460      	add	r0, ip
 8001bf0:	0080      	lsls	r0, r0, #2
    return *epreg & USB_EPRX_STAT;
 8001bf2:	8803      	ldrh	r3, [r0, #0]
      return status==USB_EP_RX_STALL;
 8001bf4:	0192      	lsls	r2, r2, #6
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	4a2a      	ldr	r2, [pc, #168]	; (8001ca4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xde8>)
 8001bfa:	4694      	mov	ip, r2
 8001bfc:	4463      	add	r3, ip
 8001bfe:	4259      	negs	r1, r3
 8001c00:	4159      	adcs	r1, r3
 8001c02:	b2cb      	uxtb	r3, r1
              status=isStalled(ep_addr) ? 1 : 0;
 8001c04:	4a28      	ldr	r2, [pc, #160]	; (8001ca8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xdec>)
 8001c06:	8013      	strh	r3, [r2, #0]
    _controlEndpointState=ControlEndpointStateType::DATA_IN;
 8001c08:	2302      	movs	r3, #2
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 8001c0a:	63ea      	str	r2, [r5, #60]	; 0x3c
    _controlEndpointState=ControlEndpointStateType::DATA_IN;
 8001c0c:	63ab      	str	r3, [r5, #56]	; 0x38
    _inEndpointData[endpointIndex].remaining=length;
 8001c0e:	4b27      	ldr	r3, [pc, #156]	; (8001cac <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xdf0>)
 8001c10:	f7ff f9e0 	bl	8000fd4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x118>
          switch (_deviceState) {
 8001c14:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d0d1      	beq.n	8001bbe <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xd02>
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	d1bb      	bne.n	8001b96 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xcda>
              if(header.wValue==USB_FEATURE_EP_HALT) {
 8001c1e:	2f00      	cmp	r7, #0
 8001c20:	d001      	beq.n	8001c26 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xd6a>
 8001c22:	f7ff f9dd 	bl	8000fe0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
 8001c26:	207f      	movs	r0, #127	; 0x7f
 8001c28:	4008      	ands	r0, r1
                if((ep_addr & 0x7f)!=0) {
 8001c2a:	d101      	bne.n	8001c30 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xd74>
 8001c2c:	f7ff f9d8 	bl	8000fe0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
    if((epAddr & 0x80)==0x80 || endpointIndex==0)
 8001c30:	4663      	mov	r3, ip
 8001c32:	061b      	lsls	r3, r3, #24
 8001c34:	d500      	bpl.n	8001c38 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xd7c>
 8001c36:	e10e      	b.n	8001e56 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf9a>
      setRxEndpointStatus(&USBR->EP0R+endpointIndex*2,USB_EP_RX_STALL);
 8001c38:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xde4>)
    value=*epreg & USB_EPRX_DTOGMASK;
 8001c3a:	4a17      	ldr	r2, [pc, #92]	; (8001c98 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xddc>)
      setRxEndpointStatus(&USBR->EP0R+endpointIndex*2,USB_EP_RX_STALL);
 8001c3c:	469c      	mov	ip, r3
 8001c3e:	4460      	add	r0, ip
 8001c40:	0080      	lsls	r0, r0, #2
    value=*epreg & USB_EPRX_DTOGMASK;
 8001c42:	8803      	ldrh	r3, [r0, #0]
 8001c44:	401a      	ands	r2, r3
      reg^=USB_EPRX_DTOG1;
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	015b      	lsls	r3, r3, #5
 8001c4a:	4053      	eors	r3, r2
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001c4c:	4a13      	ldr	r2, [pc, #76]	; (8001c9c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xde0>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	8003      	strh	r3, [r0, #0]
 8001c52:	e75a      	b.n	8001b0a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc4e>
 8001c54:	105b      	asrs	r3, r3, #1
 8001c56:	4463      	add	r3, ip
 8001c58:	0018      	movs	r0, r3
 8001c5a:	e554      	b.n	8001706 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x84a>
 8001c5c:	105b      	asrs	r3, r3, #1
 8001c5e:	18c0      	adds	r0, r0, r3
 8001c60:	e78e      	b.n	8001b80 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xcc4>
 8001c62:	105b      	asrs	r3, r3, #1
 8001c64:	18c0      	adds	r0, r0, r3
 8001c66:	e4a6      	b.n	80015b6 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x6fa>
      status=getTxEndpointStatus(&USBR->EP0R+endpointIndex*2);
 8001c68:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xde4>)
 8001c6a:	469c      	mov	ip, r3
      return status==USB_EP_TX_STALL;
 8001c6c:	2330      	movs	r3, #48	; 0x30
      status=getTxEndpointStatus(&USBR->EP0R+endpointIndex*2);
 8001c6e:	4460      	add	r0, ip
 8001c70:	0080      	lsls	r0, r0, #2
    return *epreg & USB_EPTX_STAT;
 8001c72:	8802      	ldrh	r2, [r0, #0]
      return status==USB_EP_TX_STALL;
 8001c74:	4013      	ands	r3, r2
 8001c76:	3b10      	subs	r3, #16
 8001c78:	4259      	negs	r1, r3
 8001c7a:	4159      	adcs	r1, r3
 8001c7c:	b2cb      	uxtb	r3, r1
 8001c7e:	e7c1      	b.n	8001c04 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xd48>
 8001c80:	2000086c 	.word	0x2000086c
 8001c84:	40006000 	.word	0x40006000
 8001c88:	40005c00 	.word	0x40005c00
 8001c8c:	ffff8fbf 	.word	0xffff8fbf
 8001c90:	ffff8080 	.word	0xffff8080
 8001c94:	40006004 	.word	0x40006004
 8001c98:	ffffbf8f 	.word	0xffffbf8f
 8001c9c:	00008080 	.word	0x00008080
 8001ca0:	10001700 	.word	0x10001700
 8001ca4:	fffff000 	.word	0xfffff000
 8001ca8:	2000086e 	.word	0x2000086e
 8001cac:	00020002 	.word	0x00020002
      switch(_deviceState) {
 8001cb0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d041      	beq.n	8001d3a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xe7e>
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	d000      	beq.n	8001cbc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xe00>
 8001cba:	e5d0      	b.n	800185e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x9a2>
          if(_configurationIndex==0) {
 8001cbc:	2f00      	cmp	r7, #0
 8001cbe:	d001      	beq.n	8001cc4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xe08>
 8001cc0:	f7ff f984 	bl	8000fcc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x110>
    if((*reg & USB_EP_DTOG_TX)!=0)
 8001cc4:	4a7e      	ldr	r2, [pc, #504]	; (8001ec0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1004>)
 8001cc6:	8813      	ldrh	r3, [r2, #0]
 8001cc8:	065b      	lsls	r3, r3, #25
 8001cca:	d505      	bpl.n	8001cd8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xe1c>
      *reg=(*reg & USB_EPREG_MASK) | USB_EP_CTR_RX | USB_EP_CTR_TX | USB_EP_DTOG_TX;
 8001ccc:	8813      	ldrh	r3, [r2, #0]
 8001cce:	497d      	ldr	r1, [pc, #500]	; (8001ec4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1008>)
 8001cd0:	400b      	ands	r3, r1
 8001cd2:	497d      	ldr	r1, [pc, #500]	; (8001ec8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x100c>)
 8001cd4:	430b      	orrs	r3, r1
 8001cd6:	8013      	strh	r3, [r2, #0]
    value=*epreg & USB_EPTX_DTOGMASK;
 8001cd8:	4b79      	ldr	r3, [pc, #484]	; (8001ec0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1004>)
 8001cda:	497c      	ldr	r1, [pc, #496]	; (8001ecc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1010>)
 8001cdc:	881a      	ldrh	r2, [r3, #0]
 8001cde:	400a      	ands	r2, r1
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001ce0:	497b      	ldr	r1, [pc, #492]	; (8001ed0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1014>)
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	801a      	strh	r2, [r3, #0]
    if((*reg & USB_EP_DTOG_RX)!=0)
 8001ce6:	881a      	ldrh	r2, [r3, #0]
 8001ce8:	0452      	lsls	r2, r2, #17
 8001cea:	d505      	bpl.n	8001cf8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xe3c>
      *reg=(*reg & USB_EPREG_MASK) | USB_EP_CTR_RX | USB_EP_CTR_TX | USB_EP_DTOG_RX;
 8001cec:	881a      	ldrh	r2, [r3, #0]
 8001cee:	4975      	ldr	r1, [pc, #468]	; (8001ec4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1008>)
 8001cf0:	400a      	ands	r2, r1
 8001cf2:	4978      	ldr	r1, [pc, #480]	; (8001ed4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1018>)
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	801a      	strh	r2, [r3, #0]
    value=*epreg & USB_EPRX_DTOGMASK;
 8001cf8:	4a71      	ldr	r2, [pc, #452]	; (8001ec0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1004>)
 8001cfa:	4977      	ldr	r1, [pc, #476]	; (8001ed8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x101c>)
 8001cfc:	8813      	ldrh	r3, [r2, #0]
    continueSendData(endpointIndex);
 8001cfe:	0028      	movs	r0, r5
    value=*epreg & USB_EPRX_DTOGMASK;
 8001d00:	400b      	ands	r3, r1
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001d02:	4973      	ldr	r1, [pc, #460]	; (8001ed0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1014>)
 8001d04:	430b      	orrs	r3, r1
 8001d06:	8013      	strh	r3, [r2, #0]
    _controlEndpointState=ControlEndpointStateType::STATUS_IN;
 8001d08:	2304      	movs	r3, #4
    _inEndpointData[endpointIndex].total=length;
 8001d0a:	2242      	movs	r2, #66	; 0x42
    _controlEndpointState=ControlEndpointStateType::STATUS_IN;
 8001d0c:	63ab      	str	r3, [r5, #56]	; 0x38
    _inEndpointData[endpointIndex].total=length;
 8001d0e:	2300      	movs	r3, #0
    _inEndpointData[endpointIndex].pmaAddress=pmaInAddress;
 8001d10:	2158      	movs	r1, #88	; 0x58
    _inEndpointData[endpointIndex].total=length;
 8001d12:	52ab      	strh	r3, [r5, r2]
    _inEndpointData[endpointIndex].remaining=length;
 8001d14:	3a02      	subs	r2, #2
 8001d16:	52ab      	strh	r3, [r5, r2]
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 8001d18:	63eb      	str	r3, [r5, #60]	; 0x3c
    _inEndpointData[endpointIndex].pmaAddress=pmaInAddress;
 8001d1a:	3346      	adds	r3, #70	; 0x46
 8001d1c:	52e9      	strh	r1, [r5, r3]
    _inEndpointData[endpointIndex].maxPacketSize=maxPacketSize;
 8001d1e:	3b02      	subs	r3, #2
 8001d20:	52ea      	strh	r2, [r5, r3]
    continueSendData(endpointIndex);
 8001d22:	f7fe fa37 	bl	8000194 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE16continueSendDataEh.constprop.82>
    if(_deviceState!=newState) {
 8001d26:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d101      	bne.n	8001d30 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xe74>
 8001d2c:	f7ff f958 	bl	8000fe0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
      _deviceState=newState;
 8001d30:	2302      	movs	r3, #2
 8001d32:	632b      	str	r3, [r5, #48]	; 0x30
          notify=UsbStatusType::STATE_CONFIGURED;
 8001d34:	3304      	adds	r3, #4
 8001d36:	9324      	str	r3, [sp, #144]	; 0x90
 8001d38:	e5d0      	b.n	80018dc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa20>
          if(_configurationIndex) {
 8001d3a:	2f00      	cmp	r7, #0
 8001d3c:	d101      	bne.n	8001d42 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xe86>
 8001d3e:	f7ff f945 	bl	8000fcc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x110>
    *reg=(*reg & USB_EP_T_MASK) | type;
 8001d42:	4b5f      	ldr	r3, [pc, #380]	; (8001ec0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1004>)
 8001d44:	4965      	ldr	r1, [pc, #404]	; (8001edc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1020>)
 8001d46:	881a      	ldrh	r2, [r3, #0]
 8001d48:	4011      	ands	r1, r2
 8001d4a:	22c0      	movs	r2, #192	; 0xc0
 8001d4c:	00d2      	lsls	r2, r2, #3
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	801a      	strh	r2, [r3, #0]
    *reg=(*reg & USB_EPREG_MASK) | addr | USB_EP_CTR_TX;
 8001d52:	881a      	ldrh	r2, [r3, #0]
 8001d54:	4962      	ldr	r1, [pc, #392]	; (8001ee0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1024>)
 8001d56:	4011      	ands	r1, r2
 8001d58:	2281      	movs	r2, #129	; 0x81
 8001d5a:	430a      	orrs	r2, r1
    USBR_BDT[addr].tx.addr=pmaAddress;
 8001d5c:	2198      	movs	r1, #152	; 0x98
    *reg=(*reg & USB_EPREG_MASK) | addr | USB_EP_CTR_TX;
 8001d5e:	801a      	strh	r2, [r3, #0]
    USBR_BDT[addr].tx.addr=pmaAddress;
 8001d60:	4a60      	ldr	r2, [pc, #384]	; (8001ee4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1028>)
 8001d62:	8011      	strh	r1, [r2, #0]
    if((*reg & USB_EP_DTOG_TX)!=0)
 8001d64:	881a      	ldrh	r2, [r3, #0]
 8001d66:	0652      	lsls	r2, r2, #25
 8001d68:	d505      	bpl.n	8001d76 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xeba>
      *reg=(*reg & USB_EPREG_MASK) | USB_EP_CTR_TX | USB_EP_DTOG_TX;
 8001d6a:	881a      	ldrh	r2, [r3, #0]
 8001d6c:	495e      	ldr	r1, [pc, #376]	; (8001ee8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x102c>)
 8001d6e:	4011      	ands	r1, r2
 8001d70:	22c0      	movs	r2, #192	; 0xc0
 8001d72:	430a      	orrs	r2, r1
 8001d74:	801a      	strh	r2, [r3, #0]
    value=*epreg & USB_EPTX_DTOGMASK;
 8001d76:	4b52      	ldr	r3, [pc, #328]	; (8001ec0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1004>)
 8001d78:	4954      	ldr	r1, [pc, #336]	; (8001ecc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1010>)
 8001d7a:	881a      	ldrh	r2, [r3, #0]
 8001d7c:	4011      	ands	r1, r2
      reg^=USB_EPTX_DTOG2;
 8001d7e:	2220      	movs	r2, #32
 8001d80:	404a      	eors	r2, r1
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001d82:	4953      	ldr	r1, [pc, #332]	; (8001ed0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1014>)
 8001d84:	430a      	orrs	r2, r1
 8001d86:	801a      	strh	r2, [r3, #0]
    *reg=(*reg & USB_EP_T_MASK) | type;
 8001d88:	881a      	ldrh	r2, [r3, #0]
 8001d8a:	4954      	ldr	r1, [pc, #336]	; (8001edc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1020>)
 8001d8c:	4011      	ands	r1, r2
 8001d8e:	22c0      	movs	r2, #192	; 0xc0
 8001d90:	00d2      	lsls	r2, r2, #3
 8001d92:	430a      	orrs	r2, r1
 8001d94:	801a      	strh	r2, [r3, #0]
    *reg=(*reg & USB_EPREG_MASK) | addr | USB_EP_CTR_RX;
 8001d96:	881a      	ldrh	r2, [r3, #0]
 8001d98:	4951      	ldr	r1, [pc, #324]	; (8001ee0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1024>)
 8001d9a:	400a      	ands	r2, r1
 8001d9c:	4953      	ldr	r1, [pc, #332]	; (8001eec <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1030>)
 8001d9e:	430a      	orrs	r2, r1
    USBR_BDT[addr].rx.addr=pmaAddress;
 8001da0:	21d8      	movs	r1, #216	; 0xd8
    *reg=(*reg & USB_EPREG_MASK) | addr | USB_EP_CTR_RX;
 8001da2:	801a      	strh	r2, [r3, #0]
    USBR_BDT[addr].rx.addr=pmaAddress;
 8001da4:	4a4f      	ldr	r2, [pc, #316]	; (8001ee4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1028>)
 8001da6:	8091      	strh	r1, [r2, #4]
 8001da8:	2180      	movs	r1, #128	; 0x80
 8001daa:	00c9      	lsls	r1, r1, #3
 8001dac:	80d1      	strh	r1, [r2, #6]
    if((*reg & USB_EP_DTOG_RX)!=0)
 8001dae:	881a      	ldrh	r2, [r3, #0]
 8001db0:	0452      	lsls	r2, r2, #17
 8001db2:	d506      	bpl.n	8001dc2 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf06>
      *reg=(*reg & USB_EPREG_MASK) | USB_EP_CTR_RX | USB_EP_DTOG_RX;
 8001db4:	881a      	ldrh	r2, [r3, #0]
 8001db6:	494e      	ldr	r1, [pc, #312]	; (8001ef0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1034>)
 8001db8:	400a      	ands	r2, r1
 8001dba:	21c0      	movs	r1, #192	; 0xc0
 8001dbc:	0209      	lsls	r1, r1, #8
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	801a      	strh	r2, [r3, #0]
    value=*epreg & USB_EPRX_DTOGMASK;
 8001dc2:	493f      	ldr	r1, [pc, #252]	; (8001ec0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1004>)
 8001dc4:	4a44      	ldr	r2, [pc, #272]	; (8001ed8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x101c>)
 8001dc6:	880b      	ldrh	r3, [r1, #0]
    continueSendData(endpointIndex);
 8001dc8:	0028      	movs	r0, r5
    value=*epreg & USB_EPRX_DTOGMASK;
 8001dca:	401a      	ands	r2, r3
      reg^=USB_EPRX_DTOG2;
 8001dcc:	23c0      	movs	r3, #192	; 0xc0
 8001dce:	019b      	lsls	r3, r3, #6
 8001dd0:	4053      	eors	r3, r2
    *epreg=setRxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001dd2:	4a3f      	ldr	r2, [pc, #252]	; (8001ed0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1014>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	800b      	strh	r3, [r1, #0]
    _controlEndpointState=ControlEndpointStateType::STATUS_IN;
 8001dd8:	2304      	movs	r3, #4
    _inEndpointData[endpointIndex].total=length;
 8001dda:	2242      	movs	r2, #66	; 0x42
    _controlEndpointState=ControlEndpointStateType::STATUS_IN;
 8001ddc:	63ab      	str	r3, [r5, #56]	; 0x38
    _inEndpointData[endpointIndex].total=length;
 8001dde:	2300      	movs	r3, #0
    _inEndpointData[endpointIndex].pmaAddress=pmaInAddress;
 8001de0:	2158      	movs	r1, #88	; 0x58
    _inEndpointData[endpointIndex].total=length;
 8001de2:	52ab      	strh	r3, [r5, r2]
    _inEndpointData[endpointIndex].remaining=length;
 8001de4:	3a02      	subs	r2, #2
 8001de6:	52ab      	strh	r3, [r5, r2]
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 8001de8:	63eb      	str	r3, [r5, #60]	; 0x3c
    _inEndpointData[endpointIndex].pmaAddress=pmaInAddress;
 8001dea:	3346      	adds	r3, #70	; 0x46
 8001dec:	52e9      	strh	r1, [r5, r3]
    _inEndpointData[endpointIndex].maxPacketSize=maxPacketSize;
 8001dee:	3b02      	subs	r3, #2
 8001df0:	52ea      	strh	r2, [r5, r3]
    continueSendData(endpointIndex);
 8001df2:	f7fe f9cf 	bl	8000194 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE16continueSendDataEh.constprop.82>
    if(_deviceState!=newState) {
 8001df6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	d101      	bne.n	8001e00 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf44>
 8001dfc:	f7ff f8f0 	bl	8000fe0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
      _deviceState=newState;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e796      	b.n	8001d32 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xe76>
        length=sizeof(_deviceDescriptor);
 8001e04:	2312      	movs	r3, #18
        dataToSend=const_cast<uint8_t *>(_deviceDescriptor);
 8001e06:	4a3b      	ldr	r2, [pc, #236]	; (8001ef4 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1038>)
    if(length && header.wLength)
 8001e08:	2c00      	cmp	r4, #0
 8001e0a:	d101      	bne.n	8001e10 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf54>
 8001e0c:	f7ff f8e8 	bl	8000fe0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
      sendControlData(dataToSend,length<=header.wLength ? length : header.wLength);
 8001e10:	42a3      	cmp	r3, r4
 8001e12:	dc00      	bgt.n	8001e16 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf5a>
 8001e14:	001c      	movs	r4, r3
    _controlEndpointState=ControlEndpointStateType::DATA_IN;
 8001e16:	2302      	movs	r3, #2
 8001e18:	63ab      	str	r3, [r5, #56]	; 0x38
    _inEndpointData[endpointIndex].total=length;
 8001e1a:	3340      	adds	r3, #64	; 0x40
 8001e1c:	52ec      	strh	r4, [r5, r3]
    _inEndpointData[endpointIndex].remaining=length;
 8001e1e:	3b02      	subs	r3, #2
 8001e20:	52ec      	strh	r4, [r5, r3]
    _inEndpointData[endpointIndex].pmaAddress=pmaInAddress;
 8001e22:	2158      	movs	r1, #88	; 0x58
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 8001e24:	63ea      	str	r2, [r5, #60]	; 0x3c
    _inEndpointData[endpointIndex].pmaAddress=pmaInAddress;
 8001e26:	2246      	movs	r2, #70	; 0x46
 8001e28:	52a9      	strh	r1, [r5, r2]
    _inEndpointData[endpointIndex].maxPacketSize=maxPacketSize;
 8001e2a:	3a02      	subs	r2, #2
 8001e2c:	52ab      	strh	r3, [r5, r2]
    continueSendData(endpointIndex);
 8001e2e:	0028      	movs	r0, r5
 8001e30:	f7fe f9b0 	bl	8000194 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE16continueSendDataEh.constprop.82>
 8001e34:	f7ff f8d4 	bl	8000fe0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
    switch(header.wValue & 0xff) {
 8001e38:	b2ff      	uxtb	r7, r7
 8001e3a:	2f05      	cmp	r7, #5
 8001e3c:	d900      	bls.n	8001e40 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf84>
 8001e3e:	e50e      	b.n	800185e <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x9a2>
 8001e40:	4b2d      	ldr	r3, [pc, #180]	; (8001ef8 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x103c>)
 8001e42:	00bf      	lsls	r7, r7, #2
 8001e44:	59db      	ldr	r3, [r3, r7]
 8001e46:	469f      	mov	pc, r3
        length=sizeof(_configurationDescriptor);
 8001e48:	2329      	movs	r3, #41	; 0x29
        dataToSend=const_cast<uint8_t *>(_configurationDescriptor);
 8001e4a:	4a2c      	ldr	r2, [pc, #176]	; (8001efc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1040>)
 8001e4c:	e7dc      	b.n	8001e08 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf4c>
          _configurationIndex=0;
 8001e4e:	2200      	movs	r2, #0
 8001e50:	235a      	movs	r3, #90	; 0x5a
 8001e52:	54ea      	strb	r2, [r5, r3]
 8001e54:	e4f1      	b.n	800183a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x97e>
      setTxEndpointStatus(&USBR->EP0R+endpointIndex*2,USB_EP_TX_STALL);
 8001e56:	4b2a      	ldr	r3, [pc, #168]	; (8001f00 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1044>)
    value=*epreg & USB_EPTX_DTOGMASK;
 8001e58:	4a1c      	ldr	r2, [pc, #112]	; (8001ecc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1010>)
      setTxEndpointStatus(&USBR->EP0R+endpointIndex*2,USB_EP_TX_STALL);
 8001e5a:	469c      	mov	ip, r3
 8001e5c:	4460      	add	r0, ip
 8001e5e:	0080      	lsls	r0, r0, #2
    value=*epreg & USB_EPTX_DTOGMASK;
 8001e60:	8803      	ldrh	r3, [r0, #0]
 8001e62:	401a      	ands	r2, r3
      reg^=USB_EPTX_DTOG1;
 8001e64:	2310      	movs	r3, #16
 8001e66:	4053      	eors	r3, r2
    *epreg=setTxStatus(value,status) | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001e68:	4a19      	ldr	r2, [pc, #100]	; (8001ed0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1014>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	8003      	strh	r3, [r0, #0]
 8001e6e:	e64c      	b.n	8001b0a <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xc4e>
      _address=address;
 8001e70:	2359      	movs	r3, #89	; 0x59
 8001e72:	54ef      	strb	r7, [r5, r3]
    _controlEndpointState=ControlEndpointStateType::STATUS_IN;
 8001e74:	3b55      	subs	r3, #85	; 0x55
 8001e76:	63ab      	str	r3, [r5, #56]	; 0x38
    _inEndpointData[endpointIndex].remaining=length;
 8001e78:	4b22      	ldr	r3, [pc, #136]	; (8001f04 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1048>)
    _inEndpointData[endpointIndex].ptr=reinterpret_cast<const uint8_t *>(data);
 8001e7a:	63ec      	str	r4, [r5, #60]	; 0x3c
    _inEndpointData[endpointIndex].remaining=length;
 8001e7c:	646b      	str	r3, [r5, #68]	; 0x44
 8001e7e:	642c      	str	r4, [r5, #64]	; 0x40
    continueSendData(endpointIndex);
 8001e80:	0028      	movs	r0, r5
 8001e82:	f7fe f987 	bl	8000194 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE16continueSendDataEh.constprop.82>
    if(_deviceState!=newState) {
 8001e86:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d101      	bne.n	8001e90 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xfd4>
 8001e8c:	f7ff f8a8 	bl	8000fe0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x124>
      _deviceState=newState;
 8001e90:	2302      	movs	r3, #2
 8001e92:	632b      	str	r3, [r5, #48]	; 0x30
          notify=UsbStatusType::STATE_ADDRESSED;
 8001e94:	3304      	adds	r3, #4
 8001e96:	9324      	str	r3, [sp, #144]	; 0x90
 8001e98:	e520      	b.n	80018dc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xa20>
        length=sizeof(TConfiguration::ConfigurationString);
 8001e9a:	2308      	movs	r3, #8
        dataToSend=const_cast<uint8_t *>(TConfiguration::ConfigurationString);
 8001e9c:	4a1a      	ldr	r2, [pc, #104]	; (8001f08 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x104c>)
 8001e9e:	e7b3      	b.n	8001e08 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf4c>
        length=sizeof(TConfiguration::SerialString);
 8001ea0:	230c      	movs	r3, #12
        dataToSend=const_cast<uint8_t *>(TConfiguration::SerialString);
 8001ea2:	4a1a      	ldr	r2, [pc, #104]	; (8001f0c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1050>)
 8001ea4:	e7b0      	b.n	8001e08 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf4c>
        length=sizeof(TConfiguration::ProductString);
 8001ea6:	2316      	movs	r3, #22
        dataToSend=const_cast<uint8_t *>(TConfiguration::ProductString);
 8001ea8:	4a19      	ldr	r2, [pc, #100]	; (8001f10 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1054>)
 8001eaa:	e7ad      	b.n	8001e08 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf4c>
        length=sizeof(TConfiguration::ManufacturerString);
 8001eac:	2320      	movs	r3, #32
        dataToSend=const_cast<uint8_t *>(TConfiguration::ManufacturerString);
 8001eae:	4a19      	ldr	r2, [pc, #100]	; (8001f14 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1058>)
 8001eb0:	e7aa      	b.n	8001e08 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf4c>
        length=sizeof(_langIdDescriptor);
 8001eb2:	2304      	movs	r3, #4
        dataToSend=const_cast<uint8_t *>(_langIdDescriptor);
 8001eb4:	4a18      	ldr	r2, [pc, #96]	; (8001f18 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x105c>)
 8001eb6:	e7a7      	b.n	8001e08 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf4c>
        length=sizeof(TConfiguration::InterfaceString);
 8001eb8:	2308      	movs	r3, #8
        dataToSend=const_cast<uint8_t *>(TConfiguration::InterfaceString);
 8001eba:	4a18      	ldr	r2, [pc, #96]	; (8001f1c <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0x1060>)
 8001ebc:	e7a4      	b.n	8001e08 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE11onInterruptEv+0xf4c>
 8001ebe:	46c0      	nop			; (mov r8, r8)
 8001ec0:	40005c04 	.word	0x40005c04
 8001ec4:	00000f0f 	.word	0x00000f0f
 8001ec8:	000080c0 	.word	0x000080c0
 8001ecc:	ffff8fbf 	.word	0xffff8fbf
 8001ed0:	00008080 	.word	0x00008080
 8001ed4:	0000c080 	.word	0x0000c080
 8001ed8:	ffffbf8f 	.word	0xffffbf8f
 8001edc:	ffff898f 	.word	0xffff898f
 8001ee0:	ffff8f8f 	.word	0xffff8f8f
 8001ee4:	40006008 	.word	0x40006008
 8001ee8:	ffff8f0f 	.word	0xffff8f0f
 8001eec:	00008001 	.word	0x00008001
 8001ef0:	00000f8f 	.word	0x00000f8f
 8001ef4:	080032fc 	.word	0x080032fc
 8001ef8:	08003268 	.word	0x08003268
 8001efc:	080032d0 	.word	0x080032d0
 8001f00:	10001700 	.word	0x10001700
 8001f04:	00580040 	.word	0x00580040
 8001f08:	0800335c 	.word	0x0800335c
 8001f0c:	08003310 	.word	0x08003310
 8001f10:	0800331c 	.word	0x0800331c
 8001f14:	0800333c 	.word	0x0800333c
 8001f18:	08003280 	.word	0x08003280
 8001f1c:	08003334 	.word	0x08003334

08001f20 <_ZnwjPv>:
 8001f20:	0008      	movs	r0, r1
 8001f22:	4770      	bx	lr

08001f24 <_sbrk>:
  caddr_t _sbrk ( int incr ) {

    static unsigned char *heap = NULL;
    unsigned char *prev_heap;

    if (heap == NULL) {
 8001f24:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <_sbrk+0x14>)
 8001f26:	6813      	ldr	r3, [r2, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <_sbrk+0x10>
      heap = (unsigned char *)&_end;
    }
    prev_heap = heap;
    /* check removed to show basic approach */

    heap += incr;
 8001f2c:	1818      	adds	r0, r3, r0
 8001f2e:	6010      	str	r0, [r2, #0]

    return (caddr_t) prev_heap;
  }
 8001f30:	0018      	movs	r0, r3
 8001f32:	4770      	bx	lr
 8001f34:	4b01      	ldr	r3, [pc, #4]	; (8001f3c <_sbrk+0x18>)
 8001f36:	e7f9      	b.n	8001f2c <_sbrk+0x8>
 8001f38:	20000870 	.word	0x20000870
 8001f3c:	200008f0 	.word	0x200008f0

08001f40 <__wrap_atexit>:

  int __wrap_atexit (void (*)(void)) {
         return 0;
  }
 8001f40:	2000      	movs	r0, #0
 8001f42:	4770      	bx	lr

08001f44 <Reset_Handler>:
 8001f44:	4813      	ldr	r0, [pc, #76]	; (8001f94 <LoopForever+0x2>)
 8001f46:	4685      	mov	sp, r0
 8001f48:	4813      	ldr	r0, [pc, #76]	; (8001f98 <LoopForever+0x6>)
 8001f4a:	6801      	ldr	r1, [r0, #0]
 8001f4c:	0e09      	lsrs	r1, r1, #24
 8001f4e:	4a13      	ldr	r2, [pc, #76]	; (8001f9c <LoopForever+0xa>)
 8001f50:	4291      	cmp	r1, r2
 8001f52:	d105      	bne.n	8001f60 <ApplicationStart>
 8001f54:	4812      	ldr	r0, [pc, #72]	; (8001fa0 <LoopForever+0xe>)
 8001f56:	4913      	ldr	r1, [pc, #76]	; (8001fa4 <LoopForever+0x12>)
 8001f58:	6001      	str	r1, [r0, #0]
 8001f5a:	4813      	ldr	r0, [pc, #76]	; (8001fa8 <LoopForever+0x16>)
 8001f5c:	4913      	ldr	r1, [pc, #76]	; (8001fac <LoopForever+0x1a>)
 8001f5e:	6001      	str	r1, [r0, #0]

08001f60 <ApplicationStart>:
 8001f60:	2100      	movs	r1, #0
 8001f62:	e003      	b.n	8001f6c <LoopCopyDataInit>

08001f64 <CopyDataInit>:
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <LoopForever+0x1e>)
 8001f66:	585b      	ldr	r3, [r3, r1]
 8001f68:	5043      	str	r3, [r0, r1]
 8001f6a:	3104      	adds	r1, #4

08001f6c <LoopCopyDataInit>:
 8001f6c:	4811      	ldr	r0, [pc, #68]	; (8001fb4 <LoopForever+0x22>)
 8001f6e:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <LoopForever+0x26>)
 8001f70:	1842      	adds	r2, r0, r1
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d3f6      	bcc.n	8001f64 <CopyDataInit>
 8001f76:	4a11      	ldr	r2, [pc, #68]	; (8001fbc <LoopForever+0x2a>)
 8001f78:	e002      	b.n	8001f80 <LoopFillZerobss>

08001f7a <FillZerobss>:
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	3204      	adds	r2, #4

08001f80 <LoopFillZerobss>:
 8001f80:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <LoopForever+0x2e>)
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d3f9      	bcc.n	8001f7a <FillZerobss>
 8001f86:	f000 f81f 	bl	8001fc8 <SystemInit>
 8001f8a:	f000 fbf1 	bl	8002770 <__libc_init_array>
 8001f8e:	f7fe fe1b 	bl	8000bc8 <main>

08001f92 <LoopForever>:
 8001f92:	e7fe      	b.n	8001f92 <LoopForever>
 8001f94:	20001800 	.word	0x20001800
 8001f98:	00000004 	.word	0x00000004
 8001f9c:	0000001f 	.word	0x0000001f
 8001fa0:	40021018 	.word	0x40021018
 8001fa4:	00000001 	.word	0x00000001
 8001fa8:	40010000 	.word	0x40010000
 8001fac:	00000000 	.word	0x00000000
 8001fb0:	0800339c 	.word	0x0800339c
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	2000084c 	.word	0x2000084c
 8001fbc:	2000084c 	.word	0x2000084c
 8001fc0:	200008f0 	.word	0x200008f0

08001fc4 <ADC1_IRQHandler>:
 8001fc4:	e7fe      	b.n	8001fc4 <ADC1_IRQHandler>
	...

08001fc8 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001fc8:	2101      	movs	r1, #1
 8001fca:	4b4b      	ldr	r3, [pc, #300]	; (80020f8 <SystemInit+0x130>)
{
 8001fcc:	b570      	push	{r4, r5, r6, lr}
  RCC->CR |= (uint32_t)0x00000001;
 8001fce:	681a      	ldr	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 8001fd0:	484a      	ldr	r0, [pc, #296]	; (80020fc <SystemInit+0x134>)
  RCC->CR |= (uint32_t)0x00000001;
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	4002      	ands	r2, r0
 8001fda:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	4848      	ldr	r0, [pc, #288]	; (8002100 <SystemInit+0x138>)
 8001fe0:	4002      	ands	r2, r0
 8001fe2:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	4847      	ldr	r0, [pc, #284]	; (8002104 <SystemInit+0x13c>)
 8001fe8:	4002      	ands	r2, r0
 8001fea:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	4846      	ldr	r0, [pc, #280]	; (8002108 <SystemInit+0x140>)
 8001ff0:	4002      	ands	r2, r0

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8001ff2:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8001ff4:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8001ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff8:	4382      	bics	r2, r0
 8001ffa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 8001ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ffe:	4843      	ldr	r0, [pc, #268]	; (800210c <SystemInit+0x144>)
 8002000:	4002      	ands	r2, r0
 8002002:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8002004:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  */
static void SetSysClock(void)
{
  // enable flash prefetch buffer

  FLASH->ACR |= FLASH_ACR_PRFTBE;
 8002006:	3065      	adds	r0, #101	; 0x65
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8002008:	438a      	bics	r2, r1
 800200a:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->CIR = 0x00000000;
 800200c:	2200      	movs	r2, #0
  FLASH->ACR |= FLASH_ACR_PRFTBE;
 800200e:	4940      	ldr	r1, [pc, #256]	; (8002110 <SystemInit+0x148>)
  RCC->CIR = 0x00000000;
 8002010:	609a      	str	r2, [r3, #8]
  FLASH->ACR |= FLASH_ACR_PRFTBE;
 8002012:	680a      	ldr	r2, [r1, #0]
 8002014:	30ff      	adds	r0, #255	; 0xff
 8002016:	4302      	orrs	r2, r0
 8002018:	600a      	str	r2, [r1, #0]

  // enable HSI48

  RCC->CR2 |= RCC_CR2_HSI48ON;
 800201a:	2280      	movs	r2, #128	; 0x80
 800201c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800201e:	0252      	lsls	r2, r2, #9
 8002020:	430a      	orrs	r2, r1
  while((RCC->CR2 & RCC_CR2_HSI48RDY)==0);
 8002022:	2180      	movs	r1, #128	; 0x80
  RCC->CR2 |= RCC_CR2_HSI48ON;
 8002024:	635a      	str	r2, [r3, #52]	; 0x34
  while((RCC->CR2 & RCC_CR2_HSI48RDY)==0);
 8002026:	0289      	lsls	r1, r1, #10
 8002028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800202a:	420a      	tst	r2, r1
 800202c:	d0fc      	beq.n	8002028 <SystemInit+0x60>

  // disable the PLL

  RCC->CR &=~ RCC_CR_PLLON;
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4938      	ldr	r1, [pc, #224]	; (8002114 <SystemInit+0x14c>)
 8002032:	400a      	ands	r2, r1
  while((RCC->CR & RCC_CR_PLLRDY)!=0);
 8002034:	2180      	movs	r1, #128	; 0x80
  RCC->CR &=~ RCC_CR_PLLON;
 8002036:	601a      	str	r2, [r3, #0]
  while((RCC->CR & RCC_CR_PLLRDY)!=0);
 8002038:	4a2f      	ldr	r2, [pc, #188]	; (80020f8 <SystemInit+0x130>)
 800203a:	0489      	lsls	r1, r1, #18
 800203c:	6813      	ldr	r3, [r2, #0]
 800203e:	420b      	tst	r3, r1
 8002040:	d1fc      	bne.n	800203c <SystemInit+0x74>

  // select HSI48 as the USB clock source

  RCC->CFGR3 = (RCC->CFGR3 &~ RCC_CFGR3_USBSW) | RCC_CFGR3_USBSW_HSI48;
 8002042:	2180      	movs	r1, #128	; 0x80

  // set flash latency = 1

  FLASH->ACR = (FLASH->ACR &~FLASH_ACR_LATENCY) | FLASH_Latency_1;
 8002044:	2001      	movs	r0, #1
  RCC->CFGR3 = (RCC->CFGR3 &~ RCC_CFGR3_USBSW) | RCC_CFGR3_USBSW_HSI48;
 8002046:	6b13      	ldr	r3, [r2, #48]	; 0x30
  RCC->CFGR = (RCC->CFGR &~ RCC_CFGR_HPRE) | RCC_CFGR_HPRE_DIV1;

  // HCLK source = HSI48

  RCC->CFGR = (RCC->CFGR &~ RCC_CFGR_SW) | RCC_CFGR_SW_HSI48;
  while((RCC->CFGR & RCC_CFGR_SWS)!=RCC_CFGR_SWS_HSI48);
 8002048:	4c2b      	ldr	r4, [pc, #172]	; (80020f8 <SystemInit+0x130>)
  RCC->CFGR3 = (RCC->CFGR3 &~ RCC_CFGR3_USBSW) | RCC_CFGR3_USBSW_HSI48;
 800204a:	438b      	bics	r3, r1
  FLASH->ACR = (FLASH->ACR &~FLASH_ACR_LATENCY) | FLASH_Latency_1;
 800204c:	4930      	ldr	r1, [pc, #192]	; (8002110 <SystemInit+0x148>)
  RCC->CFGR3 = (RCC->CFGR3 &~ RCC_CFGR3_USBSW) | RCC_CFGR3_USBSW_HSI48;
 800204e:	6313      	str	r3, [r2, #48]	; 0x30
  FLASH->ACR = (FLASH->ACR &~FLASH_ACR_LATENCY) | FLASH_Latency_1;
 8002050:	680b      	ldr	r3, [r1, #0]
 8002052:	4303      	orrs	r3, r0
 8002054:	600b      	str	r3, [r1, #0]
  RCC->CFGR = (RCC->CFGR &~ RCC_CFGR_HPRE) | RCC_CFGR_HPRE_DIV1;
 8002056:	21f0      	movs	r1, #240	; 0xf0
 8002058:	6853      	ldr	r3, [r2, #4]
 800205a:	438b      	bics	r3, r1
 800205c:	6053      	str	r3, [r2, #4]
  RCC->CFGR = (RCC->CFGR &~ RCC_CFGR_SW) | RCC_CFGR_SW_HSI48;
 800205e:	6853      	ldr	r3, [r2, #4]
 8002060:	39ed      	subs	r1, #237	; 0xed
 8002062:	430b      	orrs	r3, r1
 8002064:	6053      	str	r3, [r2, #4]
  while((RCC->CFGR & RCC_CFGR_SWS)!=RCC_CFGR_SWS_HSI48);
 8002066:	220c      	movs	r2, #12
 8002068:	6863      	ldr	r3, [r4, #4]
 800206a:	4013      	ands	r3, r2
 800206c:	2b0c      	cmp	r3, #12
 800206e:	d1fb      	bne.n	8002068 <SystemInit+0xa0>

  RCC->CFGR = (RCC->CFGR &~ RCC_CFGR_PPRE) | RCC_CFGR_PPRE_DIV1;

  // enable clock recovery system from USB SOF frames

  RCC_APB1PeriphClockCmd(RCC_APB1Periph_CRS,ENABLE);
 8002070:	2580      	movs	r5, #128	; 0x80
  RCC->CFGR = (RCC->CFGR &~ RCC_CFGR_PPRE) | RCC_CFGR_PPRE_DIV1;
 8002072:	6863      	ldr	r3, [r4, #4]
 8002074:	4a28      	ldr	r2, [pc, #160]	; (8002118 <SystemInit+0x150>)
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_CRS,ENABLE);
 8002076:	052d      	lsls	r5, r5, #20
  RCC->CFGR = (RCC->CFGR &~ RCC_CFGR_PPRE) | RCC_CFGR_PPRE_DIV1;
 8002078:	4013      	ands	r3, r2
 800207a:	6063      	str	r3, [r4, #4]
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_CRS,ENABLE);
 800207c:	0028      	movs	r0, r5
 800207e:	2101      	movs	r1, #1
 8002080:	f000 fafe 	bl	8002680 <RCC_APB1PeriphClockCmd>

  // Before configuration, reset CRS registers to their default values

  RCC->APB1RSTR |= RCC_APB1RSTR_CRSRST;
 8002084:	6923      	ldr	r3, [r4, #16]
  RCC->APB1RSTR &=~ RCC_APB1RSTR_CRSRST;
 8002086:	4a25      	ldr	r2, [pc, #148]	; (800211c <SystemInit+0x154>)
  RCC->APB1RSTR |= RCC_APB1RSTR_CRSRST;
 8002088:	431d      	orrs	r5, r3
 800208a:	6125      	str	r5, [r4, #16]
  RCC->APB1RSTR &=~ RCC_APB1RSTR_CRSRST;
 800208c:	6923      	ldr	r3, [r4, #16]

  // Configure Synchronization input */
  // Clear SYNCDIV[2:0], SYNCSRC[1:0] & SYNCSPOL bits */

  CRS->CFGR &= ~(CRS_CFGR_SYNCDIV | CRS_CFGR_SYNCSRC | CRS_CFGR_SYNCPOL);
 800208e:	4924      	ldr	r1, [pc, #144]	; (8002120 <SystemInit+0x158>)
  RCC->APB1RSTR &=~ RCC_APB1RSTR_CRSRST;
 8002090:	4013      	ands	r3, r2
 8002092:	6123      	str	r3, [r4, #16]
  CRS->CFGR &= ~(CRS_CFGR_SYNCDIV | CRS_CFGR_SYNCSRC | CRS_CFGR_SYNCPOL);
 8002094:	4b23      	ldr	r3, [pc, #140]	; (8002124 <SystemInit+0x15c>)
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	400a      	ands	r2, r1
 800209a:	605a      	str	r2, [r3, #4]
  // Set the CRS_CFGR_SYNCDIV[2:0] bits according to Prescaler value
  // CRS->CFGR |= 0;

  // Set the SYNCSRC[1:0] bits according to Source value

  CRS->CFGR |= CRS_CFGR_SYNCSRC_1;
 800209c:	2280      	movs	r2, #128	; 0x80
 800209e:	6859      	ldr	r1, [r3, #4]
 80020a0:	0592      	lsls	r2, r2, #22
 80020a2:	430a      	orrs	r2, r1
 80020a4:	605a      	str	r2, [r3, #4]
  // CRS->CFGR |= 0;

  // Configure Frequency Error Measurement
  // Clear RELOAD[15:0] & FELIM[7:0] bits

  CRS->CFGR &= ~(CRS_CFGR_RELOAD | CRS_CFGR_FELIM);
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	0e12      	lsrs	r2, r2, #24
 80020aa:	0612      	lsls	r2, r2, #24
 80020ac:	605a      	str	r2, [r3, #4]

  // Set the RELOAD[15:0] bits according to ReloadValue value

  CRS->CFGR |= 47999;     // (48MHz/1000) -1
 80020ae:	6859      	ldr	r1, [r3, #4]
 80020b0:	4a1d      	ldr	r2, [pc, #116]	; (8002128 <SystemInit+0x160>)
 80020b2:	430a      	orrs	r2, r1
 80020b4:	605a      	str	r2, [r3, #4]

  // Set the FELIM[7:0] bits according to ErrorLimitValue value

  CRS->CFGR |= (0x22 << 16);
 80020b6:	2288      	movs	r2, #136	; 0x88
 80020b8:	6859      	ldr	r1, [r3, #4]
 80020ba:	0392      	lsls	r2, r2, #14
 80020bc:	430a      	orrs	r2, r1
 80020be:	605a      	str	r2, [r3, #4]

  // Adjust HSI48 oscillator smooth trimming
  // Clear TRIM[5:0] bits

  CRS->CR &= ~CRS_CR_TRIM;
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	491a      	ldr	r1, [pc, #104]	; (800212c <SystemInit+0x164>)
 80020c4:	400a      	ands	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]

  // Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value

  CRS->CR |= (0x20 << 8);
 80020c8:	2280      	movs	r2, #128	; 0x80
 80020ca:	6819      	ldr	r1, [r3, #0]
 80020cc:	0192      	lsls	r2, r2, #6
 80020ce:	430a      	orrs	r2, r1

  // Enable Automatic trimming

  CRS->CR |= CRS_CR_AUTOTRIMEN;
 80020d0:	2140      	movs	r1, #64	; 0x40
  CRS->CR |= (0x20 << 8);
 80020d2:	601a      	str	r2, [r3, #0]
  CRS->CR |= CRS_CR_AUTOTRIMEN;
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	601a      	str	r2, [r3, #0]

  // Enable Frequency error counter

  CRS->CR |= CRS_CR_CEN;
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	3920      	subs	r1, #32
 80020de:	430a      	orrs	r2, r1
 80020e0:	601a      	str	r2, [r3, #0]

  // Remap PA11-12 to PA9-10 for USB

  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGCOMPEN;
 80020e2:	2201      	movs	r2, #1
 80020e4:	69a3      	ldr	r3, [r4, #24]
  SYSCFG->CFGR1 |= SYSCFG_CFGR1_PA11_PA12_RMP;
 80020e6:	3910      	subs	r1, #16
  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGCOMPEN;
 80020e8:	4313      	orrs	r3, r2
  SYSCFG->CFGR1 |= SYSCFG_CFGR1_PA11_PA12_RMP;
 80020ea:	4a11      	ldr	r2, [pc, #68]	; (8002130 <SystemInit+0x168>)
  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGCOMPEN;
 80020ec:	61a3      	str	r3, [r4, #24]
  SYSCFG->CFGR1 |= SYSCFG_CFGR1_PA11_PA12_RMP;
 80020ee:	6813      	ldr	r3, [r2, #0]
 80020f0:	430b      	orrs	r3, r1
 80020f2:	6013      	str	r3, [r2, #0]
}
 80020f4:	bd70      	pop	{r4, r5, r6, pc}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	40021000 	.word	0x40021000
 80020fc:	f8ffb80c 	.word	0xf8ffb80c
 8002100:	fef6ffff 	.word	0xfef6ffff
 8002104:	fffbffff 	.word	0xfffbffff
 8002108:	ffc0ffff 	.word	0xffc0ffff
 800210c:	fffffeac 	.word	0xfffffeac
 8002110:	40022000 	.word	0x40022000
 8002114:	feffffff 	.word	0xfeffffff
 8002118:	fffff8ff 	.word	0xfffff8ff
 800211c:	f7ffffff 	.word	0xf7ffffff
 8002120:	48ffffff 	.word	0x48ffffff
 8002124:	40006c00 	.word	0x40006c00
 8002128:	0000bb7f 	.word	0x0000bb7f
 800212c:	ffffc0ff 	.word	0xffffc0ff
 8002130:	40010000 	.word	0x40010000

08002134 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE>:
    void initialise(GPIO_TypeDef *port,
                    uint16_t pins,
                    Gpio::GpioModeType mode,
                    GPIOSpeed_TypeDef speed,
                    Gpio::GpioPullUpDownType pupdType,
                    Gpio::GpioOutputType outputType) {
 8002134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002136:	4647      	mov	r7, r8
 8002138:	46ce      	mov	lr, r9
 800213a:	b580      	push	{r7, lr}
 800213c:	b083      	sub	sp, #12
 800213e:	4698      	mov	r8, r3
 8002140:	ab0a      	add	r3, sp, #40	; 0x28
 8002142:	781d      	ldrb	r5, [r3, #0]
 8002144:	ab0b      	add	r3, sp, #44	; 0x2c
 8002146:	781f      	ldrb	r7, [r3, #0]

      GPIO_InitTypeDef init;

      // clock on

      RCC_AHBPeriphClockCmd(port==GPIOA ? RCC_AHBPeriph_GPIOA :
 8002148:	2390      	movs	r3, #144	; 0x90
                    Gpio::GpioOutputType outputType) {
 800214a:	0004      	movs	r4, r0
 800214c:	4689      	mov	r9, r1
 800214e:	0016      	movs	r6, r2
      RCC_AHBPeriphClockCmd(port==GPIOA ? RCC_AHBPeriph_GPIOA :
 8002150:	05db      	lsls	r3, r3, #23
 8002152:	4298      	cmp	r0, r3
 8002154:	d045      	beq.n	80021e2 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0xae>
                             port==GPIOB ? RCC_AHBPeriph_GPIOB :
 8002156:	4b28      	ldr	r3, [pc, #160]	; (80021f8 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0xc4>)
 8002158:	4298      	cmp	r0, r3
 800215a:	d045      	beq.n	80021e8 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0xb4>
                             port==GPIOC ? RCC_AHBPeriph_GPIOC :
 800215c:	4b27      	ldr	r3, [pc, #156]	; (80021fc <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0xc8>)
 800215e:	4298      	cmp	r0, r3
 8002160:	d045      	beq.n	80021ee <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0xba>
                             port==GPIOD ? RCC_AHBPeriph_GPIOD :
 8002162:	4b27      	ldr	r3, [pc, #156]	; (8002200 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0xcc>)
 8002164:	2080      	movs	r0, #128	; 0x80
 8002166:	429c      	cmp	r4, r3
 8002168:	d044      	beq.n	80021f4 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0xc0>
 800216a:	03c0      	lsls	r0, r0, #15
                             RCC_AHBPeriph_GPIOF
                             ,ENABLE);
 800216c:	2101      	movs	r1, #1
 800216e:	f000 fa6f 	bl	8002650 <RCC_AHBPeriphClockCmd>

      // initialise

      init.GPIO_Pin=pins;
 8002172:	464b      	mov	r3, r9
      init.GPIO_Speed=speed;
 8002174:	4642      	mov	r2, r8
      init.GPIO_Pin=pins;
 8002176:	9300      	str	r3, [sp, #0]
      init.GPIO_Speed=speed;
 8002178:	466b      	mov	r3, sp
 800217a:	715a      	strb	r2, [r3, #5]

      switch(mode) {
 800217c:	2e01      	cmp	r6, #1
 800217e:	d02c      	beq.n	80021da <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0xa6>
 8002180:	2e00      	cmp	r6, #0
 8002182:	d026      	beq.n	80021d2 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x9e>
 8002184:	2e02      	cmp	r6, #2
 8002186:	d01c      	beq.n	80021c2 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x8e>
 8002188:	2e03      	cmp	r6, #3
 800218a:	d102      	bne.n	8002192 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x5e>
        case Gpio::ANALOG:
          init.GPIO_Mode=GPIO_Mode_AN;
          break;

        case Gpio::ALTERNATE_FUNCTION:
          init.GPIO_Mode=GPIO_Mode_AF;
 800218c:	2302      	movs	r3, #2
 800218e:	466a      	mov	r2, sp
 8002190:	7113      	strb	r3, [r2, #4]
          break;
      }

      switch(pupdType) {
 8002192:	2d01      	cmp	r5, #1
 8002194:	d003      	beq.n	800219e <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x6a>
 8002196:	2d00      	cmp	r5, #0
 8002198:	d001      	beq.n	800219e <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x6a>
 800219a:	2d02      	cmp	r5, #2
 800219c:	d101      	bne.n	80021a2 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x6e>
        case Gpio::PUPD_UP:
          init.GPIO_PuPd=GPIO_PuPd_UP;
          break;

        case Gpio::PUPD_DOWN:
          init.GPIO_PuPd=GPIO_PuPd_DOWN;
 800219e:	466b      	mov	r3, sp
 80021a0:	71dd      	strb	r5, [r3, #7]
          break;
      }

      switch(outputType) {
 80021a2:	2f00      	cmp	r7, #0
 80021a4:	d011      	beq.n	80021ca <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x96>
 80021a6:	2f01      	cmp	r7, #1
 80021a8:	d102      	bne.n	80021b0 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x7c>
        case Gpio::OPEN_DRAIN:
          init.GPIO_OType=GPIO_OType_OD;
          break;

        case Gpio::PUSH_PULL:
          init.GPIO_OType=GPIO_OType_PP;
 80021aa:	2300      	movs	r3, #0
 80021ac:	466a      	mov	r2, sp
 80021ae:	7193      	strb	r3, [r2, #6]
          break;
      }

      GPIO_Init(port,&init);
 80021b0:	4669      	mov	r1, sp
 80021b2:	0020      	movs	r0, r4
 80021b4:	f000 f99e 	bl	80024f4 <GPIO_Init>
    }
 80021b8:	b003      	add	sp, #12
 80021ba:	bc0c      	pop	{r2, r3}
 80021bc:	4690      	mov	r8, r2
 80021be:	4699      	mov	r9, r3
 80021c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
          init.GPIO_Mode=GPIO_Mode_AN;
 80021c2:	2303      	movs	r3, #3
 80021c4:	466a      	mov	r2, sp
 80021c6:	7113      	strb	r3, [r2, #4]
          break;
 80021c8:	e7e3      	b.n	8002192 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x5e>
          init.GPIO_OType=GPIO_OType_OD;
 80021ca:	2301      	movs	r3, #1
 80021cc:	466a      	mov	r2, sp
 80021ce:	7193      	strb	r3, [r2, #6]
          break;
 80021d0:	e7ee      	b.n	80021b0 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x7c>
          init.GPIO_Mode=GPIO_Mode_OUT;
 80021d2:	2301      	movs	r3, #1
 80021d4:	466a      	mov	r2, sp
 80021d6:	7113      	strb	r3, [r2, #4]
          break;
 80021d8:	e7db      	b.n	8002192 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x5e>
          init.GPIO_Mode=GPIO_Mode_IN;
 80021da:	2300      	movs	r3, #0
 80021dc:	466a      	mov	r2, sp
 80021de:	7113      	strb	r3, [r2, #4]
          break;
 80021e0:	e7d7      	b.n	8002192 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x5e>
      RCC_AHBPeriphClockCmd(port==GPIOA ? RCC_AHBPeriph_GPIOA :
 80021e2:	2080      	movs	r0, #128	; 0x80
 80021e4:	0280      	lsls	r0, r0, #10
 80021e6:	e7c1      	b.n	800216c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x38>
                             port==GPIOB ? RCC_AHBPeriph_GPIOB :
 80021e8:	2080      	movs	r0, #128	; 0x80
 80021ea:	02c0      	lsls	r0, r0, #11
 80021ec:	e7be      	b.n	800216c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x38>
                             port==GPIOC ? RCC_AHBPeriph_GPIOC :
 80021ee:	2080      	movs	r0, #128	; 0x80
 80021f0:	0300      	lsls	r0, r0, #12
 80021f2:	e7bb      	b.n	800216c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x38>
                             port==GPIOD ? RCC_AHBPeriph_GPIOD :
 80021f4:	0340      	lsls	r0, r0, #13
 80021f6:	e7b9      	b.n	800216c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE+0x38>
 80021f8:	48000400 	.word	0x48000400
 80021fc:	48000800 	.word	0x48000800
 8002200:	48000c00 	.word	0x48000c00

08002204 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh>:
                    uint8_t afSelection) {
 8002204:	b570      	push	{r4, r5, r6, lr}
 8002206:	000c      	movs	r4, r1
 8002208:	0005      	movs	r5, r0
 800220a:	b082      	sub	sp, #8
 800220c:	a906      	add	r1, sp, #24
 800220e:	a807      	add	r0, sp, #28
 8002210:	7809      	ldrb	r1, [r1, #0]
 8002212:	7800      	ldrb	r0, [r0, #0]
 8002214:	ae08      	add	r6, sp, #32
 8002216:	7836      	ldrb	r6, [r6, #0]
      initialise(port,pins,mode,speed,pupdType,outputType);
 8002218:	9001      	str	r0, [sp, #4]
 800221a:	9100      	str	r1, [sp, #0]
 800221c:	0028      	movs	r0, r5
 800221e:	0021      	movs	r1, r4
 8002220:	f7ff ff88 	bl	8002134 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeE>
        if((pins & bit)!=0)
 8002224:	07e3      	lsls	r3, r4, #31
 8002226:	d421      	bmi.n	800226c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x68>
 8002228:	07a3      	lsls	r3, r4, #30
 800222a:	d426      	bmi.n	800227a <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x76>
 800222c:	0763      	lsls	r3, r4, #29
 800222e:	d42b      	bmi.n	8002288 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x84>
 8002230:	0723      	lsls	r3, r4, #28
 8002232:	d430      	bmi.n	8002296 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x92>
 8002234:	06e3      	lsls	r3, r4, #27
 8002236:	d435      	bmi.n	80022a4 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0xa0>
 8002238:	06a3      	lsls	r3, r4, #26
 800223a:	d43a      	bmi.n	80022b2 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0xae>
 800223c:	0663      	lsls	r3, r4, #25
 800223e:	d43f      	bmi.n	80022c0 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0xbc>
 8002240:	0623      	lsls	r3, r4, #24
 8002242:	d444      	bmi.n	80022ce <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0xca>
 8002244:	05e3      	lsls	r3, r4, #23
 8002246:	d449      	bmi.n	80022dc <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0xd8>
 8002248:	05a3      	lsls	r3, r4, #22
 800224a:	d44e      	bmi.n	80022ea <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0xe6>
 800224c:	0563      	lsls	r3, r4, #21
 800224e:	d453      	bmi.n	80022f8 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0xf4>
 8002250:	0523      	lsls	r3, r4, #20
 8002252:	d458      	bmi.n	8002306 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x102>
 8002254:	04e3      	lsls	r3, r4, #19
 8002256:	d45d      	bmi.n	8002314 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x110>
 8002258:	04a3      	lsls	r3, r4, #18
 800225a:	d462      	bmi.n	8002322 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x11e>
 800225c:	0463      	lsls	r3, r4, #17
 800225e:	d467      	bmi.n	8002330 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x12c>
 8002260:	b224      	sxth	r4, r4
 8002262:	2c00      	cmp	r4, #0
 8002264:	da00      	bge.n	8002268 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x64>
 8002266:	e06c      	b.n	8002342 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x13e>
    }
 8002268:	b002      	add	sp, #8
 800226a:	bd70      	pop	{r4, r5, r6, pc}
          GPIO_PinAFConfig(port,source,afSelection);
 800226c:	0032      	movs	r2, r6
 800226e:	2100      	movs	r1, #0
 8002270:	0028      	movs	r0, r5
 8002272:	f000 f9af 	bl	80025d4 <GPIO_PinAFConfig>
        if((pins & bit)!=0)
 8002276:	07a3      	lsls	r3, r4, #30
 8002278:	d5d8      	bpl.n	800222c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x28>
          GPIO_PinAFConfig(port,source,afSelection);
 800227a:	0032      	movs	r2, r6
 800227c:	2101      	movs	r1, #1
 800227e:	0028      	movs	r0, r5
 8002280:	f000 f9a8 	bl	80025d4 <GPIO_PinAFConfig>
        if((pins & bit)!=0)
 8002284:	0763      	lsls	r3, r4, #29
 8002286:	d5d3      	bpl.n	8002230 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x2c>
          GPIO_PinAFConfig(port,source,afSelection);
 8002288:	0032      	movs	r2, r6
 800228a:	2102      	movs	r1, #2
 800228c:	0028      	movs	r0, r5
 800228e:	f000 f9a1 	bl	80025d4 <GPIO_PinAFConfig>
        if((pins & bit)!=0)
 8002292:	0723      	lsls	r3, r4, #28
 8002294:	d5ce      	bpl.n	8002234 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x30>
          GPIO_PinAFConfig(port,source,afSelection);
 8002296:	0032      	movs	r2, r6
 8002298:	2103      	movs	r1, #3
 800229a:	0028      	movs	r0, r5
 800229c:	f000 f99a 	bl	80025d4 <GPIO_PinAFConfig>
        if((pins & bit)!=0)
 80022a0:	06e3      	lsls	r3, r4, #27
 80022a2:	d5c9      	bpl.n	8002238 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x34>
          GPIO_PinAFConfig(port,source,afSelection);
 80022a4:	0032      	movs	r2, r6
 80022a6:	2104      	movs	r1, #4
 80022a8:	0028      	movs	r0, r5
 80022aa:	f000 f993 	bl	80025d4 <GPIO_PinAFConfig>
        if((pins & bit)!=0)
 80022ae:	06a3      	lsls	r3, r4, #26
 80022b0:	d5c4      	bpl.n	800223c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x38>
          GPIO_PinAFConfig(port,source,afSelection);
 80022b2:	0032      	movs	r2, r6
 80022b4:	2105      	movs	r1, #5
 80022b6:	0028      	movs	r0, r5
 80022b8:	f000 f98c 	bl	80025d4 <GPIO_PinAFConfig>
        if((pins & bit)!=0)
 80022bc:	0663      	lsls	r3, r4, #25
 80022be:	d5bf      	bpl.n	8002240 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x3c>
          GPIO_PinAFConfig(port,source,afSelection);
 80022c0:	0032      	movs	r2, r6
 80022c2:	2106      	movs	r1, #6
 80022c4:	0028      	movs	r0, r5
 80022c6:	f000 f985 	bl	80025d4 <GPIO_PinAFConfig>
        if((pins & bit)!=0)
 80022ca:	0623      	lsls	r3, r4, #24
 80022cc:	d5ba      	bpl.n	8002244 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x40>
          GPIO_PinAFConfig(port,source,afSelection);
 80022ce:	0032      	movs	r2, r6
 80022d0:	2107      	movs	r1, #7
 80022d2:	0028      	movs	r0, r5
 80022d4:	f000 f97e 	bl	80025d4 <GPIO_PinAFConfig>
        if((pins & bit)!=0)
 80022d8:	05e3      	lsls	r3, r4, #23
 80022da:	d5b5      	bpl.n	8002248 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x44>
          GPIO_PinAFConfig(port,source,afSelection);
 80022dc:	0032      	movs	r2, r6
 80022de:	2108      	movs	r1, #8
 80022e0:	0028      	movs	r0, r5
 80022e2:	f000 f977 	bl	80025d4 <GPIO_PinAFConfig>
        if((pins & bit)!=0)
 80022e6:	05a3      	lsls	r3, r4, #22
 80022e8:	d5b0      	bpl.n	800224c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x48>
          GPIO_PinAFConfig(port,source,afSelection);
 80022ea:	0032      	movs	r2, r6
 80022ec:	2109      	movs	r1, #9
 80022ee:	0028      	movs	r0, r5
 80022f0:	f000 f970 	bl	80025d4 <GPIO_PinAFConfig>
        if((pins & bit)!=0)
 80022f4:	0563      	lsls	r3, r4, #21
 80022f6:	d5ab      	bpl.n	8002250 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x4c>
          GPIO_PinAFConfig(port,source,afSelection);
 80022f8:	0032      	movs	r2, r6
 80022fa:	210a      	movs	r1, #10
 80022fc:	0028      	movs	r0, r5
 80022fe:	f000 f969 	bl	80025d4 <GPIO_PinAFConfig>
        if((pins & bit)!=0)
 8002302:	0523      	lsls	r3, r4, #20
 8002304:	d5a6      	bpl.n	8002254 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x50>
          GPIO_PinAFConfig(port,source,afSelection);
 8002306:	0032      	movs	r2, r6
 8002308:	210b      	movs	r1, #11
 800230a:	0028      	movs	r0, r5
 800230c:	f000 f962 	bl	80025d4 <GPIO_PinAFConfig>
        if((pins & bit)!=0)
 8002310:	04e3      	lsls	r3, r4, #19
 8002312:	d5a1      	bpl.n	8002258 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x54>
          GPIO_PinAFConfig(port,source,afSelection);
 8002314:	0032      	movs	r2, r6
 8002316:	210c      	movs	r1, #12
 8002318:	0028      	movs	r0, r5
 800231a:	f000 f95b 	bl	80025d4 <GPIO_PinAFConfig>
        if((pins & bit)!=0)
 800231e:	04a3      	lsls	r3, r4, #18
 8002320:	d59c      	bpl.n	800225c <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x58>
          GPIO_PinAFConfig(port,source,afSelection);
 8002322:	0032      	movs	r2, r6
 8002324:	210d      	movs	r1, #13
 8002326:	0028      	movs	r0, r5
 8002328:	f000 f954 	bl	80025d4 <GPIO_PinAFConfig>
        if((pins & bit)!=0)
 800232c:	0463      	lsls	r3, r4, #17
 800232e:	d597      	bpl.n	8002260 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x5c>
          GPIO_PinAFConfig(port,source,afSelection);
 8002330:	0032      	movs	r2, r6
 8002332:	210e      	movs	r1, #14
 8002334:	0028      	movs	r0, r5
        if((pins & bit)!=0)
 8002336:	b224      	sxth	r4, r4
          GPIO_PinAFConfig(port,source,afSelection);
 8002338:	f000 f94c 	bl	80025d4 <GPIO_PinAFConfig>
        if((pins & bit)!=0)
 800233c:	2c00      	cmp	r4, #0
 800233e:	db00      	blt.n	8002342 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x13e>
 8002340:	e792      	b.n	8002268 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x64>
          GPIO_PinAFConfig(port,source,afSelection);
 8002342:	0032      	movs	r2, r6
 8002344:	210f      	movs	r1, #15
 8002346:	0028      	movs	r0, r5
 8002348:	f000 f944 	bl	80025d4 <GPIO_PinAFConfig>
    }
 800234c:	e78c      	b.n	8002268 <_ZN9stm32plus18GpioPinInitialiser10initialiseEP12GPIO_TypeDeftNS_4Gpio12GpioModeTypeE17GPIOSpeed_TypeDefNS3_18GpioPullUpDownTypeENS3_14GpioOutputTypeEh+0x64>
 800234e:	46c0      	nop			; (mov r8, r8)

08002350 <__aeabi_uidiv>:
 8002350:	2900      	cmp	r1, #0
 8002352:	d100      	bne.n	8002356 <L_no_div0>
 8002354:	e014      	b.n	8002380 <__aeabi_idiv0>

08002356 <L_no_div0>:
 8002356:	2201      	movs	r2, #1
 8002358:	2300      	movs	r3, #0
 800235a:	4288      	cmp	r0, r1
 800235c:	d906      	bls.n	800236c <L_sub_loop0>
 800235e:	3100      	adds	r1, #0
 8002360:	d404      	bmi.n	800236c <L_sub_loop0>

08002362 <L_denom_shift_loop>:
 8002362:	0052      	lsls	r2, r2, #1
 8002364:	0049      	lsls	r1, r1, #1
 8002366:	d401      	bmi.n	800236c <L_sub_loop0>
 8002368:	4288      	cmp	r0, r1
 800236a:	d8fa      	bhi.n	8002362 <L_denom_shift_loop>

0800236c <L_sub_loop0>:
 800236c:	4288      	cmp	r0, r1
 800236e:	d301      	bcc.n	8002374 <L_dont_sub0>
 8002370:	1a40      	subs	r0, r0, r1
 8002372:	4313      	orrs	r3, r2

08002374 <L_dont_sub0>:
 8002374:	0849      	lsrs	r1, r1, #1
 8002376:	0852      	lsrs	r2, r2, #1
 8002378:	d1f8      	bne.n	800236c <L_sub_loop0>
 800237a:	4601      	mov	r1, r0
 800237c:	4618      	mov	r0, r3
 800237e:	4770      	bx	lr

08002380 <__aeabi_idiv0>:
 8002380:	f7ff fffe 	bl	8002380 <__aeabi_idiv0>

08002384 <_ZN9stm32plus16MillisecondTimer10initialiseEv>:

  /**
   * Initialise SysTick to tick at 1ms by initialising it with SystemCoreClock/1000.
   */

  void MillisecondTimer::initialise() {
 8002384:	b510      	push	{r4, lr}
    _counter=0;
 8002386:	2400      	movs	r4, #0
    SysTick_Config(SystemCoreClock / 1000);
 8002388:	21fa      	movs	r1, #250	; 0xfa
    _counter=0;
 800238a:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <_ZN9stm32plus16MillisecondTimer10initialiseEv+0x38>)
    SysTick_Config(SystemCoreClock / 1000);
 800238c:	0089      	lsls	r1, r1, #2
    _counter=0;
 800238e:	601c      	str	r4, [r3, #0]
    SysTick_Config(SystemCoreClock / 1000);
 8002390:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <_ZN9stm32plus16MillisecondTimer10initialiseEv+0x3c>)
 8002392:	6818      	ldr	r0, [r3, #0]
 8002394:	f7ff ffdc 	bl	8002350 <__aeabi_uidiv>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8002398:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <_ZN9stm32plus16MillisecondTimer10initialiseEv+0x40>)
 800239a:	3801      	subs	r0, #1
 800239c:	4298      	cmp	r0, r3
 800239e:	d80c      	bhi.n	80023ba <_ZN9stm32plus16MillisecondTimer10initialiseEv+0x36>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80023a0:	21c0      	movs	r1, #192	; 0xc0

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80023a2:	4a09      	ldr	r2, [pc, #36]	; (80023c8 <_ZN9stm32plus16MillisecondTimer10initialiseEv+0x44>)
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80023a4:	0609      	lsls	r1, r1, #24
  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80023a6:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80023a8:	4808      	ldr	r0, [pc, #32]	; (80023cc <_ZN9stm32plus16MillisecondTimer10initialiseEv+0x48>)
 80023aa:	6a03      	ldr	r3, [r0, #32]
 80023ac:	021b      	lsls	r3, r3, #8
 80023ae:	0a1b      	lsrs	r3, r3, #8
 80023b0:	430b      	orrs	r3, r1
 80023b2:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023b4:	2307      	movs	r3, #7
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80023b6:	6094      	str	r4, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023b8:	6013      	str	r3, [r2, #0]
  }
 80023ba:	bd10      	pop	{r4, pc}
 80023bc:	20000880 	.word	0x20000880
 80023c0:	20000004 	.word	0x20000004
 80023c4:	00ffffff 	.word	0x00ffffff
 80023c8:	e000e010 	.word	0xe000e010
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <_ZN9stm32plus16MillisecondTimer5delayEm>:

  void MillisecondTimer::delay(uint32_t millis) {

    uint32_t target;

    target=_counter+millis;
 80023d0:	4a03      	ldr	r2, [pc, #12]	; (80023e0 <_ZN9stm32plus16MillisecondTimer5delayEm+0x10>)
 80023d2:	6813      	ldr	r3, [r2, #0]
 80023d4:	1818      	adds	r0, r3, r0
    while(_counter<target);
 80023d6:	6813      	ldr	r3, [r2, #0]
 80023d8:	4298      	cmp	r0, r3
 80023da:	d8fc      	bhi.n	80023d6 <_ZN9stm32plus16MillisecondTimer5delayEm+0x6>
  }
 80023dc:	4770      	bx	lr
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	20000880 	.word	0x20000880

080023e4 <SysTick_Handler>:
 * SysTick interrupt handler
 */

extern "C" {
  void __attribute__ ((weak,interrupt("IRQ"))) SysTick_Handler(void) {
    stm32plus::MillisecondTimer::_counter++;
 80023e4:	4a02      	ldr	r2, [pc, #8]	; (80023f0 <SysTick_Handler+0xc>)
 80023e6:	6813      	ldr	r3, [r2, #0]
 80023e8:	3301      	adds	r3, #1
 80023ea:	6013      	str	r3, [r2, #0]
  }
 80023ec:	4770      	bx	lr
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	20000880 	.word	0x20000880

080023f4 <_ZN9stm32plus19UsbInterruptHandlerD1Ev>:
   * USB interrupt event handling
   */

  DECLARE_EVENT_SIGNATURE(UsbInterrupt,void());

  struct UsbInterruptHandler {
 80023f4:	b570      	push	{r4, r5, r6, lr}
 80023f6:	0005      	movs	r5, r0
  _Slist_node<_Tp>* __cur = (_Slist_node<_Tp>*) (__before_first->_M_next);
 80023f8:	68c0      	ldr	r0, [r0, #12]
  while (__cur != __last_node) {
 80023fa:	2800      	cmp	r0, #0
 80023fc:	d004      	beq.n	8002408 <_ZN9stm32plus19UsbInterruptHandlerD1Ev+0x14>
    __cur = (_Slist_node<_Tp>*) __cur->_M_next;
 80023fe:	6804      	ldr	r4, [r0, #0]
    stm32_free(__p);
 8002400:	f000 f9e4 	bl	80027cc <free>
 8002404:	1e20      	subs	r0, r4, #0
  while (__cur != __last_node) {
 8002406:	d1fa      	bne.n	80023fe <_ZN9stm32plus19UsbInterruptHandlerD1Ev+0xa>
 8002408:	0028      	movs	r0, r5
 800240a:	bd70      	pop	{r4, r5, r6, pc}

0800240c <USB_IRQHandler>:
  size_type size() const { return __slist_size(this->_M_head._M_next); }
 800240c:	4919      	ldr	r1, [pc, #100]	; (8002474 <USB_IRQHandler+0x68>)

  /*
   * USB interrupt handler
   */

  void __attribute__ ((interrupt("IRQ"))) USB_IRQHandler(void) {
 800240e:	b570      	push	{r4, r5, r6, lr}
 8002410:	68cc      	ldr	r4, [r1, #12]
  for ( ; __node != 0; __node = __node->_M_next)
 8002412:	2c00      	cmp	r4, #0
 8002414:	d013      	beq.n	800243e <USB_IRQHandler+0x32>
 8002416:	0023      	movs	r3, r4
 8002418:	2200      	movs	r2, #0
 800241a:	681b      	ldr	r3, [r3, #0]
    ++__result;
 800241c:	3201      	adds	r2, #1
  for ( ; __node != 0; __node = __node->_M_next)
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1fb      	bne.n	800241a <USB_IRQHandler+0xe>
        if(_slots.size()==1)
 8002422:	2a01      	cmp	r2, #1
 8002424:	d017      	beq.n	8002456 <USB_IRQHandler+0x4a>
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(); }
 8002426:	2501      	movs	r5, #1
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8002428:	68e3      	ldr	r3, [r4, #12]
 800242a:	6860      	ldr	r0, [r4, #4]
 800242c:	68a2      	ldr	r2, [r4, #8]
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(); }
 800242e:	421d      	tst	r5, r3
 8002430:	d108      	bne.n	8002444 <USB_IRQHandler+0x38>
 8002432:	105b      	asrs	r3, r3, #1
 8002434:	18c0      	adds	r0, r0, r3
 8002436:	4790      	blx	r2
  void _M_incr() { _M_node = _M_node->_M_next; }
 8002438:	6824      	ldr	r4, [r4, #0]
          for(auto it=_slots.begin();it!=_slots.end();it++)
 800243a:	2c00      	cmp	r4, #0
 800243c:	d1f4      	bne.n	8002428 <USB_IRQHandler+0x1c>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
 800243e:	f3bf 8f4f 	dsb	sy
    stm32plus::usbInterrupt.UsbInterruptEventSender.raiseEvent();
    __DSB();
  }
 8002442:	bd70      	pop	{r4, r5, r6, pc}
 8002444:	105b      	asrs	r3, r3, #1
 8002446:	18c0      	adds	r0, r0, r3
 8002448:	6803      	ldr	r3, [r0, #0]
 800244a:	589b      	ldr	r3, [r3, r2]
 800244c:	4798      	blx	r3
 800244e:	6824      	ldr	r4, [r4, #0]
 8002450:	2c00      	cmp	r4, #0
 8002452:	d1e9      	bne.n	8002428 <USB_IRQHandler+0x1c>
 8002454:	e7f3      	b.n	800243e <USB_IRQHandler+0x32>
  inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }
 8002456:	688b      	ldr	r3, [r1, #8]
 8002458:	6808      	ldr	r0, [r1, #0]
 800245a:	684c      	ldr	r4, [r1, #4]
  return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(); }
 800245c:	421a      	tst	r2, r3
 800245e:	d005      	beq.n	800246c <USB_IRQHandler+0x60>
 8002460:	105b      	asrs	r3, r3, #1
 8002462:	18c0      	adds	r0, r0, r3
 8002464:	6803      	ldr	r3, [r0, #0]
 8002466:	591c      	ldr	r4, [r3, r4]
 8002468:	47a0      	blx	r4
 800246a:	e7e8      	b.n	800243e <USB_IRQHandler+0x32>
 800246c:	105b      	asrs	r3, r3, #1
 800246e:	18c0      	adds	r0, r0, r3
 8002470:	47a0      	blx	r4
 8002472:	e7e4      	b.n	800243e <USB_IRQHandler+0x32>
 8002474:	20000884 	.word	0x20000884

08002478 <_GLOBAL__sub_I__ZN9stm32plus12usbInterruptE>:
  DelegateMemento() : m_pthis(0), m_pFunction(0) {};
 8002478:	2300      	movs	r3, #0
}
 800247a:	b510      	push	{r4, lr}
 800247c:	4804      	ldr	r0, [pc, #16]	; (8002490 <_GLOBAL__sub_I__ZN9stm32plus12usbInterruptE+0x18>)
  UsbInterruptHandler usbInterrupt;
 800247e:	4a05      	ldr	r2, [pc, #20]	; (8002494 <_GLOBAL__sub_I__ZN9stm32plus12usbInterruptE+0x1c>)
 8002480:	6003      	str	r3, [r0, #0]
 8002482:	6043      	str	r3, [r0, #4]
 8002484:	6083      	str	r3, [r0, #8]
    : _Base(__a) { this->_M_head._M_next = 0; }
 8002486:	60c3      	str	r3, [r0, #12]
 8002488:	4903      	ldr	r1, [pc, #12]	; (8002498 <_GLOBAL__sub_I__ZN9stm32plus12usbInterruptE+0x20>)
 800248a:	f000 f961 	bl	8002750 <__aeabi_atexit>
}
 800248e:	bd10      	pop	{r4, pc}
 8002490:	20000884 	.word	0x20000884
 8002494:	20000000 	.word	0x20000000
 8002498:	080023f5 	.word	0x080023f5

0800249c <DMA_Init>:
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration ----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 800249c:	6803      	ldr	r3, [r0, #0]

  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 800249e:	4a0d      	ldr	r2, [pc, #52]	; (80024d4 <DMA_Init+0x38>)
{
 80024a0:	b510      	push	{r4, lr}
  tmpreg &= CCR_CLEAR_MASK;
 80024a2:	401a      	ands	r2, r3
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80024a4:	6a0c      	ldr	r4, [r1, #32]
 80024a6:	688b      	ldr	r3, [r1, #8]
 80024a8:	4323      	orrs	r3, r4
 80024aa:	690c      	ldr	r4, [r1, #16]
 80024ac:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80024ae:	694c      	ldr	r4, [r1, #20]
 80024b0:	4323      	orrs	r3, r4
 80024b2:	698c      	ldr	r4, [r1, #24]
 80024b4:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80024b6:	69cc      	ldr	r4, [r1, #28]
 80024b8:	4323      	orrs	r3, r4
 80024ba:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80024bc:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 80024be:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80024c0:	4323      	orrs	r3, r4
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80024c2:	4313      	orrs	r3, r2

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 80024c4:	6003      	str	r3, [r0, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 80024c6:	68cb      	ldr	r3, [r1, #12]
 80024c8:	6043      	str	r3, [r0, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ---------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80024ca:	680b      	ldr	r3, [r1, #0]
 80024cc:	6083      	str	r3, [r0, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 80024ce:	684b      	ldr	r3, [r1, #4]
 80024d0:	60c3      	str	r3, [r0, #12]
}
 80024d2:	bd10      	pop	{r4, pc}
 80024d4:	ffff800f 	.word	0xffff800f

080024d8 <DMA_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR_EN;
 80024d8:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 80024da:	2900      	cmp	r1, #0
 80024dc:	d103      	bne.n	80024e6 <DMA_Cmd+0xe>
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 80024de:	4a04      	ldr	r2, [pc, #16]	; (80024f0 <DMA_Cmd+0x18>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	6003      	str	r3, [r0, #0]
  }
}
 80024e4:	4770      	bx	lr
    DMAy_Channelx->CCR |= DMA_CCR_EN;
 80024e6:	2201      	movs	r2, #1
 80024e8:	4313      	orrs	r3, r2
 80024ea:	6003      	str	r3, [r0, #0]
 80024ec:	e7fa      	b.n	80024e4 <DMA_Cmd+0xc>
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	0000fffe 	.word	0x0000fffe

080024f4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80024f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024f6:	4657      	mov	r7, sl
 80024f8:	4645      	mov	r5, r8
 80024fa:	46de      	mov	lr, fp
 80024fc:	464e      	mov	r6, r9
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80024fe:	2403      	movs	r4, #3
{
 8002500:	b5e0      	push	{r5, r6, r7, lr}
 8002502:	468c      	mov	ip, r1
 8002504:	b083      	sub	sp, #12
 8002506:	6809      	ldr	r1, [r1, #0]
 8002508:	2200      	movs	r2, #0
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800250a:	2300      	movs	r3, #0
    pos = ((uint32_t)0x01) << pinpos;
 800250c:	2701      	movs	r7, #1
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800250e:	46a0      	mov	r8, r4
 8002510:	e003      	b.n	800251a <GPIO_Init+0x26>
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002512:	3301      	adds	r3, #1
 8002514:	3202      	adds	r2, #2
 8002516:	2b10      	cmp	r3, #16
 8002518:	d027      	beq.n	800256a <GPIO_Init+0x76>
    pos = ((uint32_t)0x01) << pinpos;
 800251a:	003c      	movs	r4, r7
 800251c:	409c      	lsls	r4, r3
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800251e:	0025      	movs	r5, r4
 8002520:	400d      	ands	r5, r1
    if (currentpin == pos)
 8002522:	42ac      	cmp	r4, r5
 8002524:	d1f5      	bne.n	8002512 <GPIO_Init+0x1e>
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002526:	4665      	mov	r5, ip
 8002528:	792d      	ldrb	r5, [r5, #4]
 800252a:	1e6e      	subs	r6, r5, #1
 800252c:	46ab      	mov	fp, r5
 800252e:	2e01      	cmp	r6, #1
 8002530:	d922      	bls.n	8002578 <GPIO_Init+0x84>
 8002532:	4646      	mov	r6, r8
 8002534:	4096      	lsls	r6, r2
 8002536:	43f4      	mvns	r4, r6
 8002538:	0026      	movs	r6, r4
 800253a:	9401      	str	r4, [sp, #4]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800253c:	465d      	mov	r5, fp
 800253e:	4095      	lsls	r5, r2
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002540:	6804      	ldr	r4, [r0, #0]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002542:	3301      	adds	r3, #1
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002544:	4026      	ands	r6, r4
 8002546:	6006      	str	r6, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002548:	6804      	ldr	r4, [r0, #0]
 800254a:	4325      	orrs	r5, r4
 800254c:	6005      	str	r5, [r0, #0]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800254e:	4645      	mov	r5, r8
 8002550:	4095      	lsls	r5, r2
 8002552:	68c4      	ldr	r4, [r0, #12]
 8002554:	43ac      	bics	r4, r5
 8002556:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002558:	4664      	mov	r4, ip
 800255a:	79e4      	ldrb	r4, [r4, #7]
 800255c:	68c5      	ldr	r5, [r0, #12]
 800255e:	4094      	lsls	r4, r2
 8002560:	432c      	orrs	r4, r5
 8002562:	60c4      	str	r4, [r0, #12]
 8002564:	3202      	adds	r2, #2
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002566:	2b10      	cmp	r3, #16
 8002568:	d1d7      	bne.n	800251a <GPIO_Init+0x26>
    }
  }
}
 800256a:	b003      	add	sp, #12
 800256c:	bc3c      	pop	{r2, r3, r4, r5}
 800256e:	4690      	mov	r8, r2
 8002570:	4699      	mov	r9, r3
 8002572:	46a2      	mov	sl, r4
 8002574:	46ab      	mov	fp, r5
 8002576:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002578:	4646      	mov	r6, r8
 800257a:	4096      	lsls	r6, r2
 800257c:	43f6      	mvns	r6, r6
 800257e:	6885      	ldr	r5, [r0, #8]
 8002580:	9601      	str	r6, [sp, #4]
 8002582:	4035      	ands	r5, r6
 8002584:	6085      	str	r5, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002586:	6885      	ldr	r5, [r0, #8]
 8002588:	46aa      	mov	sl, r5
 800258a:	4665      	mov	r5, ip
 800258c:	796d      	ldrb	r5, [r5, #5]
 800258e:	4095      	lsls	r5, r2
 8002590:	46a9      	mov	r9, r5
 8002592:	4655      	mov	r5, sl
 8002594:	464e      	mov	r6, r9
 8002596:	4335      	orrs	r5, r6
 8002598:	6085      	str	r5, [r0, #8]
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 800259a:	8885      	ldrh	r5, [r0, #4]
 800259c:	9e01      	ldr	r6, [sp, #4]
 800259e:	43a5      	bics	r5, r4
 80025a0:	8085      	strh	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80025a2:	4665      	mov	r5, ip
 80025a4:	79ad      	ldrb	r5, [r5, #6]
 80025a6:	8884      	ldrh	r4, [r0, #4]
 80025a8:	409d      	lsls	r5, r3
 80025aa:	432c      	orrs	r4, r5
 80025ac:	b2a4      	uxth	r4, r4
 80025ae:	8084      	strh	r4, [r0, #4]
 80025b0:	e7c4      	b.n	800253c <GPIO_Init+0x48>
 80025b2:	46c0      	nop			; (mov r8, r8)

080025b4 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80025b4:	8a00      	ldrh	r0, [r0, #16]
 80025b6:	4008      	ands	r0, r1
 80025b8:	1e41      	subs	r1, r0, #1
 80025ba:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 80025bc:	b2c0      	uxtb	r0, r0
}
 80025be:	4770      	bx	lr

080025c0 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
 80025c0:	6181      	str	r1, [r0, #24]
}
 80025c2:	4770      	bx	lr

080025c4 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
 80025c4:	8501      	strh	r1, [r0, #40]	; 0x28
}
 80025c6:	4770      	bx	lr

080025c8 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80025c8:	2a00      	cmp	r2, #0
 80025ca:	d101      	bne.n	80025d0 <GPIO_WriteBit+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 80025cc:	8501      	strh	r1, [r0, #40]	; 0x28
  }
}
 80025ce:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80025d0:	6181      	str	r1, [r0, #24]
 80025d2:	e7fc      	b.n	80025ce <GPIO_WriteBit+0x6>

080025d4 <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80025d4:	2307      	movs	r3, #7
{
 80025d6:	b510      	push	{r4, lr}
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80025d8:	240f      	movs	r4, #15
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80025da:	400b      	ands	r3, r1
 80025dc:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80025de:	409c      	lsls	r4, r3
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80025e0:	409a      	lsls	r2, r3
 80025e2:	08c9      	lsrs	r1, r1, #3
 80025e4:	0089      	lsls	r1, r1, #2
 80025e6:	1840      	adds	r0, r0, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80025e8:	6a01      	ldr	r1, [r0, #32]
 80025ea:	43a1      	bics	r1, r4
 80025ec:	6201      	str	r1, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80025ee:	6a01      	ldr	r1, [r0, #32]
 80025f0:	430a      	orrs	r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80025f2:	6202      	str	r2, [r0, #32]
}
 80025f4:	bd10      	pop	{r4, pc}
 80025f6:	46c0      	nop			; (mov r8, r8)

080025f8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80025f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80025fa:	7883      	ldrb	r3, [r0, #2]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d108      	bne.n	8002612 <NVIC_Init+0x1a>
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002600:	221f      	movs	r2, #31
 8002602:	7803      	ldrb	r3, [r0, #0]
 8002604:	4911      	ldr	r1, [pc, #68]	; (800264c <NVIC_Init+0x54>)
 8002606:	401a      	ands	r2, r3
 8002608:	2301      	movs	r3, #1
 800260a:	4093      	lsls	r3, r2
 800260c:	2280      	movs	r2, #128	; 0x80
 800260e:	508b      	str	r3, [r1, r2]
  }
}
 8002610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002612:	4b0e      	ldr	r3, [pc, #56]	; (800264c <NVIC_Init+0x54>)
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 8002614:	2103      	movs	r1, #3
 8002616:	469c      	mov	ip, r3
 8002618:	23ff      	movs	r3, #255	; 0xff
 800261a:	001f      	movs	r7, r3
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 800261c:	7804      	ldrb	r4, [r0, #0]
 800261e:	26c0      	movs	r6, #192	; 0xc0
    tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
 8002620:	7840      	ldrb	r0, [r0, #1]
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 8002622:	4021      	ands	r1, r4
 8002624:	00c9      	lsls	r1, r1, #3
    tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
 8002626:	0180      	lsls	r0, r0, #6
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 8002628:	408f      	lsls	r7, r1
    tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
 800262a:	4003      	ands	r3, r0
 800262c:	408b      	lsls	r3, r1
 800262e:	08a2      	lsrs	r2, r4, #2
 8002630:	0092      	lsls	r2, r2, #2
 8002632:	4462      	add	r2, ip
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 8002634:	00b6      	lsls	r6, r6, #2
 8002636:	5995      	ldr	r5, [r2, r6]
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 8002638:	43bd      	bics	r5, r7
    tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
 800263a:	432b      	orrs	r3, r5
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
 800263c:	5193      	str	r3, [r2, r6]
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800263e:	221f      	movs	r2, #31
 8002640:	2301      	movs	r3, #1
 8002642:	4022      	ands	r2, r4
 8002644:	4093      	lsls	r3, r2
 8002646:	4662      	mov	r2, ip
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	e7e1      	b.n	8002610 <NVIC_Init+0x18>
 800264c:	e000e100 	.word	0xe000e100

08002650 <RCC_AHBPeriphClockCmd>:
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8002650:	4a04      	ldr	r2, [pc, #16]	; (8002664 <RCC_AHBPeriphClockCmd+0x14>)
 8002652:	6953      	ldr	r3, [r2, #20]
  if (NewState != DISABLE)
 8002654:	2900      	cmp	r1, #0
 8002656:	d102      	bne.n	800265e <RCC_AHBPeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8002658:	4383      	bics	r3, r0
 800265a:	6153      	str	r3, [r2, #20]
  }
}
 800265c:	4770      	bx	lr
    RCC->AHBENR |= RCC_AHBPeriph;
 800265e:	4318      	orrs	r0, r3
 8002660:	6150      	str	r0, [r2, #20]
 8002662:	e7fb      	b.n	800265c <RCC_AHBPeriphClockCmd+0xc>
 8002664:	40021000 	.word	0x40021000

08002668 <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8002668:	4a04      	ldr	r2, [pc, #16]	; (800267c <RCC_APB2PeriphClockCmd+0x14>)
 800266a:	6993      	ldr	r3, [r2, #24]
  if (NewState != DISABLE)
 800266c:	2900      	cmp	r1, #0
 800266e:	d102      	bne.n	8002676 <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8002670:	4383      	bics	r3, r0
 8002672:	6193      	str	r3, [r2, #24]
  }
}
 8002674:	4770      	bx	lr
    RCC->APB2ENR |= RCC_APB2Periph;
 8002676:	4318      	orrs	r0, r3
 8002678:	6190      	str	r0, [r2, #24]
 800267a:	e7fb      	b.n	8002674 <RCC_APB2PeriphClockCmd+0xc>
 800267c:	40021000 	.word	0x40021000

08002680 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8002680:	4a04      	ldr	r2, [pc, #16]	; (8002694 <RCC_APB1PeriphClockCmd+0x14>)
 8002682:	69d3      	ldr	r3, [r2, #28]
  if (NewState != DISABLE)
 8002684:	2900      	cmp	r1, #0
 8002686:	d102      	bne.n	800268e <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8002688:	4383      	bics	r3, r0
 800268a:	61d3      	str	r3, [r2, #28]
  }
}
 800268c:	4770      	bx	lr
    RCC->APB1ENR |= RCC_APB1Periph;
 800268e:	4318      	orrs	r0, r3
 8002690:	61d0      	str	r0, [r2, #28]
 8002692:	e7fb      	b.n	800268c <RCC_APB1PeriphClockCmd+0xc>
 8002694:	40021000 	.word	0x40021000

08002698 <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8002698:	2300      	movs	r3, #0
  /* Initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
  /* Initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 800269a:	22e0      	movs	r2, #224	; 0xe0
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800269c:	8003      	strh	r3, [r0, #0]
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 800269e:	8043      	strh	r3, [r0, #2]
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 80026a0:	00d2      	lsls	r2, r2, #3
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 80026a2:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 80026a4:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 80026a6:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 80026a8:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 80026aa:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 80026ac:	3307      	adds	r3, #7
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 80026ae:	8082      	strh	r2, [r0, #4]
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 80026b0:	8203      	strh	r3, [r0, #16]
}
 80026b2:	4770      	bx	lr

080026b4 <SPI_Init>:

  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 80026b4:	23c1      	movs	r3, #193	; 0xc1
  tmpreg = SPIx->CR1;
 80026b6:	8802      	ldrh	r2, [r0, #0]
  tmpreg &= CR1_CLEAR_MASK;
 80026b8:	019b      	lsls	r3, r3, #6
{
 80026ba:	b510      	push	{r4, lr}
  tmpreg &= CR1_CLEAR_MASK;
 80026bc:	401a      	ands	r2, r3
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 80026be:	89cc      	ldrh	r4, [r1, #14]
 80026c0:	880b      	ldrh	r3, [r1, #0]
 80026c2:	4323      	orrs	r3, r4
 80026c4:	88cc      	ldrh	r4, [r1, #6]
 80026c6:	4323      	orrs	r3, r4
 80026c8:	890c      	ldrh	r4, [r1, #8]
 80026ca:	4323      	orrs	r3, r4
 80026cc:	894c      	ldrh	r4, [r1, #10]
 80026ce:	4323      	orrs	r3, r4
 80026d0:	898c      	ldrh	r4, [r1, #12]
 80026d2:	4323      	orrs	r3, r4
 80026d4:	4313      	orrs	r3, r2
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80026d6:	8003      	strh	r3, [r0, #0]
  /*-------------------------Data Size Configuration -----------------------*/
  /* Get the SPIx CR2 value */
  tmpreg = SPIx->CR2;
 80026d8:	8883      	ldrh	r3, [r0, #4]
  /* Clear DS[3:0] bits */
  tmpreg &=(uint16_t)~SPI_CR2_DS;
 80026da:	4a09      	ldr	r2, [pc, #36]	; (8002700 <SPI_Init+0x4c>)
 80026dc:	4013      	ands	r3, r2
  /* Configure SPIx: Data Size */
  tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 80026de:	888a      	ldrh	r2, [r1, #4]
 80026e0:	4313      	orrs	r3, r2
  
  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear MSTR bit */
  tmpreg &= CR1_CLEAR_MASK2;
 80026e2:	2204      	movs	r2, #4
  SPIx->CR2 = tmpreg;
 80026e4:	8083      	strh	r3, [r0, #4]
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80026e6:	8a0b      	ldrh	r3, [r1, #16]
 80026e8:	8203      	strh	r3, [r0, #16]
  tmpreg = SPIx->CR1;
 80026ea:	8803      	ldrh	r3, [r0, #0]
  tmpreg &= CR1_CLEAR_MASK2;
 80026ec:	4393      	bics	r3, r2
  /* Configure SPIx: master/slave mode */  
  /* Set MSTR bit according to SPI_Mode */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Mode);  
 80026ee:	884a      	ldrh	r2, [r1, #2]
 80026f0:	4313      	orrs	r3, r2
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;  
 80026f2:	8003      	strh	r3, [r0, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 80026f4:	8b83      	ldrh	r3, [r0, #28]
 80026f6:	4a03      	ldr	r2, [pc, #12]	; (8002704 <SPI_Init+0x50>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	8383      	strh	r3, [r0, #28]
}
 80026fc:	bd10      	pop	{r4, pc}
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	fffff0ff 	.word	0xfffff0ff
 8002704:	fffff7ff 	.word	0xfffff7ff

08002708 <SPI_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8002708:	8803      	ldrh	r3, [r0, #0]
 800270a:	2240      	movs	r2, #64	; 0x40
  if (NewState != DISABLE)
 800270c:	2900      	cmp	r1, #0
 800270e:	d102      	bne.n	8002716 <SPI_Cmd+0xe>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8002710:	4393      	bics	r3, r2
 8002712:	8003      	strh	r3, [r0, #0]
  }
}
 8002714:	4770      	bx	lr
    SPIx->CR1 |= SPI_CR1_SPE;
 8002716:	4313      	orrs	r3, r2
 8002718:	8003      	strh	r3, [r0, #0]
 800271a:	e7fb      	b.n	8002714 <SPI_Cmd+0xc>

0800271c <SPI_RxFIFOThresholdConfig>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_RX_FIFO_THRESHOLD(SPI_RxFIFOThreshold));

  /* Clear FRXTH bit */
  SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRXTH);
 800271c:	8883      	ldrh	r3, [r0, #4]
 800271e:	4a03      	ldr	r2, [pc, #12]	; (800272c <SPI_RxFIFOThresholdConfig+0x10>)
 8002720:	4013      	ands	r3, r2
 8002722:	8083      	strh	r3, [r0, #4]

  /* Set new FRXTH bit value */
  SPIx->CR2 |= SPI_RxFIFOThreshold;
 8002724:	8883      	ldrh	r3, [r0, #4]
 8002726:	4319      	orrs	r1, r3
 8002728:	8081      	strh	r1, [r0, #4]
}
 800272a:	4770      	bx	lr
 800272c:	ffffefff 	.word	0xffffefff

08002730 <SPI_I2S_DMACmd>:
  assert_param(IS_SPI_I2S_DMA_REQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8002730:	8883      	ldrh	r3, [r0, #4]
  if (NewState != DISABLE)
 8002732:	2a00      	cmp	r2, #0
 8002734:	d102      	bne.n	800273c <SPI_I2S_DMACmd+0xc>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8002736:	438b      	bics	r3, r1
 8002738:	8083      	strh	r3, [r0, #4]
  }
}
 800273a:	4770      	bx	lr
    SPIx->CR2 |= SPI_I2S_DMAReq;
 800273c:	4319      	orrs	r1, r3
 800273e:	8081      	strh	r1, [r0, #4]
 8002740:	e7fb      	b.n	800273a <SPI_I2S_DMACmd+0xa>
 8002742:	46c0      	nop			; (mov r8, r8)

08002744 <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8002744:	8900      	ldrh	r0, [r0, #8]
 8002746:	4008      	ands	r0, r1
 8002748:	1e41      	subs	r1, r0, #1
 800274a:	4188      	sbcs	r0, r1
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800274c:	b2c0      	uxtb	r0, r0
}
 800274e:	4770      	bx	lr

08002750 <__aeabi_atexit>:
 8002750:	000b      	movs	r3, r1
 8002752:	b510      	push	{r4, lr}
 8002754:	0001      	movs	r1, r0
 8002756:	0018      	movs	r0, r3
 8002758:	f000 f802 	bl	8002760 <__cxa_atexit>
 800275c:	bd10      	pop	{r4, pc}
 800275e:	46c0      	nop			; (mov r8, r8)

08002760 <__cxa_atexit>:
 8002760:	b510      	push	{r4, lr}
 8002762:	0013      	movs	r3, r2
 8002764:	000a      	movs	r2, r1
 8002766:	0001      	movs	r1, r0
 8002768:	2002      	movs	r0, #2
 800276a:	f000 fb7f 	bl	8002e6c <__register_exitproc>
 800276e:	bd10      	pop	{r4, pc}

08002770 <__libc_init_array>:
 8002770:	b570      	push	{r4, r5, r6, lr}
 8002772:	4e0d      	ldr	r6, [pc, #52]	; (80027a8 <__libc_init_array+0x38>)
 8002774:	4d0d      	ldr	r5, [pc, #52]	; (80027ac <__libc_init_array+0x3c>)
 8002776:	2400      	movs	r4, #0
 8002778:	1bad      	subs	r5, r5, r6
 800277a:	10ad      	asrs	r5, r5, #2
 800277c:	d005      	beq.n	800278a <__libc_init_array+0x1a>
 800277e:	00a3      	lsls	r3, r4, #2
 8002780:	58f3      	ldr	r3, [r6, r3]
 8002782:	3401      	adds	r4, #1
 8002784:	4798      	blx	r3
 8002786:	42a5      	cmp	r5, r4
 8002788:	d1f9      	bne.n	800277e <__libc_init_array+0xe>
 800278a:	f000 fdef 	bl	800336c <_init>
 800278e:	4e08      	ldr	r6, [pc, #32]	; (80027b0 <__libc_init_array+0x40>)
 8002790:	4d08      	ldr	r5, [pc, #32]	; (80027b4 <__libc_init_array+0x44>)
 8002792:	2400      	movs	r4, #0
 8002794:	1bad      	subs	r5, r5, r6
 8002796:	10ad      	asrs	r5, r5, #2
 8002798:	d005      	beq.n	80027a6 <__libc_init_array+0x36>
 800279a:	00a3      	lsls	r3, r4, #2
 800279c:	58f3      	ldr	r3, [r6, r3]
 800279e:	3401      	adds	r4, #1
 80027a0:	4798      	blx	r3
 80027a2:	42a5      	cmp	r5, r4
 80027a4:	d1f9      	bne.n	800279a <__libc_init_array+0x2a>
 80027a6:	bd70      	pop	{r4, r5, r6, pc}
 80027a8:	0800338c 	.word	0x0800338c
 80027ac:	0800338c 	.word	0x0800338c
 80027b0:	0800338c 	.word	0x0800338c
 80027b4:	08003398 	.word	0x08003398

080027b8 <malloc>:
 80027b8:	b510      	push	{r4, lr}
 80027ba:	4b03      	ldr	r3, [pc, #12]	; (80027c8 <malloc+0x10>)
 80027bc:	0001      	movs	r1, r0
 80027be:	6818      	ldr	r0, [r3, #0]
 80027c0:	f000 f80e 	bl	80027e0 <_malloc_r>
 80027c4:	bd10      	pop	{r4, pc}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	20000008 	.word	0x20000008

080027cc <free>:
 80027cc:	b510      	push	{r4, lr}
 80027ce:	4b03      	ldr	r3, [pc, #12]	; (80027dc <free+0x10>)
 80027d0:	0001      	movs	r1, r0
 80027d2:	6818      	ldr	r0, [r3, #0]
 80027d4:	f000 fc3a 	bl	800304c <_free_r>
 80027d8:	bd10      	pop	{r4, pc}
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	20000008 	.word	0x20000008

080027e0 <_malloc_r>:
 80027e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027e2:	4657      	mov	r7, sl
 80027e4:	4645      	mov	r5, r8
 80027e6:	46de      	mov	lr, fp
 80027e8:	464e      	mov	r6, r9
 80027ea:	b5e0      	push	{r5, r6, r7, lr}
 80027ec:	000d      	movs	r5, r1
 80027ee:	350b      	adds	r5, #11
 80027f0:	b083      	sub	sp, #12
 80027f2:	0007      	movs	r7, r0
 80027f4:	2d16      	cmp	r5, #22
 80027f6:	d800      	bhi.n	80027fa <_malloc_r+0x1a>
 80027f8:	e09f      	b.n	800293a <_malloc_r+0x15a>
 80027fa:	2307      	movs	r3, #7
 80027fc:	439d      	bics	r5, r3
 80027fe:	d500      	bpl.n	8002802 <_malloc_r+0x22>
 8002800:	e0c4      	b.n	800298c <_malloc_r+0x1ac>
 8002802:	42a9      	cmp	r1, r5
 8002804:	d900      	bls.n	8002808 <_malloc_r+0x28>
 8002806:	e0c1      	b.n	800298c <_malloc_r+0x1ac>
 8002808:	f000 fb0e 	bl	8002e28 <__malloc_lock>
 800280c:	23f8      	movs	r3, #248	; 0xf8
 800280e:	33ff      	adds	r3, #255	; 0xff
 8002810:	429d      	cmp	r5, r3
 8002812:	d800      	bhi.n	8002816 <_malloc_r+0x36>
 8002814:	e28f      	b.n	8002d36 <_malloc_r+0x556>
 8002816:	0a68      	lsrs	r0, r5, #9
 8002818:	d100      	bne.n	800281c <_malloc_r+0x3c>
 800281a:	e0bb      	b.n	8002994 <_malloc_r+0x1b4>
 800281c:	2804      	cmp	r0, #4
 800281e:	d900      	bls.n	8002822 <_malloc_r+0x42>
 8002820:	e162      	b.n	8002ae8 <_malloc_r+0x308>
 8002822:	2338      	movs	r3, #56	; 0x38
 8002824:	4698      	mov	r8, r3
 8002826:	09a8      	lsrs	r0, r5, #6
 8002828:	4480      	add	r8, r0
 800282a:	3039      	adds	r0, #57	; 0x39
 800282c:	00c1      	lsls	r1, r0, #3
 800282e:	4ed2      	ldr	r6, [pc, #840]	; (8002b78 <_malloc_r+0x398>)
 8002830:	1871      	adds	r1, r6, r1
 8002832:	3908      	subs	r1, #8
 8002834:	68cc      	ldr	r4, [r1, #12]
 8002836:	42a1      	cmp	r1, r4
 8002838:	d019      	beq.n	800286e <_malloc_r+0x8e>
 800283a:	2303      	movs	r3, #3
 800283c:	6862      	ldr	r2, [r4, #4]
 800283e:	439a      	bics	r2, r3
 8002840:	0013      	movs	r3, r2
 8002842:	1b52      	subs	r2, r2, r5
 8002844:	2a0f      	cmp	r2, #15
 8002846:	dd00      	ble.n	800284a <_malloc_r+0x6a>
 8002848:	e0aa      	b.n	80029a0 <_malloc_r+0x1c0>
 800284a:	2a00      	cmp	r2, #0
 800284c:	db00      	blt.n	8002850 <_malloc_r+0x70>
 800284e:	e088      	b.n	8002962 <_malloc_r+0x182>
 8002850:	2303      	movs	r3, #3
 8002852:	469c      	mov	ip, r3
 8002854:	e008      	b.n	8002868 <_malloc_r+0x88>
 8002856:	4662      	mov	r2, ip
 8002858:	6863      	ldr	r3, [r4, #4]
 800285a:	4393      	bics	r3, r2
 800285c:	1b5a      	subs	r2, r3, r5
 800285e:	2a0f      	cmp	r2, #15
 8002860:	dd00      	ble.n	8002864 <_malloc_r+0x84>
 8002862:	e09d      	b.n	80029a0 <_malloc_r+0x1c0>
 8002864:	2a00      	cmp	r2, #0
 8002866:	da7c      	bge.n	8002962 <_malloc_r+0x182>
 8002868:	68e4      	ldr	r4, [r4, #12]
 800286a:	42a1      	cmp	r1, r4
 800286c:	d1f3      	bne.n	8002856 <_malloc_r+0x76>
 800286e:	0032      	movs	r2, r6
 8002870:	6934      	ldr	r4, [r6, #16]
 8002872:	3208      	adds	r2, #8
 8002874:	4294      	cmp	r4, r2
 8002876:	d100      	bne.n	800287a <_malloc_r+0x9a>
 8002878:	e190      	b.n	8002b9c <_malloc_r+0x3bc>
 800287a:	2303      	movs	r3, #3
 800287c:	6861      	ldr	r1, [r4, #4]
 800287e:	4399      	bics	r1, r3
 8002880:	4689      	mov	r9, r1
 8002882:	1b49      	subs	r1, r1, r5
 8002884:	290f      	cmp	r1, #15
 8002886:	dd00      	ble.n	800288a <_malloc_r+0xaa>
 8002888:	e162      	b.n	8002b50 <_malloc_r+0x370>
 800288a:	6172      	str	r2, [r6, #20]
 800288c:	6132      	str	r2, [r6, #16]
 800288e:	2900      	cmp	r1, #0
 8002890:	db00      	blt.n	8002894 <_malloc_r+0xb4>
 8002892:	e087      	b.n	80029a4 <_malloc_r+0x1c4>
 8002894:	4ab9      	ldr	r2, [pc, #740]	; (8002b7c <_malloc_r+0x39c>)
 8002896:	464b      	mov	r3, r9
 8002898:	4591      	cmp	r9, r2
 800289a:	d900      	bls.n	800289e <_malloc_r+0xbe>
 800289c:	e130      	b.n	8002b00 <_malloc_r+0x320>
 800289e:	08db      	lsrs	r3, r3, #3
 80028a0:	3aff      	subs	r2, #255	; 0xff
 80028a2:	1099      	asrs	r1, r3, #2
 80028a4:	3aff      	subs	r2, #255	; 0xff
 80028a6:	408a      	lsls	r2, r1
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	6871      	ldr	r1, [r6, #4]
 80028ac:	199b      	adds	r3, r3, r6
 80028ae:	430a      	orrs	r2, r1
 80028b0:	6899      	ldr	r1, [r3, #8]
 80028b2:	6072      	str	r2, [r6, #4]
 80028b4:	60e3      	str	r3, [r4, #12]
 80028b6:	60a1      	str	r1, [r4, #8]
 80028b8:	609c      	str	r4, [r3, #8]
 80028ba:	0013      	movs	r3, r2
 80028bc:	60cc      	str	r4, [r1, #12]
 80028be:	2101      	movs	r1, #1
 80028c0:	1082      	asrs	r2, r0, #2
 80028c2:	4091      	lsls	r1, r2
 80028c4:	4299      	cmp	r1, r3
 80028c6:	d86f      	bhi.n	80029a8 <_malloc_r+0x1c8>
 80028c8:	420b      	tst	r3, r1
 80028ca:	d105      	bne.n	80028d8 <_malloc_r+0xf8>
 80028cc:	2203      	movs	r2, #3
 80028ce:	4390      	bics	r0, r2
 80028d0:	0049      	lsls	r1, r1, #1
 80028d2:	3004      	adds	r0, #4
 80028d4:	420b      	tst	r3, r1
 80028d6:	d0fb      	beq.n	80028d0 <_malloc_r+0xf0>
 80028d8:	2303      	movs	r3, #3
 80028da:	4698      	mov	r8, r3
 80028dc:	00c3      	lsls	r3, r0, #3
 80028de:	4699      	mov	r9, r3
 80028e0:	44b1      	add	r9, r6
 80028e2:	46cc      	mov	ip, r9
 80028e4:	4682      	mov	sl, r0
 80028e6:	4663      	mov	r3, ip
 80028e8:	68dc      	ldr	r4, [r3, #12]
 80028ea:	45a4      	cmp	ip, r4
 80028ec:	d107      	bne.n	80028fe <_malloc_r+0x11e>
 80028ee:	e157      	b.n	8002ba0 <_malloc_r+0x3c0>
 80028f0:	2a00      	cmp	r2, #0
 80028f2:	db00      	blt.n	80028f6 <_malloc_r+0x116>
 80028f4:	e166      	b.n	8002bc4 <_malloc_r+0x3e4>
 80028f6:	68e4      	ldr	r4, [r4, #12]
 80028f8:	45a4      	cmp	ip, r4
 80028fa:	d100      	bne.n	80028fe <_malloc_r+0x11e>
 80028fc:	e150      	b.n	8002ba0 <_malloc_r+0x3c0>
 80028fe:	4642      	mov	r2, r8
 8002900:	6863      	ldr	r3, [r4, #4]
 8002902:	4393      	bics	r3, r2
 8002904:	1b5a      	subs	r2, r3, r5
 8002906:	2a0f      	cmp	r2, #15
 8002908:	ddf2      	ble.n	80028f0 <_malloc_r+0x110>
 800290a:	2001      	movs	r0, #1
 800290c:	4680      	mov	r8, r0
 800290e:	1961      	adds	r1, r4, r5
 8002910:	4305      	orrs	r5, r0
 8002912:	6065      	str	r5, [r4, #4]
 8002914:	68a0      	ldr	r0, [r4, #8]
 8002916:	68e5      	ldr	r5, [r4, #12]
 8002918:	3608      	adds	r6, #8
 800291a:	60c5      	str	r5, [r0, #12]
 800291c:	60a8      	str	r0, [r5, #8]
 800291e:	4640      	mov	r0, r8
 8002920:	60f1      	str	r1, [r6, #12]
 8002922:	60b1      	str	r1, [r6, #8]
 8002924:	4310      	orrs	r0, r2
 8002926:	6048      	str	r0, [r1, #4]
 8002928:	60ce      	str	r6, [r1, #12]
 800292a:	608e      	str	r6, [r1, #8]
 800292c:	0038      	movs	r0, r7
 800292e:	50e2      	str	r2, [r4, r3]
 8002930:	f000 fa82 	bl	8002e38 <__malloc_unlock>
 8002934:	0020      	movs	r0, r4
 8002936:	3008      	adds	r0, #8
 8002938:	e021      	b.n	800297e <_malloc_r+0x19e>
 800293a:	2910      	cmp	r1, #16
 800293c:	d826      	bhi.n	800298c <_malloc_r+0x1ac>
 800293e:	0038      	movs	r0, r7
 8002940:	f000 fa72 	bl	8002e28 <__malloc_lock>
 8002944:	2510      	movs	r5, #16
 8002946:	2318      	movs	r3, #24
 8002948:	2002      	movs	r0, #2
 800294a:	4e8b      	ldr	r6, [pc, #556]	; (8002b78 <_malloc_r+0x398>)
 800294c:	18f3      	adds	r3, r6, r3
 800294e:	001a      	movs	r2, r3
 8002950:	685c      	ldr	r4, [r3, #4]
 8002952:	3a08      	subs	r2, #8
 8002954:	4294      	cmp	r4, r2
 8002956:	d100      	bne.n	800295a <_malloc_r+0x17a>
 8002958:	e12e      	b.n	8002bb8 <_malloc_r+0x3d8>
 800295a:	2303      	movs	r3, #3
 800295c:	6862      	ldr	r2, [r4, #4]
 800295e:	439a      	bics	r2, r3
 8002960:	0013      	movs	r3, r2
 8002962:	68e2      	ldr	r2, [r4, #12]
 8002964:	68a1      	ldr	r1, [r4, #8]
 8002966:	60ca      	str	r2, [r1, #12]
 8002968:	6091      	str	r1, [r2, #8]
 800296a:	2201      	movs	r2, #1
 800296c:	18e3      	adds	r3, r4, r3
 800296e:	6859      	ldr	r1, [r3, #4]
 8002970:	0038      	movs	r0, r7
 8002972:	430a      	orrs	r2, r1
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	f000 fa5f 	bl	8002e38 <__malloc_unlock>
 800297a:	0020      	movs	r0, r4
 800297c:	3008      	adds	r0, #8
 800297e:	b003      	add	sp, #12
 8002980:	bc3c      	pop	{r2, r3, r4, r5}
 8002982:	4690      	mov	r8, r2
 8002984:	4699      	mov	r9, r3
 8002986:	46a2      	mov	sl, r4
 8002988:	46ab      	mov	fp, r5
 800298a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800298c:	230c      	movs	r3, #12
 800298e:	2000      	movs	r0, #0
 8002990:	603b      	str	r3, [r7, #0]
 8002992:	e7f4      	b.n	800297e <_malloc_r+0x19e>
 8002994:	2180      	movs	r1, #128	; 0x80
 8002996:	233f      	movs	r3, #63	; 0x3f
 8002998:	2040      	movs	r0, #64	; 0x40
 800299a:	0089      	lsls	r1, r1, #2
 800299c:	4698      	mov	r8, r3
 800299e:	e746      	b.n	800282e <_malloc_r+0x4e>
 80029a0:	4640      	mov	r0, r8
 80029a2:	e764      	b.n	800286e <_malloc_r+0x8e>
 80029a4:	464b      	mov	r3, r9
 80029a6:	e7e0      	b.n	800296a <_malloc_r+0x18a>
 80029a8:	2303      	movs	r3, #3
 80029aa:	68b4      	ldr	r4, [r6, #8]
 80029ac:	6862      	ldr	r2, [r4, #4]
 80029ae:	439a      	bics	r2, r3
 80029b0:	4690      	mov	r8, r2
 80029b2:	42aa      	cmp	r2, r5
 80029b4:	d303      	bcc.n	80029be <_malloc_r+0x1de>
 80029b6:	1b53      	subs	r3, r2, r5
 80029b8:	2b0f      	cmp	r3, #15
 80029ba:	dd00      	ble.n	80029be <_malloc_r+0x1de>
 80029bc:	e086      	b.n	8002acc <_malloc_r+0x2ec>
 80029be:	0023      	movs	r3, r4
 80029c0:	4443      	add	r3, r8
 80029c2:	4a6f      	ldr	r2, [pc, #444]	; (8002b80 <_malloc_r+0x3a0>)
 80029c4:	9301      	str	r3, [sp, #4]
 80029c6:	4b6f      	ldr	r3, [pc, #444]	; (8002b84 <_malloc_r+0x3a4>)
 80029c8:	4693      	mov	fp, r2
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6812      	ldr	r2, [r2, #0]
 80029ce:	18eb      	adds	r3, r5, r3
 80029d0:	3201      	adds	r2, #1
 80029d2:	d100      	bne.n	80029d6 <_malloc_r+0x1f6>
 80029d4:	e168      	b.n	8002ca8 <_malloc_r+0x4c8>
 80029d6:	4a6c      	ldr	r2, [pc, #432]	; (8002b88 <_malloc_r+0x3a8>)
 80029d8:	4694      	mov	ip, r2
 80029da:	4463      	add	r3, ip
 80029dc:	0b1b      	lsrs	r3, r3, #12
 80029de:	031b      	lsls	r3, r3, #12
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	9900      	ldr	r1, [sp, #0]
 80029e4:	0038      	movs	r0, r7
 80029e6:	f000 fa2f 	bl	8002e48 <_sbrk_r>
 80029ea:	0003      	movs	r3, r0
 80029ec:	4681      	mov	r9, r0
 80029ee:	3301      	adds	r3, #1
 80029f0:	d061      	beq.n	8002ab6 <_malloc_r+0x2d6>
 80029f2:	9b01      	ldr	r3, [sp, #4]
 80029f4:	4283      	cmp	r3, r0
 80029f6:	d900      	bls.n	80029fa <_malloc_r+0x21a>
 80029f8:	e0ff      	b.n	8002bfa <_malloc_r+0x41a>
 80029fa:	4b64      	ldr	r3, [pc, #400]	; (8002b8c <_malloc_r+0x3ac>)
 80029fc:	9a00      	ldr	r2, [sp, #0]
 80029fe:	469a      	mov	sl, r3
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	469c      	mov	ip, r3
 8002a04:	4653      	mov	r3, sl
 8002a06:	4462      	add	r2, ip
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	9b01      	ldr	r3, [sp, #4]
 8002a0c:	0011      	movs	r1, r2
 8002a0e:	4283      	cmp	r3, r0
 8002a10:	d100      	bne.n	8002a14 <_malloc_r+0x234>
 8002a12:	e155      	b.n	8002cc0 <_malloc_r+0x4e0>
 8002a14:	465b      	mov	r3, fp
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	d100      	bne.n	8002a1e <_malloc_r+0x23e>
 8002a1c:	e16c      	b.n	8002cf8 <_malloc_r+0x518>
 8002a1e:	464b      	mov	r3, r9
 8002a20:	9a01      	ldr	r2, [sp, #4]
 8002a22:	1a9b      	subs	r3, r3, r2
 8002a24:	1859      	adds	r1, r3, r1
 8002a26:	4653      	mov	r3, sl
 8002a28:	6019      	str	r1, [r3, #0]
 8002a2a:	2307      	movs	r3, #7
 8002a2c:	464a      	mov	r2, r9
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d100      	bne.n	8002a34 <_malloc_r+0x254>
 8002a32:	e124      	b.n	8002c7e <_malloc_r+0x49e>
 8002a34:	2108      	movs	r1, #8
 8002a36:	4689      	mov	r9, r1
 8002a38:	4955      	ldr	r1, [pc, #340]	; (8002b90 <_malloc_r+0x3b0>)
 8002a3a:	1ad2      	subs	r2, r2, r3
 8002a3c:	4491      	add	r9, r2
 8002a3e:	1acb      	subs	r3, r1, r3
 8002a40:	9a00      	ldr	r2, [sp, #0]
 8002a42:	0038      	movs	r0, r7
 8002a44:	444a      	add	r2, r9
 8002a46:	0511      	lsls	r1, r2, #20
 8002a48:	0d09      	lsrs	r1, r1, #20
 8002a4a:	1a5b      	subs	r3, r3, r1
 8002a4c:	0019      	movs	r1, r3
 8002a4e:	469b      	mov	fp, r3
 8002a50:	f000 f9fa 	bl	8002e48 <_sbrk_r>
 8002a54:	1c43      	adds	r3, r0, #1
 8002a56:	d100      	bne.n	8002a5a <_malloc_r+0x27a>
 8002a58:	e142      	b.n	8002ce0 <_malloc_r+0x500>
 8002a5a:	464b      	mov	r3, r9
 8002a5c:	1ac0      	subs	r0, r0, r3
 8002a5e:	2301      	movs	r3, #1
 8002a60:	4458      	add	r0, fp
 8002a62:	4318      	orrs	r0, r3
 8002a64:	4653      	mov	r3, sl
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	445b      	add	r3, fp
 8002a6a:	0019      	movs	r1, r3
 8002a6c:	4653      	mov	r3, sl
 8002a6e:	6019      	str	r1, [r3, #0]
 8002a70:	464b      	mov	r3, r9
 8002a72:	60b3      	str	r3, [r6, #8]
 8002a74:	6058      	str	r0, [r3, #4]
 8002a76:	42b4      	cmp	r4, r6
 8002a78:	d013      	beq.n	8002aa2 <_malloc_r+0x2c2>
 8002a7a:	4643      	mov	r3, r8
 8002a7c:	2b0f      	cmp	r3, #15
 8002a7e:	d800      	bhi.n	8002a82 <_malloc_r+0x2a2>
 8002a80:	e0e8      	b.n	8002c54 <_malloc_r+0x474>
 8002a82:	4643      	mov	r3, r8
 8002a84:	2207      	movs	r2, #7
 8002a86:	6860      	ldr	r0, [r4, #4]
 8002a88:	3b0c      	subs	r3, #12
 8002a8a:	4393      	bics	r3, r2
 8002a8c:	3a06      	subs	r2, #6
 8002a8e:	4002      	ands	r2, r0
 8002a90:	2005      	movs	r0, #5
 8002a92:	431a      	orrs	r2, r3
 8002a94:	6062      	str	r2, [r4, #4]
 8002a96:	18e2      	adds	r2, r4, r3
 8002a98:	6050      	str	r0, [r2, #4]
 8002a9a:	6090      	str	r0, [r2, #8]
 8002a9c:	2b0f      	cmp	r3, #15
 8002a9e:	d900      	bls.n	8002aa2 <_malloc_r+0x2c2>
 8002aa0:	e122      	b.n	8002ce8 <_malloc_r+0x508>
 8002aa2:	4b3c      	ldr	r3, [pc, #240]	; (8002b94 <_malloc_r+0x3b4>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	4291      	cmp	r1, r2
 8002aa8:	d900      	bls.n	8002aac <_malloc_r+0x2cc>
 8002aaa:	6019      	str	r1, [r3, #0]
 8002aac:	4b3a      	ldr	r3, [pc, #232]	; (8002b98 <_malloc_r+0x3b8>)
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	4291      	cmp	r1, r2
 8002ab2:	d900      	bls.n	8002ab6 <_malloc_r+0x2d6>
 8002ab4:	6019      	str	r1, [r3, #0]
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	68b4      	ldr	r4, [r6, #8]
 8002aba:	6862      	ldr	r2, [r4, #4]
 8002abc:	439a      	bics	r2, r3
 8002abe:	1b53      	subs	r3, r2, r5
 8002ac0:	4295      	cmp	r5, r2
 8002ac2:	d900      	bls.n	8002ac6 <_malloc_r+0x2e6>
 8002ac4:	e0c9      	b.n	8002c5a <_malloc_r+0x47a>
 8002ac6:	2b0f      	cmp	r3, #15
 8002ac8:	dc00      	bgt.n	8002acc <_malloc_r+0x2ec>
 8002aca:	e0c6      	b.n	8002c5a <_malloc_r+0x47a>
 8002acc:	2201      	movs	r2, #1
 8002ace:	0029      	movs	r1, r5
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	4311      	orrs	r1, r2
 8002ad4:	1965      	adds	r5, r4, r5
 8002ad6:	6061      	str	r1, [r4, #4]
 8002ad8:	0038      	movs	r0, r7
 8002ada:	60b5      	str	r5, [r6, #8]
 8002adc:	606b      	str	r3, [r5, #4]
 8002ade:	f000 f9ab 	bl	8002e38 <__malloc_unlock>
 8002ae2:	0020      	movs	r0, r4
 8002ae4:	3008      	adds	r0, #8
 8002ae6:	e74a      	b.n	800297e <_malloc_r+0x19e>
 8002ae8:	2814      	cmp	r0, #20
 8002aea:	d97a      	bls.n	8002be2 <_malloc_r+0x402>
 8002aec:	2854      	cmp	r0, #84	; 0x54
 8002aee:	d900      	bls.n	8002af2 <_malloc_r+0x312>
 8002af0:	e0ba      	b.n	8002c68 <_malloc_r+0x488>
 8002af2:	236e      	movs	r3, #110	; 0x6e
 8002af4:	4698      	mov	r8, r3
 8002af6:	0b28      	lsrs	r0, r5, #12
 8002af8:	4480      	add	r8, r0
 8002afa:	306f      	adds	r0, #111	; 0x6f
 8002afc:	00c1      	lsls	r1, r0, #3
 8002afe:	e696      	b.n	800282e <_malloc_r+0x4e>
 8002b00:	0a5a      	lsrs	r2, r3, #9
 8002b02:	2a04      	cmp	r2, #4
 8002b04:	d973      	bls.n	8002bee <_malloc_r+0x40e>
 8002b06:	2a14      	cmp	r2, #20
 8002b08:	d900      	bls.n	8002b0c <_malloc_r+0x32c>
 8002b0a:	e0d0      	b.n	8002cae <_malloc_r+0x4ce>
 8002b0c:	0011      	movs	r1, r2
 8002b0e:	325c      	adds	r2, #92	; 0x5c
 8002b10:	315b      	adds	r1, #91	; 0x5b
 8002b12:	00d2      	lsls	r2, r2, #3
 8002b14:	2308      	movs	r3, #8
 8002b16:	425b      	negs	r3, r3
 8002b18:	469c      	mov	ip, r3
 8002b1a:	18b2      	adds	r2, r6, r2
 8002b1c:	4494      	add	ip, r2
 8002b1e:	4663      	mov	r3, ip
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	2303      	movs	r3, #3
 8002b24:	4698      	mov	r8, r3
 8002b26:	4594      	cmp	ip, r2
 8002b28:	d100      	bne.n	8002b2c <_malloc_r+0x34c>
 8002b2a:	e0ab      	b.n	8002c84 <_malloc_r+0x4a4>
 8002b2c:	4643      	mov	r3, r8
 8002b2e:	6851      	ldr	r1, [r2, #4]
 8002b30:	4399      	bics	r1, r3
 8002b32:	4589      	cmp	r9, r1
 8002b34:	d300      	bcc.n	8002b38 <_malloc_r+0x358>
 8002b36:	e095      	b.n	8002c64 <_malloc_r+0x484>
 8002b38:	6892      	ldr	r2, [r2, #8]
 8002b3a:	4594      	cmp	ip, r2
 8002b3c:	d1f6      	bne.n	8002b2c <_malloc_r+0x34c>
 8002b3e:	4663      	mov	r3, ip
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	6873      	ldr	r3, [r6, #4]
 8002b44:	4661      	mov	r1, ip
 8002b46:	60e2      	str	r2, [r4, #12]
 8002b48:	60a1      	str	r1, [r4, #8]
 8002b4a:	6094      	str	r4, [r2, #8]
 8002b4c:	60cc      	str	r4, [r1, #12]
 8002b4e:	e6b6      	b.n	80028be <_malloc_r+0xde>
 8002b50:	2301      	movs	r3, #1
 8002b52:	1960      	adds	r0, r4, r5
 8002b54:	431d      	orrs	r5, r3
 8002b56:	6065      	str	r5, [r4, #4]
 8002b58:	6170      	str	r0, [r6, #20]
 8002b5a:	6130      	str	r0, [r6, #16]
 8002b5c:	60c2      	str	r2, [r0, #12]
 8002b5e:	6082      	str	r2, [r0, #8]
 8002b60:	001a      	movs	r2, r3
 8002b62:	464b      	mov	r3, r9
 8002b64:	430a      	orrs	r2, r1
 8002b66:	6042      	str	r2, [r0, #4]
 8002b68:	0038      	movs	r0, r7
 8002b6a:	50e1      	str	r1, [r4, r3]
 8002b6c:	f000 f964 	bl	8002e38 <__malloc_unlock>
 8002b70:	0020      	movs	r0, r4
 8002b72:	3008      	adds	r0, #8
 8002b74:	e703      	b.n	800297e <_malloc_r+0x19e>
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	20000438 	.word	0x20000438
 8002b7c:	000001ff 	.word	0x000001ff
 8002b80:	20000840 	.word	0x20000840
 8002b84:	200008c4 	.word	0x200008c4
 8002b88:	0000100f 	.word	0x0000100f
 8002b8c:	20000894 	.word	0x20000894
 8002b90:	00001008 	.word	0x00001008
 8002b94:	200008bc 	.word	0x200008bc
 8002b98:	200008c0 	.word	0x200008c0
 8002b9c:	6873      	ldr	r3, [r6, #4]
 8002b9e:	e68e      	b.n	80028be <_malloc_r+0xde>
 8002ba0:	2308      	movs	r3, #8
 8002ba2:	469b      	mov	fp, r3
 8002ba4:	3b07      	subs	r3, #7
 8002ba6:	44dc      	add	ip, fp
 8002ba8:	469b      	mov	fp, r3
 8002baa:	44da      	add	sl, fp
 8002bac:	4643      	mov	r3, r8
 8002bae:	4652      	mov	r2, sl
 8002bb0:	4213      	tst	r3, r2
 8002bb2:	d000      	beq.n	8002bb6 <_malloc_r+0x3d6>
 8002bb4:	e697      	b.n	80028e6 <_malloc_r+0x106>
 8002bb6:	e037      	b.n	8002c28 <_malloc_r+0x448>
 8002bb8:	68dc      	ldr	r4, [r3, #12]
 8002bba:	3002      	adds	r0, #2
 8002bbc:	42a3      	cmp	r3, r4
 8002bbe:	d100      	bne.n	8002bc2 <_malloc_r+0x3e2>
 8002bc0:	e655      	b.n	800286e <_malloc_r+0x8e>
 8002bc2:	e6ca      	b.n	800295a <_malloc_r+0x17a>
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	18e3      	adds	r3, r4, r3
 8002bc8:	6859      	ldr	r1, [r3, #4]
 8002bca:	0038      	movs	r0, r7
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	605a      	str	r2, [r3, #4]
 8002bd0:	68e3      	ldr	r3, [r4, #12]
 8002bd2:	68a2      	ldr	r2, [r4, #8]
 8002bd4:	60d3      	str	r3, [r2, #12]
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	f000 f92e 	bl	8002e38 <__malloc_unlock>
 8002bdc:	0020      	movs	r0, r4
 8002bde:	3008      	adds	r0, #8
 8002be0:	e6cd      	b.n	800297e <_malloc_r+0x19e>
 8002be2:	235b      	movs	r3, #91	; 0x5b
 8002be4:	4698      	mov	r8, r3
 8002be6:	4480      	add	r8, r0
 8002be8:	305c      	adds	r0, #92	; 0x5c
 8002bea:	00c1      	lsls	r1, r0, #3
 8002bec:	e61f      	b.n	800282e <_malloc_r+0x4e>
 8002bee:	099a      	lsrs	r2, r3, #6
 8002bf0:	0011      	movs	r1, r2
 8002bf2:	3239      	adds	r2, #57	; 0x39
 8002bf4:	3138      	adds	r1, #56	; 0x38
 8002bf6:	00d2      	lsls	r2, r2, #3
 8002bf8:	e78c      	b.n	8002b14 <_malloc_r+0x334>
 8002bfa:	42b4      	cmp	r4, r6
 8002bfc:	d000      	beq.n	8002c00 <_malloc_r+0x420>
 8002bfe:	e75a      	b.n	8002ab6 <_malloc_r+0x2d6>
 8002c00:	4b4f      	ldr	r3, [pc, #316]	; (8002d40 <_malloc_r+0x560>)
 8002c02:	9a00      	ldr	r2, [sp, #0]
 8002c04:	469a      	mov	sl, r3
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	469c      	mov	ip, r3
 8002c0a:	4653      	mov	r3, sl
 8002c0c:	4462      	add	r2, ip
 8002c0e:	0011      	movs	r1, r2
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	e6ff      	b.n	8002a14 <_malloc_r+0x234>
 8002c14:	2308      	movs	r3, #8
 8002c16:	425b      	negs	r3, r3
 8002c18:	469c      	mov	ip, r3
 8002c1a:	44e1      	add	r9, ip
 8002c1c:	464b      	mov	r3, r9
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	3801      	subs	r0, #1
 8002c22:	4599      	cmp	r9, r3
 8002c24:	d000      	beq.n	8002c28 <_malloc_r+0x448>
 8002c26:	e084      	b.n	8002d32 <_malloc_r+0x552>
 8002c28:	4643      	mov	r3, r8
 8002c2a:	4203      	tst	r3, r0
 8002c2c:	d1f2      	bne.n	8002c14 <_malloc_r+0x434>
 8002c2e:	6873      	ldr	r3, [r6, #4]
 8002c30:	438b      	bics	r3, r1
 8002c32:	6073      	str	r3, [r6, #4]
 8002c34:	0049      	lsls	r1, r1, #1
 8002c36:	4299      	cmp	r1, r3
 8002c38:	d900      	bls.n	8002c3c <_malloc_r+0x45c>
 8002c3a:	e6b5      	b.n	80029a8 <_malloc_r+0x1c8>
 8002c3c:	2900      	cmp	r1, #0
 8002c3e:	d100      	bne.n	8002c42 <_malloc_r+0x462>
 8002c40:	e6b2      	b.n	80029a8 <_malloc_r+0x1c8>
 8002c42:	4650      	mov	r0, sl
 8002c44:	420b      	tst	r3, r1
 8002c46:	d000      	beq.n	8002c4a <_malloc_r+0x46a>
 8002c48:	e648      	b.n	80028dc <_malloc_r+0xfc>
 8002c4a:	0049      	lsls	r1, r1, #1
 8002c4c:	3004      	adds	r0, #4
 8002c4e:	420b      	tst	r3, r1
 8002c50:	d0fb      	beq.n	8002c4a <_malloc_r+0x46a>
 8002c52:	e643      	b.n	80028dc <_malloc_r+0xfc>
 8002c54:	2301      	movs	r3, #1
 8002c56:	464a      	mov	r2, r9
 8002c58:	6053      	str	r3, [r2, #4]
 8002c5a:	0038      	movs	r0, r7
 8002c5c:	f000 f8ec 	bl	8002e38 <__malloc_unlock>
 8002c60:	2000      	movs	r0, #0
 8002c62:	e68c      	b.n	800297e <_malloc_r+0x19e>
 8002c64:	4694      	mov	ip, r2
 8002c66:	e76a      	b.n	8002b3e <_malloc_r+0x35e>
 8002c68:	23aa      	movs	r3, #170	; 0xaa
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	4298      	cmp	r0, r3
 8002c6e:	d811      	bhi.n	8002c94 <_malloc_r+0x4b4>
 8002c70:	3bdd      	subs	r3, #221	; 0xdd
 8002c72:	4698      	mov	r8, r3
 8002c74:	0be8      	lsrs	r0, r5, #15
 8002c76:	4480      	add	r8, r0
 8002c78:	3078      	adds	r0, #120	; 0x78
 8002c7a:	00c1      	lsls	r1, r0, #3
 8002c7c:	e5d7      	b.n	800282e <_malloc_r+0x4e>
 8002c7e:	2380      	movs	r3, #128	; 0x80
 8002c80:	015b      	lsls	r3, r3, #5
 8002c82:	e6dd      	b.n	8002a40 <_malloc_r+0x260>
 8002c84:	1089      	asrs	r1, r1, #2
 8002c86:	3b02      	subs	r3, #2
 8002c88:	408b      	lsls	r3, r1
 8002c8a:	6872      	ldr	r2, [r6, #4]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	6073      	str	r3, [r6, #4]
 8002c90:	4662      	mov	r2, ip
 8002c92:	e757      	b.n	8002b44 <_malloc_r+0x364>
 8002c94:	4b2b      	ldr	r3, [pc, #172]	; (8002d44 <_malloc_r+0x564>)
 8002c96:	4298      	cmp	r0, r3
 8002c98:	d81c      	bhi.n	8002cd4 <_malloc_r+0x4f4>
 8002c9a:	237c      	movs	r3, #124	; 0x7c
 8002c9c:	4698      	mov	r8, r3
 8002c9e:	0ca8      	lsrs	r0, r5, #18
 8002ca0:	4480      	add	r8, r0
 8002ca2:	307d      	adds	r0, #125	; 0x7d
 8002ca4:	00c1      	lsls	r1, r0, #3
 8002ca6:	e5c2      	b.n	800282e <_malloc_r+0x4e>
 8002ca8:	3310      	adds	r3, #16
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	e699      	b.n	80029e2 <_malloc_r+0x202>
 8002cae:	2a54      	cmp	r2, #84	; 0x54
 8002cb0:	d826      	bhi.n	8002d00 <_malloc_r+0x520>
 8002cb2:	464b      	mov	r3, r9
 8002cb4:	0b1a      	lsrs	r2, r3, #12
 8002cb6:	0011      	movs	r1, r2
 8002cb8:	326f      	adds	r2, #111	; 0x6f
 8002cba:	316e      	adds	r1, #110	; 0x6e
 8002cbc:	00d2      	lsls	r2, r2, #3
 8002cbe:	e729      	b.n	8002b14 <_malloc_r+0x334>
 8002cc0:	051b      	lsls	r3, r3, #20
 8002cc2:	d000      	beq.n	8002cc6 <_malloc_r+0x4e6>
 8002cc4:	e6a6      	b.n	8002a14 <_malloc_r+0x234>
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	9b00      	ldr	r3, [sp, #0]
 8002cca:	68b2      	ldr	r2, [r6, #8]
 8002ccc:	4443      	add	r3, r8
 8002cce:	4303      	orrs	r3, r0
 8002cd0:	6053      	str	r3, [r2, #4]
 8002cd2:	e6e6      	b.n	8002aa2 <_malloc_r+0x2c2>
 8002cd4:	21fe      	movs	r1, #254	; 0xfe
 8002cd6:	237e      	movs	r3, #126	; 0x7e
 8002cd8:	207f      	movs	r0, #127	; 0x7f
 8002cda:	0089      	lsls	r1, r1, #2
 8002cdc:	4698      	mov	r8, r3
 8002cde:	e5a6      	b.n	800282e <_malloc_r+0x4e>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	2001      	movs	r0, #1
 8002ce4:	469b      	mov	fp, r3
 8002ce6:	e6bd      	b.n	8002a64 <_malloc_r+0x284>
 8002ce8:	0021      	movs	r1, r4
 8002cea:	0038      	movs	r0, r7
 8002cec:	3108      	adds	r1, #8
 8002cee:	f000 f9ad 	bl	800304c <_free_r>
 8002cf2:	4653      	mov	r3, sl
 8002cf4:	6819      	ldr	r1, [r3, #0]
 8002cf6:	e6d4      	b.n	8002aa2 <_malloc_r+0x2c2>
 8002cf8:	465b      	mov	r3, fp
 8002cfa:	464a      	mov	r2, r9
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	e694      	b.n	8002a2a <_malloc_r+0x24a>
 8002d00:	21aa      	movs	r1, #170	; 0xaa
 8002d02:	0049      	lsls	r1, r1, #1
 8002d04:	428a      	cmp	r2, r1
 8002d06:	d806      	bhi.n	8002d16 <_malloc_r+0x536>
 8002d08:	464b      	mov	r3, r9
 8002d0a:	0bda      	lsrs	r2, r3, #15
 8002d0c:	0011      	movs	r1, r2
 8002d0e:	3278      	adds	r2, #120	; 0x78
 8002d10:	3177      	adds	r1, #119	; 0x77
 8002d12:	00d2      	lsls	r2, r2, #3
 8002d14:	e6fe      	b.n	8002b14 <_malloc_r+0x334>
 8002d16:	490b      	ldr	r1, [pc, #44]	; (8002d44 <_malloc_r+0x564>)
 8002d18:	428a      	cmp	r2, r1
 8002d1a:	d806      	bhi.n	8002d2a <_malloc_r+0x54a>
 8002d1c:	464b      	mov	r3, r9
 8002d1e:	0c9a      	lsrs	r2, r3, #18
 8002d20:	0011      	movs	r1, r2
 8002d22:	327d      	adds	r2, #125	; 0x7d
 8002d24:	317c      	adds	r1, #124	; 0x7c
 8002d26:	00d2      	lsls	r2, r2, #3
 8002d28:	e6f4      	b.n	8002b14 <_malloc_r+0x334>
 8002d2a:	22fe      	movs	r2, #254	; 0xfe
 8002d2c:	217e      	movs	r1, #126	; 0x7e
 8002d2e:	0092      	lsls	r2, r2, #2
 8002d30:	e6f0      	b.n	8002b14 <_malloc_r+0x334>
 8002d32:	6873      	ldr	r3, [r6, #4]
 8002d34:	e77e      	b.n	8002c34 <_malloc_r+0x454>
 8002d36:	002b      	movs	r3, r5
 8002d38:	08e8      	lsrs	r0, r5, #3
 8002d3a:	3308      	adds	r3, #8
 8002d3c:	e605      	b.n	800294a <_malloc_r+0x16a>
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	20000894 	.word	0x20000894
 8002d44:	00000554 	.word	0x00000554

08002d48 <memcmp>:
 8002d48:	b510      	push	{r4, lr}
 8002d4a:	2a03      	cmp	r2, #3
 8002d4c:	d91c      	bls.n	8002d88 <memcmp+0x40>
 8002d4e:	0003      	movs	r3, r0
 8002d50:	430b      	orrs	r3, r1
 8002d52:	079b      	lsls	r3, r3, #30
 8002d54:	d00f      	beq.n	8002d76 <memcmp+0x2e>
 8002d56:	7803      	ldrb	r3, [r0, #0]
 8002d58:	780c      	ldrb	r4, [r1, #0]
 8002d5a:	1882      	adds	r2, r0, r2
 8002d5c:	42a3      	cmp	r3, r4
 8002d5e:	d004      	beq.n	8002d6a <memcmp+0x22>
 8002d60:	e015      	b.n	8002d8e <memcmp+0x46>
 8002d62:	7803      	ldrb	r3, [r0, #0]
 8002d64:	780c      	ldrb	r4, [r1, #0]
 8002d66:	42a3      	cmp	r3, r4
 8002d68:	d111      	bne.n	8002d8e <memcmp+0x46>
 8002d6a:	3001      	adds	r0, #1
 8002d6c:	3101      	adds	r1, #1
 8002d6e:	4282      	cmp	r2, r0
 8002d70:	d1f7      	bne.n	8002d62 <memcmp+0x1a>
 8002d72:	2000      	movs	r0, #0
 8002d74:	bd10      	pop	{r4, pc}
 8002d76:	6803      	ldr	r3, [r0, #0]
 8002d78:	680c      	ldr	r4, [r1, #0]
 8002d7a:	42a3      	cmp	r3, r4
 8002d7c:	d1eb      	bne.n	8002d56 <memcmp+0xe>
 8002d7e:	3a04      	subs	r2, #4
 8002d80:	3004      	adds	r0, #4
 8002d82:	3104      	adds	r1, #4
 8002d84:	2a03      	cmp	r2, #3
 8002d86:	d8f6      	bhi.n	8002d76 <memcmp+0x2e>
 8002d88:	2a00      	cmp	r2, #0
 8002d8a:	d1e4      	bne.n	8002d56 <memcmp+0xe>
 8002d8c:	e7f1      	b.n	8002d72 <memcmp+0x2a>
 8002d8e:	1b18      	subs	r0, r3, r4
 8002d90:	e7f0      	b.n	8002d74 <memcmp+0x2c>
 8002d92:	46c0      	nop			; (mov r8, r8)

08002d94 <memset>:
 8002d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d96:	0783      	lsls	r3, r0, #30
 8002d98:	d043      	beq.n	8002e22 <memset+0x8e>
 8002d9a:	1e54      	subs	r4, r2, #1
 8002d9c:	2a00      	cmp	r2, #0
 8002d9e:	d03f      	beq.n	8002e20 <memset+0x8c>
 8002da0:	b2ce      	uxtb	r6, r1
 8002da2:	0002      	movs	r2, r0
 8002da4:	2503      	movs	r5, #3
 8002da6:	e002      	b.n	8002dae <memset+0x1a>
 8002da8:	001a      	movs	r2, r3
 8002daa:	3c01      	subs	r4, #1
 8002dac:	d338      	bcc.n	8002e20 <memset+0x8c>
 8002dae:	1c53      	adds	r3, r2, #1
 8002db0:	7016      	strb	r6, [r2, #0]
 8002db2:	422b      	tst	r3, r5
 8002db4:	d1f8      	bne.n	8002da8 <memset+0x14>
 8002db6:	2c03      	cmp	r4, #3
 8002db8:	d92a      	bls.n	8002e10 <memset+0x7c>
 8002dba:	22ff      	movs	r2, #255	; 0xff
 8002dbc:	400a      	ands	r2, r1
 8002dbe:	0215      	lsls	r5, r2, #8
 8002dc0:	4315      	orrs	r5, r2
 8002dc2:	042a      	lsls	r2, r5, #16
 8002dc4:	4315      	orrs	r5, r2
 8002dc6:	2c0f      	cmp	r4, #15
 8002dc8:	d914      	bls.n	8002df4 <memset+0x60>
 8002dca:	0027      	movs	r7, r4
 8002dcc:	001a      	movs	r2, r3
 8002dce:	3f10      	subs	r7, #16
 8002dd0:	093e      	lsrs	r6, r7, #4
 8002dd2:	3601      	adds	r6, #1
 8002dd4:	0136      	lsls	r6, r6, #4
 8002dd6:	199e      	adds	r6, r3, r6
 8002dd8:	6015      	str	r5, [r2, #0]
 8002dda:	6055      	str	r5, [r2, #4]
 8002ddc:	6095      	str	r5, [r2, #8]
 8002dde:	60d5      	str	r5, [r2, #12]
 8002de0:	3210      	adds	r2, #16
 8002de2:	4296      	cmp	r6, r2
 8002de4:	d1f8      	bne.n	8002dd8 <memset+0x44>
 8002de6:	220f      	movs	r2, #15
 8002de8:	4397      	bics	r7, r2
 8002dea:	3710      	adds	r7, #16
 8002dec:	19db      	adds	r3, r3, r7
 8002dee:	4014      	ands	r4, r2
 8002df0:	2c03      	cmp	r4, #3
 8002df2:	d90d      	bls.n	8002e10 <memset+0x7c>
 8002df4:	001a      	movs	r2, r3
 8002df6:	1f27      	subs	r7, r4, #4
 8002df8:	08be      	lsrs	r6, r7, #2
 8002dfa:	3601      	adds	r6, #1
 8002dfc:	00b6      	lsls	r6, r6, #2
 8002dfe:	199e      	adds	r6, r3, r6
 8002e00:	c220      	stmia	r2!, {r5}
 8002e02:	42b2      	cmp	r2, r6
 8002e04:	d1fc      	bne.n	8002e00 <memset+0x6c>
 8002e06:	2203      	movs	r2, #3
 8002e08:	4397      	bics	r7, r2
 8002e0a:	3704      	adds	r7, #4
 8002e0c:	19db      	adds	r3, r3, r7
 8002e0e:	4014      	ands	r4, r2
 8002e10:	2c00      	cmp	r4, #0
 8002e12:	d005      	beq.n	8002e20 <memset+0x8c>
 8002e14:	b2c9      	uxtb	r1, r1
 8002e16:	191c      	adds	r4, r3, r4
 8002e18:	7019      	strb	r1, [r3, #0]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	429c      	cmp	r4, r3
 8002e1e:	d1fb      	bne.n	8002e18 <memset+0x84>
 8002e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e22:	0014      	movs	r4, r2
 8002e24:	0003      	movs	r3, r0
 8002e26:	e7c6      	b.n	8002db6 <memset+0x22>

08002e28 <__malloc_lock>:
 8002e28:	b510      	push	{r4, lr}
 8002e2a:	4802      	ldr	r0, [pc, #8]	; (8002e34 <__malloc_lock+0xc>)
 8002e2c:	f000 f9ec 	bl	8003208 <__retarget_lock_acquire_recursive>
 8002e30:	bd10      	pop	{r4, pc}
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	200008d8 	.word	0x200008d8

08002e38 <__malloc_unlock>:
 8002e38:	b510      	push	{r4, lr}
 8002e3a:	4802      	ldr	r0, [pc, #8]	; (8002e44 <__malloc_unlock+0xc>)
 8002e3c:	f000 f9e6 	bl	800320c <__retarget_lock_release_recursive>
 8002e40:	bd10      	pop	{r4, pc}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	200008d8 	.word	0x200008d8

08002e48 <_sbrk_r>:
 8002e48:	2300      	movs	r3, #0
 8002e4a:	b570      	push	{r4, r5, r6, lr}
 8002e4c:	4c06      	ldr	r4, [pc, #24]	; (8002e68 <_sbrk_r+0x20>)
 8002e4e:	0005      	movs	r5, r0
 8002e50:	0008      	movs	r0, r1
 8002e52:	6023      	str	r3, [r4, #0]
 8002e54:	f7ff f866 	bl	8001f24 <_sbrk>
 8002e58:	1c43      	adds	r3, r0, #1
 8002e5a:	d000      	beq.n	8002e5e <_sbrk_r+0x16>
 8002e5c:	bd70      	pop	{r4, r5, r6, pc}
 8002e5e:	6823      	ldr	r3, [r4, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0fb      	beq.n	8002e5c <_sbrk_r+0x14>
 8002e64:	602b      	str	r3, [r5, #0]
 8002e66:	e7f9      	b.n	8002e5c <_sbrk_r+0x14>
 8002e68:	200008ec 	.word	0x200008ec

08002e6c <__register_exitproc>:
 8002e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e6e:	464e      	mov	r6, r9
 8002e70:	4645      	mov	r5, r8
 8002e72:	46de      	mov	lr, fp
 8002e74:	4657      	mov	r7, sl
 8002e76:	b5e0      	push	{r5, r6, r7, lr}
 8002e78:	4d36      	ldr	r5, [pc, #216]	; (8002f54 <__register_exitproc+0xe8>)
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	0006      	movs	r6, r0
 8002e7e:	6828      	ldr	r0, [r5, #0]
 8002e80:	4698      	mov	r8, r3
 8002e82:	000f      	movs	r7, r1
 8002e84:	4691      	mov	r9, r2
 8002e86:	f000 f9bf 	bl	8003208 <__retarget_lock_acquire_recursive>
 8002e8a:	4b33      	ldr	r3, [pc, #204]	; (8002f58 <__register_exitproc+0xec>)
 8002e8c:	681c      	ldr	r4, [r3, #0]
 8002e8e:	23a4      	movs	r3, #164	; 0xa4
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	58e0      	ldr	r0, [r4, r3]
 8002e94:	2800      	cmp	r0, #0
 8002e96:	d052      	beq.n	8002f3e <__register_exitproc+0xd2>
 8002e98:	6843      	ldr	r3, [r0, #4]
 8002e9a:	2b1f      	cmp	r3, #31
 8002e9c:	dc13      	bgt.n	8002ec6 <__register_exitproc+0x5a>
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	9201      	str	r2, [sp, #4]
 8002ea2:	2e00      	cmp	r6, #0
 8002ea4:	d128      	bne.n	8002ef8 <__register_exitproc+0x8c>
 8002ea6:	9a01      	ldr	r2, [sp, #4]
 8002ea8:	3302      	adds	r3, #2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	6042      	str	r2, [r0, #4]
 8002eae:	501f      	str	r7, [r3, r0]
 8002eb0:	6828      	ldr	r0, [r5, #0]
 8002eb2:	f000 f9ab 	bl	800320c <__retarget_lock_release_recursive>
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	b003      	add	sp, #12
 8002eba:	bc3c      	pop	{r2, r3, r4, r5}
 8002ebc:	4690      	mov	r8, r2
 8002ebe:	4699      	mov	r9, r3
 8002ec0:	46a2      	mov	sl, r4
 8002ec2:	46ab      	mov	fp, r5
 8002ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ec6:	4b25      	ldr	r3, [pc, #148]	; (8002f5c <__register_exitproc+0xf0>)
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d03d      	beq.n	8002f48 <__register_exitproc+0xdc>
 8002ecc:	20c8      	movs	r0, #200	; 0xc8
 8002ece:	0040      	lsls	r0, r0, #1
 8002ed0:	f7ff fc72 	bl	80027b8 <malloc>
 8002ed4:	2800      	cmp	r0, #0
 8002ed6:	d037      	beq.n	8002f48 <__register_exitproc+0xdc>
 8002ed8:	22a4      	movs	r2, #164	; 0xa4
 8002eda:	2300      	movs	r3, #0
 8002edc:	0052      	lsls	r2, r2, #1
 8002ede:	58a1      	ldr	r1, [r4, r2]
 8002ee0:	6043      	str	r3, [r0, #4]
 8002ee2:	6001      	str	r1, [r0, #0]
 8002ee4:	50a0      	str	r0, [r4, r2]
 8002ee6:	3240      	adds	r2, #64	; 0x40
 8002ee8:	5083      	str	r3, [r0, r2]
 8002eea:	3204      	adds	r2, #4
 8002eec:	5083      	str	r3, [r0, r2]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	9301      	str	r3, [sp, #4]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	2e00      	cmp	r6, #0
 8002ef6:	d0d6      	beq.n	8002ea6 <__register_exitproc+0x3a>
 8002ef8:	009a      	lsls	r2, r3, #2
 8002efa:	4692      	mov	sl, r2
 8002efc:	4482      	add	sl, r0
 8002efe:	464a      	mov	r2, r9
 8002f00:	2188      	movs	r1, #136	; 0x88
 8002f02:	4654      	mov	r4, sl
 8002f04:	5062      	str	r2, [r4, r1]
 8002f06:	22c4      	movs	r2, #196	; 0xc4
 8002f08:	0052      	lsls	r2, r2, #1
 8002f0a:	4691      	mov	r9, r2
 8002f0c:	4481      	add	r9, r0
 8002f0e:	464a      	mov	r2, r9
 8002f10:	3987      	subs	r1, #135	; 0x87
 8002f12:	4099      	lsls	r1, r3
 8002f14:	6812      	ldr	r2, [r2, #0]
 8002f16:	468b      	mov	fp, r1
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	4694      	mov	ip, r2
 8002f1c:	464a      	mov	r2, r9
 8002f1e:	4661      	mov	r1, ip
 8002f20:	6011      	str	r1, [r2, #0]
 8002f22:	2284      	movs	r2, #132	; 0x84
 8002f24:	4641      	mov	r1, r8
 8002f26:	0052      	lsls	r2, r2, #1
 8002f28:	50a1      	str	r1, [r4, r2]
 8002f2a:	2e02      	cmp	r6, #2
 8002f2c:	d1bb      	bne.n	8002ea6 <__register_exitproc+0x3a>
 8002f2e:	0002      	movs	r2, r0
 8002f30:	465c      	mov	r4, fp
 8002f32:	328d      	adds	r2, #141	; 0x8d
 8002f34:	32ff      	adds	r2, #255	; 0xff
 8002f36:	6811      	ldr	r1, [r2, #0]
 8002f38:	430c      	orrs	r4, r1
 8002f3a:	6014      	str	r4, [r2, #0]
 8002f3c:	e7b3      	b.n	8002ea6 <__register_exitproc+0x3a>
 8002f3e:	0020      	movs	r0, r4
 8002f40:	304d      	adds	r0, #77	; 0x4d
 8002f42:	30ff      	adds	r0, #255	; 0xff
 8002f44:	50e0      	str	r0, [r4, r3]
 8002f46:	e7a7      	b.n	8002e98 <__register_exitproc+0x2c>
 8002f48:	6828      	ldr	r0, [r5, #0]
 8002f4a:	f000 f95f 	bl	800320c <__retarget_lock_release_recursive>
 8002f4e:	2001      	movs	r0, #1
 8002f50:	4240      	negs	r0, r0
 8002f52:	e7b1      	b.n	8002eb8 <__register_exitproc+0x4c>
 8002f54:	20000848 	.word	0x20000848
 8002f58:	08003368 	.word	0x08003368
 8002f5c:	080027b9 	.word	0x080027b9

08002f60 <register_fini>:
 8002f60:	4b03      	ldr	r3, [pc, #12]	; (8002f70 <register_fini+0x10>)
 8002f62:	b510      	push	{r4, lr}
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d002      	beq.n	8002f6e <register_fini+0xe>
 8002f68:	4802      	ldr	r0, [pc, #8]	; (8002f74 <register_fini+0x14>)
 8002f6a:	f7fe ffe9 	bl	8001f40 <__wrap_atexit>
 8002f6e:	bd10      	pop	{r4, pc}
 8002f70:	00000000 	.word	0x00000000
 8002f74:	08002f79 	.word	0x08002f79

08002f78 <__libc_fini_array>:
 8002f78:	b570      	push	{r4, r5, r6, lr}
 8002f7a:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <__libc_fini_array+0x28>)
 8002f7c:	4c09      	ldr	r4, [pc, #36]	; (8002fa4 <__libc_fini_array+0x2c>)
 8002f7e:	1ae4      	subs	r4, r4, r3
 8002f80:	10a4      	asrs	r4, r4, #2
 8002f82:	d009      	beq.n	8002f98 <__libc_fini_array+0x20>
 8002f84:	4a08      	ldr	r2, [pc, #32]	; (8002fa8 <__libc_fini_array+0x30>)
 8002f86:	18a5      	adds	r5, r4, r2
 8002f88:	00ad      	lsls	r5, r5, #2
 8002f8a:	18ed      	adds	r5, r5, r3
 8002f8c:	682b      	ldr	r3, [r5, #0]
 8002f8e:	3c01      	subs	r4, #1
 8002f90:	4798      	blx	r3
 8002f92:	3d04      	subs	r5, #4
 8002f94:	2c00      	cmp	r4, #0
 8002f96:	d1f9      	bne.n	8002f8c <__libc_fini_array+0x14>
 8002f98:	f000 f9ee 	bl	8003378 <_fini>
 8002f9c:	bd70      	pop	{r4, r5, r6, pc}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	08003398 	.word	0x08003398
 8002fa4:	0800339c 	.word	0x0800339c
 8002fa8:	3fffffff 	.word	0x3fffffff

08002fac <_malloc_trim_r>:
 8002fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fae:	000c      	movs	r4, r1
 8002fb0:	0006      	movs	r6, r0
 8002fb2:	f7ff ff39 	bl	8002e28 <__malloc_lock>
 8002fb6:	4f20      	ldr	r7, [pc, #128]	; (8003038 <_malloc_trim_r+0x8c>)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	685d      	ldr	r5, [r3, #4]
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	439d      	bics	r5, r3
 8002fc0:	4b1e      	ldr	r3, [pc, #120]	; (800303c <_malloc_trim_r+0x90>)
 8002fc2:	1b2c      	subs	r4, r5, r4
 8002fc4:	469c      	mov	ip, r3
 8002fc6:	4464      	add	r4, ip
 8002fc8:	0b24      	lsrs	r4, r4, #12
 8002fca:	4b1d      	ldr	r3, [pc, #116]	; (8003040 <_malloc_trim_r+0x94>)
 8002fcc:	3c01      	subs	r4, #1
 8002fce:	0324      	lsls	r4, r4, #12
 8002fd0:	429c      	cmp	r4, r3
 8002fd2:	dd07      	ble.n	8002fe4 <_malloc_trim_r+0x38>
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	0030      	movs	r0, r6
 8002fd8:	f7ff ff36 	bl	8002e48 <_sbrk_r>
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	195b      	adds	r3, r3, r5
 8002fe0:	4298      	cmp	r0, r3
 8002fe2:	d004      	beq.n	8002fee <_malloc_trim_r+0x42>
 8002fe4:	0030      	movs	r0, r6
 8002fe6:	f7ff ff27 	bl	8002e38 <__malloc_unlock>
 8002fea:	2000      	movs	r0, #0
 8002fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fee:	4261      	negs	r1, r4
 8002ff0:	0030      	movs	r0, r6
 8002ff2:	f7ff ff29 	bl	8002e48 <_sbrk_r>
 8002ff6:	1c43      	adds	r3, r0, #1
 8002ff8:	d00d      	beq.n	8003016 <_malloc_trim_r+0x6a>
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	1b2d      	subs	r5, r5, r4
 8003000:	4315      	orrs	r5, r2
 8003002:	605d      	str	r5, [r3, #4]
 8003004:	4b0f      	ldr	r3, [pc, #60]	; (8003044 <_malloc_trim_r+0x98>)
 8003006:	0030      	movs	r0, r6
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	1b14      	subs	r4, r2, r4
 800300c:	601c      	str	r4, [r3, #0]
 800300e:	f7ff ff13 	bl	8002e38 <__malloc_unlock>
 8003012:	2001      	movs	r0, #1
 8003014:	e7ea      	b.n	8002fec <_malloc_trim_r+0x40>
 8003016:	2100      	movs	r1, #0
 8003018:	0030      	movs	r0, r6
 800301a:	f7ff ff15 	bl	8002e48 <_sbrk_r>
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	1a83      	subs	r3, r0, r2
 8003022:	2b0f      	cmp	r3, #15
 8003024:	ddde      	ble.n	8002fe4 <_malloc_trim_r+0x38>
 8003026:	4908      	ldr	r1, [pc, #32]	; (8003048 <_malloc_trim_r+0x9c>)
 8003028:	6809      	ldr	r1, [r1, #0]
 800302a:	1a40      	subs	r0, r0, r1
 800302c:	4905      	ldr	r1, [pc, #20]	; (8003044 <_malloc_trim_r+0x98>)
 800302e:	6008      	str	r0, [r1, #0]
 8003030:	2101      	movs	r1, #1
 8003032:	430b      	orrs	r3, r1
 8003034:	6053      	str	r3, [r2, #4]
 8003036:	e7d5      	b.n	8002fe4 <_malloc_trim_r+0x38>
 8003038:	20000438 	.word	0x20000438
 800303c:	00000fef 	.word	0x00000fef
 8003040:	00000fff 	.word	0x00000fff
 8003044:	20000894 	.word	0x20000894
 8003048:	20000840 	.word	0x20000840

0800304c <_free_r>:
 800304c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304e:	0004      	movs	r4, r0
 8003050:	1e0d      	subs	r5, r1, #0
 8003052:	d03c      	beq.n	80030ce <_free_r+0x82>
 8003054:	f7ff fee8 	bl	8002e28 <__malloc_lock>
 8003058:	0029      	movs	r1, r5
 800305a:	3908      	subs	r1, #8
 800305c:	6848      	ldr	r0, [r1, #4]
 800305e:	2301      	movs	r3, #1
 8003060:	0005      	movs	r5, r0
 8003062:	2603      	movs	r6, #3
 8003064:	439d      	bics	r5, r3
 8003066:	194a      	adds	r2, r1, r5
 8003068:	469c      	mov	ip, r3
 800306a:	4f61      	ldr	r7, [pc, #388]	; (80031f0 <_free_r+0x1a4>)
 800306c:	6853      	ldr	r3, [r2, #4]
 800306e:	43b3      	bics	r3, r6
 8003070:	68be      	ldr	r6, [r7, #8]
 8003072:	42b2      	cmp	r2, r6
 8003074:	d056      	beq.n	8003124 <_free_r+0xd8>
 8003076:	4666      	mov	r6, ip
 8003078:	6053      	str	r3, [r2, #4]
 800307a:	4206      	tst	r6, r0
 800307c:	d10a      	bne.n	8003094 <_free_r+0x48>
 800307e:	003e      	movs	r6, r7
 8003080:	6808      	ldr	r0, [r1, #0]
 8003082:	3608      	adds	r6, #8
 8003084:	1a09      	subs	r1, r1, r0
 8003086:	182d      	adds	r5, r5, r0
 8003088:	6888      	ldr	r0, [r1, #8]
 800308a:	42b0      	cmp	r0, r6
 800308c:	d065      	beq.n	800315a <_free_r+0x10e>
 800308e:	68ce      	ldr	r6, [r1, #12]
 8003090:	60c6      	str	r6, [r0, #12]
 8003092:	60b0      	str	r0, [r6, #8]
 8003094:	2001      	movs	r0, #1
 8003096:	18d6      	adds	r6, r2, r3
 8003098:	6876      	ldr	r6, [r6, #4]
 800309a:	4206      	tst	r6, r0
 800309c:	d033      	beq.n	8003106 <_free_r+0xba>
 800309e:	4b55      	ldr	r3, [pc, #340]	; (80031f4 <_free_r+0x1a8>)
 80030a0:	4328      	orrs	r0, r5
 80030a2:	6048      	str	r0, [r1, #4]
 80030a4:	514d      	str	r5, [r1, r5]
 80030a6:	429d      	cmp	r5, r3
 80030a8:	d812      	bhi.n	80030d0 <_free_r+0x84>
 80030aa:	08ed      	lsrs	r5, r5, #3
 80030ac:	3bff      	subs	r3, #255	; 0xff
 80030ae:	10aa      	asrs	r2, r5, #2
 80030b0:	3bff      	subs	r3, #255	; 0xff
 80030b2:	4093      	lsls	r3, r2
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	00ed      	lsls	r5, r5, #3
 80030b8:	4313      	orrs	r3, r2
 80030ba:	607b      	str	r3, [r7, #4]
 80030bc:	19ef      	adds	r7, r5, r7
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	60cf      	str	r7, [r1, #12]
 80030c2:	608b      	str	r3, [r1, #8]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	60d9      	str	r1, [r3, #12]
 80030c8:	0020      	movs	r0, r4
 80030ca:	f7ff feb5 	bl	8002e38 <__malloc_unlock>
 80030ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030d0:	0a68      	lsrs	r0, r5, #9
 80030d2:	2804      	cmp	r0, #4
 80030d4:	d850      	bhi.n	8003178 <_free_r+0x12c>
 80030d6:	09a8      	lsrs	r0, r5, #6
 80030d8:	0002      	movs	r2, r0
 80030da:	3039      	adds	r0, #57	; 0x39
 80030dc:	3238      	adds	r2, #56	; 0x38
 80030de:	00c0      	lsls	r0, r0, #3
 80030e0:	1838      	adds	r0, r7, r0
 80030e2:	3808      	subs	r0, #8
 80030e4:	6883      	ldr	r3, [r0, #8]
 80030e6:	2603      	movs	r6, #3
 80030e8:	4298      	cmp	r0, r3
 80030ea:	d04c      	beq.n	8003186 <_free_r+0x13a>
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	43b2      	bics	r2, r6
 80030f0:	4295      	cmp	r5, r2
 80030f2:	d230      	bcs.n	8003156 <_free_r+0x10a>
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	4298      	cmp	r0, r3
 80030f8:	d1f8      	bne.n	80030ec <_free_r+0xa0>
 80030fa:	68c3      	ldr	r3, [r0, #12]
 80030fc:	60cb      	str	r3, [r1, #12]
 80030fe:	6088      	str	r0, [r1, #8]
 8003100:	6099      	str	r1, [r3, #8]
 8003102:	60c1      	str	r1, [r0, #12]
 8003104:	e7e0      	b.n	80030c8 <_free_r+0x7c>
 8003106:	18ed      	adds	r5, r5, r3
 8003108:	4e3b      	ldr	r6, [pc, #236]	; (80031f8 <_free_r+0x1ac>)
 800310a:	6893      	ldr	r3, [r2, #8]
 800310c:	42b3      	cmp	r3, r6
 800310e:	d042      	beq.n	8003196 <_free_r+0x14a>
 8003110:	68d2      	ldr	r2, [r2, #12]
 8003112:	4328      	orrs	r0, r5
 8003114:	60da      	str	r2, [r3, #12]
 8003116:	6093      	str	r3, [r2, #8]
 8003118:	4b36      	ldr	r3, [pc, #216]	; (80031f4 <_free_r+0x1a8>)
 800311a:	6048      	str	r0, [r1, #4]
 800311c:	514d      	str	r5, [r1, r5]
 800311e:	429d      	cmp	r5, r3
 8003120:	d8d6      	bhi.n	80030d0 <_free_r+0x84>
 8003122:	e7c2      	b.n	80030aa <_free_r+0x5e>
 8003124:	4662      	mov	r2, ip
 8003126:	18eb      	adds	r3, r5, r3
 8003128:	4202      	tst	r2, r0
 800312a:	d106      	bne.n	800313a <_free_r+0xee>
 800312c:	680a      	ldr	r2, [r1, #0]
 800312e:	1a89      	subs	r1, r1, r2
 8003130:	6888      	ldr	r0, [r1, #8]
 8003132:	189b      	adds	r3, r3, r2
 8003134:	68ca      	ldr	r2, [r1, #12]
 8003136:	60c2      	str	r2, [r0, #12]
 8003138:	6090      	str	r0, [r2, #8]
 800313a:	2201      	movs	r2, #1
 800313c:	431a      	orrs	r2, r3
 800313e:	604a      	str	r2, [r1, #4]
 8003140:	4a2e      	ldr	r2, [pc, #184]	; (80031fc <_free_r+0x1b0>)
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	6812      	ldr	r2, [r2, #0]
 8003146:	4293      	cmp	r3, r2
 8003148:	d3be      	bcc.n	80030c8 <_free_r+0x7c>
 800314a:	4b2d      	ldr	r3, [pc, #180]	; (8003200 <_free_r+0x1b4>)
 800314c:	0020      	movs	r0, r4
 800314e:	6819      	ldr	r1, [r3, #0]
 8003150:	f7ff ff2c 	bl	8002fac <_malloc_trim_r>
 8003154:	e7b8      	b.n	80030c8 <_free_r+0x7c>
 8003156:	0018      	movs	r0, r3
 8003158:	e7cf      	b.n	80030fa <_free_r+0xae>
 800315a:	4666      	mov	r6, ip
 800315c:	18d0      	adds	r0, r2, r3
 800315e:	6840      	ldr	r0, [r0, #4]
 8003160:	4230      	tst	r0, r6
 8003162:	d13f      	bne.n	80031e4 <_free_r+0x198>
 8003164:	6890      	ldr	r0, [r2, #8]
 8003166:	195d      	adds	r5, r3, r5
 8003168:	68d3      	ldr	r3, [r2, #12]
 800316a:	60c3      	str	r3, [r0, #12]
 800316c:	6098      	str	r0, [r3, #8]
 800316e:	4663      	mov	r3, ip
 8003170:	432b      	orrs	r3, r5
 8003172:	604b      	str	r3, [r1, #4]
 8003174:	514d      	str	r5, [r1, r5]
 8003176:	e7a7      	b.n	80030c8 <_free_r+0x7c>
 8003178:	2814      	cmp	r0, #20
 800317a:	d814      	bhi.n	80031a6 <_free_r+0x15a>
 800317c:	0002      	movs	r2, r0
 800317e:	305c      	adds	r0, #92	; 0x5c
 8003180:	325b      	adds	r2, #91	; 0x5b
 8003182:	00c0      	lsls	r0, r0, #3
 8003184:	e7ac      	b.n	80030e0 <_free_r+0x94>
 8003186:	2301      	movs	r3, #1
 8003188:	1092      	asrs	r2, r2, #2
 800318a:	4093      	lsls	r3, r2
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	4313      	orrs	r3, r2
 8003190:	607b      	str	r3, [r7, #4]
 8003192:	0003      	movs	r3, r0
 8003194:	e7b2      	b.n	80030fc <_free_r+0xb0>
 8003196:	4328      	orrs	r0, r5
 8003198:	60d9      	str	r1, [r3, #12]
 800319a:	6099      	str	r1, [r3, #8]
 800319c:	60cb      	str	r3, [r1, #12]
 800319e:	608b      	str	r3, [r1, #8]
 80031a0:	6048      	str	r0, [r1, #4]
 80031a2:	514d      	str	r5, [r1, r5]
 80031a4:	e790      	b.n	80030c8 <_free_r+0x7c>
 80031a6:	2854      	cmp	r0, #84	; 0x54
 80031a8:	d805      	bhi.n	80031b6 <_free_r+0x16a>
 80031aa:	0b28      	lsrs	r0, r5, #12
 80031ac:	0002      	movs	r2, r0
 80031ae:	306f      	adds	r0, #111	; 0x6f
 80031b0:	326e      	adds	r2, #110	; 0x6e
 80031b2:	00c0      	lsls	r0, r0, #3
 80031b4:	e794      	b.n	80030e0 <_free_r+0x94>
 80031b6:	22aa      	movs	r2, #170	; 0xaa
 80031b8:	0052      	lsls	r2, r2, #1
 80031ba:	4290      	cmp	r0, r2
 80031bc:	d805      	bhi.n	80031ca <_free_r+0x17e>
 80031be:	0be8      	lsrs	r0, r5, #15
 80031c0:	0002      	movs	r2, r0
 80031c2:	3078      	adds	r0, #120	; 0x78
 80031c4:	3277      	adds	r2, #119	; 0x77
 80031c6:	00c0      	lsls	r0, r0, #3
 80031c8:	e78a      	b.n	80030e0 <_free_r+0x94>
 80031ca:	4a0e      	ldr	r2, [pc, #56]	; (8003204 <_free_r+0x1b8>)
 80031cc:	4290      	cmp	r0, r2
 80031ce:	d805      	bhi.n	80031dc <_free_r+0x190>
 80031d0:	0ca8      	lsrs	r0, r5, #18
 80031d2:	0002      	movs	r2, r0
 80031d4:	307d      	adds	r0, #125	; 0x7d
 80031d6:	327c      	adds	r2, #124	; 0x7c
 80031d8:	00c0      	lsls	r0, r0, #3
 80031da:	e781      	b.n	80030e0 <_free_r+0x94>
 80031dc:	20fe      	movs	r0, #254	; 0xfe
 80031de:	227e      	movs	r2, #126	; 0x7e
 80031e0:	0080      	lsls	r0, r0, #2
 80031e2:	e77d      	b.n	80030e0 <_free_r+0x94>
 80031e4:	4663      	mov	r3, ip
 80031e6:	432b      	orrs	r3, r5
 80031e8:	604b      	str	r3, [r1, #4]
 80031ea:	6015      	str	r5, [r2, #0]
 80031ec:	e76c      	b.n	80030c8 <_free_r+0x7c>
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	20000438 	.word	0x20000438
 80031f4:	000001ff 	.word	0x000001ff
 80031f8:	20000440 	.word	0x20000440
 80031fc:	20000844 	.word	0x20000844
 8003200:	200008c4 	.word	0x200008c4
 8003204:	00000554 	.word	0x00000554

08003208 <__retarget_lock_acquire_recursive>:
 8003208:	4770      	bx	lr
 800320a:	46c0      	nop			; (mov r8, r8)

0800320c <__retarget_lock_release_recursive>:
 800320c:	4770      	bx	lr
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	08000d6c 	.word	0x08000d6c
 8003214:	08000d6c 	.word	0x08000d6c
 8003218:	08000d48 	.word	0x08000d48
 800321c:	08000cfc 	.word	0x08000cfc
 8003220:	08000d6c 	.word	0x08000d6c
 8003224:	08000d6c 	.word	0x08000d6c
 8003228:	08000d6c 	.word	0x08000d6c
 800322c:	08000d6c 	.word	0x08000d6c
 8003230:	08000d6c 	.word	0x08000d6c
 8003234:	08000c94 	.word	0x08000c94
 8003238:	08000dd0 	.word	0x08000dd0
 800323c:	08000dc2 	.word	0x08000dc2
 8003240:	08001944 	.word	0x08001944
 8003244:	08001968 	.word	0x08001968
 8003248:	08001800 	.word	0x08001800
 800324c:	080018ea 	.word	0x080018ea
 8003250:	08001800 	.word	0x08001800
 8003254:	08001888 	.word	0x08001888
 8003258:	0800184a 	.word	0x0800184a
 800325c:	08001800 	.word	0x08001800
 8003260:	0800182a 	.word	0x0800182a
 8003264:	080017f4 	.word	0x080017f4
 8003268:	08001eb2 	.word	0x08001eb2
 800326c:	08001eac 	.word	0x08001eac
 8003270:	08001ea6 	.word	0x08001ea6
 8003274:	08001ea0 	.word	0x08001ea0
 8003278:	08001e9a 	.word	0x08001e9a
 800327c:	08001eb8 	.word	0x08001eb8

08003280 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE17_langIdDescriptorE>:
 8003280:	04090304                                ....

08003284 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE14_hidDescriptorE>:
 8003284:	01112109 3f220100 00000000              .!...."?....

08003290 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE17_reportDescriptorE>:
 8003290:	06090105 017501a1 07050895 e729e019     ......u.......).
 80032a0:	01250015 01950281 03810875 01750595     ..%.....u.....u.
 80032b0:	01190805 02910529 03750195 06950391     ....).....u.....
 80032c0:	00150875 07056525 65290019 00c00081     u...%e....)e....

080032d0 <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE24_configurationDescriptorE>:
 80032d0:	00290209 80000101 000409fa 00030200     ..).............
 80032e0:	21090001 01000111 07003f22 09038105     ...!...."?......
 80032f0:	05070a00 00020301 0000000a              ............

080032fc <_ZN9stm32plus11UsbKeyboardIN9OneButton14UsbHidKeyboardEJEE17_deviceDescriptorE>:
 80032fc:	02000112 40000000 deadcafe 02010200     .......@........
 800330c:	00000103                                ....

08003310 <_ZN9OneButton14UsbHidKeyboard12SerialStringE>:
 8003310:	0031030c 0030002e 0030002e              ..1...0...0.

0800331c <_ZN9OneButton14UsbHidKeyboard13ProductStringE>:
 800331c:	004f0316 0045004e 00420020 00540055     ..O.N.E. .B.U.T.
 800332c:	004f0054 0000004e                       T.O.N...

08003334 <_ZN9OneButton14UsbHidKeyboard15InterfaceStringE>:
 8003334:	00690308 00660074                       ..i.t.f.

0800333c <_ZN9OneButton14UsbHidKeyboard18ManufacturerStringE>:
 800333c:	004f0320 0045004e 00420020 00540055      .O.N.E. .B.U.T.
 800334c:	004f0054 0000004e 00000000 00000000     T.O.N...........

0800335c <_ZN9OneButton14UsbHidKeyboard19ConfigurationStringE>:
 800335c:	00630308 00670066 00000102              ..c.f.g.....

08003368 <_global_impure_ptr>:
 8003368:	20000010                                ... 

0800336c <_init>:
 800336c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003372:	bc08      	pop	{r3}
 8003374:	469e      	mov	lr, r3
 8003376:	4770      	bx	lr

08003378 <_fini>:
 8003378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800337e:	bc08      	pop	{r3}
 8003380:	469e      	mov	lr, r3
 8003382:	4770      	bx	lr
